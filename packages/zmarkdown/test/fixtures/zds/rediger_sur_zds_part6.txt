# Bloc de code

Il n'est pas rare d'illustrer son propos d'un petit exemple de code :

```
#!/usr/bin/env python3

print("Hello, World!")
```
Code:Mon exemple de code

Pour cela, il existe plusieurs solutions.

Première solution : entourer votre code d'au moins trois accents graves ``` (||Alt Gr|| + ||7||), avant et après : 

````text
```
#!/usr/bin/env python3

print("Hello, World!")
```
````

Le langage utilisé sera détecté automatiquement et donc coloré en conséquence. Si tel n'est pas le cas, vous pouvez forcer le langage en l'indiquant à la suite des caractères ouvrants :

````text
```python
#!/usr/bin/env python3

print("Hello, World!")
```
````

La liste des langages supportés est celle de **pygment**, vous la trouverez [ici](http://pygments.org/languages "Langages pygment"). Les mots-clés à insérer pour déclencher la coloration sont les « short names » disponibles sur [cette page](http://pygments.org/docs/lexers "Mots-clé pygment").

Seconde solution, faites précéder chaque ligne de quatre espaces ou bien d'une tabulation :

````text
    #!/usr/bin/env python3
    
    print("Hello, World!")
````

Pour forcer le langage, utilisez cette fois trois symboles de deux-points de suite :

````text
    :::python
    #!/usr/bin/env python3
    
    print("Hello, World!")
````

Là encore, vous pouvez mettre une légende à votre bloc de code en ajoutant, juste en dessous du bloc, une ligne `Code:Votre légende`.

# Mise en évidence de lignes de code

Mettre en évidence une portion de code permet d'appuyer votre explication :

```perl hl_lines="1 4-6"
use strict;
use warnings;

print "Comment vous appelez-vous ? ";
my $nom = <>; # Récupération du nom de l'utilisateur
chomp $nom;   # Retrait du saut de ligne
print "Bonjour, $nom !\n";
```

Après le nom du langage, indiquez simplement les lignes à surligner avec la mention `hl_lines`. Vous pouvez surligner les lignes unes à unes ou par groupes. Le syntaxe est la suivante :

````text
```perl hl_lines="1 4-6"
use strict;
use warnings;

print "Comment vous appelez-vous ? ";
my $nom = <>; # Récupération du nom de l'utilisateur
chomp $nom;   # Retrait du saut de ligne
print "Bonjour, $nom !\n";
```
````

# Début de la numérotation

Il est possible de spécifier le début de numération. Par exemple :

```python hl_lines="1 4" linenostart=10
def test(truc):      # Cette ligne est en évidence et est numérotée 10
    print truc         # Cette ligne est numéroté 11
                         # Cette ligne est numéroté 12
test("coucou")     # Cette ligne est en évidence et est numérotée 13
```

On utilise le mot-clé `linenostart` de la même façon que le `hl_lines` vu précédemment.

# Code inline

Enfin, si vous souhaitez insérer un petit élément de code dans votre phrase (comme `print` par exemple), alors un seul accent grave autour du mot suffira :

```text
comme `print` par exemple
```