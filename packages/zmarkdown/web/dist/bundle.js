var zmd = (function () {
'use strict';

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
}

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _global = createCommonjsModule(function (module) {
  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
});

var hasOwnProperty = {}.hasOwnProperty;
var _has = function _has(it, key) {
  return hasOwnProperty.call(it, key);
};

var _fails = function _fails(exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

// Thank's IE8 for his funny defineProperty
var _descriptors = !_fails(function () {
  return Object.defineProperty({}, 'a', { get: function get() {
      return 7;
    } }).a != 7;
});

var _core = createCommonjsModule(function (module) {
  var core = module.exports = { version: '2.5.5' };
  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
});

var _core_1 = _core.version;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();



























var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();













var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var _isObject = function _isObject(it) {
  return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) === 'object' ? it !== null : typeof it === 'function';
};

var _anObject = function _anObject(it) {
  if (!_isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

var document$1 = _global.document;
// typeof document.createElement is 'object' in old IE
var is = _isObject(document$1) && _isObject(document$1.createElement);
var _domCreate = function _domCreate(it) {
  return is ? document$1.createElement(it) : {};
};

var _ie8DomDefine = !_descriptors && !_fails(function () {
  return Object.defineProperty(_domCreate('div'), 'a', { get: function get() {
      return 7;
    } }).a != 7;
});

// 7.1.1 ToPrimitive(input [, PreferredType])

// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
var _toPrimitive = function _toPrimitive(it, S) {
  if (!_isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

var dP = Object.defineProperty;

var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  _anObject(O);
  P = _toPrimitive(P, true);
  _anObject(Attributes);
  if (_ie8DomDefine) try {
    return dP(O, P, Attributes);
  } catch (e) {/* empty */}
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

var _objectDp = {
  f: f
};

var _propertyDesc = function _propertyDesc(bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

var _hide = _descriptors ? function (object, key, value) {
  return _objectDp.f(object, key, _propertyDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

var id = 0;
var px = Math.random();
var _uid = function _uid(key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

var _redefine = createCommonjsModule(function (module) {
  var SRC = _uid('src');
  var TO_STRING = 'toString';
  var $toString = Function[TO_STRING];
  var TPL = ('' + $toString).split(TO_STRING);

  _core.inspectSource = function (it) {
    return $toString.call(it);
  };

  (module.exports = function (O, key, val, safe) {
    var isFunction = typeof val == 'function';
    if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
    if (O[key] === val) return;
    if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
    if (O === _global) {
      O[key] = val;
    } else if (!safe) {
      delete O[key];
      _hide(O, key, val);
    } else if (O[key]) {
      O[key] = val;
    } else {
      _hide(O, key, val);
    }
    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  })(Function.prototype, TO_STRING, function toString() {
    return typeof this == 'function' && this[SRC] || $toString.call(this);
  });
});

var _aFunction = function _aFunction(it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

// optional / simple context binding

var _ctx = function _ctx(fn, that, length) {
  _aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1:
      return function (a) {
        return fn.call(that, a);
      };
    case 2:
      return function (a, b) {
        return fn.call(that, a, b);
      };
    case 3:
      return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
  }
  return function () /* ...args */{
    return fn.apply(that, arguments);
  };
};

var PROTOTYPE = 'prototype';

var $export = function $export(type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
    // extend global
    if (target) _redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) _hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
_global.core = _core;
// type bitmap
$export.F = 1; // forced
$export.G = 2; // global
$export.S = 4; // static
$export.P = 8; // proto
$export.B = 16; // bind
$export.W = 32; // wrap
$export.U = 64; // safe
$export.R = 128; // real proto method for `library`
var _export = $export;

var _meta = createCommonjsModule(function (module) {
  var META = _uid('meta');

  var setDesc = _objectDp.f;
  var id = 0;
  var isExtensible = Object.isExtensible || function () {
    return true;
  };
  var FREEZE = !_fails(function () {
    return isExtensible(Object.preventExtensions({}));
  });
  var setMeta = function setMeta(it) {
    setDesc(it, META, { value: {
        i: 'O' + ++id, // object ID
        w: {} // weak collections IDs
      } });
  };
  var fastKey = function fastKey(it, create) {
    // return primitive with prefix
    if (!_isObject(it)) return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!_has(it, META)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return 'F';
      // not necessary to add metadata
      if (!create) return 'E';
      // add missing metadata
      setMeta(it);
      // return object ID
    }return it[META].i;
  };
  var getWeak = function getWeak(it, create) {
    if (!_has(it, META)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return true;
      // not necessary to add metadata
      if (!create) return false;
      // add missing metadata
      setMeta(it);
      // return hash weak collections IDs
    }return it[META].w;
  };
  // add metadata on freeze-family methods calling
  var onFreeze = function onFreeze(it) {
    if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
    return it;
  };
  var meta = module.exports = {
    KEY: META,
    NEED: false,
    fastKey: fastKey,
    getWeak: getWeak,
    onFreeze: onFreeze
  };
});

var _meta_1 = _meta.KEY;
var _meta_2 = _meta.NEED;
var _meta_3 = _meta.fastKey;
var _meta_4 = _meta.getWeak;
var _meta_5 = _meta.onFreeze;

var SHARED = '__core-js_shared__';
var store = _global[SHARED] || (_global[SHARED] = {});
var _shared = function _shared(key) {
  return store[key] || (store[key] = {});
};

var _wks = createCommonjsModule(function (module) {
  var store = _shared('wks');

  var _Symbol = _global.Symbol;
  var USE_SYMBOL = typeof _Symbol == 'function';

  var $exports = module.exports = function (name) {
    return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : _uid)('Symbol.' + name));
  };

  $exports.store = store;
});

var def = _objectDp.f;

var TAG = _wks('toStringTag');

var _setToStringTag = function _setToStringTag(it, tag, stat) {
  if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

var f$1 = _wks;

var _wksExt = {
	f: f$1
};

var _library = false;

var defineProperty$1 = _objectDp.f;
var _wksDefine = function _wksDefine(name) {
  var $Symbol = _core.Symbol || (_core.Symbol = _library ? {} : _global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty$1($Symbol, name, { value: _wksExt.f(name) });
};

var toString = {}.toString;

var _cof = function _cof(it) {
  return toString.call(it).slice(8, -1);
};

// fallback for non-array-like ES3 and non-enumerable old V8 strings

// eslint-disable-next-line no-prototype-builtins
var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return _cof(it) == 'String' ? it.split('') : Object(it);
};

// 7.2.1 RequireObjectCoercible(argument)
var _defined = function _defined(it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

// to indexed object, toObject with fallback for non-array-like ES3 strings


var _toIobject = function _toIobject(it) {
  return _iobject(_defined(it));
};

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
var _toInteger = function _toInteger(it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

// 7.1.15 ToLength

var min = Math.min;
var _toLength = function _toLength(it) {
  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

var max = Math.max;
var min$1 = Math.min;
var _toAbsoluteIndex = function _toAbsoluteIndex(index, length) {
  index = _toInteger(index);
  return index < 0 ? max(index + length, 0) : min$1(index, length);
};

// false -> Array#indexOf
// true  -> Array#includes


var _arrayIncludes = function _arrayIncludes(IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = _toIobject($this);
    var length = _toLength(O.length);
    var index = _toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
      // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) {
      if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      }
    }return !IS_INCLUDES && -1;
  };
};

var shared = _shared('keys');

var _sharedKey = function _sharedKey(key) {
  return shared[key] || (shared[key] = _uid(key));
};

var arrayIndexOf = _arrayIncludes(false);
var IE_PROTO = _sharedKey('IE_PROTO');

var _objectKeysInternal = function _objectKeysInternal(object, names) {
  var O = _toIobject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) {
    if (key != IE_PROTO) _has(O, key) && result.push(key);
  } // Don't enum bug & hidden keys
  while (names.length > i) {
    if (_has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
  }return result;
};

// IE 8- don't enum bug keys
var _enumBugKeys = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

// 19.1.2.14 / 15.2.3.14 Object.keys(O)


var _objectKeys = Object.keys || function keys(O) {
  return _objectKeysInternal(O, _enumBugKeys);
};

var f$2 = Object.getOwnPropertySymbols;

var _objectGops = {
	f: f$2
};

var f$3 = {}.propertyIsEnumerable;

var _objectPie = {
	f: f$3
};

// all enumerable object keys, includes symbols


var _enumKeys = function _enumKeys(it) {
  var result = _objectKeys(it);
  var getSymbols = _objectGops.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = _objectPie.f;
    var i = 0;
    var key;
    while (symbols.length > i) {
      if (isEnum.call(it, key = symbols[i++])) result.push(key);
    }
  }return result;
};

// 7.2.2 IsArray(argument)

var _isArray = Array.isArray || function isArray(arg) {
  return _cof(arg) == 'Array';
};

var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
  _anObject(O);
  var keys = _objectKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) {
    _objectDp.f(O, P = keys[i++], Properties[P]);
  }return O;
};

var document$2 = _global.document;
var _html = document$2 && document$2.documentElement;

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])


var IE_PROTO$1 = _sharedKey('IE_PROTO');
var Empty = function Empty() {/* empty */};
var PROTOTYPE$1 = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var _createDict = function createDict() {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = _domCreate('iframe');
  var i = _enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  _html.appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  _createDict = iframeDocument.F;
  while (i--) {
    delete _createDict[PROTOTYPE$1][_enumBugKeys[i]];
  }return _createDict();
};

var _objectCreate = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE$1] = _anObject(O);
    result = new Empty();
    Empty[PROTOTYPE$1] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO$1] = O;
  } else result = _createDict();
  return Properties === undefined ? result : _objectDps(result, Properties);
};

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return _objectKeysInternal(O, hiddenKeys);
};

var _objectGopn = {
  f: f$4
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

var gOPN$1 = _objectGopn.f;
var toString$1 = {}.toString;

var windowNames = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function getWindowNames(it) {
  try {
    return gOPN$1(it);
  } catch (e) {
    return windowNames.slice();
  }
};

var f$5 = function getOwnPropertyNames(it) {
  return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN$1(_toIobject(it));
};

var _objectGopnExt = {
  f: f$5
};

var gOPD = Object.getOwnPropertyDescriptor;

var f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = _toIobject(O);
  P = _toPrimitive(P, true);
  if (_ie8DomDefine) try {
    return gOPD(O, P);
  } catch (e) {/* empty */}
  if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
};

var _objectGopd = {
  f: f$6
};

// ECMAScript 6 symbols shim


var META = _meta.KEY;

var gOPD$1 = _objectGopd.f;
var dP$1 = _objectDp.f;
var gOPN$2 = _objectGopnExt.f;
var $Symbol = _global.Symbol;
var $JSON = _global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE$2 = 'prototype';
var HIDDEN = _wks('_hidden');
var TO_PRIMITIVE = _wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = _shared('symbol-registry');
var AllSymbols = _shared('symbols');
var OPSymbols = _shared('op-symbols');
var ObjectProto = Object[PROTOTYPE$2];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = _global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = _descriptors && _fails(function () {
  return _objectCreate(dP$1({}, 'a', {
    get: function get$$1() {
      return dP$1(this, 'a', { value: 7 }).a;
    }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD$1(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP$1(it, key, D);
  if (protoDesc && it !== ObjectProto) dP$1(ObjectProto, key, protoDesc);
} : dP$1;

var wrap = function wrap(tag) {
  var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && _typeof($Symbol.iterator) == 'symbol' ? function (it) {
  return (typeof it === 'undefined' ? 'undefined' : _typeof(it)) == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty$1 = function defineProperty$$1(it, key, D) {
  if (it === ObjectProto) $defineProperty$1(OPSymbols, key, D);
  _anObject(it);
  key = _toPrimitive(key, true);
  _anObject(D);
  if (_has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _objectCreate(D, { enumerable: _propertyDesc(0, false) });
    }return setSymbolDesc(it, key, D);
  }return dP$1(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  _anObject(it);
  var keys = _enumKeys(P = _toIobject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) {
    $defineProperty$1(it, key = keys[i++], P[key]);
  }return it;
};
var $create = function create(it, P) {
  return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = _toPrimitive(key, true));
  if (this === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;
  return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = _toIobject(it);
  key = _toPrimitive(key, true);
  if (it === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;
  var D = gOPD$1(it, key);
  if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN$2(_toIobject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  }return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN$2(IS_OP ? OPSymbols : _toIobject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  }return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function _Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function $set(value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, _propertyDesc(1, value));
    };
    if (_descriptors && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {
    return this._k;
  });

  _objectGopd.f = $getOwnPropertyDescriptor;
  _objectDp.f = $defineProperty$1;
  _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;
  _objectPie.f = $propertyIsEnumerable;
  _objectGops.f = $getOwnPropertySymbols;

  if (_descriptors && !_library) {
    _redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  _wksExt.f = function (name) {
    return wrap(_wks(name));
  };
}

_export(_export.G + _export.W + _export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols =
// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
  _wks(es6Symbols[j++]);
}for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) {
  _wksDefine(wellKnownSymbols[k++]);
}_export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function _for(key) {
    return _has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) {
      if (SymbolRegistry[key] === sym) return key;
    }
  },
  useSetter: function useSetter() {
    setter = true;
  },
  useSimple: function useSimple() {
    setter = false;
  }
});

_export(_export.S + _export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty$1,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) {
      args.push(arguments[i++]);
    }$replacer = replacer = args[1];
    if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!_isArray(replacer)) replacer = function replacer(key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
_setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
_setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
_setToStringTag(_global.JSON, 'JSON', true);

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
_export(_export.S, 'Object', { create: _objectCreate });

// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
_export(_export.S + _export.F * !_descriptors, 'Object', { defineProperty: _objectDp.f });

// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
_export(_export.S + _export.F * !_descriptors, 'Object', { defineProperties: _objectDps });

// most Object methods by ES6 should accept primitives


var _objectSap = function _objectSap(KEY, exec) {
  var fn = (_core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  _export(_export.S + _export.F * _fails(function () {
    fn(1);
  }), 'Object', exp);
};

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

var $getOwnPropertyDescriptor$1 = _objectGopd.f;

_objectSap('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor$1(_toIobject(it), key);
  };
});

// 7.1.13 ToObject(argument)

var _toObject = function _toObject(it) {
  return Object(_defined(it));
};

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


var IE_PROTO$2 = _sharedKey('IE_PROTO');
var ObjectProto$1 = Object.prototype;

var _objectGpo = Object.getPrototypeOf || function (O) {
  O = _toObject(O);
  if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  }return O instanceof Object ? ObjectProto$1 : null;
};

// 19.1.2.9 Object.getPrototypeOf(O)


_objectSap('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return _objectGpo(_toObject(it));
  };
});

// 19.1.2.14 Object.keys(O)


_objectSap('keys', function () {
  return function keys(it) {
    return _objectKeys(_toObject(it));
  };
});

// 19.1.2.7 Object.getOwnPropertyNames(O)
_objectSap('getOwnPropertyNames', function () {
  return _objectGopnExt.f;
});

// 19.1.2.5 Object.freeze(O)

var meta = _meta.onFreeze;

_objectSap('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && _isObject(it) ? $freeze(meta(it)) : it;
  };
});

// 19.1.2.17 Object.seal(O)

var meta$1 = _meta.onFreeze;

_objectSap('seal', function ($seal) {
  return function seal(it) {
    return $seal && _isObject(it) ? $seal(meta$1(it)) : it;
  };
});

// 19.1.2.15 Object.preventExtensions(O)

var meta$2 = _meta.onFreeze;

_objectSap('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && _isObject(it) ? $preventExtensions(meta$2(it)) : it;
  };
});

// 19.1.2.12 Object.isFrozen(O)


_objectSap('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return _isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

// 19.1.2.13 Object.isSealed(O)


_objectSap('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return _isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

// 19.1.2.11 Object.isExtensible(O)


_objectSap('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return _isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

// 19.1.2.1 Object.assign(target, source, ...)


var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
var _objectAssign = !$assign || _fails(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) {
    B[k] = k;
  });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) {
  // eslint-disable-line no-unused-vars
  var T = _toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = _objectGops.f;
  var isEnum = _objectPie.f;
  while (aLen > index) {
    var S = _iobject(arguments[index++]);
    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
    }
  }return T;
} : $assign;

// 19.1.3.1 Object.assign(target, source)


_export(_export.S + _export.F, 'Object', { assign: _objectAssign });

// 7.2.9 SameValue(x, y)
var _sameValue = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

// 19.1.3.10 Object.is(value1, value2)

_export(_export.S, 'Object', { is: _sameValue });

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */

var check = function check(O, proto) {
  _anObject(O);
  if (!_isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
var _setProto = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
  function (test, buggy, set) {
    try {
      set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);
      set(test, []);
      buggy = !(test instanceof Array);
    } catch (e) {
      buggy = true;
    }
    return function setPrototypeOf(O, proto) {
      check(O, proto);
      if (buggy) O.__proto__ = proto;else set(O, proto);
      return O;
    };
  }({}, false) : undefined),
  check: check
};

// 19.1.3.19 Object.setPrototypeOf(O, proto)

_export(_export.S, 'Object', { setPrototypeOf: _setProto.set });

// getting tag from 19.1.3.6 Object.prototype.toString()

var TAG$1 = _wks('toStringTag');
// ES3 wrong here
var ARG = _cof(function () {
  return arguments;
}()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function tryGet(it, key) {
  try {
    return it[key];
  } catch (e) {/* empty */}
};

var _classof = function _classof(it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
  // @@toStringTag case
  : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T
  // builtinTag case
  : ARG ? _cof(O)
  // ES3 arguments fallback
  : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

// 19.1.3.6 Object.prototype.toString()

var test = {};
test[_wks('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  _redefine(Object.prototype, 'toString', function toString() {
    return '[object ' + _classof(this) + ']';
  }, true);
}

// fast apply, http://jsperf.lnkit.com/fast-apply/5
var _invoke = function _invoke(fn, args, that) {
                  var un = that === undefined;
                  switch (args.length) {
                                    case 0:
                                                      return un ? fn() : fn.call(that);
                                    case 1:
                                                      return un ? fn(args[0]) : fn.call(that, args[0]);
                                    case 2:
                                                      return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
                                    case 3:
                                                      return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
                                    case 4:
                                                      return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
                  }return fn.apply(that, args);
};

var arraySlice = [].slice;
var factories = {};

var construct = function construct(F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) {
      n[i] = 'a[' + i + ']';
    } // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  }return factories[len](F, args);
};

var _bind = Function.bind || function bind(that /* , ...args */) {
  var fn = _aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function bound() /* args... */{
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : _invoke(fn, args, that);
  };
  if (_isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)


_export(_export.P, 'Function', { bind: _bind });

var dP$2 = _objectDp.f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || _descriptors && dP$2(FProto, NAME, {
  configurable: true,
  get: function get() {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

var HAS_INSTANCE = _wks('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) _objectDp.f(FunctionProto, HAS_INSTANCE, { value: function value(O) {
    if (typeof this != 'function' || !_isObject(O)) return false;
    if (!_isObject(this.prototype)) return O instanceof this;
    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
    while (O = _objectGpo(O)) {
      if (this.prototype === O) return true;
    }return false;
  } });

var _stringWs = '\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

var space = '[' + _stringWs + ']';
var non = '\u200B\x85';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function exporter(KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = _fails(function () {
    return !!_stringWs[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : _stringWs[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  _export(_export.P + _export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(_defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

var _stringTrim = exporter;

var $parseInt = _global.parseInt;
var $trim = _stringTrim.trim;

var hex = /^[-+]?0[xX]/;

var _parseInt = $parseInt(_stringWs + '08') !== 8 || $parseInt(_stringWs + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
} : $parseInt;

// 18.2.5 parseInt(string, radix)
_export(_export.G + _export.F * (parseInt != _parseInt), { parseInt: _parseInt });

var $parseFloat = _global.parseFloat;
var $trim$1 = _stringTrim.trim;

var _parseFloat = 1 / $parseFloat(_stringWs + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim$1(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

// 18.2.4 parseFloat(string)
_export(_export.G + _export.F * (parseFloat != _parseFloat), { parseFloat: _parseFloat });

var setPrototypeOf = _setProto.set;
var _inheritIfRequired = function _inheritIfRequired(that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && _isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  }return that;
};

var gOPN$3 = _objectGopn.f;
var gOPD$2 = _objectGopd.f;
var dP$3 = _objectDp.f;
var $trim$2 = _stringTrim.trim;
var NUMBER = 'Number';
var $Number = _global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = _cof(_objectCreate(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function toNumber(argument) {
  var it = _toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim$2(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66:case 98:
          radix = 2;maxCode = 49;break; // fast equal /^0b[01]+$/i
        case 79:case 111:
          radix = 8;maxCode = 55;break; // fast equal /^0o[0-7]+$/i
        default:
          return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      }return parseInt(digits, radix);
    }
  }return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
    // check on 1..constructor(foo) case
    && (BROKEN_COF ? _fails(function () {
      proto.valueOf.call(that);
    }) : _cof(that) != NUMBER) ? _inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = _descriptors ? gOPN$3(Base) : (
  // ES3:
  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
  // ES6 (in case, if modules with ES6 Number statics required before):
  'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j$1 = 0, key; keys.length > j$1; j$1++) {
    if (_has(Base, key = keys[j$1]) && !_has($Number, key)) {
      dP$3($Number, key, gOPD$2(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  _redefine(_global, NUMBER, $Number);
}

var _aNumberValue = function _aNumberValue(it, msg) {
  if (typeof it != 'number' && _cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

var _stringRepeat = function repeat(count) {
  var str = String(_defined(this));
  var res = '';
  var n = _toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (; n > 0; (n >>>= 1) && (str += str)) {
    if (n & 1) res += str;
  }return res;
};

var $toFixed = 1.0.toFixed;
var floor$1 = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function multiply(n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor$1(c2 / 1e7);
  }
};
var divide = function divide(n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor$1(c / n);
    c = c % n * 1e7;
  }
};
var numToString = function numToString() {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + _stringRepeat.call(ZERO, 7 - t.length) + t;
    }
  }return s;
};
var pow = function pow(x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function log(x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  }return n;
};

_export(_export.P + _export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !_fails(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = _aNumberValue(this, ERROR);
    var f = _toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + _stringRepeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + _stringRepeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    }return m;
  }
});

var $toPrecision = 1.0.toPrecision;

_export(_export.P + _export.F * (_fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !_fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = _aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

// 20.1.2.1 Number.EPSILON


_export(_export.S, 'Number', { EPSILON: Math.pow(2, -52) });

// 20.1.2.2 Number.isFinite(number)

var _isFinite = _global.isFinite;

_export(_export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

// 20.1.2.3 Number.isInteger(number)

var floor$2 = Math.floor;
var _isInteger = function isInteger(it) {
  return !_isObject(it) && isFinite(it) && floor$2(it) === it;
};

// 20.1.2.3 Number.isInteger(number)


_export(_export.S, 'Number', { isInteger: _isInteger });

// 20.1.2.4 Number.isNaN(number)


_export(_export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

// 20.1.2.5 Number.isSafeInteger(number)


var abs = Math.abs;

_export(_export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return _isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

// 20.1.2.6 Number.MAX_SAFE_INTEGER


_export(_export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

// 20.1.2.10 Number.MIN_SAFE_INTEGER


_export(_export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

// 20.1.2.12 Number.parseFloat(string)
_export(_export.S + _export.F * (Number.parseFloat != _parseFloat), 'Number', { parseFloat: _parseFloat });

// 20.1.2.13 Number.parseInt(string, radix)
_export(_export.S + _export.F * (Number.parseInt != _parseInt), 'Number', { parseInt: _parseInt });

// 20.2.2.20 Math.log1p(x)
var _mathLog1p = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

// 20.2.2.3 Math.acosh(x)


var sqrt = Math.sqrt;
var $acosh = Math.acosh;

_export(_export.S + _export.F * !($acosh
// V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
&& Math.floor($acosh(Number.MAX_VALUE)) == 710
// Tor Browser bug: Math.acosh(Infinity) -> NaN
&& $acosh(Infinity) == Infinity), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : _mathLog1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

// 20.2.2.5 Math.asinh(x)

var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
_export(_export.S + _export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

// 20.2.2.7 Math.atanh(x)

var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
_export(_export.S + _export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

// 20.2.2.28 Math.sign(x)
var _mathSign = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

// 20.2.2.9 Math.cbrt(x)


_export(_export.S, 'Math', {
  cbrt: function cbrt(x) {
    return _mathSign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

// 20.2.2.11 Math.clz32(x)


_export(_export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

// 20.2.2.12 Math.cosh(x)

var exp = Math.exp;

_export(_export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
var _mathExpm1 = !$expm1
// Old FF bug
|| $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
// Tor Browser bug
|| $expm1(-2e-17) != -2e-17 ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

// 20.2.2.14 Math.expm1(x)


_export(_export.S + _export.F * (_mathExpm1 != Math.expm1), 'Math', { expm1: _mathExpm1 });

// 20.2.2.16 Math.fround(x)

var pow$1 = Math.pow;
var EPSILON = pow$1(2, -52);
var EPSILON32 = pow$1(2, -23);
var MAX32 = pow$1(2, 127) * (2 - EPSILON32);
var MIN32 = pow$1(2, -126);

var roundTiesToEven = function roundTiesToEven(n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

var _mathFround = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = _mathSign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

// 20.2.2.16 Math.fround(x)


_export(_export.S, 'Math', { fround: _mathFround });

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])

var abs$1 = Math.abs;

_export(_export.S, 'Math', {
  hypot: function hypot(value1, value2) {
    // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs$1(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

// 20.2.2.18 Math.imul(x, y)

var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
_export(_export.S + _export.F * _fails(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

// 20.2.2.21 Math.log10(x)


_export(_export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

// 20.2.2.20 Math.log1p(x)


_export(_export.S, 'Math', { log1p: _mathLog1p });

// 20.2.2.22 Math.log2(x)


_export(_export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

// 20.2.2.28 Math.sign(x)


_export(_export.S, 'Math', { sign: _mathSign });

// 20.2.2.30 Math.sinh(x)


var exp$1 = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
_export(_export.S + _export.F * _fails(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1 ? (_mathExpm1(x) - _mathExpm1(-x)) / 2 : (exp$1(x - 1) - exp$1(-x - 1)) * (Math.E / 2);
  }
});

// 20.2.2.33 Math.tanh(x)


var exp$2 = Math.exp;

_export(_export.S, 'Math', {
  tanh: function tanh(x) {
    var a = _mathExpm1(x = +x);
    var b = _mathExpm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp$2(x) + exp$2(-x));
  }
});

// 20.2.2.34 Math.trunc(x)


_export(_export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
_export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) {
    // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (_toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
    }return res.join('');
  }
});

_export(_export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = _toIobject(callSite.raw);
    var len = _toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    }return res.join('');
  }
});

// 21.1.3.25 String.prototype.trim()
_stringTrim('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

// true  -> String#at
// false -> String#codePointAt
var _stringAt = function _stringAt(TO_STRING) {
  return function (that, pos) {
    var s = String(_defined(that));
    var i = _toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

var _iterators = {};

var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
_hide(IteratorPrototype, _wks('iterator'), function () {
  return this;
});

var _iterCreate = function _iterCreate(Constructor, NAME, next) {
  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
  _setToStringTag(Constructor, NAME + ' Iterator');
};

var ITERATOR = _wks('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function returnThis() {
  return this;
};

var _iterDefine = function _iterDefine(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  _iterCreate(Constructor, NAME, next);
  var getMethod = function getMethod(kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS:
        return function keys() {
          return new Constructor(this, kind);
        };
      case VALUES:
        return function values() {
          return new Constructor(this, kind);
        };
    }return function entries() {
      return new Constructor(this, kind);
    };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = _objectGpo($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      _setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!_library && typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() {
      return $native.call(this);
    };
  }
  // Define iterator
  if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    _hide(proto, ITERATOR, $default);
  }
  // Plug for library
  _iterators[NAME] = $default;
  _iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) _redefine(proto, key, methods[key]);
    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

var $at = _stringAt(true);

// 21.1.3.27 String.prototype[@@iterator]()
_iterDefine(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0; // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

var $at$1 = _stringAt(false);
_export(_export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at$1(this, pos);
  }
});

// 7.2.8 IsRegExp(argument)


var MATCH = _wks('match');
var _isRegexp = function _isRegexp(it) {
  var isRegExp;
  return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');
};

// helper for String#{startsWith, endsWith, includes}


var _stringContext = function _stringContext(that, searchString, NAME) {
  if (_isRegexp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(_defined(that));
};

var MATCH$1 = _wks('match');
var _failsIsRegexp = function _failsIsRegexp(KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH$1] = false;
      return !'/./'[KEY](re);
    } catch (f) {/* empty */}
  }return true;
};

var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

_export(_export.P + _export.F * _failsIsRegexp(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = _stringContext(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = _toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(_toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
  }
});

var INCLUDES = 'includes';

_export(_export.P + _export.F * _failsIsRegexp(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~_stringContext(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

_export(_export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: _stringRepeat
});

var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

_export(_export.P + _export.F * _failsIsRegexp(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = _stringContext(this, searchString, STARTS_WITH);
    var index = _toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
  }
});

var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function createHTML(string, tag, attribute, value) {
  var S = String(_defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
var _stringHtml = function _stringHtml(NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  _export(_export.P + _export.F * _fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

// B.2.3.2 String.prototype.anchor(name)
_stringHtml('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

// B.2.3.3 String.prototype.big()
_stringHtml('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

// B.2.3.4 String.prototype.blink()
_stringHtml('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

// B.2.3.5 String.prototype.bold()
_stringHtml('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

// B.2.3.6 String.prototype.fixed()
_stringHtml('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

// B.2.3.7 String.prototype.fontcolor(color)
_stringHtml('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

// B.2.3.8 String.prototype.fontsize(size)
_stringHtml('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

// B.2.3.9 String.prototype.italics()
_stringHtml('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

// B.2.3.10 String.prototype.link(url)
_stringHtml('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

// B.2.3.11 String.prototype.small()
_stringHtml('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

// B.2.3.12 String.prototype.strike()
_stringHtml('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

// B.2.3.13 String.prototype.sub()
_stringHtml('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

// B.2.3.14 String.prototype.sup()
_stringHtml('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

// 20.3.3.1 / 15.9.4.4 Date.now()


_export(_export.S, 'Date', { now: function now() {
    return new Date().getTime();
  } });

_export(_export.P + _export.F * _fails(function () {
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({ toISOString: function toISOString() {
      return 1;
    } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = _toObject(this);
    var pv = _toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function lz(num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
var _dateToIsoString = _fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !_fails(function () {
  $toISOString.call(new Date(NaN));
}) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()


// PhantomJS / old WebKit has a broken implementations
_export(_export.P + _export.F * (Date.prototype.toISOString !== _dateToIsoString), 'Date', {
  toISOString: _dateToIsoString
});

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime$1 = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  _redefine(DateProto, TO_STRING, function toString() {
    var value = getTime$1.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

var NUMBER$1 = 'number';

var _dateToPrimitive = function _dateToPrimitive(hint) {
  if (hint !== 'string' && hint !== NUMBER$1 && hint !== 'default') throw TypeError('Incorrect hint');
  return _toPrimitive(_anObject(this), hint != NUMBER$1);
};

var TO_PRIMITIVE$1 = _wks('toPrimitive');
var proto$1 = Date.prototype;

if (!(TO_PRIMITIVE$1 in proto$1)) _hide(proto$1, TO_PRIMITIVE$1, _dateToPrimitive);

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)


_export(_export.S, 'Array', { isArray: _isArray });

// call something on iterator step with safe closing on error

var _iterCall = function _iterCall(iterator, fn, value, entries) {
  try {
    return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) _anObject(ret.call(iterator));
    throw e;
  }
};

// check on default Array iterator

var ITERATOR$1 = _wks('iterator');
var ArrayProto = Array.prototype;

var _isArrayIter = function _isArrayIter(it) {
  return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$1] === it);
};

var _createProperty = function _createProperty(object, index, value) {
  if (index in object) _objectDp.f(object, index, _propertyDesc(0, value));else object[index] = value;
};

var ITERATOR$2 = _wks('iterator');

var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR$2] || it['@@iterator'] || _iterators[_classof(it)];
};

var ITERATOR$3 = _wks('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR$3]();
  riter['return'] = function () {
    SAFE_CLOSING = true;
  };
  // eslint-disable-next-line no-throw-literal
  
} catch (e) {/* empty */}

var _iterDetect = function _iterDetect(exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR$3]();
    iter.next = function () {
      return { done: safe = true };
    };
    arr[ITERATOR$3] = function () {
      return iter;
    };
    exec(arr);
  } catch (e) {/* empty */}
  return safe;
};

_export(_export.S + _export.F * !_iterDetect(function (iter) {
  
}), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = _toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = core_getIteratorMethod(O);
    var length, result, step, iterator;
    if (mapping) mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = _toLength(O.length);
      for (result = new C(length); length > index; index++) {
        _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

// WebKit Array.of isn't generic
_export(_export.S + _export.F * _fails(function () {
  function F() {/* empty */}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of() /* ...args */{
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) {
      _createProperty(result, index, arguments[index++]);
    }result.length = aLen;
    return result;
  }
});

var _strictMethod = function _strictMethod(method, arg) {
  return !!method && _fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () {/* empty */}, 1) : method.call(null);
  });
};

// 22.1.3.13 Array.prototype.join(separator)


var arrayJoin = [].join;

// fallback for not array-like strings
_export(_export.P + _export.F * (_iobject != Object || !_strictMethod(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(_toIobject(this), separator === undefined ? ',' : separator);
  }
});

var arraySlice$1 = [].slice;

// fallback for not array-like ES3 strings and DOM objects
_export(_export.P + _export.F * _fails(function () {
  if (_html) arraySlice$1.call(_html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = _toLength(this.length);
    var klass = _cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice$1.call(this, begin, end);
    var start = _toAbsoluteIndex(begin, len);
    var upTo = _toAbsoluteIndex(end, len);
    var size = _toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) {
      cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
    }return cloned;
  }
});

var $sort = [].sort;
var test$1 = [1, 2, 3];

_export(_export.P + _export.F * (_fails(function () {
  // IE8-
  test$1.sort(undefined);
}) || !_fails(function () {
  // V8 bug
  test$1.sort(null);
  // Old WebKit
}) || !_strictMethod($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined ? $sort.call(_toObject(this)) : $sort.call(_toObject(this), _aFunction(comparefn));
  }
});

var SPECIES = _wks('species');

var _arraySpeciesConstructor = function _arraySpeciesConstructor(original) {
  var C;
  if (_isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;
    if (_isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  }return C === undefined ? Array : C;
};

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)


var _arraySpeciesCreate = function _arraySpeciesCreate(original, length) {
  return new (_arraySpeciesConstructor(original))(length);
};

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex


var _arrayMethods = function _arrayMethods(TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || _arraySpeciesCreate;
  return function ($this, callbackfn, that) {
    var O = _toObject($this);
    var self = _iobject(O);
    var f = _ctx(callbackfn, that, 3);
    var length = _toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (; length > index; index++) {
      if (NO_HOLES || index in self) {
        val = self[index];
        res = f(val, index, O);
        if (TYPE) {
          if (IS_MAP) result[index] = res; // map
          else if (res) switch (TYPE) {
              case 3:
                return true; // some
              case 5:
                return val; // find
              case 6:
                return index; // findIndex
              case 2:
                result.push(val); // filter
            } else if (IS_EVERY) return false; // every
        }
      }
    }return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

var $forEach = _arrayMethods(0);
var STRICT = _strictMethod([].forEach, true);

_export(_export.P + _export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

var $map = _arrayMethods(1);

_export(_export.P + _export.F * !_strictMethod([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

var $filter = _arrayMethods(2);

_export(_export.P + _export.F * !_strictMethod([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

var $some = _arrayMethods(3);

_export(_export.P + _export.F * !_strictMethod([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

var $every = _arrayMethods(4);

_export(_export.P + _export.F * !_strictMethod([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

var _arrayReduce = function _arrayReduce(that, callbackfn, aLen, memo, isRight) {
  _aFunction(callbackfn);
  var O = _toObject(that);
  var self = _iobject(O);
  var length = _toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (; isRight ? index >= 0 : length > index; index += i) {
    if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
  }return memo;
};

_export(_export.P + _export.F * !_strictMethod([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return _arrayReduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

_export(_export.P + _export.F * !_strictMethod([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return _arrayReduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

var $indexOf = _arrayIncludes(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

_export(_export.P + _export.F * (NEGATIVE_ZERO || !_strictMethod($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
    // convert -0 to +0
    ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
  }
});

var $native$1 = [].lastIndexOf;
var NEGATIVE_ZERO$1 = !!$native$1 && 1 / [1].lastIndexOf(1, -0) < 0;

_export(_export.P + _export.F * (NEGATIVE_ZERO$1 || !_strictMethod($native$1)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO$1) return $native$1.apply(this, arguments) || 0;
    var O = _toIobject(this);
    var length = _toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, _toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (; index >= 0; index--) {
      if (index in O) if (O[index] === searchElement) return index || 0;
    }return -1;
  }
});

var _arrayCopyWithin = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = _toObject(this);
  var len = _toLength(O.length);
  var to = _toAbsoluteIndex(target, len);
  var from = _toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : _toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];else delete O[to];
    to += inc;
    from += inc;
  }return O;
};

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = _wks('unscopables');
var ArrayProto$1 = Array.prototype;
if (ArrayProto$1[UNSCOPABLES] == undefined) _hide(ArrayProto$1, UNSCOPABLES, {});
var _addToUnscopables = function _addToUnscopables(key) {
  ArrayProto$1[UNSCOPABLES][key] = true;
};

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)


_export(_export.P, 'Array', { copyWithin: _arrayCopyWithin });

_addToUnscopables('copyWithin');

var _arrayFill = function fill(value /* , start = 0, end = @length */) {
  var O = _toObject(this);
  var length = _toLength(O.length);
  var aLen = arguments.length;
  var index = _toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : _toAbsoluteIndex(end, length);
  while (endPos > index) {
    O[index++] = value;
  }return O;
};

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)


_export(_export.P, 'Array', { fill: _arrayFill });

_addToUnscopables('fill');

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

var $find = _arrayMethods(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () {
  forced = false;
});
_export(_export.P + _export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
_addToUnscopables(KEY);

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

var $find$1 = _arrayMethods(6);
var KEY$1 = 'findIndex';
var forced$1 = true;
// Shouldn't skip holes
if (KEY$1 in []) Array(1)[KEY$1](function () {
  forced$1 = false;
});
_export(_export.P + _export.F * forced$1, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
_addToUnscopables(KEY$1);

var SPECIES$1 = _wks('species');

var _setSpecies = function _setSpecies(KEY) {
  var C = _global[KEY];
  if (_descriptors && C && !C[SPECIES$1]) _objectDp.f(C, SPECIES$1, {
    configurable: true,
    get: function get() {
      return this;
    }
  });
};

_setSpecies('Array');

var _iterStep = function _iterStep(done, value) {
  return { value: value, done: !!done };
};

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
  this._t = _toIobject(iterated); // target
  this._i = 0; // next index
  this._k = kind; // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return _iterStep(1);
  }
  if (kind == 'keys') return _iterStep(0, index);
  if (kind == 'values') return _iterStep(0, O[index]);
  return _iterStep(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
_iterators.Arguments = _iterators.Array;

_addToUnscopables('keys');
_addToUnscopables('values');
_addToUnscopables('entries');

// 21.2.5.3 get RegExp.prototype.flags

var _flags = function _flags() {
  var that = _anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

var dP$4 = _objectDp.f;
var gOPN$4 = _objectGopn.f;

var $RegExp = _global.RegExp;
var Base$1 = $RegExp;
var proto$2 = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (_descriptors && (!CORRECT_NEW || _fails(function () {
  re2[_wks('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = _isRegexp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : _inheritIfRequired(CORRECT_NEW ? new Base$1(piRE && !fiU ? p.source : p, f) : Base$1((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? _flags.call(p) : f), tiRE ? this : proto$2, $RegExp);
  };
  var proxy = function proxy(key) {
    key in $RegExp || dP$4($RegExp, key, {
      configurable: true,
      get: function get() {
        return Base$1[key];
      },
      set: function set(it) {
        Base$1[key] = it;
      }
    });
  };
  for (var keys$1 = gOPN$4(Base$1), i = 0; keys$1.length > i;) {
    proxy(keys$1[i++]);
  }proto$2.constructor = $RegExp;
  $RegExp.prototype = proto$2;
  _redefine(_global, 'RegExp', $RegExp);
}

_setSpecies('RegExp');

// 21.2.5.3 get RegExp.prototype.flags()
if (_descriptors && /./g.flags != 'g') _objectDp.f(RegExp.prototype, 'flags', {
  configurable: true,
  get: _flags
});

var TO_STRING$1 = 'toString';
var $toString$1 = /./[TO_STRING$1];

var define = function define(fn) {
  _redefine(RegExp.prototype, TO_STRING$1, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (_fails(function () {
  return $toString$1.call({ source: 'a', flags: 'b' }) != '/a/b';
})) {
  define(function toString() {
    var R = _anObject(this);
    return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !_descriptors && R instanceof RegExp ? _flags.call(R) : undefined);
  });
  // FF44- RegExp#toString has a wrong name
} else if ($toString$1.name != TO_STRING$1) {
  define(function toString() {
    return $toString$1.call(this);
  });
}

var _fixReWks = function _fixReWks(KEY, length, exec) {
  var SYMBOL = _wks(KEY);
  var fns = exec(_defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];
  if (_fails(function () {
    var O = {};
    O[SYMBOL] = function () {
      return 7;
    };
    return ''[KEY](O) != 7;
  })) {
    _redefine(String.prototype, KEY, strfn);
    _hide(RegExp.prototype, SYMBOL, length == 2
    // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
    // 21.2.5.11 RegExp.prototype[@@split](string, limit)
    ? function (string, arg) {
      return rxfn.call(string, this, arg);
    }
    // 21.2.5.6 RegExp.prototype[@@match](string)
    // 21.2.5.9 RegExp.prototype[@@search](string)
    : function (string) {
      return rxfn.call(string, this);
    });
  }
};

// @@match logic
_fixReWks('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});

// @@replace logic
_fixReWks('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});

// @@search logic
_fixReWks('search', 1, function (defined, SEARCH, $search) {
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp) {
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});

// @@split logic
_fixReWks('split', 2, function (defined, SPLIT, $split) {
  var isRegExp = _isRegexp;
  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function $split(separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) {
              if (arguments[i] === undefined) match[i] = undefined;
            }
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
    // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function $split(separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});

var _anInstance = function _anInstance(it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
    throw TypeError(name + ': incorrect invocation!');
  }return it;
};

var _forOf = createCommonjsModule(function (module) {
  var BREAK = {};
  var RETURN = {};
  var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
    var iterFn = ITERATOR ? function () {
      return iterable;
    } : core_getIteratorMethod(iterable);
    var f = _ctx(fn, that, entries ? 2 : 1);
    var index = 0;
    var length, step, iterator, result;
    if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
    // fast case for arrays with default iterator
    if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {
      result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
      if (result === BREAK || result === RETURN) return result;
    } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
      result = _iterCall(iterator, f, step.value, entries);
      if (result === BREAK || result === RETURN) return result;
    }
  };
  exports.BREAK = BREAK;
  exports.RETURN = RETURN;
});

// 7.3.20 SpeciesConstructor(O, defaultConstructor)


var SPECIES$2 = _wks('species');
var _speciesConstructor = function _speciesConstructor(O, D) {
  var C = _anObject(O).constructor;
  var S;
  return C === undefined || (S = _anObject(C)[SPECIES$2]) == undefined ? D : _aFunction(S);
};

var process = _global.process;
var setTask = _global.setImmediate;
var clearTask = _global.clearImmediate;
var MessageChannel = _global.MessageChannel;
var Dispatch = _global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer;
var channel;
var port;
var run = function run() {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function listener(event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) {
      args.push(arguments[i++]);
    }queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      _invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (_cof(process) == 'process') {
    defer = function defer(id) {
      process.nextTick(_ctx(run, id, 1));
    };
    // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function defer(id) {
      Dispatch.now(_ctx(run, id, 1));
    };
    // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = _ctx(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (_global.addEventListener && typeof postMessage == 'function' && !_global.importScripts) {
    defer = function defer(id) {
      _global.postMessage(id + '', '*');
    };
    _global.addEventListener('message', listener, false);
    // IE8-
  } else if (ONREADYSTATECHANGE in _domCreate('script')) {
    defer = function defer(id) {
      _html.appendChild(_domCreate('script'))[ONREADYSTATECHANGE] = function () {
        _html.removeChild(this);
        run.call(id);
      };
    };
    // Rest old browsers
  } else {
    defer = function defer(id) {
      setTimeout(_ctx(run, id, 1), 0);
    };
  }
}
var _task = {
  set: setTask,
  clear: clearTask
};

var macrotask = _task.set;
var Observer = _global.MutationObserver || _global.WebKitMutationObserver;
var process$1 = _global.process;
var Promise$1 = _global.Promise;
var isNode = _cof(process$1) == 'process';

var _microtask = function _microtask() {
  var head, last, notify;

  var flush = function flush() {
    var parent, fn;
    if (isNode && (parent = process$1.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();else last = undefined;
        throw e;
      }
    }last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function notify() {
      process$1.nextTick(flush);
    };
    // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(_global.navigator && _global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function notify() {
      node.data = toggle = !toggle;
    };
    // environments with maybe non-completely correct, but existent Promise
  } else if (Promise$1 && Promise$1.resolve) {
    var promise = Promise$1.resolve();
    notify = function notify() {
      promise.then(flush);
    };
    // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout
  } else {
    notify = function notify() {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(_global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    }last = task;
  };
};

// 25.4.1.5 NewPromiseCapability(C)


function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = _aFunction(resolve);
  this.reject = _aFunction(reject);
}

var f$7 = function f(C) {
  return new PromiseCapability(C);
};

var _newPromiseCapability = {
  f: f$7
};

var _perform = function _perform(exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

var _promiseResolve = function _promiseResolve(C, x) {
  _anObject(C);
  if (_isObject(x) && x.constructor === C) return x;
  var promiseCapability = _newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

var _redefineAll = function _redefineAll(target, src, safe) {
  for (var key in src) {
    _redefine(target, key, src[key], safe);
  }return target;
};

var task = _task.set;
var microtask = _microtask();

var PROMISE = 'Promise';
var TypeError$1 = _global.TypeError;
var process$2 = _global.process;
var $Promise = _global[PROMISE];
var isNode$1 = _classof(process$2) == 'process';
var empty = function empty() {/* empty */};
var Internal;
var newGenericPromiseCapability;
var OwnPromiseCapability;
var Wrapper;
var newPromiseCapability$1 = newGenericPromiseCapability = _newPromiseCapability.f;

var USE_NATIVE$1 = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode$1 || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch (e) {/* empty */}
}();

// helpers
var isThenable = function isThenable(it) {
  var then;
  return _isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function notify(promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function run(reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError$1('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) {
      run(chain[i++]);
    } // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function onUnhandled(promise) {
  task.call(_global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = _perform(function () {
        if (isNode$1) {
          process$2.emit('unhandledRejection', value, promise);
        } else if (handler = _global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = _global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;
    }promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function isUnhandled(promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function onHandleUnhandled(promise) {
  task.call(_global, function () {
    var handler;
    if (isNode$1) {
      process$2.emit('rejectionHandled', promise);
    } else if (handler = _global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function $reject(value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function $resolve(value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, _ctx($resolve, wrapper, 1), _ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE$1) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    _anInstance(this, $Promise, PROMISE, '_h');
    _aFunction(executor);
    Internal.call(this);
    try {
      executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = []; // <- awaiting reactions
    this._a = undefined; // <- checked in isUnhandled reactions
    this._s = 0; // <- state
    this._d = false; // <- done
    this._v = undefined; // <- value
    this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false; // <- notify
  };
  Internal.prototype = _redefineAll($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability$1(_speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode$1 ? process$2.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function _catch(onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function OwnPromiseCapability() {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = _ctx($resolve, promise, 1);
    this.reject = _ctx($reject, promise, 1);
  };
  _newPromiseCapability.f = newPromiseCapability$1 = function newPromiseCapability(C) {
    return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
  };
}

_export(_export.G + _export.W + _export.F * !USE_NATIVE$1, { Promise: $Promise });
_setToStringTag($Promise, PROMISE);
_setSpecies(PROMISE);
Wrapper = _core[PROMISE];

// statics
_export(_export.S + _export.F * !USE_NATIVE$1, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability$1(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
_export(_export.S + _export.F * (_library || !USE_NATIVE$1), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return _promiseResolve(_library && this === Wrapper ? $Promise : this, x);
  }
});
_export(_export.S + _export.F * !(USE_NATIVE$1 && _iterDetect(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability$1(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = _perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      _forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability$1(C);
    var reject = capability.reject;
    var result = _perform(function () {
      _forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

var _validateCollection = function _validateCollection(it, TYPE) {
  if (!_isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

var dP$5 = _objectDp.f;

var fastKey = _meta.fastKey;

var SIZE = _descriptors ? '_s' : 'size';

var getEntry = function getEntry(that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

var _collectionStrong = {
  getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      _anInstance(that, C, NAME, '_i');
      that._t = NAME; // collection type
      that._i = _objectCreate(null); // index
      that._f = undefined; // first entry
      that._l = undefined; // last entry
      that[SIZE] = 0; // size
      if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
    });
    _redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = _validateCollection(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function _delete(key) {
        var that = _validateCollection(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        }return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        _validateCollection(this, NAME);
        var f = _ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) {
            entry = entry.p;
          }
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(_validateCollection(this, NAME), key);
      }
    });
    if (_descriptors) dP$5(C.prototype, 'size', {
      get: function get() {
        return _validateCollection(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function def(that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
      // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key, // <- key
        v: value, // <- value
        p: prev = that._l, // <- previous entry
        n: undefined, // <- next entry
        r: false // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    }return that;
  },
  getEntry: getEntry,
  setStrong: function setStrong(C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    _iterDefine(C, NAME, function (iterated, kind) {
      this._t = _validateCollection(iterated, NAME); // target
      this._k = kind; // kind
      this._l = undefined; // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) {
        entry = entry.p;
      } // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return _iterStep(1);
      }
      // return step by kind
      if (kind == 'keys') return _iterStep(0, entry.k);
      if (kind == 'values') return _iterStep(0, entry.v);
      return _iterStep(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    _setSpecies(NAME);
  }
};

var _collection = function _collection(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = _global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function fixMethod(KEY) {
    var fn = proto[KEY];
    _redefine(proto, KEY, KEY == 'delete' ? function (a) {
      return IS_WEAK && !_isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'has' ? function has(a) {
      return IS_WEAK && !_isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'get' ? function get(a) {
      return IS_WEAK && !_isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
    } : KEY == 'add' ? function add(a) {
      fn.call(this, a === 0 ? 0 : a);return this;
    } : function set(a, b) {
      fn.call(this, a === 0 ? 0 : a, b);return this;
    });
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !_fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    _redefineAll(C.prototype, methods);
    _meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = _fails(function () {
      instance.has(1);
    });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = _iterDetect(function (iter) {
      new C(iter);
    }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && _fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) {
        $instance[ADDER](index, index);
      }return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        _anInstance(target, C, NAME);
        var that = _inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  _setToStringTag(C, NAME);

  O[NAME] = C;
  _export(_export.G + _export.W + _export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

var MAP = 'Map';

// 23.1 Map Objects
var es6_map = _collection(MAP, function (get) {
  return function Map() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = _collectionStrong.getEntry(_validateCollection(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return _collectionStrong.def(_validateCollection(this, MAP), key === 0 ? 0 : key, value);
  }
}, _collectionStrong, true);

var SET = 'Set';

// 23.2 Set Objects
var es6_set = _collection(SET, function (get) {
  return function Set() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return _collectionStrong.def(_validateCollection(this, SET), value = value === 0 ? 0 : value, value);
  }
}, _collectionStrong);

var getWeak = _meta.getWeak;

var arrayFind = _arrayMethods(5);
var arrayFindIndex = _arrayMethods(6);
var id$1 = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function uncaughtFrozenStore(that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function UncaughtFrozenStore() {
  this.a = [];
};
var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function get(key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function has(key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function set(key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;else this.a.push([key, value]);
  },
  'delete': function _delete(key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

var _collectionWeak = {
  getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      _anInstance(that, C, NAME, '_i');
      that._t = NAME; // collection type
      that._i = id$1++; // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
    });
    _redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function _delete(key) {
        if (!_isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(_validateCollection(this, NAME))['delete'](key);
        return data && _has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!_isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(_validateCollection(this, NAME)).has(key);
        return data && _has(data, this._i);
      }
    });
    return C;
  },
  def: function def(that, key, value) {
    var data = getWeak(_anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

var es6_weakMap = createCommonjsModule(function (module) {
  var each = _arrayMethods(0);

  var WEAK_MAP = 'WeakMap';
  var getWeak = _meta.getWeak;
  var isExtensible = Object.isExtensible;
  var uncaughtFrozenStore = _collectionWeak.ufstore;
  var tmp = {};
  var InternalMap;

  var wrapper = function wrapper(get) {
    return function WeakMap() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  };

  var methods = {
    // 23.3.3.3 WeakMap.prototype.get(key)
    get: function get(key) {
      if (_isObject(key)) {
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(_validateCollection(this, WEAK_MAP)).get(key);
        return data ? data[this._i] : undefined;
      }
    },
    // 23.3.3.5 WeakMap.prototype.set(key, value)
    set: function set(key, value) {
      return _collectionWeak.def(_validateCollection(this, WEAK_MAP), key, value);
    }
  };

  // 23.3 WeakMap Objects
  var $WeakMap = module.exports = _collection(WEAK_MAP, wrapper, methods, _collectionWeak, true, true);

  // IE11 WeakMap frozen keys fix
  if (_fails(function () {
    return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7;
  })) {
    InternalMap = _collectionWeak.getConstructor(wrapper, WEAK_MAP);
    _objectAssign(InternalMap.prototype, methods);
    _meta.NEED = true;
    each(['delete', 'has', 'get', 'set'], function (key) {
      var proto = $WeakMap.prototype;
      var method = proto[key];
      _redefine(proto, key, function (a, b) {
        // store frozen objects on internal weakmap shim
        if (_isObject(a) && !isExtensible(a)) {
          if (!this._f) this._f = new InternalMap();
          var result = this._f[key](a, b);
          return key == 'set' ? this : result;
          // store all the rest on native weakmap
        }return method.call(this, a, b);
      });
    });
  }
});

var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
_collection(WEAK_SET, function (get) {
  return function WeakSet() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return _collectionWeak.def(_validateCollection(this, WEAK_SET), value, true);
  }
}, _collectionWeak, false, true);

var TYPED = _uid('typed_array');
var VIEW = _uid('view');
var ABV = !!(_global.ArrayBuffer && _global.DataView);
var CONSTR = ABV;
var i$1 = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');

while (i$1 < l) {
  if (Typed = _global[TypedArrayConstructors[i$1++]]) {
    _hide(Typed.prototype, TYPED, true);
    _hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

var _typed = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

// https://tc39.github.io/ecma262/#sec-toindex


var _toIndex = function _toIndex(it) {
  if (it === undefined) return 0;
  var number = _toInteger(it);
  var length = _toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

var _typedBuffer = createCommonjsModule(function (module, exports) {
  var gOPN = _objectGopn.f;
  var dP = _objectDp.f;

  var ARRAY_BUFFER = 'ArrayBuffer';
  var DATA_VIEW = 'DataView';
  var PROTOTYPE = 'prototype';
  var WRONG_LENGTH = 'Wrong length!';
  var WRONG_INDEX = 'Wrong index!';
  var $ArrayBuffer = _global[ARRAY_BUFFER];
  var $DataView = _global[DATA_VIEW];
  var Math = _global.Math;
  var RangeError = _global.RangeError;
  // eslint-disable-next-line no-shadow-restricted-names
  var Infinity = _global.Infinity;
  var BaseBuffer = $ArrayBuffer;
  var abs = Math.abs;
  var pow = Math.pow;
  var floor = Math.floor;
  var log = Math.log;
  var LN2 = Math.LN2;
  var BUFFER = 'buffer';
  var BYTE_LENGTH = 'byteLength';
  var BYTE_OFFSET = 'byteOffset';
  var $BUFFER = _descriptors ? '_b' : BUFFER;
  var $LENGTH = _descriptors ? '_l' : BYTE_LENGTH;
  var $OFFSET = _descriptors ? '_o' : BYTE_OFFSET;

  // IEEE754 conversions based on https://github.com/feross/ieee754
  function packIEEE754(value, mLen, nBytes) {
    var buffer = new Array(nBytes);
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
    var i = 0;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    var e, m, c;
    value = abs(value);
    // eslint-disable-next-line no-self-compare
    if (value != value || value === Infinity) {
      // eslint-disable-next-line no-self-compare
      m = value != value ? 1 : 0;
      e = eMax;
    } else {
      e = floor(log(value) / LN2);
      if (value * (c = pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * pow(2, eBias - 1) * pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8) {}
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8) {}
    buffer[--i] |= s * 128;
    return buffer;
  }
  function unpackIEEE754(buffer, mLen, nBytes) {
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = eLen - 7;
    var i = nBytes - 1;
    var s = buffer[i--];
    var e = s & 127;
    var m;
    s >>= 7;
    for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8) {}
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8) {}
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : s ? -Infinity : Infinity;
    } else {
      m = m + pow(2, mLen);
      e = e - eBias;
    }return (s ? -1 : 1) * m * pow(2, e - mLen);
  }

  function unpackI32(bytes) {
    return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
  }
  function packI8(it) {
    return [it & 0xff];
  }
  function packI16(it) {
    return [it & 0xff, it >> 8 & 0xff];
  }
  function packI32(it) {
    return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
  }
  function packF64(it) {
    return packIEEE754(it, 52, 8);
  }
  function packF32(it) {
    return packIEEE754(it, 23, 4);
  }

  function addGetter(C, key, internal) {
    dP(C[PROTOTYPE], key, { get: function get() {
        return this[internal];
      } });
  }

  function get(view, bytes, index, isLittleEndian) {
    var numIndex = +index;
    var intIndex = _toIndex(numIndex);
    if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
    var store = view[$BUFFER]._b;
    var start = intIndex + view[$OFFSET];
    var pack = store.slice(start, start + bytes);
    return isLittleEndian ? pack : pack.reverse();
  }
  function set(view, bytes, index, conversion, value, isLittleEndian) {
    var numIndex = +index;
    var intIndex = _toIndex(numIndex);
    if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
    var store = view[$BUFFER]._b;
    var start = intIndex + view[$OFFSET];
    var pack = conversion(+value);
    for (var i = 0; i < bytes; i++) {
      store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
    }
  }

  if (!_typed.ABV) {
    $ArrayBuffer = function ArrayBuffer(length) {
      _anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
      var byteLength = _toIndex(length);
      this._b = _arrayFill.call(new Array(byteLength), 0);
      this[$LENGTH] = byteLength;
    };

    $DataView = function DataView(buffer, byteOffset, byteLength) {
      _anInstance(this, $DataView, DATA_VIEW);
      _anInstance(buffer, $ArrayBuffer, DATA_VIEW);
      var bufferLength = buffer[$LENGTH];
      var offset = _toInteger(byteOffset);
      if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
      byteLength = byteLength === undefined ? bufferLength - offset : _toLength(byteLength);
      if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
      this[$BUFFER] = buffer;
      this[$OFFSET] = offset;
      this[$LENGTH] = byteLength;
    };

    if (_descriptors) {
      addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
      addGetter($DataView, BUFFER, '_b');
      addGetter($DataView, BYTE_LENGTH, '_l');
      addGetter($DataView, BYTE_OFFSET, '_o');
    }

    _redefineAll($DataView[PROTOTYPE], {
      getInt8: function getInt8(byteOffset) {
        return get(this, 1, byteOffset)[0] << 24 >> 24;
      },
      getUint8: function getUint8(byteOffset) {
        return get(this, 1, byteOffset)[0];
      },
      getInt16: function getInt16(byteOffset /* , littleEndian */) {
        var bytes = get(this, 2, byteOffset, arguments[1]);
        return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
      },
      getUint16: function getUint16(byteOffset /* , littleEndian */) {
        var bytes = get(this, 2, byteOffset, arguments[1]);
        return bytes[1] << 8 | bytes[0];
      },
      getInt32: function getInt32(byteOffset /* , littleEndian */) {
        return unpackI32(get(this, 4, byteOffset, arguments[1]));
      },
      getUint32: function getUint32(byteOffset /* , littleEndian */) {
        return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
      },
      getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
        return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
      },
      getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
        return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
      },
      setInt8: function setInt8(byteOffset, value) {
        set(this, 1, byteOffset, packI8, value);
      },
      setUint8: function setUint8(byteOffset, value) {
        set(this, 1, byteOffset, packI8, value);
      },
      setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
        set(this, 2, byteOffset, packI16, value, arguments[2]);
      },
      setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
        set(this, 2, byteOffset, packI16, value, arguments[2]);
      },
      setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
        set(this, 4, byteOffset, packI32, value, arguments[2]);
      },
      setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
        set(this, 4, byteOffset, packI32, value, arguments[2]);
      },
      setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
        set(this, 4, byteOffset, packF32, value, arguments[2]);
      },
      setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
        set(this, 8, byteOffset, packF64, value, arguments[2]);
      }
    });
  } else {
    if (!_fails(function () {
      $ArrayBuffer(1);
    }) || !_fails(function () {
      new $ArrayBuffer(-1); // eslint-disable-line no-new
    }) || _fails(function () {
      new $ArrayBuffer(); // eslint-disable-line no-new
      new $ArrayBuffer(1.5); // eslint-disable-line no-new
      new $ArrayBuffer(NaN); // eslint-disable-line no-new
      return $ArrayBuffer.name != ARRAY_BUFFER;
    })) {
      $ArrayBuffer = function ArrayBuffer(length) {
        _anInstance(this, $ArrayBuffer);
        return new BaseBuffer(_toIndex(length));
      };
      var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
      for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
        if (!((key = keys[j++]) in $ArrayBuffer)) _hide($ArrayBuffer, key, BaseBuffer[key]);
      }
      if (!_library) ArrayBufferProto.constructor = $ArrayBuffer;
    }
    // iOS Safari 7.x bug
    var view = new $DataView(new $ArrayBuffer(2));
    var $setInt8 = $DataView[PROTOTYPE].setInt8;
    view.setInt8(0, 2147483648);
    view.setInt8(1, 2147483649);
    if (view.getInt8(0) || !view.getInt8(1)) _redefineAll($DataView[PROTOTYPE], {
      setInt8: function setInt8(byteOffset, value) {
        $setInt8.call(this, byteOffset, value << 24 >> 24);
      },
      setUint8: function setUint8(byteOffset, value) {
        $setInt8.call(this, byteOffset, value << 24 >> 24);
      }
    }, true);
  }
  _setToStringTag($ArrayBuffer, ARRAY_BUFFER);
  _setToStringTag($DataView, DATA_VIEW);
  _hide($DataView[PROTOTYPE], _typed.VIEW, true);
  exports[ARRAY_BUFFER] = $ArrayBuffer;
  exports[DATA_VIEW] = $DataView;
});

var ArrayBuffer$1 = _global.ArrayBuffer;

var $ArrayBuffer = _typedBuffer.ArrayBuffer;
var $DataView = _typedBuffer.DataView;
var $isView = _typed.ABV && ArrayBuffer$1.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW$1 = _typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

_export(_export.G + _export.W + _export.F * (ArrayBuffer$1 !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

_export(_export.S + _export.F * !_typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || _isObject(it) && VIEW$1 in it;
  }
});

_export(_export.P + _export.U + _export.F * _fails(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(_anObject(this), start); // FF fix
    var len = _anObject(this).byteLength;
    var first = _toAbsoluteIndex(start, len);
    var final = _toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (_speciesConstructor(this, $ArrayBuffer))(_toLength(final - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < final) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    }return result;
  }
});

_setSpecies(ARRAY_BUFFER);

_export(_export.G + _export.W + _export.F * !_typed.ABV, {
  DataView: _typedBuffer.DataView
});

var _typedArray = createCommonjsModule(function (module) {
  if (_descriptors) {
    var LIBRARY = _library;
    var global = _global;
    var fails = _fails;
    var $export = _export;
    var $typed = _typed;
    var $buffer = _typedBuffer;
    var ctx = _ctx;
    var anInstance = _anInstance;
    var propertyDesc = _propertyDesc;
    var hide = _hide;
    var redefineAll = _redefineAll;
    var toInteger = _toInteger;
    var toLength = _toLength;
    var toIndex = _toIndex;
    var toAbsoluteIndex = _toAbsoluteIndex;
    var toPrimitive = _toPrimitive;
    var has = _has;
    var classof = _classof;
    var isObject = _isObject;
    var toObject = _toObject;
    var isArrayIter = _isArrayIter;
    var create = _objectCreate;
    var getPrototypeOf = _objectGpo;
    var gOPN = _objectGopn.f;
    var getIterFn = core_getIteratorMethod;
    var uid = _uid;
    var wks = _wks;
    var createArrayMethod = _arrayMethods;
    var createArrayIncludes = _arrayIncludes;
    var speciesConstructor = _speciesConstructor;
    var ArrayIterators = es6_array_iterator;
    var Iterators = _iterators;
    var $iterDetect = _iterDetect;
    var setSpecies = _setSpecies;
    var arrayFill = _arrayFill;
    var arrayCopyWithin = _arrayCopyWithin;
    var $DP = _objectDp;
    var $GOPD = _objectGopd;
    var dP = $DP.f;
    var gOPD = $GOPD.f;
    var RangeError = global.RangeError;
    var TypeError = global.TypeError;
    var Uint8Array = global.Uint8Array;
    var ARRAY_BUFFER = 'ArrayBuffer';
    var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
    var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
    var PROTOTYPE = 'prototype';
    var ArrayProto = Array[PROTOTYPE];
    var $ArrayBuffer = $buffer.ArrayBuffer;
    var $DataView = $buffer.DataView;
    var arrayForEach = createArrayMethod(0);
    var arrayFilter = createArrayMethod(2);
    var arraySome = createArrayMethod(3);
    var arrayEvery = createArrayMethod(4);
    var arrayFind = createArrayMethod(5);
    var arrayFindIndex = createArrayMethod(6);
    var arrayIncludes = createArrayIncludes(true);
    var arrayIndexOf = createArrayIncludes(false);
    var arrayValues = ArrayIterators.values;
    var arrayKeys = ArrayIterators.keys;
    var arrayEntries = ArrayIterators.entries;
    var arrayLastIndexOf = ArrayProto.lastIndexOf;
    var arrayReduce = ArrayProto.reduce;
    var arrayReduceRight = ArrayProto.reduceRight;
    var arrayJoin = ArrayProto.join;
    var arraySort = ArrayProto.sort;
    var arraySlice = ArrayProto.slice;
    var arrayToString = ArrayProto.toString;
    var arrayToLocaleString = ArrayProto.toLocaleString;
    var ITERATOR = wks('iterator');
    var TAG = wks('toStringTag');
    var TYPED_CONSTRUCTOR = uid('typed_constructor');
    var DEF_CONSTRUCTOR = uid('def_constructor');
    var ALL_CONSTRUCTORS = $typed.CONSTR;
    var TYPED_ARRAY = $typed.TYPED;
    var VIEW = $typed.VIEW;
    var WRONG_LENGTH = 'Wrong length!';

    var $map = createArrayMethod(1, function (O, length) {
      return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
    });

    var LITTLE_ENDIAN = fails(function () {
      // eslint-disable-next-line no-undef
      return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
    });

    var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
      new Uint8Array(1).set({});
    });

    var toOffset = function toOffset(it, BYTES) {
      var offset = toInteger(it);
      if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
      return offset;
    };

    var validate = function validate(it) {
      if (isObject(it) && TYPED_ARRAY in it) return it;
      throw TypeError(it + ' is not a typed array!');
    };

    var allocate = function allocate(C, length) {
      if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
        throw TypeError('It is not a typed array constructor!');
      }return new C(length);
    };

    var speciesFromList = function speciesFromList(O, list) {
      return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
    };

    var fromList = function fromList(C, list) {
      var index = 0;
      var length = list.length;
      var result = allocate(C, length);
      while (length > index) {
        result[index] = list[index++];
      }return result;
    };

    var addGetter = function addGetter(it, key, internal) {
      dP(it, key, { get: function get$$1() {
          return this._d[internal];
        } });
    };

    var $from = function from(source /* , mapfn, thisArg */) {
      var O = toObject(source);
      var aLen = arguments.length;
      var mapfn = aLen > 1 ? arguments[1] : undefined;
      var mapping = mapfn !== undefined;
      var iterFn = getIterFn(O);
      var i, length, values, result, step, iterator;
      if (iterFn != undefined && !isArrayIter(iterFn)) {
        for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
          values.push(step.value);
        }O = values;
      }
      if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
      for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
        result[i] = mapping ? mapfn(O[i], i) : O[i];
      }
      return result;
    };

    var $of = function of() /* ...items */{
      var index = 0;
      var length = arguments.length;
      var result = allocate(this, length);
      while (length > index) {
        result[index] = arguments[index++];
      }return result;
    };

    // iOS Safari 6.x fails here
    var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
      arrayToLocaleString.call(new Uint8Array(1));
    });

    var $toLocaleString = function toLocaleString() {
      return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
    };

    var proto = {
      copyWithin: function copyWithin(target, start /* , end */) {
        return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
      },
      every: function every(callbackfn /* , thisArg */) {
        return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      fill: function fill(value /* , start, end */) {
        // eslint-disable-line no-unused-vars
        return arrayFill.apply(validate(this), arguments);
      },
      filter: function filter(callbackfn /* , thisArg */) {
        return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
      },
      find: function find(predicate /* , thisArg */) {
        return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      },
      findIndex: function findIndex(predicate /* , thisArg */) {
        return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      },
      forEach: function forEach(callbackfn /* , thisArg */) {
        arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      indexOf: function indexOf(searchElement /* , fromIndex */) {
        return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
      },
      includes: function includes(searchElement /* , fromIndex */) {
        return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
      },
      join: function join(separator) {
        // eslint-disable-line no-unused-vars
        return arrayJoin.apply(validate(this), arguments);
      },
      lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) {
        // eslint-disable-line no-unused-vars
        return arrayLastIndexOf.apply(validate(this), arguments);
      },
      map: function map(mapfn /* , thisArg */) {
        return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      reduce: function reduce(callbackfn /* , initialValue */) {
        // eslint-disable-line no-unused-vars
        return arrayReduce.apply(validate(this), arguments);
      },
      reduceRight: function reduceRight(callbackfn /* , initialValue */) {
        // eslint-disable-line no-unused-vars
        return arrayReduceRight.apply(validate(this), arguments);
      },
      reverse: function reverse() {
        var that = this;
        var length = validate(that).length;
        var middle = Math.floor(length / 2);
        var index = 0;
        var value;
        while (index < middle) {
          value = that[index];
          that[index++] = that[--length];
          that[length] = value;
        }return that;
      },
      some: function some(callbackfn /* , thisArg */) {
        return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      sort: function sort(comparefn) {
        return arraySort.call(validate(this), comparefn);
      },
      subarray: function subarray(begin, end) {
        var O = validate(this);
        var length = O.length;
        var $begin = toAbsoluteIndex(begin, length);
        return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));
      }
    };

    var $slice = function slice(start, end) {
      return speciesFromList(this, arraySlice.call(validate(this), start, end));
    };

    var $set = function set$$1(arrayLike /* , offset */) {
      validate(this);
      var offset = toOffset(arguments[1], 1);
      var length = this.length;
      var src = toObject(arrayLike);
      var len = toLength(src.length);
      var index = 0;
      if (len + offset > length) throw RangeError(WRONG_LENGTH);
      while (index < len) {
        this[offset + index] = src[index++];
      }
    };

    var $iterators = {
      entries: function entries() {
        return arrayEntries.call(validate(this));
      },
      keys: function keys() {
        return arrayKeys.call(validate(this));
      },
      values: function values() {
        return arrayValues.call(validate(this));
      }
    };

    var isTAIndex = function isTAIndex(target, key) {
      return isObject(target) && target[TYPED_ARRAY] && (typeof key === 'undefined' ? 'undefined' : _typeof(key)) != 'symbol' && key in target && String(+key) == String(key);
    };
    var $getDesc = function getOwnPropertyDescriptor(target, key) {
      return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
    };
    var $setDesc = function defineProperty$$1(target, key, desc) {
      if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
        target[key] = desc.value;
        return target;
      }return dP(target, key, desc);
    };

    if (!ALL_CONSTRUCTORS) {
      $GOPD.f = $getDesc;
      $DP.f = $setDesc;
    }

    $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
      getOwnPropertyDescriptor: $getDesc,
      defineProperty: $setDesc
    });

    if (fails(function () {
      arrayToString.call({});
    })) {
      arrayToString = arrayToLocaleString = function toString() {
        return arrayJoin.call(this);
      };
    }

    var $TypedArrayPrototype$ = redefineAll({}, proto);
    redefineAll($TypedArrayPrototype$, $iterators);
    hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
    redefineAll($TypedArrayPrototype$, {
      slice: $slice,
      set: $set,
      constructor: function constructor() {/* noop */},
      toString: arrayToString,
      toLocaleString: $toLocaleString
    });
    addGetter($TypedArrayPrototype$, 'buffer', 'b');
    addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
    addGetter($TypedArrayPrototype$, 'byteLength', 'l');
    addGetter($TypedArrayPrototype$, 'length', 'e');
    dP($TypedArrayPrototype$, TAG, {
      get: function get$$1() {
        return this[TYPED_ARRAY];
      }
    });

    // eslint-disable-next-line max-statements
    module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
      CLAMPED = !!CLAMPED;
      var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
      var GETTER = 'get' + KEY;
      var SETTER = 'set' + KEY;
      var TypedArray = global[NAME];
      var Base = TypedArray || {};
      var TAC = TypedArray && getPrototypeOf(TypedArray);
      var FORCED = !TypedArray || !$typed.ABV;
      var O = {};
      var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
      var getter = function getter(that, index) {
        var data = that._d;
        return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
      };
      var setter = function setter(that, index, value) {
        var data = that._d;
        if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
        data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
      };
      var addElement = function addElement(that, index) {
        dP(that, index, {
          get: function get$$1() {
            return getter(this, index);
          },
          set: function set$$1(value) {
            return setter(this, index, value);
          },
          enumerable: true
        });
      };
      if (FORCED) {
        TypedArray = wrapper(function (that, data, $offset, $length) {
          anInstance(that, TypedArray, NAME, '_d');
          var index = 0;
          var offset = 0;
          var buffer, byteLength, length, klass;
          if (!isObject(data)) {
            length = toIndex(data);
            byteLength = length * BYTES;
            buffer = new $ArrayBuffer(byteLength);
          } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
            buffer = data;
            offset = toOffset($offset, BYTES);
            var $len = data.byteLength;
            if ($length === undefined) {
              if ($len % BYTES) throw RangeError(WRONG_LENGTH);
              byteLength = $len - offset;
              if (byteLength < 0) throw RangeError(WRONG_LENGTH);
            } else {
              byteLength = toLength($length) * BYTES;
              if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
            }
            length = byteLength / BYTES;
          } else if (TYPED_ARRAY in data) {
            return fromList(TypedArray, data);
          } else {
            return $from.call(TypedArray, data);
          }
          hide(that, '_d', {
            b: buffer,
            o: offset,
            l: byteLength,
            e: length,
            v: new $DataView(buffer)
          });
          while (index < length) {
            addElement(that, index++);
          }
        });
        TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
        hide(TypedArrayPrototype, 'constructor', TypedArray);
      } else if (!fails(function () {
        TypedArray(1);
      }) || !fails(function () {
        new TypedArray(-1); // eslint-disable-line no-new
      }) || !$iterDetect(function (iter) {
        new TypedArray(); // eslint-disable-line no-new
        new TypedArray(null); // eslint-disable-line no-new
        new TypedArray(1.5); // eslint-disable-line no-new
        new TypedArray(iter); // eslint-disable-line no-new
      }, true)) {
        TypedArray = wrapper(function (that, data, $offset, $length) {
          anInstance(that, TypedArray, NAME);
          var klass;
          // `ws` module bug, temporarily remove validation length for Uint8Array
          // https://github.com/websockets/ws/pull/645
          if (!isObject(data)) return new Base(toIndex(data));
          if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
            return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
          }
          if (TYPED_ARRAY in data) return fromList(TypedArray, data);
          return $from.call(TypedArray, data);
        });
        arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
          if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
        });
        TypedArray[PROTOTYPE] = TypedArrayPrototype;
        if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
      }
      var $nativeIterator = TypedArrayPrototype[ITERATOR];
      var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
      var $iterator = $iterators.values;
      hide(TypedArray, TYPED_CONSTRUCTOR, true);
      hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
      hide(TypedArrayPrototype, VIEW, true);
      hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

      if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
        dP(TypedArrayPrototype, TAG, {
          get: function get$$1() {
            return NAME;
          }
        });
      }

      O[NAME] = TypedArray;

      $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

      $export($export.S, NAME, {
        BYTES_PER_ELEMENT: BYTES
      });

      $export($export.S + $export.F * fails(function () {
        Base.of.call(TypedArray, 1);
      }), NAME, {
        from: $from,
        of: $of
      });

      if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

      $export($export.P, NAME, proto);

      setSpecies(NAME);

      $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

      $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

      if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

      $export($export.P + $export.F * fails(function () {
        new TypedArray(1).slice();
      }), NAME, { slice: $slice });

      $export($export.P + $export.F * (fails(function () {
        return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
      }) || !fails(function () {
        TypedArrayPrototype.toLocaleString.call([1, 2]);
      })), NAME, { toLocaleString: $toLocaleString });

      Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
      if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
    };
  } else module.exports = function () {/* empty */};
});

_typedArray('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

_typedArray('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

_typedArray('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

_typedArray('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

_typedArray('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

_typedArray('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

_typedArray('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

_typedArray('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

_typedArray('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)


var rApply = (_global.Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
_export(_export.S + _export.F * !_fails(function () {
  rApply(function () {/* empty */});
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = _aFunction(target);
    var L = _anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])


var rConstruct = (_global.Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = _fails(function () {
  function F() {/* empty */}
  return !(rConstruct(function () {/* empty */}, [], F) instanceof F);
});
var ARGS_BUG = !_fails(function () {
  rConstruct(function () {/* empty */});
});

_export(_export.S + _export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    _aFunction(Target);
    _anObject(args);
    var newTarget = arguments.length < 3 ? Target : _aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0:
          return new Target();
        case 1:
          return new Target(args[0]);
        case 2:
          return new Target(args[0], args[1]);
        case 3:
          return new Target(args[0], args[1], args[2]);
        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (_bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = _objectCreate(_isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return _isObject(result) ? result : instance;
  }
});

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)


// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
_export(_export.S + _export.F * _fails(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(_objectDp.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    _anObject(target);
    propertyKey = _toPrimitive(propertyKey, true);
    _anObject(attributes);
    try {
      _objectDp.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

// 26.1.4 Reflect.deleteProperty(target, propertyKey)

var gOPD$3 = _objectGopd.f;

_export(_export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD$3(_anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

// 26.1.5 Reflect.enumerate(target)


var Enumerate = function Enumerate(iterated) {
  this._t = _anObject(iterated); // target
  this._i = 0; // next index
  var keys = this._k = []; // keys
  var key;
  for (key in iterated) {
    keys.push(key);
  }
};
_iterCreate(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

_export(_export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

// 26.1.6 Reflect.get(target, propertyKey [, receiver])


function get$1(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (_anObject(target) === receiver) return target[propertyKey];
  if (desc = _objectGopd.f(target, propertyKey)) return _has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
  if (_isObject(proto = _objectGpo(target))) return get$1(proto, propertyKey, receiver);
}

_export(_export.S, 'Reflect', { get: get$1 });

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)


_export(_export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return _objectGopd.f(_anObject(target), propertyKey);
  }
});

// 26.1.8 Reflect.getPrototypeOf(target)


_export(_export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return _objectGpo(_anObject(target));
  }
});

// 26.1.9 Reflect.has(target, propertyKey)


_export(_export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

// 26.1.10 Reflect.isExtensible(target)


var $isExtensible = Object.isExtensible;

_export(_export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    _anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

// all object keys, includes non-enumerable and symbols


var Reflect$1 = _global.Reflect;
var _ownKeys = Reflect$1 && Reflect$1.ownKeys || function ownKeys(it) {
  var keys = _objectGopn.f(_anObject(it));
  var getSymbols = _objectGops.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

// 26.1.11 Reflect.ownKeys(target)


_export(_export.S, 'Reflect', { ownKeys: _ownKeys });

// 26.1.12 Reflect.preventExtensions(target)


var $preventExtensions = Object.preventExtensions;

_export(_export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    _anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])


function set$1(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = _objectGopd.f(_anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (_isObject(proto = _objectGpo(target))) {
      return set$1(proto, propertyKey, V, receiver);
    }
    ownDesc = _propertyDesc(0);
  }
  if (_has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !_isObject(receiver)) return false;
    if (existingDescriptor = _objectGopd.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      _objectDp.f(receiver, propertyKey, existingDescriptor);
    } else _objectDp.f(receiver, propertyKey, _propertyDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

_export(_export.S, 'Reflect', { set: set$1 });

// 26.1.14 Reflect.setPrototypeOf(target, proto)


if (_setProto) _export(_export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    _setProto.check(target, proto);
    try {
      _setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

// https://github.com/tc39/Array.prototype.includes

var $includes = _arrayIncludes(true);

_export(_export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

_addToUnscopables('includes');

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray


var IS_CONCAT_SPREADABLE = _wks('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? _ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (_isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : _isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, _toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

var _flattenIntoArray = flattenIntoArray;

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap


_export(_export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = _toObject(this);
    var sourceLen, A;
    _aFunction(callbackfn);
    sourceLen = _toLength(O.length);
    A = _arraySpeciesCreate(O, 0);
    _flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

_addToUnscopables('flatMap');

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten


_export(_export.P, 'Array', {
  flatten: function flatten() /* depthArg = 1 */{
    var depthArg = arguments[0];
    var O = _toObject(this);
    var sourceLen = _toLength(O.length);
    var A = _arraySpeciesCreate(O, 0);
    _flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : _toInteger(depthArg));
    return A;
  }
});

_addToUnscopables('flatten');

// https://github.com/mathiasbynens/String.prototype.at

var $at$2 = _stringAt(true);

_export(_export.P, 'String', {
  at: function at(pos) {
    return $at$2(this, pos);
  }
});

// https://github.com/tc39/proposal-string-pad-start-end


var _stringPad = function _stringPad(that, maxLength, fillString, left) {
  var S = String(_defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = _toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = _stringRepeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

var navigator = _global.navigator;

var _userAgent = navigator && navigator.userAgent || '';

// https://github.com/tc39/proposal-string-pad-start-end


// https://github.com/zloirock/core-js/issues/280
_export(_export.P + _export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(_userAgent), 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

// https://github.com/tc39/proposal-string-pad-start-end


// https://github.com/zloirock/core-js/issues/280
_export(_export.P + _export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(_userAgent), 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
_stringTrim('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
_stringTrim('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

// https://tc39.github.io/String.prototype.matchAll/


var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function $RegExpStringIterator(regexp, string) {
  this._r = regexp;
  this._s = string;
};

_iterCreate($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

_export(_export.P, 'String', {
  matchAll: function matchAll(regexp) {
    _defined(this);
    if (!_isRegexp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : _flags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = _toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});

_wksDefine('asyncIterator');

_wksDefine('observable');

// https://github.com/tc39/proposal-object-getownpropertydescriptors


_export(_export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = _toIobject(object);
    var getDesc = _objectGopd.f;
    var keys = _ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) _createProperty(result, key, desc);
    }
    return result;
  }
});

var isEnum$1 = _objectPie.f;
var _objectToArray = function _objectToArray(isEntries) {
  return function (it) {
    var O = _toIobject(it);
    var keys = _objectKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      if (isEnum$1.call(O, key = keys[i++])) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }return result;
  };
};

// https://github.com/tc39/proposal-object-values-entries

var $values = _objectToArray(false);

_export(_export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

// https://github.com/tc39/proposal-object-values-entries

var $entries = _objectToArray(true);

_export(_export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

// Forced replacement prototype accessors methods
var _objectForcedPam = _library || !_fails(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () {/* empty */});
  delete _global[K];
});

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
_descriptors && _export(_export.P + _objectForcedPam, 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    _objectDp.f(_toObject(this), P, { get: _aFunction(getter), enumerable: true, configurable: true });
  }
});

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
_descriptors && _export(_export.P + _objectForcedPam, 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    _objectDp.f(_toObject(this), P, { set: _aFunction(setter), enumerable: true, configurable: true });
  }
});

var getOwnPropertyDescriptor = _objectGopd.f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
_descriptors && _export(_export.P + _objectForcedPam, 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = _toObject(this);
    var K = _toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = _objectGpo(O));
  }
});

var getOwnPropertyDescriptor$1 = _objectGopd.f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
_descriptors && _export(_export.P + _objectForcedPam, 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = _toObject(this);
    var K = _toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor$1(O, K)) return D.set;
    } while (O = _objectGpo(O));
  }
});

var _arrayFromIterable = function _arrayFromIterable(iter, ITERATOR) {
  var result = [];
  _forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

// https://github.com/DavidBruant/Map-Set.prototype.toJSON


var _collectionToJson = function _collectionToJson(NAME) {
  return function toJSON() {
    if (_classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return _arrayFromIterable(this);
  };
};

// https://github.com/DavidBruant/Map-Set.prototype.toJSON


_export(_export.P + _export.R, 'Map', { toJSON: _collectionToJson('Map') });

// https://github.com/DavidBruant/Map-Set.prototype.toJSON


_export(_export.P + _export.R, 'Set', { toJSON: _collectionToJson('Set') });

// https://tc39.github.io/proposal-setmap-offrom/


var _setCollectionOf = function _setCollectionOf(COLLECTION) {
  _export(_export.S, COLLECTION, { of: function of() {
      var length = arguments.length;
      var A = new Array(length);
      while (length--) {
        A[length] = arguments[length];
      }return new this(A);
    } });
};

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
_setCollectionOf('Map');

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
_setCollectionOf('Set');

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
_setCollectionOf('WeakMap');

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
_setCollectionOf('WeakSet');

// https://tc39.github.io/proposal-setmap-offrom/


var _setCollectionFrom = function _setCollectionFrom(COLLECTION) {
  _export(_export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
      var mapFn = arguments[1];
      var mapping, A, n, cb;
      _aFunction(this);
      mapping = mapFn !== undefined;
      if (mapping) _aFunction(mapFn);
      if (source == undefined) return new this();
      A = [];
      if (mapping) {
        n = 0;
        cb = _ctx(mapFn, arguments[2], 2);
        _forOf(source, false, function (nextItem) {
          A.push(cb(nextItem, n++));
        });
      } else {
        _forOf(source, false, A.push, A);
      }
      return new this(A);
    } });
};

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
_setCollectionFrom('Map');

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
_setCollectionFrom('Set');

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
_setCollectionFrom('WeakMap');

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
_setCollectionFrom('WeakSet');

// https://github.com/tc39/proposal-global


_export(_export.G, { global: _global });

// https://github.com/tc39/proposal-global


_export(_export.S, 'System', { global: _global });

// https://github.com/ljharb/proposal-is-error


_export(_export.S, 'Error', {
  isError: function isError(it) {
    return _cof(it) === 'Error';
  }
});

// https://rwaldron.github.io/proposal-math-extensions/


_export(_export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});

// https://rwaldron.github.io/proposal-math-extensions/


_export(_export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });

// https://rwaldron.github.io/proposal-math-extensions/

var RAD_PER_DEG = 180 / Math.PI;

_export(_export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});

// https://rwaldron.github.io/proposal-math-extensions/
var _mathScale = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (arguments.length === 0
  // eslint-disable-next-line no-self-compare
  || x != x
  // eslint-disable-next-line no-self-compare
  || inLow != inLow
  // eslint-disable-next-line no-self-compare
  || inHigh != inHigh
  // eslint-disable-next-line no-self-compare
  || outLow != outLow
  // eslint-disable-next-line no-self-compare
  || outHigh != outHigh) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};

// https://rwaldron.github.io/proposal-math-extensions/


_export(_export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return _mathFround(_mathScale(x, inLow, inHigh, outLow, outHigh));
  }
});

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703


_export(_export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703


_export(_export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703


_export(_export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});

// https://rwaldron.github.io/proposal-math-extensions/


_export(_export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });

// https://rwaldron.github.io/proposal-math-extensions/

var DEG_PER_RAD = Math.PI / 180;

_export(_export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});

// https://rwaldron.github.io/proposal-math-extensions/


_export(_export.S, 'Math', { scale: _mathScale });

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703


_export(_export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});

// http://jfbastien.github.io/papers/Math.signbit.html


_export(_export.S, 'Math', { signbit: function signbit(x) {
    // eslint-disable-next-line no-self-compare
    return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
  } });

_export(_export.P + _export.R, 'Promise', { 'finally': function _finally(onFinally) {
    var C = _speciesConstructor(this, _core.Promise || _global.Promise);
    var isFunction = typeof onFinally == 'function';
    return this.then(isFunction ? function (x) {
      return _promiseResolve(C, onFinally()).then(function () {
        return x;
      });
    } : onFinally, isFunction ? function (e) {
      return _promiseResolve(C, onFinally()).then(function () {
        throw e;
      });
    } : onFinally);
  } });

// https://github.com/tc39/proposal-promise-try


_export(_export.S, 'Promise', { 'try': function _try(callbackfn) {
    var promiseCapability = _newPromiseCapability.f(this);
    var result = _perform(callbackfn);
    (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
    return promiseCapability.promise;
  } });

var shared$1 = _shared('metadata');
var store$1 = shared$1.store || (shared$1.store = new es6_weakMap());

var getOrCreateMetadataMap = function getOrCreateMetadataMap(target, targetKey, create) {
  var targetMetadata = store$1.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store$1.set(target, targetMetadata = new es6_map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new es6_map());
  }return keyMetadata;
};
var ordinaryHasOwnMetadata = function ordinaryHasOwnMetadata(MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function ordinaryGetOwnMetadata(MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function ordinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function ordinaryOwnMetadataKeys(target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) {
    keys.push(key);
  });
  return keys;
};
var toMetaKey = function toMetaKey(it) {
  return it === undefined || (typeof it === 'undefined' ? 'undefined' : _typeof(it)) == 'symbol' ? it : String(it);
};
var exp$3 = function exp(O) {
  _export(_export.S, 'Reflect', O);
};

var _metadata = {
  store: store$1,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp$3
};

var toMetaKey$1 = _metadata.key;
var ordinaryDefineOwnMetadata$1 = _metadata.set;

_metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
    ordinaryDefineOwnMetadata$1(metadataKey, metadataValue, _anObject(target), toMetaKey$1(targetKey));
  } });

var toMetaKey$2 = _metadata.key;
var getOrCreateMetadataMap$1 = _metadata.map;
var store$2 = _metadata.store;

_metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
    var targetKey = arguments.length < 3 ? undefined : toMetaKey$2(arguments[2]);
    var metadataMap = getOrCreateMetadataMap$1(_anObject(target), targetKey, false);
    if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
    if (metadataMap.size) return true;
    var targetMetadata = store$2.get(target);
    targetMetadata['delete'](targetKey);
    return !!targetMetadata.size || store$2['delete'](target);
  } });

var ordinaryHasOwnMetadata$1 = _metadata.has;
var ordinaryGetOwnMetadata$1 = _metadata.get;
var toMetaKey$3 = _metadata.key;

var ordinaryGetMetadata = function ordinaryGetMetadata(MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata$1(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata$1(MetadataKey, O, P);
  var parent = _objectGpo(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

_metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
    return ordinaryGetMetadata(metadataKey, _anObject(target), arguments.length < 3 ? undefined : toMetaKey$3(arguments[2]));
  } });

var ordinaryOwnMetadataKeys$1 = _metadata.keys;
var toMetaKey$4 = _metadata.key;

var ordinaryMetadataKeys = function ordinaryMetadataKeys(O, P) {
  var oKeys = ordinaryOwnMetadataKeys$1(O, P);
  var parent = _objectGpo(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? _arrayFromIterable(new es6_set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

_metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
    return ordinaryMetadataKeys(_anObject(target), arguments.length < 2 ? undefined : toMetaKey$4(arguments[1]));
  } });

var ordinaryGetOwnMetadata$2 = _metadata.get;
var toMetaKey$5 = _metadata.key;

_metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
    return ordinaryGetOwnMetadata$2(metadataKey, _anObject(target), arguments.length < 3 ? undefined : toMetaKey$5(arguments[2]));
  } });

var ordinaryOwnMetadataKeys$2 = _metadata.keys;
var toMetaKey$6 = _metadata.key;

_metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
    return ordinaryOwnMetadataKeys$2(_anObject(target), arguments.length < 2 ? undefined : toMetaKey$6(arguments[1]));
  } });

var ordinaryHasOwnMetadata$2 = _metadata.has;
var toMetaKey$7 = _metadata.key;

var ordinaryHasMetadata = function ordinaryHasMetadata(MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata$2(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = _objectGpo(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

_metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
    return ordinaryHasMetadata(metadataKey, _anObject(target), arguments.length < 3 ? undefined : toMetaKey$7(arguments[2]));
  } });

var ordinaryHasOwnMetadata$3 = _metadata.has;
var toMetaKey$8 = _metadata.key;

_metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
    return ordinaryHasOwnMetadata$3(metadataKey, _anObject(target), arguments.length < 3 ? undefined : toMetaKey$8(arguments[2]));
  } });

var toMetaKey$9 = _metadata.key;
var ordinaryDefineOwnMetadata$2 = _metadata.set;

_metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
    return function decorator(target, targetKey) {
      ordinaryDefineOwnMetadata$2(metadataKey, metadataValue, (targetKey !== undefined ? _anObject : _aFunction)(target), toMetaKey$9(targetKey));
    };
  } });

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask

var microtask$1 = _microtask();
var process$3 = _global.process;
var isNode$2 = _cof(process$3) == 'process';

_export(_export.G, {
  asap: function asap(fn) {
    var domain = isNode$2 && process$3.domain;
    microtask$1(domain ? domain.bind(fn) : fn);
  }
});

// https://github.com/zenparsing/es-observable


var microtask$2 = _microtask();
var OBSERVABLE = _wks('observable');

var RETURN = _forOf.RETURN;

var getMethod = function getMethod(fn) {
  return fn == null ? undefined : _aFunction(fn);
};

var cleanupSubscription = function cleanupSubscription(subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function subscriptionClosed(subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function closeSubscription(subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function Subscription(observer, subscriber) {
  _anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function cleanup() {
        subscription.unsubscribe();
      };else _aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  }if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = _redefineAll({}, {
  unsubscribe: function unsubscribe() {
    closeSubscription(this);
  }
});

var SubscriptionObserver = function SubscriptionObserver(subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = _redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    }cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      }cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  _anInstance(this, $Observable, 'Observable', '_f')._f = _aFunction(subscriber);
};

_redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (_core.Promise || _global.Promise)(function (resolve, reject) {
      _aFunction(fn);
      var subscription = that.subscribe({
        next: function next(value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

_redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(_anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = _anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask$2(function () {
        if (!done) {
          try {
            if (_forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          }observer.complete();
        }
      });
      return function () {
        done = true;
      };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) {
      items[i] = arguments[i++];
    }return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask$2(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          }observer.complete();
        }
      });
      return function () {
        done = true;
      };
    });
  }
});

_hide($Observable.prototype, OBSERVABLE, function () {
  return this;
});

_export(_export.G, { Observable: $Observable });

_setSpecies('Observable');

// ie9- setTimeout & setInterval additional parameters fix


var slice = [].slice;
var MSIE = /MSIE .\./.test(_userAgent); // <- dirty ie9- check
var wrap$1 = function wrap(set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
_export(_export.G + _export.B + _export.F * MSIE, {
  setTimeout: wrap$1(_global.setTimeout),
  setInterval: wrap$1(_global.setInterval)
});

_export(_export.G + _export.B, {
  setImmediate: _task.set,
  clearImmediate: _task.clear
});

var ITERATOR$4 = _wks('iterator');
var TO_STRING_TAG = _wks('toStringTag');
var ArrayValues = _iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = _objectKeys(DOMIterables), i$2 = 0; i$2 < collections.length; i$2++) {
  var NAME$1 = collections[i$2];
  var explicit = DOMIterables[NAME$1];
  var Collection = _global[NAME$1];
  var proto$3 = Collection && Collection.prototype;
  var key$1;
  if (proto$3) {
    if (!proto$3[ITERATOR$4]) _hide(proto$3, ITERATOR$4, ArrayValues);
    if (!proto$3[TO_STRING_TAG]) _hide(proto$3, TO_STRING_TAG, NAME$1);
    _iterators[NAME$1] = ArrayValues;
    if (explicit) for (key$1 in es6_array_iterator) {
      if (!proto$3[key$1]) _redefine(proto$3, key$1, es6_array_iterator[key$1], true);
    }
  }
}

var runtime = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
   * additional grant of patent rights can be found in the PATENTS file in
   * the same directory.
   */

  !function (global) {
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    var inModule = 'object' === "object";
    var runtime = global.regeneratorRuntime;
    if (runtime) {
      if (inModule) {
        // If regeneratorRuntime is defined globally and we're in a module,
        // make the exports object identical to regeneratorRuntime.
        module.exports = runtime;
      }
      // Don't bother evaluating the rest of this file if the runtime was
      // already defined globally.
      return;
    }

    // Define the runtime globally (as expected by generated code) as either
    // module.exports (if we're in a module) or a new, empty object.
    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    runtime.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction ||
      // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    runtime.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    runtime.awrap = function (arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration. If the Promise is rejected, however, the
            // result for this iteration will be rejected with the same
            // reason. Note that rejections of yielded Promises are not
            // thrown back into the generator function, as is the case
            // when an awaited Promise is rejected. This difference in
            // behavior between yield and await is important, because it
            // allows the consumer to decide what to do with the yielded
            // rejection (swallow it and continue, manually .throw it back
            // into the generator, abandon iteration, whatever). With
            // await, by contrast, there is no opportunity to examine the
            // rejection reason outside the generator function, so the
            // only option is to throw it from the await expression, and
            // let the generator function handle the exception.
            result.value = unwrapped;
            resolve(result);
          }, reject);
        }
      }

      if (_typeof(global.process) === "object" && global.process.domain) {
        invoke = global.process.domain.bind(invoke);
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
        // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };
    runtime.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));

      return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator.return) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    Gp[toStringTagSymbol] = "Generator";

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function (object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    runtime.values = values;

    function doneResult() {
      return { value: undefined, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },

      stop: function stop() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
  }(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  _typeof(commonjsGlobal) === "object" ? commonjsGlobal : (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" ? window : (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" ? self : commonjsGlobal);
});

var _replacer = function _replacer(regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};

// https://github.com/benjamingr/RexExp.escape

var $re = _replacer(/[\\^$*+?.()|[\]{}]/g, '\\$&');

_export(_export.S, 'RegExp', { escape: function escape(it) {
    return $re(it);
  } });

var _escape = _core.RegExp.escape;

if (commonjsGlobal._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
commonjsGlobal._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define$1(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define$1(String.prototype, "padLeft", "".padStart);
define$1(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define$1(Array, key, Function.call.bind([][key]));
});

var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;

var isArray$1 = function isArray(arr) {
	if (typeof Array.isArray === 'function') {
		return Array.isArray(arr);
	}

	return toStr.call(arr) === '[object Array]';
};

var isPlainObject = function isPlainObject(obj) {
	if (!obj || toStr.call(obj) !== '[object Object]') {
		return false;
	}

	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	// Not own constructor property must be Object
	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
		return false;
	}

	// Own properties are enumerated firstly, so to speed up,
	// if last one is own, then all properties are own.
	var key;
	for (key in obj) {/**/}

	return typeof key === 'undefined' || hasOwn.call(obj, key);
};

var extend = function extend() {
	var options, name, src, copy, copyIsArray, clone;
	var target = arguments[0];
	var i = 1;
	var length = arguments.length;
	var deep = false;

	// Handle a deep copy situation
	if (typeof target === 'boolean') {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}
	if (target == null || (typeof target === 'undefined' ? 'undefined' : _typeof(target)) !== 'object' && typeof target !== 'function') {
		target = {};
	}

	for (; i < length; ++i) {
		options = arguments[i];
		// Only deal with non-null/undefined values
		if (options != null) {
			// Extend the base object
			for (name in options) {
				src = target[name];
				copy = options[name];

				// Prevent never-ending loop
				if (target !== copy) {
					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray$1(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && isArray$1(src) ? src : [];
						} else {
							clone = src && isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[name] = extend(deep, clone, copy);

						// Don't bring in undefined values
					} else if (typeof copy !== 'undefined') {
						target[name] = copy;
					}
				}
			}
		}
	}

	// Return the modified object
	return target;
};

var bail_1 = bail;

function bail(err) {
  if (err) {
    throw err;
  }
}

var own = {}.hasOwnProperty;

var unistUtilStringifyPosition = stringify;

function stringify(value) {
  /* Nothing. */
  if (!value || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
    return null;
  }

  /* Node. */
  if (own.call(value, 'position') || own.call(value, 'type')) {
    return location(value.position);
  }

  /* Location. */
  if (own.call(value, 'start') || own.call(value, 'end')) {
    return location(value);
  }

  /* Position. */
  if (own.call(value, 'line') || own.call(value, 'column')) {
    return position(value);
  }

  /* ? */
  return null;
}

function position(pos) {
  if (!pos || (typeof pos === 'undefined' ? 'undefined' : _typeof(pos)) !== 'object') {
    pos = {};
  }

  return index(pos.line) + ':' + index(pos.column);
}

function location(loc) {
  if (!loc || (typeof loc === 'undefined' ? 'undefined' : _typeof(loc)) !== 'object') {
    loc = {};
  }

  return position(loc.start) + '-' + position(loc.end);
}

function index(value) {
  return value && typeof value === 'number' ? value : 1;
}

var vfileMessage = VMessage;

/* Inherit from `Error#`. */
function VMessagePrototype() {}
VMessagePrototype.prototype = Error.prototype;
VMessage.prototype = new VMessagePrototype();

/* Message properties. */
var proto$4 = VMessage.prototype;

proto$4.file = '';
proto$4.name = '';
proto$4.reason = '';
proto$4.message = '';
proto$4.stack = '';
proto$4.fatal = null;
proto$4.column = null;
proto$4.line = null;

/* Construct a new VMessage.
 *
 * Note: We cannot invoke `Error` on the created context,
 * as that adds readonly `line` and `column` attributes on
 * Safari 9, thus throwing and failing the data. */
function VMessage(reason, position, origin) {
  var parts;
  var range;
  var location;

  if (typeof position === 'string') {
    origin = position;
    position = null;
  }

  parts = parseOrigin(origin);
  range = unistUtilStringifyPosition(position) || '1:1';

  location = {
    start: { line: null, column: null },
    end: { line: null, column: null }
  };

  /* Node. */
  if (position && position.position) {
    position = position.position;
  }

  if (position) {
    /* Position. */
    if (position.start) {
      location = position;
      position = position.start;
    } else {
      /* Point. */
      location.start = position;
    }
  }

  if (reason.stack) {
    this.stack = reason.stack;
    reason = reason.message;
  }

  this.message = reason;
  this.name = range;
  this.reason = reason;
  this.line = position ? position.line : null;
  this.column = position ? position.column : null;
  this.location = location;
  this.source = parts[0];
  this.ruleId = parts[1];
}

function parseOrigin(origin) {
  var result = [null, null];
  var index;

  if (typeof origin === 'string') {
    index = origin.indexOf(':');

    if (index === -1) {
      result[1] = origin;
    } else {
      result[0] = origin.slice(0, index);
      result[1] = origin.slice(index + 1);
    }
  }

  return result;
}

var global$2 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};

// shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
if (typeof global$2.setTimeout === 'function') {
    cachedSetTimeout = setTimeout;
}
if (typeof global$2.clearTimeout === 'function') {
    cachedClearTimeout = clearTimeout;
}

function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue$1 = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue$1 = currentQueue.concat(queue$1);
    } else {
        queueIndex = -1;
    }
    if (queue$1.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue$1.length;
    while (len) {
        currentQueue = queue$1;
        queue$1 = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue$1.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
function nextTick(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue$1.push(new Item(fun, args));
    if (queue$1.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
}
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
var title = 'browser';
var platform = 'browser';
var browser = true;
var env = {};
var argv = [];
var version = ''; // empty string to avoid regexp issues
var versions = {};
var release = {};
var config = {};

function noop() {}

var on = noop;
var addListener = noop;
var once = noop;
var off = noop;
var removeListener = noop;
var removeAllListeners = noop;
var emit = noop;

function binding(name) {
    throw new Error('process.binding is not supported');
}

function cwd() {
    return '/';
}
function chdir(dir) {
    throw new Error('process.chdir is not supported');
}
function umask() {
    return 0;
}

// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance = global$2.performance || {};
var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {
    return new Date().getTime();
};

// generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function hrtime(previousTimestamp) {
    var clocktime = performanceNow.call(performance) * 1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor(clocktime % 1 * 1e9);
    if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds < 0) {
            seconds--;
            nanoseconds += 1e9;
        }
    }
    return [seconds, nanoseconds];
}

var startTime = new Date();
function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
}

var process$4 = {
    nextTick: nextTick,
    title: title,
    browser: browser,
    env: env,
    argv: argv,
    version: version,
    versions: versions,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config,
    uptime: uptime
};

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function splitPath(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
function resolve() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = i >= 0 ? arguments[i] : '/';

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
}

// path.normalize(path)
// posix version
function normalize(path) {
  var isPathAbsolute = isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function (p) {
    return !!p;
  }), !isPathAbsolute).join('/');

  if (!path && !isPathAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isPathAbsolute ? '/' : '') + path;
}

// posix version
function isAbsolute(path) {
  return path.charAt(0) === '/';
}

// posix version
function join() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return normalize(filter(paths, function (p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
}

// path.relative(from, to)
// posix version
function relative(from, to) {
  from = resolve(from).substr(1);
  to = resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
}

var sep = '/';
var delimiter = ':';

function dirname(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
}

function basename(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
}

function extname(path) {
  return splitPath(path)[3];
}
var path = {
  extname: extname,
  basename: basename,
  dirname: dirname,
  sep: sep,
  delimiter: delimiter,
  relative: relative,
  join: join,
  isAbsolute: isAbsolute,
  normalize: normalize,
  resolve: resolve
};
function filter(xs, f) {
  if (xs.filter) return xs.filter(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    if (f(xs[i], i, xs)) res.push(xs[i]);
  }
  return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
  return str.substr(start, len);
} : function (str, start, len) {
  if (start < 0) start = str.length + start;
  return str.substr(start, len);
};

var path$1 = Object.freeze({
	resolve: resolve,
	normalize: normalize,
	isAbsolute: isAbsolute,
	join: join,
	relative: relative,
	sep: sep,
	delimiter: delimiter,
	dirname: dirname,
	basename: basename,
	extname: extname,
	default: path
});

var path$2 = ( path$1 && path ) || path$1;

function replaceExt(npath, ext) {
  if (typeof npath !== 'string') {
    return npath;
  }

  if (npath.length === 0) {
    return npath;
  }

  var nFileName = path$2.basename(npath, path$2.extname(npath)) + ext;
  return path$2.join(path$2.dirname(npath), nFileName);
}

var replaceExt_1 = replaceExt;

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
var isBuffer_1 = function isBuffer_1(obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
};

function isBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
}

var core = VFile;

var own$1 = {}.hasOwnProperty;
var proto$5 = VFile.prototype;

proto$5.toString = toString$2;

/* Order of setting (least specific to most), we need this because
 * otherwise `{stem: 'a', path: '~/b.js'}` would throw, as a path
 * is needed before a stem can be set. */
var order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];

/* Construct a new file. */
function VFile(options) {
  var prop;
  var index;
  var length;

  if (!options) {
    options = {};
  } else if (typeof options === 'string' || isBuffer_1(options)) {
    options = { contents: options };
  } else if ('message' in options && 'messages' in options) {
    return options;
  }

  if (!(this instanceof VFile)) {
    return new VFile(options);
  }

  this.data = {};
  this.messages = [];
  this.history = [];
  this.cwd = process$4.cwd();

  /* Set path related properties in the correct order. */
  index = -1;
  length = order.length;

  while (++index < length) {
    prop = order[index];

    if (own$1.call(options, prop)) {
      this[prop] = options[prop];
    }
  }

  /* Set non-path related properties. */
  for (prop in options) {
    if (order.indexOf(prop) === -1) {
      this[prop] = options[prop];
    }
  }
}

/* Access full path (`~/index.min.js`). */
Object.defineProperty(proto$5, 'path', {
  get: function get() {
    return this.history[this.history.length - 1];
  },
  set: function set(path) {
    assertNonEmpty(path, 'path');

    if (path !== this.path) {
      this.history.push(path);
    }
  }
});

/* Access parent path (`~`). */
Object.defineProperty(proto$5, 'dirname', {
  get: function get() {
    return typeof this.path === 'string' ? path$2.dirname(this.path) : undefined;
  },
  set: function set(dirname) {
    assertPath(this.path, 'dirname');
    this.path = path$2.join(dirname || '', this.basename);
  }
});

/* Access basename (`index.min.js`). */
Object.defineProperty(proto$5, 'basename', {
  get: function get() {
    return typeof this.path === 'string' ? path$2.basename(this.path) : undefined;
  },
  set: function set(basename) {
    assertNonEmpty(basename, 'basename');
    assertPart(basename, 'basename');
    this.path = path$2.join(this.dirname || '', basename);
  }
});

/* Access extname (`.js`). */
Object.defineProperty(proto$5, 'extname', {
  get: function get() {
    return typeof this.path === 'string' ? path$2.extname(this.path) : undefined;
  },
  set: function set(extname) {
    var ext = extname || '';

    assertPart(ext, 'extname');
    assertPath(this.path, 'extname');

    if (ext) {
      if (ext.charAt(0) !== '.') {
        throw new Error('`extname` must start with `.`');
      }

      if (ext.indexOf('.', 1) !== -1) {
        throw new Error('`extname` cannot contain multiple dots');
      }
    }

    this.path = replaceExt_1(this.path, ext);
  }
});

/* Access stem (`index.min`). */
Object.defineProperty(proto$5, 'stem', {
  get: function get() {
    return typeof this.path === 'string' ? path$2.basename(this.path, this.extname) : undefined;
  },
  set: function set(stem) {
    assertNonEmpty(stem, 'stem');
    assertPart(stem, 'stem');
    this.path = path$2.join(this.dirname || '', stem + (this.extname || ''));
  }
});

/* Get the value of the file. */
function toString$2(encoding) {
  var value = this.contents || '';
  return isBuffer_1(value) ? value.toString(encoding) : String(value);
}

/* Assert that `part` is not a path (i.e., does
 * not contain `path.sep`). */
function assertPart(part, name) {
  if (part.indexOf(path$2.sep) !== -1) {
    throw new Error('`' + name + '` cannot be a path: did not expect `' + path$2.sep + '`');
  }
}

/* Assert that `part` is not empty. */
function assertNonEmpty(part, name) {
  if (!part) {
    throw new Error('`' + name + '` cannot be empty');
  }
}

/* Assert `path` exists. */
function assertPath(path, name) {
  if (!path) {
    throw new Error('Setting `' + name + '` requires `path` to be set too');
  }
}

var vfile = core;

var proto$6 = core.prototype;

proto$6.message = message;
proto$6.info = info;
proto$6.fail = fail;

/* Slight backwards compatibility.  Remove in the future. */
proto$6.warn = message;

/* Create a message with `reason` at `position`.
 * When an error is passed in as `reason`, copies the stack. */
function message(reason, position, origin) {
  var filePath = this.path;
  var message = new vfileMessage(reason, position, origin);

  if (filePath) {
    message.name = filePath + ':' + message.name;
    message.file = filePath;
  }

  message.fatal = false;

  this.messages.push(message);

  return message;
}

/* Fail. Creates a vmessage, associates it with the file,
 * and throws it. */
function fail() {
  var message = this.message.apply(this, arguments);

  message.fatal = true;

  throw message;
}

/* Info. Creates a vmessage, associates it with the file,
 * and marks the fatality as null. */
function info() {
  var message = this.message.apply(this, arguments);

  message.fatal = null;

  return message;
}

/* Expose. */

var trough_1 = trough;

/* Methods. */
var slice$1 = [].slice;

/* Create new middleware. */
function trough() {
  var fns = [];
  var middleware = {};

  middleware.run = run;
  middleware.use = use;

  return middleware;

  /* Run `fns`.  Last argument must be
   * a completion handler. */
  function run() {
    var index = -1;
    var input = slice$1.call(arguments, 0, -1);
    var done = arguments[arguments.length - 1];

    if (typeof done !== 'function') {
      throw new Error('Expected function as last argument, not ' + done);
    }

    next.apply(null, [null].concat(input));

    /* Run the next `fn`, if any. */
    function next(err) {
      var fn = fns[++index];
      var params = slice$1.call(arguments, 0);
      var values = params.slice(1);
      var length = input.length;
      var pos = -1;

      if (err) {
        done(err);
        return;
      }

      /* Copy non-nully input into values. */
      while (++pos < length) {
        if (values[pos] === null || values[pos] === undefined) {
          values[pos] = input[pos];
        }
      }

      input = values;

      /* Next or done. */
      if (fn) {
        wrap$2(fn, next).apply(null, input);
      } else {
        done.apply(null, [null].concat(input));
      }
    }
  }

  /* Add `fn` to the list. */
  function use(fn) {
    if (typeof fn !== 'function') {
      throw new Error('Expected `fn` to be a function, not ' + fn);
    }

    fns.push(fn);

    return middleware;
  }
}

/* Wrap `fn`.  Can be sync or async; return a promise,
 * receive a completion handler, return new values and
 * errors. */
function wrap$2(fn, next) {
  var invoked;

  return wrapped;

  function wrapped() {
    var params = slice$1.call(arguments, 0);
    var callback = fn.length > params.length;
    var result;

    if (callback) {
      params.push(done);
    }

    try {
      result = fn.apply(null, params);
    } catch (err) {
      /* Well, this is quite the pickle.  `fn` received
       * a callback and invoked it (thus continuing the
       * pipeline), but later also threw an error.
       * We’re not about to restart the pipeline again,
       * so the only thing left to do is to throw the
       * thing instea. */
      if (callback && invoked) {
        throw err;
      }

      return done(err);
    }

    if (!callback) {
      if (result && typeof result.then === 'function') {
        result.then(then, done);
      } else if (result instanceof Error) {
        done(result);
      } else {
        then(result);
      }
    }
  }

  /* Invoke `next`, only once. */
  function done() {
    if (!invoked) {
      invoked = true;

      next.apply(null, arguments);
    }
  }

  /* Invoke `done` with one value.
   * Tracks if an error is passed, too. */
  function then(value) {
    done(null, value);
  }
}

var toString$3 = Object.prototype.toString;

var xIsString = isString;

function isString(obj) {
    return toString$3.call(obj) === "[object String]";
}

var xIsFunction = function isFunction(fn) {
  return Object.prototype.toString.call(fn) === '[object Function]';
};

var toString$4 = Object.prototype.toString;

var isPlainObj = function isPlainObj(x) {
	var prototype;
	return toString$4.call(x) === '[object Object]' && (prototype = Object.getPrototypeOf(x), prototype === null || prototype === Object.getPrototypeOf({}));
};

/* Dependencies. */

/* Expose a frozen processor. */
var unified_1 = unified().freeze();

var slice$2 = [].slice;
var own$2 = {}.hasOwnProperty;

/* Process pipeline. */
var pipeline = trough_1().use(pipelineParse).use(pipelineRun).use(pipelineStringify);

function pipelineParse(p, ctx) {
  ctx.tree = p.parse(ctx.file);
}

function pipelineRun(p, ctx, next) {
  p.run(ctx.tree, ctx.file, done);

  function done(err, tree, file) {
    if (err) {
      next(err);
    } else {
      ctx.tree = tree;
      ctx.file = file;
      next();
    }
  }
}

function pipelineStringify(p, ctx) {
  ctx.file.contents = p.stringify(ctx.tree, ctx.file);
}

/* Function to create the first processor. */
function unified() {
  var attachers = [];
  var transformers = trough_1();
  var namespace = {};
  var frozen = false;
  var freezeIndex = -1;

  /* Data management. */
  processor.data = data;

  /* Lock. */
  processor.freeze = freeze;

  /* Plug-ins. */
  processor.attachers = attachers;
  processor.use = use;

  /* API. */
  processor.parse = parse;
  processor.stringify = stringify;
  processor.run = run;
  processor.runSync = runSync;
  processor.process = process;
  processor.processSync = processSync;

  /* Expose. */
  return processor;

  /* Create a new processor based on the processor
   * in the current scope. */
  function processor() {
    var destination = unified();
    var length = attachers.length;
    var index = -1;

    while (++index < length) {
      destination.use.apply(null, attachers[index]);
    }

    destination.data(extend(true, {}, namespace));

    return destination;
  }

  /* Freeze: used to signal a processor that has finished
   * configuration.
   *
   * For example, take unified itself.  It’s frozen.
   * Plug-ins should not be added to it.  Rather, it should
   * be extended, by invoking it, before modifying it.
   *
   * In essence, always invoke this when exporting a
   * processor. */
  function freeze() {
    var values;
    var plugin;
    var options;
    var transformer;

    if (frozen) {
      return processor;
    }

    while (++freezeIndex < attachers.length) {
      values = attachers[freezeIndex];
      plugin = values[0];
      options = values[1];
      transformer = null;

      if (options === false) {
        continue;
      }

      if (options === true) {
        values[1] = undefined;
      }

      transformer = plugin.apply(processor, values.slice(1));

      if (xIsFunction(transformer)) {
        transformers.use(transformer);
      }
    }

    frozen = true;
    freezeIndex = Infinity;

    return processor;
  }

  /* Data management.
   * Getter / setter for processor-specific informtion. */
  function data(key, value) {
    if (xIsString(key)) {
      /* Set `key`. */
      if (arguments.length === 2) {
        assertUnfrozen('data', frozen);

        namespace[key] = value;

        return processor;
      }

      /* Get `key`. */
      return own$2.call(namespace, key) && namespace[key] || null;
    }

    /* Set space. */
    if (key) {
      assertUnfrozen('data', frozen);
      namespace = key;
      return processor;
    }

    /* Get space. */
    return namespace;
  }

  /* Plug-in management.
   *
   * Pass it:
   * *   an attacher and options,
   * *   a preset,
   * *   a list of presets, attachers, and arguments (list
   *     of attachers and options). */
  function use(value) {
    var settings;

    assertUnfrozen('use', frozen);

    if (value === null || value === undefined) {
      /* Empty */
    } else if (xIsFunction(value)) {
      addPlugin.apply(null, arguments);
    } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
      if ('length' in value) {
        addList(value);
      } else {
        addPreset(value);
      }
    } else {
      throw new Error('Expected usable value, not `' + value + '`');
    }

    if (settings) {
      namespace.settings = extend(namespace.settings || {}, settings);
    }

    return processor;

    function addPreset(result) {
      addList(result.plugins);

      if (result.settings) {
        settings = extend(settings || {}, result.settings);
      }
    }

    function add(value) {
      if (xIsFunction(value)) {
        addPlugin(value);
      } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
        if ('length' in value) {
          addPlugin.apply(null, value);
        } else {
          addPreset(value);
        }
      } else {
        throw new Error('Expected usable value, not `' + value + '`');
      }
    }

    function addList(plugins) {
      var length;
      var index;

      if (plugins === null || plugins === undefined) {
        /* Empty */
      } else if ((typeof plugins === 'undefined' ? 'undefined' : _typeof(plugins)) === 'object' && 'length' in plugins) {
        length = plugins.length;
        index = -1;

        while (++index < length) {
          add(plugins[index]);
        }
      } else {
        throw new Error('Expected a list of plugins, not `' + plugins + '`');
      }
    }

    function addPlugin(plugin, value) {
      var entry = find(plugin);

      if (entry) {
        if (isPlainObj(entry[1]) && isPlainObj(value)) {
          value = extend(entry[1], value);
        }

        entry[1] = value;
      } else {
        attachers.push(slice$2.call(arguments));
      }
    }
  }

  function find(plugin) {
    var length = attachers.length;
    var index = -1;
    var entry;

    while (++index < length) {
      entry = attachers[index];

      if (entry[0] === plugin) {
        return entry;
      }
    }
  }

  /* Parse a file (in string or VFile representation)
   * into a Unist node using the `Parser` on the
   * processor. */
  function parse(doc) {
    var file = vfile(doc);
    var Parser;

    freeze();
    Parser = processor.Parser;
    assertParser('parse', Parser);

    if (newable(Parser)) {
      return new Parser(String(file), file).parse();
    }

    return Parser(String(file), file); // eslint-disable-line new-cap
  }

  /* Run transforms on a Unist node representation of a file
   * (in string or VFile representation), async. */
  function run(node, file, cb) {
    assertNode(node);
    freeze();

    if (!cb && xIsFunction(file)) {
      cb = file;
      file = null;
    }

    if (!cb) {
      return new Promise(executor);
    }

    executor(null, cb);

    function executor(resolve, reject) {
      transformers.run(node, vfile(file), done);

      function done(err, tree, file) {
        tree = tree || node;
        if (err) {
          reject(err);
        } else if (resolve) {
          resolve(tree);
        } else {
          cb(null, tree, file);
        }
      }
    }
  }

  /* Run transforms on a Unist node representation of a file
   * (in string or VFile representation), sync. */
  function runSync(node, file) {
    var complete = false;
    var result;

    run(node, file, done);

    assertDone('runSync', 'run', complete);

    return result;

    function done(err, tree) {
      complete = true;
      bail_1(err);
      result = tree;
    }
  }

  /* Stringify a Unist node representation of a file
   * (in string or VFile representation) into a string
   * using the `Compiler` on the processor. */
  function stringify(node, doc) {
    var file = vfile(doc);
    var Compiler;

    freeze();
    Compiler = processor.Compiler;
    assertCompiler('stringify', Compiler);
    assertNode(node);

    if (newable(Compiler)) {
      return new Compiler(node, file).compile();
    }

    return Compiler(node, file); // eslint-disable-line new-cap
  }

  /* Parse a file (in string or VFile representation)
   * into a Unist node using the `Parser` on the processor,
   * then run transforms on that node, and compile the
   * resulting node using the `Compiler` on the processor,
   * and store that result on the VFile. */
  function process(doc, cb) {
    freeze();
    assertParser('process', processor.Parser);
    assertCompiler('process', processor.Compiler);

    if (!cb) {
      return new Promise(executor);
    }

    executor(null, cb);

    function executor(resolve, reject) {
      var file = vfile(doc);

      pipeline.run(processor, { file: file }, done);

      function done(err) {
        if (err) {
          reject(err);
        } else if (resolve) {
          resolve(file);
        } else {
          cb(null, file);
        }
      }
    }
  }

  /* Process the given document (in string or VFile
   * representation), sync. */
  function processSync(doc) {
    var complete = false;
    var file;

    freeze();
    assertParser('processSync', processor.Parser);
    assertCompiler('processSync', processor.Compiler);
    file = vfile(doc);

    process(file, done);

    assertDone('processSync', 'process', complete);

    return file;

    function done(err) {
      complete = true;
      bail_1(err);
    }
  }
}

/* Check if `func` is a constructor. */
function newable(value) {
  return xIsFunction(value) && keys$2(value.prototype);
}

/* Check if `value` is an object with keys. */
function keys$2(value) {
  var key;
  for (key in value) {
    return true;
  }
  return false;
}

/* Assert a parser is available. */
function assertParser(name, Parser) {
  if (!xIsFunction(Parser)) {
    throw new Error('Cannot `' + name + '` without `Parser`');
  }
}

/* Assert a compiler is available. */
function assertCompiler(name, Compiler) {
  if (!xIsFunction(Compiler)) {
    throw new Error('Cannot `' + name + '` without `Compiler`');
  }
}

/* Assert the processor is not frozen. */
function assertUnfrozen(name, frozen) {
  if (frozen) {
    throw new Error('Cannot invoke `' + name + '` on a frozen processor.\n' + 'Create a new processor first, by invoking it: ' + 'use `processor()` instead of `processor`.');
  }
}

/* Assert `node` is a Unist node. */
function assertNode(node) {
  if (!node || !xIsString(node.type)) {
    throw new Error('Expected node, got `' + node + '`');
  }
}

/* Assert that `complete` is `true`. */
function assertDone(name, asyncName, complete) {
  if (!complete) {
    throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');
  }
}

/* eslint-disable max-params */

/* Expose. */

var unistUtilIs = is$1;

/* Assert if `test` passes for `node`.
 * When a `parent` node is known the `index` of node */
function is$1(test, node, index, parent, context) {
  var hasParent = parent !== null && parent !== undefined;
  var hasIndex = index !== null && index !== undefined;
  var check = convert(test);

  if (hasIndex && (typeof index !== 'number' || index < 0 || index === Infinity)) {
    throw new Error('Expected positive finite index or child node');
  }

  if (hasParent && (!is$1(null, parent) || !parent.children)) {
    throw new Error('Expected parent node');
  }

  if (!node || !node.type || typeof node.type !== 'string') {
    return false;
  }

  if (hasParent !== hasIndex) {
    throw new Error('Expected both parent and index');
  }

  return Boolean(check.call(context, node, index, parent));
}

function convert(test) {
  if (typeof test === 'string') {
    return typeFactory(test);
  }

  if (test === null || test === undefined) {
    return ok;
  }

  if ((typeof test === 'undefined' ? 'undefined' : _typeof(test)) === 'object') {
    return ('length' in test ? anyFactory : matchesFactory)(test);
  }

  if (typeof test === 'function') {
    return test;
  }

  throw new Error('Expected function, string, or object as test');
}

function convertAll(tests) {
  var results = [];
  var length = tests.length;
  var index = -1;

  while (++index < length) {
    results[index] = convert(tests[index]);
  }

  return results;
}

/* Utility assert each property in `test` is represented
 * in `node`, and each values are strictly equal. */
function matchesFactory(test) {
  return matches;

  function matches(node) {
    var key;

    for (key in test) {
      if (node[key] !== test[key]) {
        return false;
      }
    }

    return true;
  }
}

function anyFactory(tests) {
  var checks = convertAll(tests);
  var length = checks.length;

  return matches;

  function matches() {
    var index = -1;

    while (++index < length) {
      if (checks[index].apply(this, arguments)) {
        return true;
      }
    }

    return false;
  }
}

/* Utility to convert a string into a function which checks
 * a given node’s type for said string. */
function typeFactory(test) {
  return type;

  function type(node) {
    return Boolean(node && node.type === test);
  }
}

/* Utility to return true. */
function ok() {
  return true;
}

var unistUtilVisit = visit;

var CONTINUE = true;
var SKIP = 'skip';
var EXIT = false;

visit.CONTINUE = CONTINUE;
visit.SKIP = SKIP;
visit.EXIT = EXIT;

function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  one(tree);

  /* Visit a single node. */
  function one(node, index, parent) {
    var result;

    index = index || (parent ? 0 : null);

    if (!test || node.type === test || unistUtilIs(test, node, index, parent || null)) {
      result = visitor(node, index, parent || null);
    }

    if (result === EXIT) {
      return result;
    }

    if (node.children && result !== SKIP) {
      return all(node.children, node) === EXIT ? EXIT : result;
    }

    return result;
  }

  /* Visit children in `parent`. */
  function all(children, parent) {
    var step = reverse ? -1 : 1;
    var index = (reverse ? children.length : -1) + step;
    var child;
    var result;

    while (index > -1 && index < children.length) {
      child = children[index];
      result = child && one(child, index, parent);

      if (result === EXIT) {
        return result;
      }

      index = typeof result === 'number' ? result : index + step;
    }

    return CONTINUE;
  }
}

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var inited = false;
function init() {
  inited = true;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
}

function toByteArray(b64) {
  if (!inited) {
    init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

  // base64 is 4/3 + up to two characters of the original data
  arr = new Arr(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}

function fromByteArray(uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 0x3F];
    output += lookup[tmp << 2 & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('');
}

function read(buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
}

function write(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
}

var toString$5 = {}.toString;

var isArray$2 = Array.isArray || function (arr) {
  return toString$5.call(arr) == '[object Array]';
};

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

var INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global$2.TYPED_ARRAY_SUPPORT !== undefined ? global$2.TYPED_ARRAY_SUPPORT : true;

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }

  return that;
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }
    return allocUnsafe(this, arg);
  }
  return from$1(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from$1(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from$1(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }
  return createBuffer(that, size);
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);

  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that;
}

function fromObject(that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray$2(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }
  return length | 0;
}


Buffer.isBuffer = isBuffer$1;
function internalIsBuffer(b) {
  return !!(b != null && b._isBuffer);
}

Buffer.compare = function compare(a, b) {
  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray$2(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!internalIsBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

function byteLength(string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0;

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return base64ToBytes(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!internalIsBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0;

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (internalIsBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf$1(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf$1(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf$1(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read$$1(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read$$1(arr, i) === read$$1(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read$$1(arr, i + j) !== read$$1(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write$$1(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
    // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return fromByteArray(buf);
  } else {
    return fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }
  write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }
  write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;

        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}

// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
function isBuffer$1(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer$1(obj));
}

function isFastBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer$1(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));
}

var inherits$1;
if (typeof Object.create === 'function') {
  inherits$1 = function inherits(ctor, superCtor) {
    // implementation from standard node.js 'util' module
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  inherits$1 = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function TempCtor() {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}
var inherits$2 = inherits$1;

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.




/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    _extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}

// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\x1B[' + inspect.colors[style][0] + 'm' + str + '\x1B[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function stylizeNoColor(str, styleType) {
  return str;
}

function arrayToHash(array) {
  var hash = {};

  array.forEach(function (val, idx) {
    hash[val] = true;
  });

  return hash;
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction(value.inspect) &&
  // Filter out the util module, it's inspect function is special
  value.inspect !== inspect &&
  // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString$1(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp$1(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '',
      array = false,
      braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray$3(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp$1(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp$1(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
  if (isString$1(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value)) return ctx.stylize('' + value, 'number');
  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value)) return ctx.stylize('null', 'null');
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty$1(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty$1(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function (prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray$3(ar) {
  return Array.isArray(ar);
}

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

function isNull(arg) {
  return arg === null;
}

function isNullOrUndefined(arg) {
  return arg == null;
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isString$1(arg) {
  return typeof arg === 'string';
}



function isUndefined(arg) {
  return arg === void 0;
}

function isRegExp$1(re) {
  return isObject$1(re) && objectToString(re) === '[object RegExp]';
}

function isObject$1(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
}

function isDate(d) {
  return isObject$1(d) && objectToString(d) === '[object Date]';
}

function isError(e) {
  return isObject$1(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}

function isFunction(arg) {
  return typeof arg === 'function';
}

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}



function objectToString(o) {
  return Object.prototype.toString.call(o);
}

// log is just a thin wrapper to console.log that prepends a timestamp


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
function _extend(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject$1(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
}

function hasOwnProperty$1(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
var hasOwn$1 = Object.prototype.hasOwnProperty;

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn$1.call(obj, key)) keys.push(key);
  }
  return keys;
};
// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
var pSlice = Array.prototype.slice;
var _functionsHaveNames;
function functionsHaveNames() {
  if (typeof _functionsHaveNames !== 'undefined') {
    return _functionsHaveNames;
  }
  return _functionsHaveNames = function () {
    return function foo() {}.name === 'foo';
  }();
}
function pToString(obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer$1(arrbuf)) {
    return false;
  }
  if (typeof global$2.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

function assert(value, message) {
  if (!value) fail$1(value, true, message, '==', ok$1);
}
// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!isFunction(func)) {
    return;
  }
  if (functionsHaveNames()) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = AssertionError;
function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail$1;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
}

// assert.AssertionError instanceof Error
inherits$2(AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect$1(something) {
  if (functionsHaveNames() || !isFunction(something)) {
    return inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' + name + ']';
}
function getMessage(self) {
  return truncate(inspect$1(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect$1(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail$1(actual, expected, message, operator, stackStartFunction) {
  throw new AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail$1;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok$1(value, message) {
  if (!value) fail$1(value, true, message, '==', ok$1);
}
assert.ok = ok$1;
// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);
assert.equal = equal;
function equal(actual, expected, message) {
  if (actual != expected) fail$1(actual, expected, message, '==', equal);
}

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);
assert.notEqual = notEqual;
function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail$1(actual, expected, message, '!=', notEqual);
  }
}

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);
assert.deepEqual = deepEqual;
function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail$1(actual, expected, message, 'deepEqual', deepEqual);
  }
}
assert.deepStrictEqual = deepStrictEqual;
function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail$1(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
  }
}

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer$1(actual) && isBuffer$1(expected)) {
    return compare(actual, expected) === 0;

    // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
  } else if (isDate(actual) && isDate(expected)) {
    return actual.getTime() === expected.getTime();

    // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (isRegExp$1(actual) && isRegExp$1(expected)) {
    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;

    // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
  } else if ((actual === null || (typeof actual === 'undefined' ? 'undefined' : _typeof(actual)) !== 'object') && (expected === null || (typeof expected === 'undefined' ? 'undefined' : _typeof(expected)) !== 'object')) {
    return strict ? actual === expected : actual == expected;

    // If both values are instances of typed arrays, wrap their underlying
    // ArrayBuffers in a Buffer each to increase performance
    // This optimization requires the arrays to have the same type as checked by
    // Object.prototype.toString (aka pToString). Never perform binary
    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
    // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0;

    // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer$1(actual) !== isBuffer$1(expected)) {
    return false;
  } else {
    memos = memos || { actual: [], expected: [] };

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined) return false;
  // if one is a primitive, the other must be same
  if (isPrimitive(a) || isPrimitive(b)) return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length) return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i]) return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);
assert.notDeepEqual = notDeepEqual;
function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail$1(actual, expected, message, 'notDeepEqual', notDeepEqual);
  }
}

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail$1(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);
assert.strictEqual = strictEqual;
function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail$1(actual, expected, message, '===', strictEqual);
  }
}

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
assert.notStrictEqual = notStrictEqual;
function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail$1(actual, expected, message, '!==', notStrictEqual);
  }
}

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail$1(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
    fail$1(actual, expected, 'Got unwanted exception' + message);
  }

  if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);
assert.throws = throws;
function throws(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
}

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = doesNotThrow;
function doesNotThrow(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
}

assert.ifError = ifError;
function ifError(err) {
  if (err) throw err;
}



var assert$2 = Object.freeze({
	default: assert,
	AssertionError: AssertionError,
	fail: fail$1,
	ok: ok$1,
	assert: ok$1,
	equal: equal,
	notEqual: notEqual,
	deepEqual: deepEqual,
	deepStrictEqual: deepStrictEqual,
	notDeepEqual: notDeepEqual,
	notDeepStrictEqual: notDeepStrictEqual,
	strictEqual: strictEqual,
	notStrictEqual: notStrictEqual,
	throws: throws,
	doesNotThrow: doesNotThrow,
	ifError: ifError
});

var assert$3 = ( assert$2 && assert ) || assert$2;

var wrappers = createWrapper;

var allowAll = function allowAll() {
  return true;
};

function createWrapper(tagToWrap, wrapInTags, classes) {
  var filter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : allowAll;

  if (!Array.isArray(wrapInTags)) wrapInTags = [wrapInTags];
  if (!Array.isArray(classes)) classes = [classes];
  assert$3(wrapInTags.length === classes.length, 'You should provide the same number of wrapInTags and classes');

  var visitor = function visitor(node, index, parent) {
    if (node.type === 'element' && node.tagName === tagToWrap) {
      if (filter && filter(node) && !node.__wrapped) {
        wrap$3({ wrapInTags: wrapInTags, classes: classes }, { node: node, index: index, parent: parent });
      }
    }
  };

  return visitor;
}

function wrap$3(_ref, _ref2) {
  var wrapInTags = _ref.wrapInTags,
      classes = _ref.classes;
  var node = _ref2.node,
      index = _ref2.index,
      parent = _ref2.parent;

  var wrapped = node;
  for (var i = 0; i < wrapInTags.length; i++) {
    node.__wrapped = true;
    wrapped = {
      type: 'element',
      tagName: wrapInTags[i] || 'div',
      properties: {
        class: classes[i] || []
      },
      children: [wrapped]
    };
  }
  parent.children.splice(index, 1, wrapped);
}

var immutable = extend$3;

var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

function extend$3() {
    var target = {};

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
            if (hasOwnProperty$2.call(source, key)) {
                target[key] = source[key];
            }
        }
    }

    return target;
}

var inherits_browser = createCommonjsModule(function (module) {
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function TempCtor() {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
});

/* Dependencies. */

/* Expose. */
var unherit_1 = unherit;

/**
 * Create a custom constructor which can be modified
 * without affecting the original class.
 *
 * @param {Function} Super - Super-class.
 * @return {Function} - Constructor acting like `Super`,
 *   which can be modified without affecting the original
 *   class.
 */
function unherit(Super) {
  var result;
  var key;
  var value;

  inherits_browser(Of, Super);
  inherits_browser(From, Of);

  /* Clone values. */
  result = Of.prototype;

  for (key in result) {
    value = result[key];

    if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
      result[key] = 'concat' in value ? value.concat() : immutable(value);
    }
  }

  return Of;

  /**
   * Constructor accepting a single argument,
   * which itself is an `arguments` object.
   */
  function From(parameters) {
    return Super.apply(this, parameters);
  }

  /**
   * Constructor accepting variadic arguments.
   */
  function Of() {
    if (!(this instanceof Of)) {
      return new From(arguments);
    }

    return Super.apply(this, arguments);
  }
}

/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module state-toggle
 * @fileoverview Enter/exit a state.
 */

/* eslint-env commonjs */

/* Expose. */

var stateToggle = factory;

/**
 * Construct a state `toggler`: a function which inverses
 * `property` in context based on its current value.
 * The by `toggler` returned function restores that value.
 *
 * @param {string} key - Property to toggle.
 * @param {boolean} state - Default state.
 * @param {Object?} [ctx] - Context object.
 * @return {Function} - Enter.
 */
function factory(key, state, ctx) {
  /**
   * Enter a state.
   *
   * @return {Function} - Exit state.
   */
  return function () {
    var context = ctx || this;
    var current = context[key];

    context[key] = !state;

    /**
     * Cancel state to its value before entering.
     */
    return function () {
      context[key] = current;
    };
  };
}

/* Expose. */

var vfileLocation = factory$1;

/* Factory. */
function factory$1(file) {
  var contents = indices(String(file));

  return {
    toPosition: offsetToPositionFactory(contents),
    toOffset: positionToOffsetFactory(contents)
  };
}

/* Factory to get the line and column-based `position` for
 * `offset` in the bound indices. */
function offsetToPositionFactory(indices) {
  return offsetToPosition;

  /* Get the line and column-based `position` for
   * `offset` in the bound indices. */
  function offsetToPosition(offset) {
    var index = -1;
    var length = indices.length;

    if (offset < 0) {
      return {};
    }

    while (++index < length) {
      if (indices[index] > offset) {
        return {
          line: index + 1,
          column: offset - (indices[index - 1] || 0) + 1,
          offset: offset
        };
      }
    }

    return {};
  }
}

/* Factory to get the `offset` for a line and column-based
 * `position` in the bound indices. */
function positionToOffsetFactory(indices) {
  return positionToOffset;

  /* Get the `offset` for a line and column-based
   * `position` in the bound indices. */
  function positionToOffset(position) {
    var line = position && position.line;
    var column = position && position.column;

    if (!isNaN(line) && !isNaN(column) && line - 1 in indices) {
      return (indices[line - 2] || 0) + column - 1 || 0;
    }

    return -1;
  }
}

/* Get indices of line-breaks in `value`. */
function indices(value) {
  var result = [];
  var index = value.indexOf('\n');

  while (index !== -1) {
    result.push(index + 1);
    index = value.indexOf('\n', index + 1);
  }

  result.push(value.length + 1);

  return result;
}

var _unescape = factory$2;

/* Factory to de-escape a value, based on a list at `key`
 * in `ctx`. */
function factory$2(ctx, key) {
  return unescape;

  /* De-escape a string using the expression at `key`
   * in `ctx`. */
  function unescape(value) {
    var prev = 0;
    var index = value.indexOf('\\');
    var escape = ctx[key];
    var queue = [];
    var character;

    while (index !== -1) {
      queue.push(value.slice(prev, index));
      prev = index + 1;
      character = value.charAt(prev);

      /* If the following character is not a valid escape,
       * add the slash. */
      if (!character || escape.indexOf(character) === -1) {
        queue.push('\\');
      }

      index = value.indexOf('\\', prev);
    }

    queue.push(value.slice(prev));

    return queue.join('');
  }
}

var AEli = "Æ";
var AElig = "Æ";
var AM = "&";
var AMP = "&";
var Aacut = "Á";
var Aacute = "Á";
var Abreve = "Ă";
var Acir = "Â";
var Acirc = "Â";
var Acy = "А";
var Afr = "𝔄";
var Agrav = "À";
var Agrave = "À";
var Alpha = "Α";
var Amacr = "Ā";
var And = "⩓";
var Aogon = "Ą";
var Aopf = "𝔸";
var ApplyFunction = "⁡";
var Arin = "Å";
var Aring = "Å";
var Ascr = "𝒜";
var Assign = "≔";
var Atild = "Ã";
var Atilde = "Ã";
var Aum = "Ä";
var Auml = "Ä";
var Backslash = "∖";
var Barv = "⫧";
var Barwed = "⌆";
var Bcy = "Б";
var Because = "∵";
var Bernoullis = "ℬ";
var Beta = "Β";
var Bfr = "𝔅";
var Bopf = "𝔹";
var Breve = "˘";
var Bscr = "ℬ";
var Bumpeq = "≎";
var CHcy = "Ч";
var COP = "©";
var COPY = "©";
var Cacute = "Ć";
var Cap = "⋒";
var CapitalDifferentialD = "ⅅ";
var Cayleys = "ℭ";
var Ccaron = "Č";
var Ccedi = "Ç";
var Ccedil = "Ç";
var Ccirc = "Ĉ";
var Cconint = "∰";
var Cdot = "Ċ";
var Cedilla = "¸";
var CenterDot = "·";
var Cfr = "ℭ";
var Chi = "Χ";
var CircleDot = "⊙";
var CircleMinus = "⊖";
var CirclePlus = "⊕";
var CircleTimes = "⊗";
var ClockwiseContourIntegral = "∲";
var CloseCurlyDoubleQuote = "”";
var CloseCurlyQuote = "’";
var Colon = "∷";
var Colone = "⩴";
var Congruent = "≡";
var Conint = "∯";
var ContourIntegral = "∮";
var Copf = "ℂ";
var Coproduct = "∐";
var CounterClockwiseContourIntegral = "∳";
var Cross = "⨯";
var Cscr = "𝒞";
var Cup = "⋓";
var CupCap = "≍";
var DD = "ⅅ";
var DDotrahd = "⤑";
var DJcy = "Ђ";
var DScy = "Ѕ";
var DZcy = "Џ";
var Dagger = "‡";
var Darr = "↡";
var Dashv = "⫤";
var Dcaron = "Ď";
var Dcy = "Д";
var Del = "∇";
var Delta = "Δ";
var Dfr = "𝔇";
var DiacriticalAcute = "´";
var DiacriticalDot = "˙";
var DiacriticalDoubleAcute = "˝";
var DiacriticalGrave = "`";
var DiacriticalTilde = "˜";
var Diamond = "⋄";
var DifferentialD = "ⅆ";
var Dopf = "𝔻";
var Dot = "¨";
var DotDot = "⃜";
var DotEqual = "≐";
var DoubleContourIntegral = "∯";
var DoubleDot = "¨";
var DoubleDownArrow = "⇓";
var DoubleLeftArrow = "⇐";
var DoubleLeftRightArrow = "⇔";
var DoubleLeftTee = "⫤";
var DoubleLongLeftArrow = "⟸";
var DoubleLongLeftRightArrow = "⟺";
var DoubleLongRightArrow = "⟹";
var DoubleRightArrow = "⇒";
var DoubleRightTee = "⊨";
var DoubleUpArrow = "⇑";
var DoubleUpDownArrow = "⇕";
var DoubleVerticalBar = "∥";
var DownArrow = "↓";
var DownArrowBar = "⤓";
var DownArrowUpArrow = "⇵";
var DownBreve = "̑";
var DownLeftRightVector = "⥐";
var DownLeftTeeVector = "⥞";
var DownLeftVector = "↽";
var DownLeftVectorBar = "⥖";
var DownRightTeeVector = "⥟";
var DownRightVector = "⇁";
var DownRightVectorBar = "⥗";
var DownTee = "⊤";
var DownTeeArrow = "↧";
var Downarrow = "⇓";
var Dscr = "𝒟";
var Dstrok = "Đ";
var ENG = "Ŋ";
var ET = "Ð";
var ETH = "Ð";
var Eacut = "É";
var Eacute = "É";
var Ecaron = "Ě";
var Ecir = "Ê";
var Ecirc = "Ê";
var Ecy = "Э";
var Edot = "Ė";
var Efr = "𝔈";
var Egrav = "È";
var Egrave = "È";
var Element = "∈";
var Emacr = "Ē";
var EmptySmallSquare = "◻";
var EmptyVerySmallSquare = "▫";
var Eogon = "Ę";
var Eopf = "𝔼";
var Epsilon = "Ε";
var Equal = "⩵";
var EqualTilde = "≂";
var Equilibrium = "⇌";
var Escr = "ℰ";
var Esim = "⩳";
var Eta = "Η";
var Eum = "Ë";
var Euml = "Ë";
var Exists = "∃";
var ExponentialE = "ⅇ";
var Fcy = "Ф";
var Ffr = "𝔉";
var FilledSmallSquare = "◼";
var FilledVerySmallSquare = "▪";
var Fopf = "𝔽";
var ForAll = "∀";
var Fouriertrf = "ℱ";
var Fscr = "ℱ";
var GJcy = "Ѓ";
var G = ">";
var GT = ">";
var Gamma = "Γ";
var Gammad = "Ϝ";
var Gbreve = "Ğ";
var Gcedil = "Ģ";
var Gcirc = "Ĝ";
var Gcy = "Г";
var Gdot = "Ġ";
var Gfr = "𝔊";
var Gg = "⋙";
var Gopf = "𝔾";
var GreaterEqual = "≥";
var GreaterEqualLess = "⋛";
var GreaterFullEqual = "≧";
var GreaterGreater = "⪢";
var GreaterLess = "≷";
var GreaterSlantEqual = "⩾";
var GreaterTilde = "≳";
var Gscr = "𝒢";
var Gt = "≫";
var HARDcy = "Ъ";
var Hacek = "ˇ";
var Hat = "^";
var Hcirc = "Ĥ";
var Hfr = "ℌ";
var HilbertSpace = "ℋ";
var Hopf = "ℍ";
var HorizontalLine = "─";
var Hscr = "ℋ";
var Hstrok = "Ħ";
var HumpDownHump = "≎";
var HumpEqual = "≏";
var IEcy = "Е";
var IJlig = "Ĳ";
var IOcy = "Ё";
var Iacut = "Í";
var Iacute = "Í";
var Icir = "Î";
var Icirc = "Î";
var Icy = "И";
var Idot = "İ";
var Ifr = "ℑ";
var Igrav = "Ì";
var Igrave = "Ì";
var Im = "ℑ";
var Imacr = "Ī";
var ImaginaryI = "ⅈ";
var Implies = "⇒";
var Int = "∬";
var Integral = "∫";
var Intersection = "⋂";
var InvisibleComma = "⁣";
var InvisibleTimes = "⁢";
var Iogon = "Į";
var Iopf = "𝕀";
var Iota = "Ι";
var Iscr = "ℐ";
var Itilde = "Ĩ";
var Iukcy = "І";
var Ium = "Ï";
var Iuml = "Ï";
var Jcirc = "Ĵ";
var Jcy = "Й";
var Jfr = "𝔍";
var Jopf = "𝕁";
var Jscr = "𝒥";
var Jsercy = "Ј";
var Jukcy = "Є";
var KHcy = "Х";
var KJcy = "Ќ";
var Kappa = "Κ";
var Kcedil = "Ķ";
var Kcy = "К";
var Kfr = "𝔎";
var Kopf = "𝕂";
var Kscr = "𝒦";
var LJcy = "Љ";
var L = "<";
var LT = "<";
var Lacute = "Ĺ";
var Lambda = "Λ";
var Lang = "⟪";
var Laplacetrf = "ℒ";
var Larr = "↞";
var Lcaron = "Ľ";
var Lcedil = "Ļ";
var Lcy = "Л";
var LeftAngleBracket = "⟨";
var LeftArrow = "←";
var LeftArrowBar = "⇤";
var LeftArrowRightArrow = "⇆";
var LeftCeiling = "⌈";
var LeftDoubleBracket = "⟦";
var LeftDownTeeVector = "⥡";
var LeftDownVector = "⇃";
var LeftDownVectorBar = "⥙";
var LeftFloor = "⌊";
var LeftRightArrow = "↔";
var LeftRightVector = "⥎";
var LeftTee = "⊣";
var LeftTeeArrow = "↤";
var LeftTeeVector = "⥚";
var LeftTriangle = "⊲";
var LeftTriangleBar = "⧏";
var LeftTriangleEqual = "⊴";
var LeftUpDownVector = "⥑";
var LeftUpTeeVector = "⥠";
var LeftUpVector = "↿";
var LeftUpVectorBar = "⥘";
var LeftVector = "↼";
var LeftVectorBar = "⥒";
var Leftarrow = "⇐";
var Leftrightarrow = "⇔";
var LessEqualGreater = "⋚";
var LessFullEqual = "≦";
var LessGreater = "≶";
var LessLess = "⪡";
var LessSlantEqual = "⩽";
var LessTilde = "≲";
var Lfr = "𝔏";
var Ll = "⋘";
var Lleftarrow = "⇚";
var Lmidot = "Ŀ";
var LongLeftArrow = "⟵";
var LongLeftRightArrow = "⟷";
var LongRightArrow = "⟶";
var Longleftarrow = "⟸";
var Longleftrightarrow = "⟺";
var Longrightarrow = "⟹";
var Lopf = "𝕃";
var LowerLeftArrow = "↙";
var LowerRightArrow = "↘";
var Lscr = "ℒ";
var Lsh = "↰";
var Lstrok = "Ł";
var Lt = "≪";
var Mcy = "М";
var MediumSpace = " ";
var Mellintrf = "ℳ";
var Mfr = "𝔐";
var MinusPlus = "∓";
var Mopf = "𝕄";
var Mscr = "ℳ";
var Mu = "Μ";
var NJcy = "Њ";
var Nacute = "Ń";
var Ncaron = "Ň";
var Ncedil = "Ņ";
var Ncy = "Н";
var NegativeMediumSpace = "​";
var NegativeThickSpace = "​";
var NegativeThinSpace = "​";
var NegativeVeryThinSpace = "​";
var NestedGreaterGreater = "≫";
var NestedLessLess = "≪";
var NewLine = "\n";
var Nfr = "𝔑";
var NoBreak = "⁠";
var NonBreakingSpace = " ";
var Nopf = "ℕ";
var Not = "⫬";
var NotCongruent = "≢";
var NotCupCap = "≭";
var NotDoubleVerticalBar = "∦";
var NotElement = "∉";
var NotEqual = "≠";
var NotEqualTilde = "≂̸";
var NotExists = "∄";
var NotGreater = "≯";
var NotGreaterEqual = "≱";
var NotGreaterFullEqual = "≧̸";
var NotGreaterGreater = "≫̸";
var NotGreaterLess = "≹";
var NotGreaterSlantEqual = "⩾̸";
var NotGreaterTilde = "≵";
var NotHumpDownHump = "≎̸";
var NotHumpEqual = "≏̸";
var NotLeftTriangle = "⋪";
var NotLeftTriangleBar = "⧏̸";
var NotLeftTriangleEqual = "⋬";
var NotLess = "≮";
var NotLessEqual = "≰";
var NotLessGreater = "≸";
var NotLessLess = "≪̸";
var NotLessSlantEqual = "⩽̸";
var NotLessTilde = "≴";
var NotNestedGreaterGreater = "⪢̸";
var NotNestedLessLess = "⪡̸";
var NotPrecedes = "⊀";
var NotPrecedesEqual = "⪯̸";
var NotPrecedesSlantEqual = "⋠";
var NotReverseElement = "∌";
var NotRightTriangle = "⋫";
var NotRightTriangleBar = "⧐̸";
var NotRightTriangleEqual = "⋭";
var NotSquareSubset = "⊏̸";
var NotSquareSubsetEqual = "⋢";
var NotSquareSuperset = "⊐̸";
var NotSquareSupersetEqual = "⋣";
var NotSubset = "⊂⃒";
var NotSubsetEqual = "⊈";
var NotSucceeds = "⊁";
var NotSucceedsEqual = "⪰̸";
var NotSucceedsSlantEqual = "⋡";
var NotSucceedsTilde = "≿̸";
var NotSuperset = "⊃⃒";
var NotSupersetEqual = "⊉";
var NotTilde = "≁";
var NotTildeEqual = "≄";
var NotTildeFullEqual = "≇";
var NotTildeTilde = "≉";
var NotVerticalBar = "∤";
var Nscr = "𝒩";
var Ntild = "Ñ";
var Ntilde = "Ñ";
var Nu = "Ν";
var OElig = "Œ";
var Oacut = "Ó";
var Oacute = "Ó";
var Ocir = "Ô";
var Ocirc = "Ô";
var Ocy = "О";
var Odblac = "Ő";
var Ofr = "𝔒";
var Ograv = "Ò";
var Ograve = "Ò";
var Omacr = "Ō";
var Omega = "Ω";
var Omicron = "Ο";
var Oopf = "𝕆";
var OpenCurlyDoubleQuote = "“";
var OpenCurlyQuote = "‘";
var Or = "⩔";
var Oscr = "𝒪";
var Oslas = "Ø";
var Oslash = "Ø";
var Otild = "Õ";
var Otilde = "Õ";
var Otimes = "⨷";
var Oum = "Ö";
var Ouml = "Ö";
var OverBar = "‾";
var OverBrace = "⏞";
var OverBracket = "⎴";
var OverParenthesis = "⏜";
var PartialD = "∂";
var Pcy = "П";
var Pfr = "𝔓";
var Phi = "Φ";
var Pi = "Π";
var PlusMinus = "±";
var Poincareplane = "ℌ";
var Popf = "ℙ";
var Pr = "⪻";
var Precedes = "≺";
var PrecedesEqual = "⪯";
var PrecedesSlantEqual = "≼";
var PrecedesTilde = "≾";
var Prime = "″";
var Product = "∏";
var Proportion = "∷";
var Proportional = "∝";
var Pscr = "𝒫";
var Psi = "Ψ";
var QUO = "\"";
var QUOT = "\"";
var Qfr = "𝔔";
var Qopf = "ℚ";
var Qscr = "𝒬";
var RBarr = "⤐";
var RE = "®";
var REG = "®";
var Racute = "Ŕ";
var Rang = "⟫";
var Rarr = "↠";
var Rarrtl = "⤖";
var Rcaron = "Ř";
var Rcedil = "Ŗ";
var Rcy = "Р";
var Re = "ℜ";
var ReverseElement = "∋";
var ReverseEquilibrium = "⇋";
var ReverseUpEquilibrium = "⥯";
var Rfr = "ℜ";
var Rho = "Ρ";
var RightAngleBracket = "⟩";
var RightArrow = "→";
var RightArrowBar = "⇥";
var RightArrowLeftArrow = "⇄";
var RightCeiling = "⌉";
var RightDoubleBracket = "⟧";
var RightDownTeeVector = "⥝";
var RightDownVector = "⇂";
var RightDownVectorBar = "⥕";
var RightFloor = "⌋";
var RightTee = "⊢";
var RightTeeArrow = "↦";
var RightTeeVector = "⥛";
var RightTriangle = "⊳";
var RightTriangleBar = "⧐";
var RightTriangleEqual = "⊵";
var RightUpDownVector = "⥏";
var RightUpTeeVector = "⥜";
var RightUpVector = "↾";
var RightUpVectorBar = "⥔";
var RightVector = "⇀";
var RightVectorBar = "⥓";
var Rightarrow = "⇒";
var Ropf = "ℝ";
var RoundImplies = "⥰";
var Rrightarrow = "⇛";
var Rscr = "ℛ";
var Rsh = "↱";
var RuleDelayed = "⧴";
var SHCHcy = "Щ";
var SHcy = "Ш";
var SOFTcy = "Ь";
var Sacute = "Ś";
var Sc = "⪼";
var Scaron = "Š";
var Scedil = "Ş";
var Scirc = "Ŝ";
var Scy = "С";
var Sfr = "𝔖";
var ShortDownArrow = "↓";
var ShortLeftArrow = "←";
var ShortRightArrow = "→";
var ShortUpArrow = "↑";
var Sigma = "Σ";
var SmallCircle = "∘";
var Sopf = "𝕊";
var Sqrt = "√";
var Square = "□";
var SquareIntersection = "⊓";
var SquareSubset = "⊏";
var SquareSubsetEqual = "⊑";
var SquareSuperset = "⊐";
var SquareSupersetEqual = "⊒";
var SquareUnion = "⊔";
var Sscr = "𝒮";
var Star = "⋆";
var Sub = "⋐";
var Subset = "⋐";
var SubsetEqual = "⊆";
var Succeeds = "≻";
var SucceedsEqual = "⪰";
var SucceedsSlantEqual = "≽";
var SucceedsTilde = "≿";
var SuchThat = "∋";
var Sum = "∑";
var Sup = "⋑";
var Superset = "⊃";
var SupersetEqual = "⊇";
var Supset = "⋑";
var THOR = "Þ";
var THORN = "Þ";
var TRADE = "™";
var TSHcy = "Ћ";
var TScy = "Ц";
var Tab = "\t";
var Tau = "Τ";
var Tcaron = "Ť";
var Tcedil = "Ţ";
var Tcy = "Т";
var Tfr = "𝔗";
var Therefore = "∴";
var Theta = "Θ";
var ThickSpace = "  ";
var ThinSpace = " ";
var Tilde = "∼";
var TildeEqual = "≃";
var TildeFullEqual = "≅";
var TildeTilde = "≈";
var Topf = "𝕋";
var TripleDot = "⃛";
var Tscr = "𝒯";
var Tstrok = "Ŧ";
var Uacut = "Ú";
var Uacute = "Ú";
var Uarr = "↟";
var Uarrocir = "⥉";
var Ubrcy = "Ў";
var Ubreve = "Ŭ";
var Ucir = "Û";
var Ucirc = "Û";
var Ucy = "У";
var Udblac = "Ű";
var Ufr = "𝔘";
var Ugrav = "Ù";
var Ugrave = "Ù";
var Umacr = "Ū";
var UnderBar = "_";
var UnderBrace = "⏟";
var UnderBracket = "⎵";
var UnderParenthesis = "⏝";
var Union = "⋃";
var UnionPlus = "⊎";
var Uogon = "Ų";
var Uopf = "𝕌";
var UpArrow = "↑";
var UpArrowBar = "⤒";
var UpArrowDownArrow = "⇅";
var UpDownArrow = "↕";
var UpEquilibrium = "⥮";
var UpTee = "⊥";
var UpTeeArrow = "↥";
var Uparrow = "⇑";
var Updownarrow = "⇕";
var UpperLeftArrow = "↖";
var UpperRightArrow = "↗";
var Upsi = "ϒ";
var Upsilon = "Υ";
var Uring = "Ů";
var Uscr = "𝒰";
var Utilde = "Ũ";
var Uum = "Ü";
var Uuml = "Ü";
var VDash = "⊫";
var Vbar = "⫫";
var Vcy = "В";
var Vdash = "⊩";
var Vdashl = "⫦";
var Vee = "⋁";
var Verbar = "‖";
var Vert = "‖";
var VerticalBar = "∣";
var VerticalLine = "|";
var VerticalSeparator = "❘";
var VerticalTilde = "≀";
var VeryThinSpace = " ";
var Vfr = "𝔙";
var Vopf = "𝕍";
var Vscr = "𝒱";
var Vvdash = "⊪";
var Wcirc = "Ŵ";
var Wedge = "⋀";
var Wfr = "𝔚";
var Wopf = "𝕎";
var Wscr = "𝒲";
var Xfr = "𝔛";
var Xi = "Ξ";
var Xopf = "𝕏";
var Xscr = "𝒳";
var YAcy = "Я";
var YIcy = "Ї";
var YUcy = "Ю";
var Yacut = "Ý";
var Yacute = "Ý";
var Ycirc = "Ŷ";
var Ycy = "Ы";
var Yfr = "𝔜";
var Yopf = "𝕐";
var Yscr = "𝒴";
var Yuml = "Ÿ";
var ZHcy = "Ж";
var Zacute = "Ź";
var Zcaron = "Ž";
var Zcy = "З";
var Zdot = "Ż";
var ZeroWidthSpace = "​";
var Zeta = "Ζ";
var Zfr = "ℨ";
var Zopf = "ℤ";
var Zscr = "𝒵";
var aacut = "á";
var aacute = "á";
var abreve = "ă";
var ac = "∾";
var acE = "∾̳";
var acd = "∿";
var acir = "â";
var acirc = "â";
var acut = "´";
var acute = "´";
var acy = "а";
var aeli = "æ";
var aelig = "æ";
var af = "⁡";
var afr = "𝔞";
var agrav = "à";
var agrave = "à";
var alefsym = "ℵ";
var aleph = "ℵ";
var alpha = "α";
var amacr = "ā";
var amalg = "⨿";
var am = "&";
var amp = "&";
var and = "∧";
var andand = "⩕";
var andd = "⩜";
var andslope = "⩘";
var andv = "⩚";
var ang = "∠";
var ange = "⦤";
var angle = "∠";
var angmsd = "∡";
var angmsdaa = "⦨";
var angmsdab = "⦩";
var angmsdac = "⦪";
var angmsdad = "⦫";
var angmsdae = "⦬";
var angmsdaf = "⦭";
var angmsdag = "⦮";
var angmsdah = "⦯";
var angrt = "∟";
var angrtvb = "⊾";
var angrtvbd = "⦝";
var angsph = "∢";
var angst = "Å";
var angzarr = "⍼";
var aogon = "ą";
var aopf = "𝕒";
var ap = "≈";
var apE = "⩰";
var apacir = "⩯";
var ape = "≊";
var apid = "≋";
var apos = "'";
var approx = "≈";
var approxeq = "≊";
var arin = "å";
var aring = "å";
var ascr = "𝒶";
var ast = "*";
var asymp = "≈";
var asympeq = "≍";
var atild = "ã";
var atilde = "ã";
var aum = "ä";
var auml = "ä";
var awconint = "∳";
var awint = "⨑";
var bNot = "⫭";
var backcong = "≌";
var backepsilon = "϶";
var backprime = "‵";
var backsim = "∽";
var backsimeq = "⋍";
var barvee = "⊽";
var barwed = "⌅";
var barwedge = "⌅";
var bbrk = "⎵";
var bbrktbrk = "⎶";
var bcong = "≌";
var bcy = "б";
var bdquo = "„";
var becaus = "∵";
var because = "∵";
var bemptyv = "⦰";
var bepsi = "϶";
var bernou = "ℬ";
var beta = "β";
var beth = "ℶ";
var between = "≬";
var bfr = "𝔟";
var bigcap = "⋂";
var bigcirc = "◯";
var bigcup = "⋃";
var bigodot = "⨀";
var bigoplus = "⨁";
var bigotimes = "⨂";
var bigsqcup = "⨆";
var bigstar = "★";
var bigtriangledown = "▽";
var bigtriangleup = "△";
var biguplus = "⨄";
var bigvee = "⋁";
var bigwedge = "⋀";
var bkarow = "⤍";
var blacklozenge = "⧫";
var blacksquare = "▪";
var blacktriangle = "▴";
var blacktriangledown = "▾";
var blacktriangleleft = "◂";
var blacktriangleright = "▸";
var blank = "␣";
var blk12 = "▒";
var blk14 = "░";
var blk34 = "▓";
var block = "█";
var bne = "=⃥";
var bnequiv = "≡⃥";
var bnot = "⌐";
var bopf = "𝕓";
var bot = "⊥";
var bottom = "⊥";
var bowtie = "⋈";
var boxDL = "╗";
var boxDR = "╔";
var boxDl = "╖";
var boxDr = "╓";
var boxH = "═";
var boxHD = "╦";
var boxHU = "╩";
var boxHd = "╤";
var boxHu = "╧";
var boxUL = "╝";
var boxUR = "╚";
var boxUl = "╜";
var boxUr = "╙";
var boxV = "║";
var boxVH = "╬";
var boxVL = "╣";
var boxVR = "╠";
var boxVh = "╫";
var boxVl = "╢";
var boxVr = "╟";
var boxbox = "⧉";
var boxdL = "╕";
var boxdR = "╒";
var boxdl = "┐";
var boxdr = "┌";
var boxh = "─";
var boxhD = "╥";
var boxhU = "╨";
var boxhd = "┬";
var boxhu = "┴";
var boxminus = "⊟";
var boxplus = "⊞";
var boxtimes = "⊠";
var boxuL = "╛";
var boxuR = "╘";
var boxul = "┘";
var boxur = "└";
var boxv = "│";
var boxvH = "╪";
var boxvL = "╡";
var boxvR = "╞";
var boxvh = "┼";
var boxvl = "┤";
var boxvr = "├";
var bprime = "‵";
var breve = "˘";
var brvba = "¦";
var brvbar = "¦";
var bscr = "𝒷";
var bsemi = "⁏";
var bsim = "∽";
var bsime = "⋍";
var bsol = "\\";
var bsolb = "⧅";
var bsolhsub = "⟈";
var bull = "•";
var bullet = "•";
var bump = "≎";
var bumpE = "⪮";
var bumpe = "≏";
var bumpeq = "≏";
var cacute = "ć";
var cap = "∩";
var capand = "⩄";
var capbrcup = "⩉";
var capcap = "⩋";
var capcup = "⩇";
var capdot = "⩀";
var caps = "∩︀";
var caret = "⁁";
var caron = "ˇ";
var ccaps = "⩍";
var ccaron = "č";
var ccedi = "ç";
var ccedil = "ç";
var ccirc = "ĉ";
var ccups = "⩌";
var ccupssm = "⩐";
var cdot = "ċ";
var cedi = "¸";
var cedil = "¸";
var cemptyv = "⦲";
var cen = "¢";
var cent = "¢";
var centerdot = "·";
var cfr = "𝔠";
var chcy = "ч";
var check$1 = "✓";
var checkmark = "✓";
var chi = "χ";
var cir = "○";
var cirE = "⧃";
var circ = "ˆ";
var circeq = "≗";
var circlearrowleft = "↺";
var circlearrowright = "↻";
var circledR = "®";
var circledS = "Ⓢ";
var circledast = "⊛";
var circledcirc = "⊚";
var circleddash = "⊝";
var cire = "≗";
var cirfnint = "⨐";
var cirmid = "⫯";
var cirscir = "⧂";
var clubs = "♣";
var clubsuit = "♣";
var colon = ":";
var colone = "≔";
var coloneq = "≔";
var comma = ",";
var commat = "@";
var comp = "∁";
var compfn = "∘";
var complement = "∁";
var complexes = "ℂ";
var cong = "≅";
var congdot = "⩭";
var conint = "∮";
var copf = "𝕔";
var coprod = "∐";
var cop = "©";
var copy = "©";
var copysr = "℗";
var crarr = "↵";
var cross = "✗";
var cscr = "𝒸";
var csub = "⫏";
var csube = "⫑";
var csup = "⫐";
var csupe = "⫒";
var ctdot = "⋯";
var cudarrl = "⤸";
var cudarrr = "⤵";
var cuepr = "⋞";
var cuesc = "⋟";
var cularr = "↶";
var cularrp = "⤽";
var cup = "∪";
var cupbrcap = "⩈";
var cupcap = "⩆";
var cupcup = "⩊";
var cupdot = "⊍";
var cupor = "⩅";
var cups = "∪︀";
var curarr = "↷";
var curarrm = "⤼";
var curlyeqprec = "⋞";
var curlyeqsucc = "⋟";
var curlyvee = "⋎";
var curlywedge = "⋏";
var curre = "¤";
var curren = "¤";
var curvearrowleft = "↶";
var curvearrowright = "↷";
var cuvee = "⋎";
var cuwed = "⋏";
var cwconint = "∲";
var cwint = "∱";
var cylcty = "⌭";
var dArr = "⇓";
var dHar = "⥥";
var dagger = "†";
var daleth = "ℸ";
var darr = "↓";
var dash = "‐";
var dashv = "⊣";
var dbkarow = "⤏";
var dblac = "˝";
var dcaron = "ď";
var dcy = "д";
var dd = "ⅆ";
var ddagger = "‡";
var ddarr = "⇊";
var ddotseq = "⩷";
var de = "°";
var deg = "°";
var delta = "δ";
var demptyv = "⦱";
var dfisht = "⥿";
var dfr = "𝔡";
var dharl = "⇃";
var dharr = "⇂";
var diam = "⋄";
var diamond = "⋄";
var diamondsuit = "♦";
var diams = "♦";
var die = "¨";
var digamma = "ϝ";
var disin = "⋲";
var div = "÷";
var divid = "÷";
var divide$1 = "÷";
var divideontimes = "⋇";
var divonx = "⋇";
var djcy = "ђ";
var dlcorn = "⌞";
var dlcrop = "⌍";
var dollar = "$";
var dopf = "𝕕";
var dot = "˙";
var doteq = "≐";
var doteqdot = "≑";
var dotminus = "∸";
var dotplus = "∔";
var dotsquare = "⊡";
var doublebarwedge = "⌆";
var downarrow = "↓";
var downdownarrows = "⇊";
var downharpoonleft = "⇃";
var downharpoonright = "⇂";
var drbkarow = "⤐";
var drcorn = "⌟";
var drcrop = "⌌";
var dscr = "𝒹";
var dscy = "ѕ";
var dsol = "⧶";
var dstrok = "đ";
var dtdot = "⋱";
var dtri = "▿";
var dtrif = "▾";
var duarr = "⇵";
var duhar = "⥯";
var dwangle = "⦦";
var dzcy = "џ";
var dzigrarr = "⟿";
var eDDot = "⩷";
var eDot = "≑";
var eacut = "é";
var eacute = "é";
var easter = "⩮";
var ecaron = "ě";
var ecir = "ê";
var ecirc = "ê";
var ecolon = "≕";
var ecy = "э";
var edot = "ė";
var ee = "ⅇ";
var efDot = "≒";
var efr = "𝔢";
var eg = "⪚";
var egrav = "è";
var egrave = "è";
var egs = "⪖";
var egsdot = "⪘";
var el = "⪙";
var elinters = "⏧";
var ell = "ℓ";
var els = "⪕";
var elsdot = "⪗";
var emacr = "ē";
var empty$1 = "∅";
var emptyset = "∅";
var emptyv = "∅";
var emsp13 = " ";
var emsp14 = " ";
var emsp = " ";
var eng = "ŋ";
var ensp = " ";
var eogon = "ę";
var eopf = "𝕖";
var epar = "⋕";
var eparsl = "⧣";
var eplus = "⩱";
var epsi = "ε";
var epsilon = "ε";
var epsiv = "ϵ";
var eqcirc = "≖";
var eqcolon = "≕";
var eqsim = "≂";
var eqslantgtr = "⪖";
var eqslantless = "⪕";
var equals = "=";
var equest = "≟";
var equiv = "≡";
var equivDD = "⩸";
var eqvparsl = "⧥";
var erDot = "≓";
var erarr = "⥱";
var escr = "ℯ";
var esdot = "≐";
var esim = "≂";
var eta = "η";
var et = "ð";
var eth = "ð";
var eum = "ë";
var euml = "ë";
var euro = "€";
var excl = "!";
var exist = "∃";
var expectation = "ℰ";
var exponentiale = "ⅇ";
var fallingdotseq = "≒";
var fcy = "ф";
var female = "♀";
var ffilig = "ﬃ";
var fflig = "ﬀ";
var ffllig = "ﬄ";
var ffr = "𝔣";
var filig = "ﬁ";
var fjlig = "fj";
var flat = "♭";
var fllig = "ﬂ";
var fltns = "▱";
var fnof = "ƒ";
var fopf = "𝕗";
var forall = "∀";
var fork = "⋔";
var forkv = "⫙";
var fpartint = "⨍";
var frac1 = "¼";
var frac12 = "½";
var frac13 = "⅓";
var frac14 = "¼";
var frac15 = "⅕";
var frac16 = "⅙";
var frac18 = "⅛";
var frac23 = "⅔";
var frac25 = "⅖";
var frac3 = "¾";
var frac34 = "¾";
var frac35 = "⅗";
var frac38 = "⅜";
var frac45 = "⅘";
var frac56 = "⅚";
var frac58 = "⅝";
var frac78 = "⅞";
var frasl = "⁄";
var frown = "⌢";
var fscr = "𝒻";
var gE = "≧";
var gEl = "⪌";
var gacute = "ǵ";
var gamma = "γ";
var gammad = "ϝ";
var gap = "⪆";
var gbreve = "ğ";
var gcirc = "ĝ";
var gcy = "г";
var gdot = "ġ";
var ge = "≥";
var gel = "⋛";
var geq = "≥";
var geqq = "≧";
var geqslant = "⩾";
var ges = "⩾";
var gescc = "⪩";
var gesdot = "⪀";
var gesdoto = "⪂";
var gesdotol = "⪄";
var gesl = "⋛︀";
var gesles = "⪔";
var gfr = "𝔤";
var gg = "≫";
var ggg = "⋙";
var gimel = "ℷ";
var gjcy = "ѓ";
var gl = "≷";
var glE = "⪒";
var gla = "⪥";
var glj = "⪤";
var gnE = "≩";
var gnap = "⪊";
var gnapprox = "⪊";
var gne = "⪈";
var gneq = "⪈";
var gneqq = "≩";
var gnsim = "⋧";
var gopf = "𝕘";
var grave = "`";
var gscr = "ℊ";
var gsim = "≳";
var gsime = "⪎";
var gsiml = "⪐";
var g = ">";
var gt = ">";
var gtcc = "⪧";
var gtcir = "⩺";
var gtdot = "⋗";
var gtlPar = "⦕";
var gtquest = "⩼";
var gtrapprox = "⪆";
var gtrarr = "⥸";
var gtrdot = "⋗";
var gtreqless = "⋛";
var gtreqqless = "⪌";
var gtrless = "≷";
var gtrsim = "≳";
var gvertneqq = "≩︀";
var gvnE = "≩︀";
var hArr = "⇔";
var hairsp = " ";
var half = "½";
var hamilt = "ℋ";
var hardcy = "ъ";
var harr = "↔";
var harrcir = "⥈";
var harrw = "↭";
var hbar = "ℏ";
var hcirc = "ĥ";
var hearts = "♥";
var heartsuit = "♥";
var hellip = "…";
var hercon = "⊹";
var hfr = "𝔥";
var hksearow = "⤥";
var hkswarow = "⤦";
var hoarr = "⇿";
var homtht = "∻";
var hookleftarrow = "↩";
var hookrightarrow = "↪";
var hopf = "𝕙";
var horbar = "―";
var hscr = "𝒽";
var hslash = "ℏ";
var hstrok = "ħ";
var hybull = "⁃";
var hyphen = "‐";
var iacut = "í";
var iacute = "í";
var ic = "⁣";
var icir = "î";
var icirc = "î";
var icy = "и";
var iecy = "е";
var iexc = "¡";
var iexcl = "¡";
var iff = "⇔";
var ifr = "𝔦";
var igrav = "ì";
var igrave = "ì";
var ii = "ⅈ";
var iiiint = "⨌";
var iiint = "∭";
var iinfin = "⧜";
var iiota = "℩";
var ijlig = "ĳ";
var imacr = "ī";
var image = "ℑ";
var imagline = "ℐ";
var imagpart = "ℑ";
var imath = "ı";
var imof = "⊷";
var imped = "Ƶ";
var incare = "℅";
var infin = "∞";
var infintie = "⧝";
var inodot = "ı";
var int = "∫";
var intcal = "⊺";
var integers = "ℤ";
var intercal = "⊺";
var intlarhk = "⨗";
var intprod = "⨼";
var iocy = "ё";
var iogon = "į";
var iopf = "𝕚";
var iota = "ι";
var iprod = "⨼";
var iques = "¿";
var iquest = "¿";
var iscr = "𝒾";
var isin = "∈";
var isinE = "⋹";
var isindot = "⋵";
var isins = "⋴";
var isinsv = "⋳";
var isinv = "∈";
var it = "⁢";
var itilde = "ĩ";
var iukcy = "і";
var ium = "ï";
var iuml = "ï";
var jcirc = "ĵ";
var jcy = "й";
var jfr = "𝔧";
var jmath = "ȷ";
var jopf = "𝕛";
var jscr = "𝒿";
var jsercy = "ј";
var jukcy = "є";
var kappa = "κ";
var kappav = "ϰ";
var kcedil = "ķ";
var kcy = "к";
var kfr = "𝔨";
var kgreen = "ĸ";
var khcy = "х";
var kjcy = "ќ";
var kopf = "𝕜";
var kscr = "𝓀";
var lAarr = "⇚";
var lArr = "⇐";
var lAtail = "⤛";
var lBarr = "⤎";
var lE = "≦";
var lEg = "⪋";
var lHar = "⥢";
var lacute = "ĺ";
var laemptyv = "⦴";
var lagran = "ℒ";
var lambda = "λ";
var lang = "⟨";
var langd = "⦑";
var langle = "⟨";
var lap = "⪅";
var laqu = "«";
var laquo = "«";
var larr = "←";
var larrb = "⇤";
var larrbfs = "⤟";
var larrfs = "⤝";
var larrhk = "↩";
var larrlp = "↫";
var larrpl = "⤹";
var larrsim = "⥳";
var larrtl = "↢";
var lat = "⪫";
var latail = "⤙";
var late = "⪭";
var lates = "⪭︀";
var lbarr = "⤌";
var lbbrk = "❲";
var lbrace = "{";
var lbrack = "[";
var lbrke = "⦋";
var lbrksld = "⦏";
var lbrkslu = "⦍";
var lcaron = "ľ";
var lcedil = "ļ";
var lceil = "⌈";
var lcub = "{";
var lcy = "л";
var ldca = "⤶";
var ldquo = "“";
var ldquor = "„";
var ldrdhar = "⥧";
var ldrushar = "⥋";
var ldsh = "↲";
var le = "≤";
var leftarrow = "←";
var leftarrowtail = "↢";
var leftharpoondown = "↽";
var leftharpoonup = "↼";
var leftleftarrows = "⇇";
var leftrightarrow = "↔";
var leftrightarrows = "⇆";
var leftrightharpoons = "⇋";
var leftrightsquigarrow = "↭";
var leftthreetimes = "⋋";
var leg = "⋚";
var leq = "≤";
var leqq = "≦";
var leqslant = "⩽";
var les = "⩽";
var lescc = "⪨";
var lesdot = "⩿";
var lesdoto = "⪁";
var lesdotor = "⪃";
var lesg = "⋚︀";
var lesges = "⪓";
var lessapprox = "⪅";
var lessdot = "⋖";
var lesseqgtr = "⋚";
var lesseqqgtr = "⪋";
var lessgtr = "≶";
var lesssim = "≲";
var lfisht = "⥼";
var lfloor = "⌊";
var lfr = "𝔩";
var lg = "≶";
var lgE = "⪑";
var lhard = "↽";
var lharu = "↼";
var lharul = "⥪";
var lhblk = "▄";
var ljcy = "љ";
var ll = "≪";
var llarr = "⇇";
var llcorner = "⌞";
var llhard = "⥫";
var lltri = "◺";
var lmidot = "ŀ";
var lmoust = "⎰";
var lmoustache = "⎰";
var lnE = "≨";
var lnap = "⪉";
var lnapprox = "⪉";
var lne = "⪇";
var lneq = "⪇";
var lneqq = "≨";
var lnsim = "⋦";
var loang = "⟬";
var loarr = "⇽";
var lobrk = "⟦";
var longleftarrow = "⟵";
var longleftrightarrow = "⟷";
var longmapsto = "⟼";
var longrightarrow = "⟶";
var looparrowleft = "↫";
var looparrowright = "↬";
var lopar = "⦅";
var lopf = "𝕝";
var loplus = "⨭";
var lotimes = "⨴";
var lowast = "∗";
var lowbar = "_";
var loz = "◊";
var lozenge = "◊";
var lozf = "⧫";
var lpar = "(";
var lparlt = "⦓";
var lrarr = "⇆";
var lrcorner = "⌟";
var lrhar = "⇋";
var lrhard = "⥭";
var lrm = "‎";
var lrtri = "⊿";
var lsaquo = "‹";
var lscr = "𝓁";
var lsh = "↰";
var lsim = "≲";
var lsime = "⪍";
var lsimg = "⪏";
var lsqb = "[";
var lsquo = "‘";
var lsquor = "‚";
var lstrok = "ł";
var l$1 = "<";
var lt = "<";
var ltcc = "⪦";
var ltcir = "⩹";
var ltdot = "⋖";
var lthree = "⋋";
var ltimes = "⋉";
var ltlarr = "⥶";
var ltquest = "⩻";
var ltrPar = "⦖";
var ltri = "◃";
var ltrie = "⊴";
var ltrif = "◂";
var lurdshar = "⥊";
var luruhar = "⥦";
var lvertneqq = "≨︀";
var lvnE = "≨︀";
var mDDot = "∺";
var mac = "¯";
var macr = "¯";
var male = "♂";
var malt = "✠";
var maltese = "✠";
var map = "↦";
var mapsto = "↦";
var mapstodown = "↧";
var mapstoleft = "↤";
var mapstoup = "↥";
var marker = "▮";
var mcomma = "⨩";
var mcy = "м";
var mdash = "—";
var measuredangle = "∡";
var mfr = "𝔪";
var mho = "℧";
var micr = "µ";
var micro = "µ";
var mid = "∣";
var midast = "*";
var midcir = "⫰";
var middo = "·";
var middot = "·";
var minus = "−";
var minusb = "⊟";
var minusd = "∸";
var minusdu = "⨪";
var mlcp = "⫛";
var mldr = "…";
var mnplus = "∓";
var models = "⊧";
var mopf = "𝕞";
var mp = "∓";
var mscr = "𝓂";
var mstpos = "∾";
var mu = "μ";
var multimap = "⊸";
var mumap = "⊸";
var nGg = "⋙̸";
var nGt = "≫⃒";
var nGtv = "≫̸";
var nLeftarrow = "⇍";
var nLeftrightarrow = "⇎";
var nLl = "⋘̸";
var nLt = "≪⃒";
var nLtv = "≪̸";
var nRightarrow = "⇏";
var nVDash = "⊯";
var nVdash = "⊮";
var nabla = "∇";
var nacute = "ń";
var nang = "∠⃒";
var nap = "≉";
var napE = "⩰̸";
var napid = "≋̸";
var napos = "ŉ";
var napprox = "≉";
var natur = "♮";
var natural = "♮";
var naturals = "ℕ";
var nbs = " ";
var nbsp = " ";
var nbump = "≎̸";
var nbumpe = "≏̸";
var ncap = "⩃";
var ncaron = "ň";
var ncedil = "ņ";
var ncong = "≇";
var ncongdot = "⩭̸";
var ncup = "⩂";
var ncy = "н";
var ndash = "–";
var ne = "≠";
var neArr = "⇗";
var nearhk = "⤤";
var nearr = "↗";
var nearrow = "↗";
var nedot = "≐̸";
var nequiv = "≢";
var nesear = "⤨";
var nesim = "≂̸";
var nexist = "∄";
var nexists = "∄";
var nfr = "𝔫";
var ngE = "≧̸";
var nge = "≱";
var ngeq = "≱";
var ngeqq = "≧̸";
var ngeqslant = "⩾̸";
var nges = "⩾̸";
var ngsim = "≵";
var ngt = "≯";
var ngtr = "≯";
var nhArr = "⇎";
var nharr = "↮";
var nhpar = "⫲";
var ni = "∋";
var nis = "⋼";
var nisd = "⋺";
var niv = "∋";
var njcy = "њ";
var nlArr = "⇍";
var nlE = "≦̸";
var nlarr = "↚";
var nldr = "‥";
var nle = "≰";
var nleftarrow = "↚";
var nleftrightarrow = "↮";
var nleq = "≰";
var nleqq = "≦̸";
var nleqslant = "⩽̸";
var nles = "⩽̸";
var nless = "≮";
var nlsim = "≴";
var nlt = "≮";
var nltri = "⋪";
var nltrie = "⋬";
var nmid = "∤";
var nopf = "𝕟";
var no = "¬";
var not = "¬";
var notin = "∉";
var notinE = "⋹̸";
var notindot = "⋵̸";
var notinva = "∉";
var notinvb = "⋷";
var notinvc = "⋶";
var notni = "∌";
var notniva = "∌";
var notnivb = "⋾";
var notnivc = "⋽";
var npar = "∦";
var nparallel = "∦";
var nparsl = "⫽⃥";
var npart = "∂̸";
var npolint = "⨔";
var npr = "⊀";
var nprcue = "⋠";
var npre = "⪯̸";
var nprec = "⊀";
var npreceq = "⪯̸";
var nrArr = "⇏";
var nrarr = "↛";
var nrarrc = "⤳̸";
var nrarrw = "↝̸";
var nrightarrow = "↛";
var nrtri = "⋫";
var nrtrie = "⋭";
var nsc = "⊁";
var nsccue = "⋡";
var nsce = "⪰̸";
var nscr = "𝓃";
var nshortmid = "∤";
var nshortparallel = "∦";
var nsim = "≁";
var nsime = "≄";
var nsimeq = "≄";
var nsmid = "∤";
var nspar = "∦";
var nsqsube = "⋢";
var nsqsupe = "⋣";
var nsub = "⊄";
var nsubE = "⫅̸";
var nsube = "⊈";
var nsubset = "⊂⃒";
var nsubseteq = "⊈";
var nsubseteqq = "⫅̸";
var nsucc = "⊁";
var nsucceq = "⪰̸";
var nsup = "⊅";
var nsupE = "⫆̸";
var nsupe = "⊉";
var nsupset = "⊃⃒";
var nsupseteq = "⊉";
var nsupseteqq = "⫆̸";
var ntgl = "≹";
var ntild = "ñ";
var ntilde = "ñ";
var ntlg = "≸";
var ntriangleleft = "⋪";
var ntrianglelefteq = "⋬";
var ntriangleright = "⋫";
var ntrianglerighteq = "⋭";
var nu = "ν";
var num = "#";
var numero = "№";
var numsp = " ";
var nvDash = "⊭";
var nvHarr = "⤄";
var nvap = "≍⃒";
var nvdash = "⊬";
var nvge = "≥⃒";
var nvgt = ">⃒";
var nvinfin = "⧞";
var nvlArr = "⤂";
var nvle = "≤⃒";
var nvlt = "<⃒";
var nvltrie = "⊴⃒";
var nvrArr = "⤃";
var nvrtrie = "⊵⃒";
var nvsim = "∼⃒";
var nwArr = "⇖";
var nwarhk = "⤣";
var nwarr = "↖";
var nwarrow = "↖";
var nwnear = "⤧";
var oS = "Ⓢ";
var oacut = "ó";
var oacute = "ó";
var oast = "⊛";
var ocir = "ô";
var ocirc = "ô";
var ocy = "о";
var odash = "⊝";
var odblac = "ő";
var odiv = "⨸";
var odot = "⊙";
var odsold = "⦼";
var oelig = "œ";
var ofcir = "⦿";
var ofr = "𝔬";
var ogon = "˛";
var ograv = "ò";
var ograve = "ò";
var ogt = "⧁";
var ohbar = "⦵";
var ohm = "Ω";
var oint = "∮";
var olarr = "↺";
var olcir = "⦾";
var olcross = "⦻";
var oline = "‾";
var olt = "⧀";
var omacr = "ō";
var omega = "ω";
var omicron = "ο";
var omid = "⦶";
var ominus = "⊖";
var oopf = "𝕠";
var opar = "⦷";
var operp = "⦹";
var oplus = "⊕";
var or = "∨";
var orarr = "↻";
var ord = "º";
var order$1 = "ℴ";
var orderof = "ℴ";
var ordf = "ª";
var ordm = "º";
var origof = "⊶";
var oror = "⩖";
var orslope = "⩗";
var orv = "⩛";
var oscr = "ℴ";
var oslas = "ø";
var oslash = "ø";
var osol = "⊘";
var otild = "õ";
var otilde = "õ";
var otimes = "⊗";
var otimesas = "⨶";
var oum = "ö";
var ouml = "ö";
var ovbar = "⌽";
var par = "¶";
var para = "¶";
var parallel = "∥";
var parsim = "⫳";
var parsl = "⫽";
var part = "∂";
var pcy = "п";
var percnt = "%";
var period = ".";
var permil = "‰";
var perp = "⊥";
var pertenk = "‱";
var pfr = "𝔭";
var phi = "φ";
var phiv = "ϕ";
var phmmat = "ℳ";
var phone = "☎";
var pi = "π";
var pitchfork = "⋔";
var piv = "ϖ";
var planck = "ℏ";
var planckh = "ℎ";
var plankv = "ℏ";
var plus = "+";
var plusacir = "⨣";
var plusb = "⊞";
var pluscir = "⨢";
var plusdo = "∔";
var plusdu = "⨥";
var pluse = "⩲";
var plusm = "±";
var plusmn = "±";
var plussim = "⨦";
var plustwo = "⨧";
var pm = "±";
var pointint = "⨕";
var popf = "𝕡";
var poun = "£";
var pound = "£";
var pr = "≺";
var prE = "⪳";
var prap = "⪷";
var prcue = "≼";
var pre = "⪯";
var prec = "≺";
var precapprox = "⪷";
var preccurlyeq = "≼";
var preceq = "⪯";
var precnapprox = "⪹";
var precneqq = "⪵";
var precnsim = "⋨";
var precsim = "≾";
var prime = "′";
var primes = "ℙ";
var prnE = "⪵";
var prnap = "⪹";
var prnsim = "⋨";
var prod = "∏";
var profalar = "⌮";
var profline = "⌒";
var profsurf = "⌓";
var prop = "∝";
var propto = "∝";
var prsim = "≾";
var prurel = "⊰";
var pscr = "𝓅";
var psi = "ψ";
var puncsp = " ";
var qfr = "𝔮";
var qint = "⨌";
var qopf = "𝕢";
var qprime = "⁗";
var qscr = "𝓆";
var quaternions = "ℍ";
var quatint = "⨖";
var quest = "?";
var questeq = "≟";
var quo = "\"";
var quot$1 = "\"";
var rAarr = "⇛";
var rArr = "⇒";
var rAtail = "⤜";
var rBarr = "⤏";
var rHar = "⥤";
var race = "∽̱";
var racute = "ŕ";
var radic = "√";
var raemptyv = "⦳";
var rang = "⟩";
var rangd = "⦒";
var range = "⦥";
var rangle = "⟩";
var raqu = "»";
var raquo = "»";
var rarr = "→";
var rarrap = "⥵";
var rarrb = "⇥";
var rarrbfs = "⤠";
var rarrc = "⤳";
var rarrfs = "⤞";
var rarrhk = "↪";
var rarrlp = "↬";
var rarrpl = "⥅";
var rarrsim = "⥴";
var rarrtl = "↣";
var rarrw = "↝";
var ratail = "⤚";
var ratio = "∶";
var rationals = "ℚ";
var rbarr = "⤍";
var rbbrk = "❳";
var rbrace = "}";
var rbrack = "]";
var rbrke = "⦌";
var rbrksld = "⦎";
var rbrkslu = "⦐";
var rcaron = "ř";
var rcedil = "ŗ";
var rceil = "⌉";
var rcub = "}";
var rcy = "р";
var rdca = "⤷";
var rdldhar = "⥩";
var rdquo = "”";
var rdquor = "”";
var rdsh = "↳";
var real = "ℜ";
var realine = "ℛ";
var realpart = "ℜ";
var reals = "ℝ";
var rect = "▭";
var re = "®";
var reg = "®";
var rfisht = "⥽";
var rfloor = "⌋";
var rfr = "𝔯";
var rhard = "⇁";
var rharu = "⇀";
var rharul = "⥬";
var rho = "ρ";
var rhov = "ϱ";
var rightarrow = "→";
var rightarrowtail = "↣";
var rightharpoondown = "⇁";
var rightharpoonup = "⇀";
var rightleftarrows = "⇄";
var rightleftharpoons = "⇌";
var rightrightarrows = "⇉";
var rightsquigarrow = "↝";
var rightthreetimes = "⋌";
var ring = "˚";
var risingdotseq = "≓";
var rlarr = "⇄";
var rlhar = "⇌";
var rlm = "‏";
var rmoust = "⎱";
var rmoustache = "⎱";
var rnmid = "⫮";
var roang = "⟭";
var roarr = "⇾";
var robrk = "⟧";
var ropar = "⦆";
var ropf = "𝕣";
var roplus = "⨮";
var rotimes = "⨵";
var rpar = ")";
var rpargt = "⦔";
var rppolint = "⨒";
var rrarr = "⇉";
var rsaquo = "›";
var rscr = "𝓇";
var rsh = "↱";
var rsqb = "]";
var rsquo = "’";
var rsquor = "’";
var rthree = "⋌";
var rtimes = "⋊";
var rtri = "▹";
var rtrie = "⊵";
var rtrif = "▸";
var rtriltri = "⧎";
var ruluhar = "⥨";
var rx = "℞";
var sacute = "ś";
var sbquo = "‚";
var sc = "≻";
var scE = "⪴";
var scap = "⪸";
var scaron = "š";
var sccue = "≽";
var sce = "⪰";
var scedil = "ş";
var scirc = "ŝ";
var scnE = "⪶";
var scnap = "⪺";
var scnsim = "⋩";
var scpolint = "⨓";
var scsim = "≿";
var scy = "с";
var sdot = "⋅";
var sdotb = "⊡";
var sdote = "⩦";
var seArr = "⇘";
var searhk = "⤥";
var searr = "↘";
var searrow = "↘";
var sec = "§";
var sect = "§";
var semi = ";";
var seswar = "⤩";
var setminus = "∖";
var setmn = "∖";
var sext = "✶";
var sfr = "𝔰";
var sfrown = "⌢";
var sharp = "♯";
var shchcy = "щ";
var shcy = "ш";
var shortmid = "∣";
var shortparallel = "∥";
var sh = "­";
var shy = "­";
var sigma = "σ";
var sigmaf = "ς";
var sigmav = "ς";
var sim = "∼";
var simdot = "⩪";
var sime = "≃";
var simeq = "≃";
var simg = "⪞";
var simgE = "⪠";
var siml = "⪝";
var simlE = "⪟";
var simne = "≆";
var simplus = "⨤";
var simrarr = "⥲";
var slarr = "←";
var smallsetminus = "∖";
var smashp = "⨳";
var smeparsl = "⧤";
var smid = "∣";
var smile = "⌣";
var smt = "⪪";
var smte = "⪬";
var smtes = "⪬︀";
var softcy = "ь";
var sol = "/";
var solb = "⧄";
var solbar = "⌿";
var sopf = "𝕤";
var spades = "♠";
var spadesuit = "♠";
var spar = "∥";
var sqcap = "⊓";
var sqcaps = "⊓︀";
var sqcup = "⊔";
var sqcups = "⊔︀";
var sqsub = "⊏";
var sqsube = "⊑";
var sqsubset = "⊏";
var sqsubseteq = "⊑";
var sqsup = "⊐";
var sqsupe = "⊒";
var sqsupset = "⊐";
var sqsupseteq = "⊒";
var squ = "□";
var square = "□";
var squarf = "▪";
var squf = "▪";
var srarr = "→";
var sscr = "𝓈";
var ssetmn = "∖";
var ssmile = "⌣";
var sstarf = "⋆";
var star = "☆";
var starf = "★";
var straightepsilon = "ϵ";
var straightphi = "ϕ";
var strns = "¯";
var sub = "⊂";
var subE = "⫅";
var subdot = "⪽";
var sube = "⊆";
var subedot = "⫃";
var submult = "⫁";
var subnE = "⫋";
var subne = "⊊";
var subplus = "⪿";
var subrarr = "⥹";
var subset = "⊂";
var subseteq = "⊆";
var subseteqq = "⫅";
var subsetneq = "⊊";
var subsetneqq = "⫋";
var subsim = "⫇";
var subsub = "⫕";
var subsup = "⫓";
var succ = "≻";
var succapprox = "⪸";
var succcurlyeq = "≽";
var succeq = "⪰";
var succnapprox = "⪺";
var succneqq = "⪶";
var succnsim = "⋩";
var succsim = "≿";
var sum = "∑";
var sung = "♪";
var sup = "⊃";
var sup1 = "¹";
var sup2 = "²";
var sup3 = "³";
var supE = "⫆";
var supdot = "⪾";
var supdsub = "⫘";
var supe = "⊇";
var supedot = "⫄";
var suphsol = "⟉";
var suphsub = "⫗";
var suplarr = "⥻";
var supmult = "⫂";
var supnE = "⫌";
var supne = "⊋";
var supplus = "⫀";
var supset = "⊃";
var supseteq = "⊇";
var supseteqq = "⫆";
var supsetneq = "⊋";
var supsetneqq = "⫌";
var supsim = "⫈";
var supsub = "⫔";
var supsup = "⫖";
var swArr = "⇙";
var swarhk = "⤦";
var swarr = "↙";
var swarrow = "↙";
var swnwar = "⤪";
var szli = "ß";
var szlig = "ß";
var target = "⌖";
var tau = "τ";
var tbrk = "⎴";
var tcaron = "ť";
var tcedil = "ţ";
var tcy = "т";
var tdot = "⃛";
var telrec = "⌕";
var tfr = "𝔱";
var there4 = "∴";
var therefore = "∴";
var theta = "θ";
var thetasym = "ϑ";
var thetav = "ϑ";
var thickapprox = "≈";
var thicksim = "∼";
var thinsp = " ";
var thkap = "≈";
var thksim = "∼";
var thor = "þ";
var thorn = "þ";
var tilde = "˜";
var time = "×";
var times = "×";
var timesb = "⊠";
var timesbar = "⨱";
var timesd = "⨰";
var tint = "∭";
var toea = "⤨";
var top = "⊤";
var topbot = "⌶";
var topcir = "⫱";
var topf = "𝕥";
var topfork = "⫚";
var tosa = "⤩";
var tprime = "‴";
var trade = "™";
var triangle = "▵";
var triangledown = "▿";
var triangleleft = "◃";
var trianglelefteq = "⊴";
var triangleq = "≜";
var triangleright = "▹";
var trianglerighteq = "⊵";
var tridot = "◬";
var trie = "≜";
var triminus = "⨺";
var triplus = "⨹";
var trisb = "⧍";
var tritime = "⨻";
var trpezium = "⏢";
var tscr = "𝓉";
var tscy = "ц";
var tshcy = "ћ";
var tstrok = "ŧ";
var twixt = "≬";
var twoheadleftarrow = "↞";
var twoheadrightarrow = "↠";
var uArr = "⇑";
var uHar = "⥣";
var uacut = "ú";
var uacute = "ú";
var uarr = "↑";
var ubrcy = "ў";
var ubreve = "ŭ";
var ucir = "û";
var ucirc = "û";
var ucy = "у";
var udarr = "⇅";
var udblac = "ű";
var udhar = "⥮";
var ufisht = "⥾";
var ufr = "𝔲";
var ugrav = "ù";
var ugrave = "ù";
var uharl = "↿";
var uharr = "↾";
var uhblk = "▀";
var ulcorn = "⌜";
var ulcorner = "⌜";
var ulcrop = "⌏";
var ultri = "◸";
var umacr = "ū";
var um = "¨";
var uml = "¨";
var uogon = "ų";
var uopf = "𝕦";
var uparrow = "↑";
var updownarrow = "↕";
var upharpoonleft = "↿";
var upharpoonright = "↾";
var uplus = "⊎";
var upsi = "υ";
var upsih = "ϒ";
var upsilon = "υ";
var upuparrows = "⇈";
var urcorn = "⌝";
var urcorner = "⌝";
var urcrop = "⌎";
var uring = "ů";
var urtri = "◹";
var uscr = "𝓊";
var utdot = "⋰";
var utilde = "ũ";
var utri = "▵";
var utrif = "▴";
var uuarr = "⇈";
var uum = "ü";
var uuml = "ü";
var uwangle = "⦧";
var vArr = "⇕";
var vBar = "⫨";
var vBarv = "⫩";
var vDash = "⊨";
var vangrt = "⦜";
var varepsilon = "ϵ";
var varkappa = "ϰ";
var varnothing = "∅";
var varphi = "ϕ";
var varpi = "ϖ";
var varpropto = "∝";
var varr = "↕";
var varrho = "ϱ";
var varsigma = "ς";
var varsubsetneq = "⊊︀";
var varsubsetneqq = "⫋︀";
var varsupsetneq = "⊋︀";
var varsupsetneqq = "⫌︀";
var vartheta = "ϑ";
var vartriangleleft = "⊲";
var vartriangleright = "⊳";
var vcy = "в";
var vdash = "⊢";
var vee = "∨";
var veebar = "⊻";
var veeeq = "≚";
var vellip = "⋮";
var verbar = "|";
var vert = "|";
var vfr = "𝔳";
var vltri = "⊲";
var vnsub = "⊂⃒";
var vnsup = "⊃⃒";
var vopf = "𝕧";
var vprop = "∝";
var vrtri = "⊳";
var vscr = "𝓋";
var vsubnE = "⫋︀";
var vsubne = "⊊︀";
var vsupnE = "⫌︀";
var vsupne = "⊋︀";
var vzigzag = "⦚";
var wcirc = "ŵ";
var wedbar = "⩟";
var wedge = "∧";
var wedgeq = "≙";
var weierp = "℘";
var wfr = "𝔴";
var wopf = "𝕨";
var wp = "℘";
var wr = "≀";
var wreath = "≀";
var wscr = "𝓌";
var xcap = "⋂";
var xcirc = "◯";
var xcup = "⋃";
var xdtri = "▽";
var xfr = "𝔵";
var xhArr = "⟺";
var xharr = "⟷";
var xi = "ξ";
var xlArr = "⟸";
var xlarr = "⟵";
var xmap = "⟼";
var xnis = "⋻";
var xodot = "⨀";
var xopf = "𝕩";
var xoplus = "⨁";
var xotime = "⨂";
var xrArr = "⟹";
var xrarr = "⟶";
var xscr = "𝓍";
var xsqcup = "⨆";
var xuplus = "⨄";
var xutri = "△";
var xvee = "⋁";
var xwedge = "⋀";
var yacut = "ý";
var yacute = "ý";
var yacy = "я";
var ycirc = "ŷ";
var ycy = "ы";
var ye = "¥";
var yen = "¥";
var yfr = "𝔶";
var yicy = "ї";
var yopf = "𝕪";
var yscr = "𝓎";
var yucy = "ю";
var yum = "ÿ";
var yuml = "ÿ";
var zacute = "ź";
var zcaron = "ž";
var zcy = "з";
var zdot = "ż";
var zeetrf = "ℨ";
var zeta = "ζ";
var zfr = "𝔷";
var zhcy = "ж";
var zigrarr = "⇝";
var zopf = "𝕫";
var zscr = "𝓏";
var zwj = "‍";
var zwnj = "‌";
var index$1 = {
	AEli: AEli,
	AElig: AElig,
	AM: AM,
	AMP: AMP,
	Aacut: Aacut,
	Aacute: Aacute,
	Abreve: Abreve,
	Acir: Acir,
	Acirc: Acirc,
	Acy: Acy,
	Afr: Afr,
	Agrav: Agrav,
	Agrave: Agrave,
	Alpha: Alpha,
	Amacr: Amacr,
	And: And,
	Aogon: Aogon,
	Aopf: Aopf,
	ApplyFunction: ApplyFunction,
	Arin: Arin,
	Aring: Aring,
	Ascr: Ascr,
	Assign: Assign,
	Atild: Atild,
	Atilde: Atilde,
	Aum: Aum,
	Auml: Auml,
	Backslash: Backslash,
	Barv: Barv,
	Barwed: Barwed,
	Bcy: Bcy,
	Because: Because,
	Bernoullis: Bernoullis,
	Beta: Beta,
	Bfr: Bfr,
	Bopf: Bopf,
	Breve: Breve,
	Bscr: Bscr,
	Bumpeq: Bumpeq,
	CHcy: CHcy,
	COP: COP,
	COPY: COPY,
	Cacute: Cacute,
	Cap: Cap,
	CapitalDifferentialD: CapitalDifferentialD,
	Cayleys: Cayleys,
	Ccaron: Ccaron,
	Ccedi: Ccedi,
	Ccedil: Ccedil,
	Ccirc: Ccirc,
	Cconint: Cconint,
	Cdot: Cdot,
	Cedilla: Cedilla,
	CenterDot: CenterDot,
	Cfr: Cfr,
	Chi: Chi,
	CircleDot: CircleDot,
	CircleMinus: CircleMinus,
	CirclePlus: CirclePlus,
	CircleTimes: CircleTimes,
	ClockwiseContourIntegral: ClockwiseContourIntegral,
	CloseCurlyDoubleQuote: CloseCurlyDoubleQuote,
	CloseCurlyQuote: CloseCurlyQuote,
	Colon: Colon,
	Colone: Colone,
	Congruent: Congruent,
	Conint: Conint,
	ContourIntegral: ContourIntegral,
	Copf: Copf,
	Coproduct: Coproduct,
	CounterClockwiseContourIntegral: CounterClockwiseContourIntegral,
	Cross: Cross,
	Cscr: Cscr,
	Cup: Cup,
	CupCap: CupCap,
	DD: DD,
	DDotrahd: DDotrahd,
	DJcy: DJcy,
	DScy: DScy,
	DZcy: DZcy,
	Dagger: Dagger,
	Darr: Darr,
	Dashv: Dashv,
	Dcaron: Dcaron,
	Dcy: Dcy,
	Del: Del,
	Delta: Delta,
	Dfr: Dfr,
	DiacriticalAcute: DiacriticalAcute,
	DiacriticalDot: DiacriticalDot,
	DiacriticalDoubleAcute: DiacriticalDoubleAcute,
	DiacriticalGrave: DiacriticalGrave,
	DiacriticalTilde: DiacriticalTilde,
	Diamond: Diamond,
	DifferentialD: DifferentialD,
	Dopf: Dopf,
	Dot: Dot,
	DotDot: DotDot,
	DotEqual: DotEqual,
	DoubleContourIntegral: DoubleContourIntegral,
	DoubleDot: DoubleDot,
	DoubleDownArrow: DoubleDownArrow,
	DoubleLeftArrow: DoubleLeftArrow,
	DoubleLeftRightArrow: DoubleLeftRightArrow,
	DoubleLeftTee: DoubleLeftTee,
	DoubleLongLeftArrow: DoubleLongLeftArrow,
	DoubleLongLeftRightArrow: DoubleLongLeftRightArrow,
	DoubleLongRightArrow: DoubleLongRightArrow,
	DoubleRightArrow: DoubleRightArrow,
	DoubleRightTee: DoubleRightTee,
	DoubleUpArrow: DoubleUpArrow,
	DoubleUpDownArrow: DoubleUpDownArrow,
	DoubleVerticalBar: DoubleVerticalBar,
	DownArrow: DownArrow,
	DownArrowBar: DownArrowBar,
	DownArrowUpArrow: DownArrowUpArrow,
	DownBreve: DownBreve,
	DownLeftRightVector: DownLeftRightVector,
	DownLeftTeeVector: DownLeftTeeVector,
	DownLeftVector: DownLeftVector,
	DownLeftVectorBar: DownLeftVectorBar,
	DownRightTeeVector: DownRightTeeVector,
	DownRightVector: DownRightVector,
	DownRightVectorBar: DownRightVectorBar,
	DownTee: DownTee,
	DownTeeArrow: DownTeeArrow,
	Downarrow: Downarrow,
	Dscr: Dscr,
	Dstrok: Dstrok,
	ENG: ENG,
	ET: ET,
	ETH: ETH,
	Eacut: Eacut,
	Eacute: Eacute,
	Ecaron: Ecaron,
	Ecir: Ecir,
	Ecirc: Ecirc,
	Ecy: Ecy,
	Edot: Edot,
	Efr: Efr,
	Egrav: Egrav,
	Egrave: Egrave,
	Element: Element,
	Emacr: Emacr,
	EmptySmallSquare: EmptySmallSquare,
	EmptyVerySmallSquare: EmptyVerySmallSquare,
	Eogon: Eogon,
	Eopf: Eopf,
	Epsilon: Epsilon,
	Equal: Equal,
	EqualTilde: EqualTilde,
	Equilibrium: Equilibrium,
	Escr: Escr,
	Esim: Esim,
	Eta: Eta,
	Eum: Eum,
	Euml: Euml,
	Exists: Exists,
	ExponentialE: ExponentialE,
	Fcy: Fcy,
	Ffr: Ffr,
	FilledSmallSquare: FilledSmallSquare,
	FilledVerySmallSquare: FilledVerySmallSquare,
	Fopf: Fopf,
	ForAll: ForAll,
	Fouriertrf: Fouriertrf,
	Fscr: Fscr,
	GJcy: GJcy,
	G: G,
	GT: GT,
	Gamma: Gamma,
	Gammad: Gammad,
	Gbreve: Gbreve,
	Gcedil: Gcedil,
	Gcirc: Gcirc,
	Gcy: Gcy,
	Gdot: Gdot,
	Gfr: Gfr,
	Gg: Gg,
	Gopf: Gopf,
	GreaterEqual: GreaterEqual,
	GreaterEqualLess: GreaterEqualLess,
	GreaterFullEqual: GreaterFullEqual,
	GreaterGreater: GreaterGreater,
	GreaterLess: GreaterLess,
	GreaterSlantEqual: GreaterSlantEqual,
	GreaterTilde: GreaterTilde,
	Gscr: Gscr,
	Gt: Gt,
	HARDcy: HARDcy,
	Hacek: Hacek,
	Hat: Hat,
	Hcirc: Hcirc,
	Hfr: Hfr,
	HilbertSpace: HilbertSpace,
	Hopf: Hopf,
	HorizontalLine: HorizontalLine,
	Hscr: Hscr,
	Hstrok: Hstrok,
	HumpDownHump: HumpDownHump,
	HumpEqual: HumpEqual,
	IEcy: IEcy,
	IJlig: IJlig,
	IOcy: IOcy,
	Iacut: Iacut,
	Iacute: Iacute,
	Icir: Icir,
	Icirc: Icirc,
	Icy: Icy,
	Idot: Idot,
	Ifr: Ifr,
	Igrav: Igrav,
	Igrave: Igrave,
	Im: Im,
	Imacr: Imacr,
	ImaginaryI: ImaginaryI,
	Implies: Implies,
	Int: Int,
	Integral: Integral,
	Intersection: Intersection,
	InvisibleComma: InvisibleComma,
	InvisibleTimes: InvisibleTimes,
	Iogon: Iogon,
	Iopf: Iopf,
	Iota: Iota,
	Iscr: Iscr,
	Itilde: Itilde,
	Iukcy: Iukcy,
	Ium: Ium,
	Iuml: Iuml,
	Jcirc: Jcirc,
	Jcy: Jcy,
	Jfr: Jfr,
	Jopf: Jopf,
	Jscr: Jscr,
	Jsercy: Jsercy,
	Jukcy: Jukcy,
	KHcy: KHcy,
	KJcy: KJcy,
	Kappa: Kappa,
	Kcedil: Kcedil,
	Kcy: Kcy,
	Kfr: Kfr,
	Kopf: Kopf,
	Kscr: Kscr,
	LJcy: LJcy,
	L: L,
	LT: LT,
	Lacute: Lacute,
	Lambda: Lambda,
	Lang: Lang,
	Laplacetrf: Laplacetrf,
	Larr: Larr,
	Lcaron: Lcaron,
	Lcedil: Lcedil,
	Lcy: Lcy,
	LeftAngleBracket: LeftAngleBracket,
	LeftArrow: LeftArrow,
	LeftArrowBar: LeftArrowBar,
	LeftArrowRightArrow: LeftArrowRightArrow,
	LeftCeiling: LeftCeiling,
	LeftDoubleBracket: LeftDoubleBracket,
	LeftDownTeeVector: LeftDownTeeVector,
	LeftDownVector: LeftDownVector,
	LeftDownVectorBar: LeftDownVectorBar,
	LeftFloor: LeftFloor,
	LeftRightArrow: LeftRightArrow,
	LeftRightVector: LeftRightVector,
	LeftTee: LeftTee,
	LeftTeeArrow: LeftTeeArrow,
	LeftTeeVector: LeftTeeVector,
	LeftTriangle: LeftTriangle,
	LeftTriangleBar: LeftTriangleBar,
	LeftTriangleEqual: LeftTriangleEqual,
	LeftUpDownVector: LeftUpDownVector,
	LeftUpTeeVector: LeftUpTeeVector,
	LeftUpVector: LeftUpVector,
	LeftUpVectorBar: LeftUpVectorBar,
	LeftVector: LeftVector,
	LeftVectorBar: LeftVectorBar,
	Leftarrow: Leftarrow,
	Leftrightarrow: Leftrightarrow,
	LessEqualGreater: LessEqualGreater,
	LessFullEqual: LessFullEqual,
	LessGreater: LessGreater,
	LessLess: LessLess,
	LessSlantEqual: LessSlantEqual,
	LessTilde: LessTilde,
	Lfr: Lfr,
	Ll: Ll,
	Lleftarrow: Lleftarrow,
	Lmidot: Lmidot,
	LongLeftArrow: LongLeftArrow,
	LongLeftRightArrow: LongLeftRightArrow,
	LongRightArrow: LongRightArrow,
	Longleftarrow: Longleftarrow,
	Longleftrightarrow: Longleftrightarrow,
	Longrightarrow: Longrightarrow,
	Lopf: Lopf,
	LowerLeftArrow: LowerLeftArrow,
	LowerRightArrow: LowerRightArrow,
	Lscr: Lscr,
	Lsh: Lsh,
	Lstrok: Lstrok,
	Lt: Lt,
	Mcy: Mcy,
	MediumSpace: MediumSpace,
	Mellintrf: Mellintrf,
	Mfr: Mfr,
	MinusPlus: MinusPlus,
	Mopf: Mopf,
	Mscr: Mscr,
	Mu: Mu,
	NJcy: NJcy,
	Nacute: Nacute,
	Ncaron: Ncaron,
	Ncedil: Ncedil,
	Ncy: Ncy,
	NegativeMediumSpace: NegativeMediumSpace,
	NegativeThickSpace: NegativeThickSpace,
	NegativeThinSpace: NegativeThinSpace,
	NegativeVeryThinSpace: NegativeVeryThinSpace,
	NestedGreaterGreater: NestedGreaterGreater,
	NestedLessLess: NestedLessLess,
	NewLine: NewLine,
	Nfr: Nfr,
	NoBreak: NoBreak,
	NonBreakingSpace: NonBreakingSpace,
	Nopf: Nopf,
	Not: Not,
	NotCongruent: NotCongruent,
	NotCupCap: NotCupCap,
	NotDoubleVerticalBar: NotDoubleVerticalBar,
	NotElement: NotElement,
	NotEqual: NotEqual,
	NotEqualTilde: NotEqualTilde,
	NotExists: NotExists,
	NotGreater: NotGreater,
	NotGreaterEqual: NotGreaterEqual,
	NotGreaterFullEqual: NotGreaterFullEqual,
	NotGreaterGreater: NotGreaterGreater,
	NotGreaterLess: NotGreaterLess,
	NotGreaterSlantEqual: NotGreaterSlantEqual,
	NotGreaterTilde: NotGreaterTilde,
	NotHumpDownHump: NotHumpDownHump,
	NotHumpEqual: NotHumpEqual,
	NotLeftTriangle: NotLeftTriangle,
	NotLeftTriangleBar: NotLeftTriangleBar,
	NotLeftTriangleEqual: NotLeftTriangleEqual,
	NotLess: NotLess,
	NotLessEqual: NotLessEqual,
	NotLessGreater: NotLessGreater,
	NotLessLess: NotLessLess,
	NotLessSlantEqual: NotLessSlantEqual,
	NotLessTilde: NotLessTilde,
	NotNestedGreaterGreater: NotNestedGreaterGreater,
	NotNestedLessLess: NotNestedLessLess,
	NotPrecedes: NotPrecedes,
	NotPrecedesEqual: NotPrecedesEqual,
	NotPrecedesSlantEqual: NotPrecedesSlantEqual,
	NotReverseElement: NotReverseElement,
	NotRightTriangle: NotRightTriangle,
	NotRightTriangleBar: NotRightTriangleBar,
	NotRightTriangleEqual: NotRightTriangleEqual,
	NotSquareSubset: NotSquareSubset,
	NotSquareSubsetEqual: NotSquareSubsetEqual,
	NotSquareSuperset: NotSquareSuperset,
	NotSquareSupersetEqual: NotSquareSupersetEqual,
	NotSubset: NotSubset,
	NotSubsetEqual: NotSubsetEqual,
	NotSucceeds: NotSucceeds,
	NotSucceedsEqual: NotSucceedsEqual,
	NotSucceedsSlantEqual: NotSucceedsSlantEqual,
	NotSucceedsTilde: NotSucceedsTilde,
	NotSuperset: NotSuperset,
	NotSupersetEqual: NotSupersetEqual,
	NotTilde: NotTilde,
	NotTildeEqual: NotTildeEqual,
	NotTildeFullEqual: NotTildeFullEqual,
	NotTildeTilde: NotTildeTilde,
	NotVerticalBar: NotVerticalBar,
	Nscr: Nscr,
	Ntild: Ntild,
	Ntilde: Ntilde,
	Nu: Nu,
	OElig: OElig,
	Oacut: Oacut,
	Oacute: Oacute,
	Ocir: Ocir,
	Ocirc: Ocirc,
	Ocy: Ocy,
	Odblac: Odblac,
	Ofr: Ofr,
	Ograv: Ograv,
	Ograve: Ograve,
	Omacr: Omacr,
	Omega: Omega,
	Omicron: Omicron,
	Oopf: Oopf,
	OpenCurlyDoubleQuote: OpenCurlyDoubleQuote,
	OpenCurlyQuote: OpenCurlyQuote,
	Or: Or,
	Oscr: Oscr,
	Oslas: Oslas,
	Oslash: Oslash,
	Otild: Otild,
	Otilde: Otilde,
	Otimes: Otimes,
	Oum: Oum,
	Ouml: Ouml,
	OverBar: OverBar,
	OverBrace: OverBrace,
	OverBracket: OverBracket,
	OverParenthesis: OverParenthesis,
	PartialD: PartialD,
	Pcy: Pcy,
	Pfr: Pfr,
	Phi: Phi,
	Pi: Pi,
	PlusMinus: PlusMinus,
	Poincareplane: Poincareplane,
	Popf: Popf,
	Pr: Pr,
	Precedes: Precedes,
	PrecedesEqual: PrecedesEqual,
	PrecedesSlantEqual: PrecedesSlantEqual,
	PrecedesTilde: PrecedesTilde,
	Prime: Prime,
	Product: Product,
	Proportion: Proportion,
	Proportional: Proportional,
	Pscr: Pscr,
	Psi: Psi,
	QUO: QUO,
	QUOT: QUOT,
	Qfr: Qfr,
	Qopf: Qopf,
	Qscr: Qscr,
	RBarr: RBarr,
	RE: RE,
	REG: REG,
	Racute: Racute,
	Rang: Rang,
	Rarr: Rarr,
	Rarrtl: Rarrtl,
	Rcaron: Rcaron,
	Rcedil: Rcedil,
	Rcy: Rcy,
	Re: Re,
	ReverseElement: ReverseElement,
	ReverseEquilibrium: ReverseEquilibrium,
	ReverseUpEquilibrium: ReverseUpEquilibrium,
	Rfr: Rfr,
	Rho: Rho,
	RightAngleBracket: RightAngleBracket,
	RightArrow: RightArrow,
	RightArrowBar: RightArrowBar,
	RightArrowLeftArrow: RightArrowLeftArrow,
	RightCeiling: RightCeiling,
	RightDoubleBracket: RightDoubleBracket,
	RightDownTeeVector: RightDownTeeVector,
	RightDownVector: RightDownVector,
	RightDownVectorBar: RightDownVectorBar,
	RightFloor: RightFloor,
	RightTee: RightTee,
	RightTeeArrow: RightTeeArrow,
	RightTeeVector: RightTeeVector,
	RightTriangle: RightTriangle,
	RightTriangleBar: RightTriangleBar,
	RightTriangleEqual: RightTriangleEqual,
	RightUpDownVector: RightUpDownVector,
	RightUpTeeVector: RightUpTeeVector,
	RightUpVector: RightUpVector,
	RightUpVectorBar: RightUpVectorBar,
	RightVector: RightVector,
	RightVectorBar: RightVectorBar,
	Rightarrow: Rightarrow,
	Ropf: Ropf,
	RoundImplies: RoundImplies,
	Rrightarrow: Rrightarrow,
	Rscr: Rscr,
	Rsh: Rsh,
	RuleDelayed: RuleDelayed,
	SHCHcy: SHCHcy,
	SHcy: SHcy,
	SOFTcy: SOFTcy,
	Sacute: Sacute,
	Sc: Sc,
	Scaron: Scaron,
	Scedil: Scedil,
	Scirc: Scirc,
	Scy: Scy,
	Sfr: Sfr,
	ShortDownArrow: ShortDownArrow,
	ShortLeftArrow: ShortLeftArrow,
	ShortRightArrow: ShortRightArrow,
	ShortUpArrow: ShortUpArrow,
	Sigma: Sigma,
	SmallCircle: SmallCircle,
	Sopf: Sopf,
	Sqrt: Sqrt,
	Square: Square,
	SquareIntersection: SquareIntersection,
	SquareSubset: SquareSubset,
	SquareSubsetEqual: SquareSubsetEqual,
	SquareSuperset: SquareSuperset,
	SquareSupersetEqual: SquareSupersetEqual,
	SquareUnion: SquareUnion,
	Sscr: Sscr,
	Star: Star,
	Sub: Sub,
	Subset: Subset,
	SubsetEqual: SubsetEqual,
	Succeeds: Succeeds,
	SucceedsEqual: SucceedsEqual,
	SucceedsSlantEqual: SucceedsSlantEqual,
	SucceedsTilde: SucceedsTilde,
	SuchThat: SuchThat,
	Sum: Sum,
	Sup: Sup,
	Superset: Superset,
	SupersetEqual: SupersetEqual,
	Supset: Supset,
	THOR: THOR,
	THORN: THORN,
	TRADE: TRADE,
	TSHcy: TSHcy,
	TScy: TScy,
	Tab: Tab,
	Tau: Tau,
	Tcaron: Tcaron,
	Tcedil: Tcedil,
	Tcy: Tcy,
	Tfr: Tfr,
	Therefore: Therefore,
	Theta: Theta,
	ThickSpace: ThickSpace,
	ThinSpace: ThinSpace,
	Tilde: Tilde,
	TildeEqual: TildeEqual,
	TildeFullEqual: TildeFullEqual,
	TildeTilde: TildeTilde,
	Topf: Topf,
	TripleDot: TripleDot,
	Tscr: Tscr,
	Tstrok: Tstrok,
	Uacut: Uacut,
	Uacute: Uacute,
	Uarr: Uarr,
	Uarrocir: Uarrocir,
	Ubrcy: Ubrcy,
	Ubreve: Ubreve,
	Ucir: Ucir,
	Ucirc: Ucirc,
	Ucy: Ucy,
	Udblac: Udblac,
	Ufr: Ufr,
	Ugrav: Ugrav,
	Ugrave: Ugrave,
	Umacr: Umacr,
	UnderBar: UnderBar,
	UnderBrace: UnderBrace,
	UnderBracket: UnderBracket,
	UnderParenthesis: UnderParenthesis,
	Union: Union,
	UnionPlus: UnionPlus,
	Uogon: Uogon,
	Uopf: Uopf,
	UpArrow: UpArrow,
	UpArrowBar: UpArrowBar,
	UpArrowDownArrow: UpArrowDownArrow,
	UpDownArrow: UpDownArrow,
	UpEquilibrium: UpEquilibrium,
	UpTee: UpTee,
	UpTeeArrow: UpTeeArrow,
	Uparrow: Uparrow,
	Updownarrow: Updownarrow,
	UpperLeftArrow: UpperLeftArrow,
	UpperRightArrow: UpperRightArrow,
	Upsi: Upsi,
	Upsilon: Upsilon,
	Uring: Uring,
	Uscr: Uscr,
	Utilde: Utilde,
	Uum: Uum,
	Uuml: Uuml,
	VDash: VDash,
	Vbar: Vbar,
	Vcy: Vcy,
	Vdash: Vdash,
	Vdashl: Vdashl,
	Vee: Vee,
	Verbar: Verbar,
	Vert: Vert,
	VerticalBar: VerticalBar,
	VerticalLine: VerticalLine,
	VerticalSeparator: VerticalSeparator,
	VerticalTilde: VerticalTilde,
	VeryThinSpace: VeryThinSpace,
	Vfr: Vfr,
	Vopf: Vopf,
	Vscr: Vscr,
	Vvdash: Vvdash,
	Wcirc: Wcirc,
	Wedge: Wedge,
	Wfr: Wfr,
	Wopf: Wopf,
	Wscr: Wscr,
	Xfr: Xfr,
	Xi: Xi,
	Xopf: Xopf,
	Xscr: Xscr,
	YAcy: YAcy,
	YIcy: YIcy,
	YUcy: YUcy,
	Yacut: Yacut,
	Yacute: Yacute,
	Ycirc: Ycirc,
	Ycy: Ycy,
	Yfr: Yfr,
	Yopf: Yopf,
	Yscr: Yscr,
	Yuml: Yuml,
	ZHcy: ZHcy,
	Zacute: Zacute,
	Zcaron: Zcaron,
	Zcy: Zcy,
	Zdot: Zdot,
	ZeroWidthSpace: ZeroWidthSpace,
	Zeta: Zeta,
	Zfr: Zfr,
	Zopf: Zopf,
	Zscr: Zscr,
	aacut: aacut,
	aacute: aacute,
	abreve: abreve,
	ac: ac,
	acE: acE,
	acd: acd,
	acir: acir,
	acirc: acirc,
	acut: acut,
	acute: acute,
	acy: acy,
	aeli: aeli,
	aelig: aelig,
	af: af,
	afr: afr,
	agrav: agrav,
	agrave: agrave,
	alefsym: alefsym,
	aleph: aleph,
	alpha: alpha,
	amacr: amacr,
	amalg: amalg,
	am: am,
	amp: amp,
	and: and,
	andand: andand,
	andd: andd,
	andslope: andslope,
	andv: andv,
	ang: ang,
	ange: ange,
	angle: angle,
	angmsd: angmsd,
	angmsdaa: angmsdaa,
	angmsdab: angmsdab,
	angmsdac: angmsdac,
	angmsdad: angmsdad,
	angmsdae: angmsdae,
	angmsdaf: angmsdaf,
	angmsdag: angmsdag,
	angmsdah: angmsdah,
	angrt: angrt,
	angrtvb: angrtvb,
	angrtvbd: angrtvbd,
	angsph: angsph,
	angst: angst,
	angzarr: angzarr,
	aogon: aogon,
	aopf: aopf,
	ap: ap,
	apE: apE,
	apacir: apacir,
	ape: ape,
	apid: apid,
	apos: apos,
	approx: approx,
	approxeq: approxeq,
	arin: arin,
	aring: aring,
	ascr: ascr,
	ast: ast,
	asymp: asymp,
	asympeq: asympeq,
	atild: atild,
	atilde: atilde,
	aum: aum,
	auml: auml,
	awconint: awconint,
	awint: awint,
	bNot: bNot,
	backcong: backcong,
	backepsilon: backepsilon,
	backprime: backprime,
	backsim: backsim,
	backsimeq: backsimeq,
	barvee: barvee,
	barwed: barwed,
	barwedge: barwedge,
	bbrk: bbrk,
	bbrktbrk: bbrktbrk,
	bcong: bcong,
	bcy: bcy,
	bdquo: bdquo,
	becaus: becaus,
	because: because,
	bemptyv: bemptyv,
	bepsi: bepsi,
	bernou: bernou,
	beta: beta,
	beth: beth,
	between: between,
	bfr: bfr,
	bigcap: bigcap,
	bigcirc: bigcirc,
	bigcup: bigcup,
	bigodot: bigodot,
	bigoplus: bigoplus,
	bigotimes: bigotimes,
	bigsqcup: bigsqcup,
	bigstar: bigstar,
	bigtriangledown: bigtriangledown,
	bigtriangleup: bigtriangleup,
	biguplus: biguplus,
	bigvee: bigvee,
	bigwedge: bigwedge,
	bkarow: bkarow,
	blacklozenge: blacklozenge,
	blacksquare: blacksquare,
	blacktriangle: blacktriangle,
	blacktriangledown: blacktriangledown,
	blacktriangleleft: blacktriangleleft,
	blacktriangleright: blacktriangleright,
	blank: blank,
	blk12: blk12,
	blk14: blk14,
	blk34: blk34,
	block: block,
	bne: bne,
	bnequiv: bnequiv,
	bnot: bnot,
	bopf: bopf,
	bot: bot,
	bottom: bottom,
	bowtie: bowtie,
	boxDL: boxDL,
	boxDR: boxDR,
	boxDl: boxDl,
	boxDr: boxDr,
	boxH: boxH,
	boxHD: boxHD,
	boxHU: boxHU,
	boxHd: boxHd,
	boxHu: boxHu,
	boxUL: boxUL,
	boxUR: boxUR,
	boxUl: boxUl,
	boxUr: boxUr,
	boxV: boxV,
	boxVH: boxVH,
	boxVL: boxVL,
	boxVR: boxVR,
	boxVh: boxVh,
	boxVl: boxVl,
	boxVr: boxVr,
	boxbox: boxbox,
	boxdL: boxdL,
	boxdR: boxdR,
	boxdl: boxdl,
	boxdr: boxdr,
	boxh: boxh,
	boxhD: boxhD,
	boxhU: boxhU,
	boxhd: boxhd,
	boxhu: boxhu,
	boxminus: boxminus,
	boxplus: boxplus,
	boxtimes: boxtimes,
	boxuL: boxuL,
	boxuR: boxuR,
	boxul: boxul,
	boxur: boxur,
	boxv: boxv,
	boxvH: boxvH,
	boxvL: boxvL,
	boxvR: boxvR,
	boxvh: boxvh,
	boxvl: boxvl,
	boxvr: boxvr,
	bprime: bprime,
	breve: breve,
	brvba: brvba,
	brvbar: brvbar,
	bscr: bscr,
	bsemi: bsemi,
	bsim: bsim,
	bsime: bsime,
	bsol: bsol,
	bsolb: bsolb,
	bsolhsub: bsolhsub,
	bull: bull,
	bullet: bullet,
	bump: bump,
	bumpE: bumpE,
	bumpe: bumpe,
	bumpeq: bumpeq,
	cacute: cacute,
	cap: cap,
	capand: capand,
	capbrcup: capbrcup,
	capcap: capcap,
	capcup: capcup,
	capdot: capdot,
	caps: caps,
	caret: caret,
	caron: caron,
	ccaps: ccaps,
	ccaron: ccaron,
	ccedi: ccedi,
	ccedil: ccedil,
	ccirc: ccirc,
	ccups: ccups,
	ccupssm: ccupssm,
	cdot: cdot,
	cedi: cedi,
	cedil: cedil,
	cemptyv: cemptyv,
	cen: cen,
	cent: cent,
	centerdot: centerdot,
	cfr: cfr,
	chcy: chcy,
	check: check$1,
	checkmark: checkmark,
	chi: chi,
	cir: cir,
	cirE: cirE,
	circ: circ,
	circeq: circeq,
	circlearrowleft: circlearrowleft,
	circlearrowright: circlearrowright,
	circledR: circledR,
	circledS: circledS,
	circledast: circledast,
	circledcirc: circledcirc,
	circleddash: circleddash,
	cire: cire,
	cirfnint: cirfnint,
	cirmid: cirmid,
	cirscir: cirscir,
	clubs: clubs,
	clubsuit: clubsuit,
	colon: colon,
	colone: colone,
	coloneq: coloneq,
	comma: comma,
	commat: commat,
	comp: comp,
	compfn: compfn,
	complement: complement,
	complexes: complexes,
	cong: cong,
	congdot: congdot,
	conint: conint,
	copf: copf,
	coprod: coprod,
	cop: cop,
	copy: copy,
	copysr: copysr,
	crarr: crarr,
	cross: cross,
	cscr: cscr,
	csub: csub,
	csube: csube,
	csup: csup,
	csupe: csupe,
	ctdot: ctdot,
	cudarrl: cudarrl,
	cudarrr: cudarrr,
	cuepr: cuepr,
	cuesc: cuesc,
	cularr: cularr,
	cularrp: cularrp,
	cup: cup,
	cupbrcap: cupbrcap,
	cupcap: cupcap,
	cupcup: cupcup,
	cupdot: cupdot,
	cupor: cupor,
	cups: cups,
	curarr: curarr,
	curarrm: curarrm,
	curlyeqprec: curlyeqprec,
	curlyeqsucc: curlyeqsucc,
	curlyvee: curlyvee,
	curlywedge: curlywedge,
	curre: curre,
	curren: curren,
	curvearrowleft: curvearrowleft,
	curvearrowright: curvearrowright,
	cuvee: cuvee,
	cuwed: cuwed,
	cwconint: cwconint,
	cwint: cwint,
	cylcty: cylcty,
	dArr: dArr,
	dHar: dHar,
	dagger: dagger,
	daleth: daleth,
	darr: darr,
	dash: dash,
	dashv: dashv,
	dbkarow: dbkarow,
	dblac: dblac,
	dcaron: dcaron,
	dcy: dcy,
	dd: dd,
	ddagger: ddagger,
	ddarr: ddarr,
	ddotseq: ddotseq,
	de: de,
	deg: deg,
	delta: delta,
	demptyv: demptyv,
	dfisht: dfisht,
	dfr: dfr,
	dharl: dharl,
	dharr: dharr,
	diam: diam,
	diamond: diamond,
	diamondsuit: diamondsuit,
	diams: diams,
	die: die,
	digamma: digamma,
	disin: disin,
	div: div,
	divid: divid,
	divide: divide$1,
	divideontimes: divideontimes,
	divonx: divonx,
	djcy: djcy,
	dlcorn: dlcorn,
	dlcrop: dlcrop,
	dollar: dollar,
	dopf: dopf,
	dot: dot,
	doteq: doteq,
	doteqdot: doteqdot,
	dotminus: dotminus,
	dotplus: dotplus,
	dotsquare: dotsquare,
	doublebarwedge: doublebarwedge,
	downarrow: downarrow,
	downdownarrows: downdownarrows,
	downharpoonleft: downharpoonleft,
	downharpoonright: downharpoonright,
	drbkarow: drbkarow,
	drcorn: drcorn,
	drcrop: drcrop,
	dscr: dscr,
	dscy: dscy,
	dsol: dsol,
	dstrok: dstrok,
	dtdot: dtdot,
	dtri: dtri,
	dtrif: dtrif,
	duarr: duarr,
	duhar: duhar,
	dwangle: dwangle,
	dzcy: dzcy,
	dzigrarr: dzigrarr,
	eDDot: eDDot,
	eDot: eDot,
	eacut: eacut,
	eacute: eacute,
	easter: easter,
	ecaron: ecaron,
	ecir: ecir,
	ecirc: ecirc,
	ecolon: ecolon,
	ecy: ecy,
	edot: edot,
	ee: ee,
	efDot: efDot,
	efr: efr,
	eg: eg,
	egrav: egrav,
	egrave: egrave,
	egs: egs,
	egsdot: egsdot,
	el: el,
	elinters: elinters,
	ell: ell,
	els: els,
	elsdot: elsdot,
	emacr: emacr,
	empty: empty$1,
	emptyset: emptyset,
	emptyv: emptyv,
	emsp13: emsp13,
	emsp14: emsp14,
	emsp: emsp,
	eng: eng,
	ensp: ensp,
	eogon: eogon,
	eopf: eopf,
	epar: epar,
	eparsl: eparsl,
	eplus: eplus,
	epsi: epsi,
	epsilon: epsilon,
	epsiv: epsiv,
	eqcirc: eqcirc,
	eqcolon: eqcolon,
	eqsim: eqsim,
	eqslantgtr: eqslantgtr,
	eqslantless: eqslantless,
	equals: equals,
	equest: equest,
	equiv: equiv,
	equivDD: equivDD,
	eqvparsl: eqvparsl,
	erDot: erDot,
	erarr: erarr,
	escr: escr,
	esdot: esdot,
	esim: esim,
	eta: eta,
	et: et,
	eth: eth,
	eum: eum,
	euml: euml,
	euro: euro,
	excl: excl,
	exist: exist,
	expectation: expectation,
	exponentiale: exponentiale,
	fallingdotseq: fallingdotseq,
	fcy: fcy,
	female: female,
	ffilig: ffilig,
	fflig: fflig,
	ffllig: ffllig,
	ffr: ffr,
	filig: filig,
	fjlig: fjlig,
	flat: flat,
	fllig: fllig,
	fltns: fltns,
	fnof: fnof,
	fopf: fopf,
	forall: forall,
	fork: fork,
	forkv: forkv,
	fpartint: fpartint,
	frac1: frac1,
	frac12: frac12,
	frac13: frac13,
	frac14: frac14,
	frac15: frac15,
	frac16: frac16,
	frac18: frac18,
	frac23: frac23,
	frac25: frac25,
	frac3: frac3,
	frac34: frac34,
	frac35: frac35,
	frac38: frac38,
	frac45: frac45,
	frac56: frac56,
	frac58: frac58,
	frac78: frac78,
	frasl: frasl,
	frown: frown,
	fscr: fscr,
	gE: gE,
	gEl: gEl,
	gacute: gacute,
	gamma: gamma,
	gammad: gammad,
	gap: gap,
	gbreve: gbreve,
	gcirc: gcirc,
	gcy: gcy,
	gdot: gdot,
	ge: ge,
	gel: gel,
	geq: geq,
	geqq: geqq,
	geqslant: geqslant,
	ges: ges,
	gescc: gescc,
	gesdot: gesdot,
	gesdoto: gesdoto,
	gesdotol: gesdotol,
	gesl: gesl,
	gesles: gesles,
	gfr: gfr,
	gg: gg,
	ggg: ggg,
	gimel: gimel,
	gjcy: gjcy,
	gl: gl,
	glE: glE,
	gla: gla,
	glj: glj,
	gnE: gnE,
	gnap: gnap,
	gnapprox: gnapprox,
	gne: gne,
	gneq: gneq,
	gneqq: gneqq,
	gnsim: gnsim,
	gopf: gopf,
	grave: grave,
	gscr: gscr,
	gsim: gsim,
	gsime: gsime,
	gsiml: gsiml,
	g: g,
	gt: gt,
	gtcc: gtcc,
	gtcir: gtcir,
	gtdot: gtdot,
	gtlPar: gtlPar,
	gtquest: gtquest,
	gtrapprox: gtrapprox,
	gtrarr: gtrarr,
	gtrdot: gtrdot,
	gtreqless: gtreqless,
	gtreqqless: gtreqqless,
	gtrless: gtrless,
	gtrsim: gtrsim,
	gvertneqq: gvertneqq,
	gvnE: gvnE,
	hArr: hArr,
	hairsp: hairsp,
	half: half,
	hamilt: hamilt,
	hardcy: hardcy,
	harr: harr,
	harrcir: harrcir,
	harrw: harrw,
	hbar: hbar,
	hcirc: hcirc,
	hearts: hearts,
	heartsuit: heartsuit,
	hellip: hellip,
	hercon: hercon,
	hfr: hfr,
	hksearow: hksearow,
	hkswarow: hkswarow,
	hoarr: hoarr,
	homtht: homtht,
	hookleftarrow: hookleftarrow,
	hookrightarrow: hookrightarrow,
	hopf: hopf,
	horbar: horbar,
	hscr: hscr,
	hslash: hslash,
	hstrok: hstrok,
	hybull: hybull,
	hyphen: hyphen,
	iacut: iacut,
	iacute: iacute,
	ic: ic,
	icir: icir,
	icirc: icirc,
	icy: icy,
	iecy: iecy,
	iexc: iexc,
	iexcl: iexcl,
	iff: iff,
	ifr: ifr,
	igrav: igrav,
	igrave: igrave,
	ii: ii,
	iiiint: iiiint,
	iiint: iiint,
	iinfin: iinfin,
	iiota: iiota,
	ijlig: ijlig,
	imacr: imacr,
	image: image,
	imagline: imagline,
	imagpart: imagpart,
	imath: imath,
	imof: imof,
	imped: imped,
	incare: incare,
	infin: infin,
	infintie: infintie,
	inodot: inodot,
	int: int,
	intcal: intcal,
	integers: integers,
	intercal: intercal,
	intlarhk: intlarhk,
	intprod: intprod,
	iocy: iocy,
	iogon: iogon,
	iopf: iopf,
	iota: iota,
	iprod: iprod,
	iques: iques,
	iquest: iquest,
	iscr: iscr,
	isin: isin,
	isinE: isinE,
	isindot: isindot,
	isins: isins,
	isinsv: isinsv,
	isinv: isinv,
	it: it,
	itilde: itilde,
	iukcy: iukcy,
	ium: ium,
	iuml: iuml,
	jcirc: jcirc,
	jcy: jcy,
	jfr: jfr,
	jmath: jmath,
	jopf: jopf,
	jscr: jscr,
	jsercy: jsercy,
	jukcy: jukcy,
	kappa: kappa,
	kappav: kappav,
	kcedil: kcedil,
	kcy: kcy,
	kfr: kfr,
	kgreen: kgreen,
	khcy: khcy,
	kjcy: kjcy,
	kopf: kopf,
	kscr: kscr,
	lAarr: lAarr,
	lArr: lArr,
	lAtail: lAtail,
	lBarr: lBarr,
	lE: lE,
	lEg: lEg,
	lHar: lHar,
	lacute: lacute,
	laemptyv: laemptyv,
	lagran: lagran,
	lambda: lambda,
	lang: lang,
	langd: langd,
	langle: langle,
	lap: lap,
	laqu: laqu,
	laquo: laquo,
	larr: larr,
	larrb: larrb,
	larrbfs: larrbfs,
	larrfs: larrfs,
	larrhk: larrhk,
	larrlp: larrlp,
	larrpl: larrpl,
	larrsim: larrsim,
	larrtl: larrtl,
	lat: lat,
	latail: latail,
	late: late,
	lates: lates,
	lbarr: lbarr,
	lbbrk: lbbrk,
	lbrace: lbrace,
	lbrack: lbrack,
	lbrke: lbrke,
	lbrksld: lbrksld,
	lbrkslu: lbrkslu,
	lcaron: lcaron,
	lcedil: lcedil,
	lceil: lceil,
	lcub: lcub,
	lcy: lcy,
	ldca: ldca,
	ldquo: ldquo,
	ldquor: ldquor,
	ldrdhar: ldrdhar,
	ldrushar: ldrushar,
	ldsh: ldsh,
	le: le,
	leftarrow: leftarrow,
	leftarrowtail: leftarrowtail,
	leftharpoondown: leftharpoondown,
	leftharpoonup: leftharpoonup,
	leftleftarrows: leftleftarrows,
	leftrightarrow: leftrightarrow,
	leftrightarrows: leftrightarrows,
	leftrightharpoons: leftrightharpoons,
	leftrightsquigarrow: leftrightsquigarrow,
	leftthreetimes: leftthreetimes,
	leg: leg,
	leq: leq,
	leqq: leqq,
	leqslant: leqslant,
	les: les,
	lescc: lescc,
	lesdot: lesdot,
	lesdoto: lesdoto,
	lesdotor: lesdotor,
	lesg: lesg,
	lesges: lesges,
	lessapprox: lessapprox,
	lessdot: lessdot,
	lesseqgtr: lesseqgtr,
	lesseqqgtr: lesseqqgtr,
	lessgtr: lessgtr,
	lesssim: lesssim,
	lfisht: lfisht,
	lfloor: lfloor,
	lfr: lfr,
	lg: lg,
	lgE: lgE,
	lhard: lhard,
	lharu: lharu,
	lharul: lharul,
	lhblk: lhblk,
	ljcy: ljcy,
	ll: ll,
	llarr: llarr,
	llcorner: llcorner,
	llhard: llhard,
	lltri: lltri,
	lmidot: lmidot,
	lmoust: lmoust,
	lmoustache: lmoustache,
	lnE: lnE,
	lnap: lnap,
	lnapprox: lnapprox,
	lne: lne,
	lneq: lneq,
	lneqq: lneqq,
	lnsim: lnsim,
	loang: loang,
	loarr: loarr,
	lobrk: lobrk,
	longleftarrow: longleftarrow,
	longleftrightarrow: longleftrightarrow,
	longmapsto: longmapsto,
	longrightarrow: longrightarrow,
	looparrowleft: looparrowleft,
	looparrowright: looparrowright,
	lopar: lopar,
	lopf: lopf,
	loplus: loplus,
	lotimes: lotimes,
	lowast: lowast,
	lowbar: lowbar,
	loz: loz,
	lozenge: lozenge,
	lozf: lozf,
	lpar: lpar,
	lparlt: lparlt,
	lrarr: lrarr,
	lrcorner: lrcorner,
	lrhar: lrhar,
	lrhard: lrhard,
	lrm: lrm,
	lrtri: lrtri,
	lsaquo: lsaquo,
	lscr: lscr,
	lsh: lsh,
	lsim: lsim,
	lsime: lsime,
	lsimg: lsimg,
	lsqb: lsqb,
	lsquo: lsquo,
	lsquor: lsquor,
	lstrok: lstrok,
	l: l$1,
	lt: lt,
	ltcc: ltcc,
	ltcir: ltcir,
	ltdot: ltdot,
	lthree: lthree,
	ltimes: ltimes,
	ltlarr: ltlarr,
	ltquest: ltquest,
	ltrPar: ltrPar,
	ltri: ltri,
	ltrie: ltrie,
	ltrif: ltrif,
	lurdshar: lurdshar,
	luruhar: luruhar,
	lvertneqq: lvertneqq,
	lvnE: lvnE,
	mDDot: mDDot,
	mac: mac,
	macr: macr,
	male: male,
	malt: malt,
	maltese: maltese,
	map: map,
	mapsto: mapsto,
	mapstodown: mapstodown,
	mapstoleft: mapstoleft,
	mapstoup: mapstoup,
	marker: marker,
	mcomma: mcomma,
	mcy: mcy,
	mdash: mdash,
	measuredangle: measuredangle,
	mfr: mfr,
	mho: mho,
	micr: micr,
	micro: micro,
	mid: mid,
	midast: midast,
	midcir: midcir,
	middo: middo,
	middot: middot,
	minus: minus,
	minusb: minusb,
	minusd: minusd,
	minusdu: minusdu,
	mlcp: mlcp,
	mldr: mldr,
	mnplus: mnplus,
	models: models,
	mopf: mopf,
	mp: mp,
	mscr: mscr,
	mstpos: mstpos,
	mu: mu,
	multimap: multimap,
	mumap: mumap,
	nGg: nGg,
	nGt: nGt,
	nGtv: nGtv,
	nLeftarrow: nLeftarrow,
	nLeftrightarrow: nLeftrightarrow,
	nLl: nLl,
	nLt: nLt,
	nLtv: nLtv,
	nRightarrow: nRightarrow,
	nVDash: nVDash,
	nVdash: nVdash,
	nabla: nabla,
	nacute: nacute,
	nang: nang,
	nap: nap,
	napE: napE,
	napid: napid,
	napos: napos,
	napprox: napprox,
	natur: natur,
	natural: natural,
	naturals: naturals,
	nbs: nbs,
	nbsp: nbsp,
	nbump: nbump,
	nbumpe: nbumpe,
	ncap: ncap,
	ncaron: ncaron,
	ncedil: ncedil,
	ncong: ncong,
	ncongdot: ncongdot,
	ncup: ncup,
	ncy: ncy,
	ndash: ndash,
	ne: ne,
	neArr: neArr,
	nearhk: nearhk,
	nearr: nearr,
	nearrow: nearrow,
	nedot: nedot,
	nequiv: nequiv,
	nesear: nesear,
	nesim: nesim,
	nexist: nexist,
	nexists: nexists,
	nfr: nfr,
	ngE: ngE,
	nge: nge,
	ngeq: ngeq,
	ngeqq: ngeqq,
	ngeqslant: ngeqslant,
	nges: nges,
	ngsim: ngsim,
	ngt: ngt,
	ngtr: ngtr,
	nhArr: nhArr,
	nharr: nharr,
	nhpar: nhpar,
	ni: ni,
	nis: nis,
	nisd: nisd,
	niv: niv,
	njcy: njcy,
	nlArr: nlArr,
	nlE: nlE,
	nlarr: nlarr,
	nldr: nldr,
	nle: nle,
	nleftarrow: nleftarrow,
	nleftrightarrow: nleftrightarrow,
	nleq: nleq,
	nleqq: nleqq,
	nleqslant: nleqslant,
	nles: nles,
	nless: nless,
	nlsim: nlsim,
	nlt: nlt,
	nltri: nltri,
	nltrie: nltrie,
	nmid: nmid,
	nopf: nopf,
	no: no,
	not: not,
	notin: notin,
	notinE: notinE,
	notindot: notindot,
	notinva: notinva,
	notinvb: notinvb,
	notinvc: notinvc,
	notni: notni,
	notniva: notniva,
	notnivb: notnivb,
	notnivc: notnivc,
	npar: npar,
	nparallel: nparallel,
	nparsl: nparsl,
	npart: npart,
	npolint: npolint,
	npr: npr,
	nprcue: nprcue,
	npre: npre,
	nprec: nprec,
	npreceq: npreceq,
	nrArr: nrArr,
	nrarr: nrarr,
	nrarrc: nrarrc,
	nrarrw: nrarrw,
	nrightarrow: nrightarrow,
	nrtri: nrtri,
	nrtrie: nrtrie,
	nsc: nsc,
	nsccue: nsccue,
	nsce: nsce,
	nscr: nscr,
	nshortmid: nshortmid,
	nshortparallel: nshortparallel,
	nsim: nsim,
	nsime: nsime,
	nsimeq: nsimeq,
	nsmid: nsmid,
	nspar: nspar,
	nsqsube: nsqsube,
	nsqsupe: nsqsupe,
	nsub: nsub,
	nsubE: nsubE,
	nsube: nsube,
	nsubset: nsubset,
	nsubseteq: nsubseteq,
	nsubseteqq: nsubseteqq,
	nsucc: nsucc,
	nsucceq: nsucceq,
	nsup: nsup,
	nsupE: nsupE,
	nsupe: nsupe,
	nsupset: nsupset,
	nsupseteq: nsupseteq,
	nsupseteqq: nsupseteqq,
	ntgl: ntgl,
	ntild: ntild,
	ntilde: ntilde,
	ntlg: ntlg,
	ntriangleleft: ntriangleleft,
	ntrianglelefteq: ntrianglelefteq,
	ntriangleright: ntriangleright,
	ntrianglerighteq: ntrianglerighteq,
	nu: nu,
	num: num,
	numero: numero,
	numsp: numsp,
	nvDash: nvDash,
	nvHarr: nvHarr,
	nvap: nvap,
	nvdash: nvdash,
	nvge: nvge,
	nvgt: nvgt,
	nvinfin: nvinfin,
	nvlArr: nvlArr,
	nvle: nvle,
	nvlt: nvlt,
	nvltrie: nvltrie,
	nvrArr: nvrArr,
	nvrtrie: nvrtrie,
	nvsim: nvsim,
	nwArr: nwArr,
	nwarhk: nwarhk,
	nwarr: nwarr,
	nwarrow: nwarrow,
	nwnear: nwnear,
	oS: oS,
	oacut: oacut,
	oacute: oacute,
	oast: oast,
	ocir: ocir,
	ocirc: ocirc,
	ocy: ocy,
	odash: odash,
	odblac: odblac,
	odiv: odiv,
	odot: odot,
	odsold: odsold,
	oelig: oelig,
	ofcir: ofcir,
	ofr: ofr,
	ogon: ogon,
	ograv: ograv,
	ograve: ograve,
	ogt: ogt,
	ohbar: ohbar,
	ohm: ohm,
	oint: oint,
	olarr: olarr,
	olcir: olcir,
	olcross: olcross,
	oline: oline,
	olt: olt,
	omacr: omacr,
	omega: omega,
	omicron: omicron,
	omid: omid,
	ominus: ominus,
	oopf: oopf,
	opar: opar,
	operp: operp,
	oplus: oplus,
	or: or,
	orarr: orarr,
	ord: ord,
	order: order$1,
	orderof: orderof,
	ordf: ordf,
	ordm: ordm,
	origof: origof,
	oror: oror,
	orslope: orslope,
	orv: orv,
	oscr: oscr,
	oslas: oslas,
	oslash: oslash,
	osol: osol,
	otild: otild,
	otilde: otilde,
	otimes: otimes,
	otimesas: otimesas,
	oum: oum,
	ouml: ouml,
	ovbar: ovbar,
	par: par,
	para: para,
	parallel: parallel,
	parsim: parsim,
	parsl: parsl,
	part: part,
	pcy: pcy,
	percnt: percnt,
	period: period,
	permil: permil,
	perp: perp,
	pertenk: pertenk,
	pfr: pfr,
	phi: phi,
	phiv: phiv,
	phmmat: phmmat,
	phone: phone,
	pi: pi,
	pitchfork: pitchfork,
	piv: piv,
	planck: planck,
	planckh: planckh,
	plankv: plankv,
	plus: plus,
	plusacir: plusacir,
	plusb: plusb,
	pluscir: pluscir,
	plusdo: plusdo,
	plusdu: plusdu,
	pluse: pluse,
	plusm: plusm,
	plusmn: plusmn,
	plussim: plussim,
	plustwo: plustwo,
	pm: pm,
	pointint: pointint,
	popf: popf,
	poun: poun,
	pound: pound,
	pr: pr,
	prE: prE,
	prap: prap,
	prcue: prcue,
	pre: pre,
	prec: prec,
	precapprox: precapprox,
	preccurlyeq: preccurlyeq,
	preceq: preceq,
	precnapprox: precnapprox,
	precneqq: precneqq,
	precnsim: precnsim,
	precsim: precsim,
	prime: prime,
	primes: primes,
	prnE: prnE,
	prnap: prnap,
	prnsim: prnsim,
	prod: prod,
	profalar: profalar,
	profline: profline,
	profsurf: profsurf,
	prop: prop,
	propto: propto,
	prsim: prsim,
	prurel: prurel,
	pscr: pscr,
	psi: psi,
	puncsp: puncsp,
	qfr: qfr,
	qint: qint,
	qopf: qopf,
	qprime: qprime,
	qscr: qscr,
	quaternions: quaternions,
	quatint: quatint,
	quest: quest,
	questeq: questeq,
	quo: quo,
	quot: quot$1,
	rAarr: rAarr,
	rArr: rArr,
	rAtail: rAtail,
	rBarr: rBarr,
	rHar: rHar,
	race: race,
	racute: racute,
	radic: radic,
	raemptyv: raemptyv,
	rang: rang,
	rangd: rangd,
	range: range,
	rangle: rangle,
	raqu: raqu,
	raquo: raquo,
	rarr: rarr,
	rarrap: rarrap,
	rarrb: rarrb,
	rarrbfs: rarrbfs,
	rarrc: rarrc,
	rarrfs: rarrfs,
	rarrhk: rarrhk,
	rarrlp: rarrlp,
	rarrpl: rarrpl,
	rarrsim: rarrsim,
	rarrtl: rarrtl,
	rarrw: rarrw,
	ratail: ratail,
	ratio: ratio,
	rationals: rationals,
	rbarr: rbarr,
	rbbrk: rbbrk,
	rbrace: rbrace,
	rbrack: rbrack,
	rbrke: rbrke,
	rbrksld: rbrksld,
	rbrkslu: rbrkslu,
	rcaron: rcaron,
	rcedil: rcedil,
	rceil: rceil,
	rcub: rcub,
	rcy: rcy,
	rdca: rdca,
	rdldhar: rdldhar,
	rdquo: rdquo,
	rdquor: rdquor,
	rdsh: rdsh,
	real: real,
	realine: realine,
	realpart: realpart,
	reals: reals,
	rect: rect,
	re: re,
	reg: reg,
	rfisht: rfisht,
	rfloor: rfloor,
	rfr: rfr,
	rhard: rhard,
	rharu: rharu,
	rharul: rharul,
	rho: rho,
	rhov: rhov,
	rightarrow: rightarrow,
	rightarrowtail: rightarrowtail,
	rightharpoondown: rightharpoondown,
	rightharpoonup: rightharpoonup,
	rightleftarrows: rightleftarrows,
	rightleftharpoons: rightleftharpoons,
	rightrightarrows: rightrightarrows,
	rightsquigarrow: rightsquigarrow,
	rightthreetimes: rightthreetimes,
	ring: ring,
	risingdotseq: risingdotseq,
	rlarr: rlarr,
	rlhar: rlhar,
	rlm: rlm,
	rmoust: rmoust,
	rmoustache: rmoustache,
	rnmid: rnmid,
	roang: roang,
	roarr: roarr,
	robrk: robrk,
	ropar: ropar,
	ropf: ropf,
	roplus: roplus,
	rotimes: rotimes,
	rpar: rpar,
	rpargt: rpargt,
	rppolint: rppolint,
	rrarr: rrarr,
	rsaquo: rsaquo,
	rscr: rscr,
	rsh: rsh,
	rsqb: rsqb,
	rsquo: rsquo,
	rsquor: rsquor,
	rthree: rthree,
	rtimes: rtimes,
	rtri: rtri,
	rtrie: rtrie,
	rtrif: rtrif,
	rtriltri: rtriltri,
	ruluhar: ruluhar,
	rx: rx,
	sacute: sacute,
	sbquo: sbquo,
	sc: sc,
	scE: scE,
	scap: scap,
	scaron: scaron,
	sccue: sccue,
	sce: sce,
	scedil: scedil,
	scirc: scirc,
	scnE: scnE,
	scnap: scnap,
	scnsim: scnsim,
	scpolint: scpolint,
	scsim: scsim,
	scy: scy,
	sdot: sdot,
	sdotb: sdotb,
	sdote: sdote,
	seArr: seArr,
	searhk: searhk,
	searr: searr,
	searrow: searrow,
	sec: sec,
	sect: sect,
	semi: semi,
	seswar: seswar,
	setminus: setminus,
	setmn: setmn,
	sext: sext,
	sfr: sfr,
	sfrown: sfrown,
	sharp: sharp,
	shchcy: shchcy,
	shcy: shcy,
	shortmid: shortmid,
	shortparallel: shortparallel,
	sh: sh,
	shy: shy,
	sigma: sigma,
	sigmaf: sigmaf,
	sigmav: sigmav,
	sim: sim,
	simdot: simdot,
	sime: sime,
	simeq: simeq,
	simg: simg,
	simgE: simgE,
	siml: siml,
	simlE: simlE,
	simne: simne,
	simplus: simplus,
	simrarr: simrarr,
	slarr: slarr,
	smallsetminus: smallsetminus,
	smashp: smashp,
	smeparsl: smeparsl,
	smid: smid,
	smile: smile,
	smt: smt,
	smte: smte,
	smtes: smtes,
	softcy: softcy,
	sol: sol,
	solb: solb,
	solbar: solbar,
	sopf: sopf,
	spades: spades,
	spadesuit: spadesuit,
	spar: spar,
	sqcap: sqcap,
	sqcaps: sqcaps,
	sqcup: sqcup,
	sqcups: sqcups,
	sqsub: sqsub,
	sqsube: sqsube,
	sqsubset: sqsubset,
	sqsubseteq: sqsubseteq,
	sqsup: sqsup,
	sqsupe: sqsupe,
	sqsupset: sqsupset,
	sqsupseteq: sqsupseteq,
	squ: squ,
	square: square,
	squarf: squarf,
	squf: squf,
	srarr: srarr,
	sscr: sscr,
	ssetmn: ssetmn,
	ssmile: ssmile,
	sstarf: sstarf,
	star: star,
	starf: starf,
	straightepsilon: straightepsilon,
	straightphi: straightphi,
	strns: strns,
	sub: sub,
	subE: subE,
	subdot: subdot,
	sube: sube,
	subedot: subedot,
	submult: submult,
	subnE: subnE,
	subne: subne,
	subplus: subplus,
	subrarr: subrarr,
	subset: subset,
	subseteq: subseteq,
	subseteqq: subseteqq,
	subsetneq: subsetneq,
	subsetneqq: subsetneqq,
	subsim: subsim,
	subsub: subsub,
	subsup: subsup,
	succ: succ,
	succapprox: succapprox,
	succcurlyeq: succcurlyeq,
	succeq: succeq,
	succnapprox: succnapprox,
	succneqq: succneqq,
	succnsim: succnsim,
	succsim: succsim,
	sum: sum,
	sung: sung,
	sup: sup,
	sup1: sup1,
	sup2: sup2,
	sup3: sup3,
	supE: supE,
	supdot: supdot,
	supdsub: supdsub,
	supe: supe,
	supedot: supedot,
	suphsol: suphsol,
	suphsub: suphsub,
	suplarr: suplarr,
	supmult: supmult,
	supnE: supnE,
	supne: supne,
	supplus: supplus,
	supset: supset,
	supseteq: supseteq,
	supseteqq: supseteqq,
	supsetneq: supsetneq,
	supsetneqq: supsetneqq,
	supsim: supsim,
	supsub: supsub,
	supsup: supsup,
	swArr: swArr,
	swarhk: swarhk,
	swarr: swarr,
	swarrow: swarrow,
	swnwar: swnwar,
	szli: szli,
	szlig: szlig,
	target: target,
	tau: tau,
	tbrk: tbrk,
	tcaron: tcaron,
	tcedil: tcedil,
	tcy: tcy,
	tdot: tdot,
	telrec: telrec,
	tfr: tfr,
	there4: there4,
	therefore: therefore,
	theta: theta,
	thetasym: thetasym,
	thetav: thetav,
	thickapprox: thickapprox,
	thicksim: thicksim,
	thinsp: thinsp,
	thkap: thkap,
	thksim: thksim,
	thor: thor,
	thorn: thorn,
	tilde: tilde,
	time: time,
	times: times,
	timesb: timesb,
	timesbar: timesbar,
	timesd: timesd,
	tint: tint,
	toea: toea,
	top: top,
	topbot: topbot,
	topcir: topcir,
	topf: topf,
	topfork: topfork,
	tosa: tosa,
	tprime: tprime,
	trade: trade,
	triangle: triangle,
	triangledown: triangledown,
	triangleleft: triangleleft,
	trianglelefteq: trianglelefteq,
	triangleq: triangleq,
	triangleright: triangleright,
	trianglerighteq: trianglerighteq,
	tridot: tridot,
	trie: trie,
	triminus: triminus,
	triplus: triplus,
	trisb: trisb,
	tritime: tritime,
	trpezium: trpezium,
	tscr: tscr,
	tscy: tscy,
	tshcy: tshcy,
	tstrok: tstrok,
	twixt: twixt,
	twoheadleftarrow: twoheadleftarrow,
	twoheadrightarrow: twoheadrightarrow,
	uArr: uArr,
	uHar: uHar,
	uacut: uacut,
	uacute: uacute,
	uarr: uarr,
	ubrcy: ubrcy,
	ubreve: ubreve,
	ucir: ucir,
	ucirc: ucirc,
	ucy: ucy,
	udarr: udarr,
	udblac: udblac,
	udhar: udhar,
	ufisht: ufisht,
	ufr: ufr,
	ugrav: ugrav,
	ugrave: ugrave,
	uharl: uharl,
	uharr: uharr,
	uhblk: uhblk,
	ulcorn: ulcorn,
	ulcorner: ulcorner,
	ulcrop: ulcrop,
	ultri: ultri,
	umacr: umacr,
	um: um,
	uml: uml,
	uogon: uogon,
	uopf: uopf,
	uparrow: uparrow,
	updownarrow: updownarrow,
	upharpoonleft: upharpoonleft,
	upharpoonright: upharpoonright,
	uplus: uplus,
	upsi: upsi,
	upsih: upsih,
	upsilon: upsilon,
	upuparrows: upuparrows,
	urcorn: urcorn,
	urcorner: urcorner,
	urcrop: urcrop,
	uring: uring,
	urtri: urtri,
	uscr: uscr,
	utdot: utdot,
	utilde: utilde,
	utri: utri,
	utrif: utrif,
	uuarr: uuarr,
	uum: uum,
	uuml: uuml,
	uwangle: uwangle,
	vArr: vArr,
	vBar: vBar,
	vBarv: vBarv,
	vDash: vDash,
	vangrt: vangrt,
	varepsilon: varepsilon,
	varkappa: varkappa,
	varnothing: varnothing,
	varphi: varphi,
	varpi: varpi,
	varpropto: varpropto,
	varr: varr,
	varrho: varrho,
	varsigma: varsigma,
	varsubsetneq: varsubsetneq,
	varsubsetneqq: varsubsetneqq,
	varsupsetneq: varsupsetneq,
	varsupsetneqq: varsupsetneqq,
	vartheta: vartheta,
	vartriangleleft: vartriangleleft,
	vartriangleright: vartriangleright,
	vcy: vcy,
	vdash: vdash,
	vee: vee,
	veebar: veebar,
	veeeq: veeeq,
	vellip: vellip,
	verbar: verbar,
	vert: vert,
	vfr: vfr,
	vltri: vltri,
	vnsub: vnsub,
	vnsup: vnsup,
	vopf: vopf,
	vprop: vprop,
	vrtri: vrtri,
	vscr: vscr,
	vsubnE: vsubnE,
	vsubne: vsubne,
	vsupnE: vsupnE,
	vsupne: vsupne,
	vzigzag: vzigzag,
	wcirc: wcirc,
	wedbar: wedbar,
	wedge: wedge,
	wedgeq: wedgeq,
	weierp: weierp,
	wfr: wfr,
	wopf: wopf,
	wp: wp,
	wr: wr,
	wreath: wreath,
	wscr: wscr,
	xcap: xcap,
	xcirc: xcirc,
	xcup: xcup,
	xdtri: xdtri,
	xfr: xfr,
	xhArr: xhArr,
	xharr: xharr,
	xi: xi,
	xlArr: xlArr,
	xlarr: xlarr,
	xmap: xmap,
	xnis: xnis,
	xodot: xodot,
	xopf: xopf,
	xoplus: xoplus,
	xotime: xotime,
	xrArr: xrArr,
	xrarr: xrarr,
	xscr: xscr,
	xsqcup: xsqcup,
	xuplus: xuplus,
	xutri: xutri,
	xvee: xvee,
	xwedge: xwedge,
	yacut: yacut,
	yacute: yacute,
	yacy: yacy,
	ycirc: ycirc,
	ycy: ycy,
	ye: ye,
	yen: yen,
	yfr: yfr,
	yicy: yicy,
	yopf: yopf,
	yscr: yscr,
	yucy: yucy,
	yum: yum,
	yuml: yuml,
	zacute: zacute,
	zcaron: zcaron,
	zcy: zcy,
	zdot: zdot,
	zeetrf: zeetrf,
	zeta: zeta,
	zfr: zfr,
	zhcy: zhcy,
	zigrarr: zigrarr,
	zopf: zopf,
	zscr: zscr,
	zwj: zwj,
	zwnj: zwnj,
	"Map": "⤅",
	"in": "∈"
};

var characterEntities = Object.freeze({
	AEli: AEli,
	AElig: AElig,
	AM: AM,
	AMP: AMP,
	Aacut: Aacut,
	Aacute: Aacute,
	Abreve: Abreve,
	Acir: Acir,
	Acirc: Acirc,
	Acy: Acy,
	Afr: Afr,
	Agrav: Agrav,
	Agrave: Agrave,
	Alpha: Alpha,
	Amacr: Amacr,
	And: And,
	Aogon: Aogon,
	Aopf: Aopf,
	ApplyFunction: ApplyFunction,
	Arin: Arin,
	Aring: Aring,
	Ascr: Ascr,
	Assign: Assign,
	Atild: Atild,
	Atilde: Atilde,
	Aum: Aum,
	Auml: Auml,
	Backslash: Backslash,
	Barv: Barv,
	Barwed: Barwed,
	Bcy: Bcy,
	Because: Because,
	Bernoullis: Bernoullis,
	Beta: Beta,
	Bfr: Bfr,
	Bopf: Bopf,
	Breve: Breve,
	Bscr: Bscr,
	Bumpeq: Bumpeq,
	CHcy: CHcy,
	COP: COP,
	COPY: COPY,
	Cacute: Cacute,
	Cap: Cap,
	CapitalDifferentialD: CapitalDifferentialD,
	Cayleys: Cayleys,
	Ccaron: Ccaron,
	Ccedi: Ccedi,
	Ccedil: Ccedil,
	Ccirc: Ccirc,
	Cconint: Cconint,
	Cdot: Cdot,
	Cedilla: Cedilla,
	CenterDot: CenterDot,
	Cfr: Cfr,
	Chi: Chi,
	CircleDot: CircleDot,
	CircleMinus: CircleMinus,
	CirclePlus: CirclePlus,
	CircleTimes: CircleTimes,
	ClockwiseContourIntegral: ClockwiseContourIntegral,
	CloseCurlyDoubleQuote: CloseCurlyDoubleQuote,
	CloseCurlyQuote: CloseCurlyQuote,
	Colon: Colon,
	Colone: Colone,
	Congruent: Congruent,
	Conint: Conint,
	ContourIntegral: ContourIntegral,
	Copf: Copf,
	Coproduct: Coproduct,
	CounterClockwiseContourIntegral: CounterClockwiseContourIntegral,
	Cross: Cross,
	Cscr: Cscr,
	Cup: Cup,
	CupCap: CupCap,
	DD: DD,
	DDotrahd: DDotrahd,
	DJcy: DJcy,
	DScy: DScy,
	DZcy: DZcy,
	Dagger: Dagger,
	Darr: Darr,
	Dashv: Dashv,
	Dcaron: Dcaron,
	Dcy: Dcy,
	Del: Del,
	Delta: Delta,
	Dfr: Dfr,
	DiacriticalAcute: DiacriticalAcute,
	DiacriticalDot: DiacriticalDot,
	DiacriticalDoubleAcute: DiacriticalDoubleAcute,
	DiacriticalGrave: DiacriticalGrave,
	DiacriticalTilde: DiacriticalTilde,
	Diamond: Diamond,
	DifferentialD: DifferentialD,
	Dopf: Dopf,
	Dot: Dot,
	DotDot: DotDot,
	DotEqual: DotEqual,
	DoubleContourIntegral: DoubleContourIntegral,
	DoubleDot: DoubleDot,
	DoubleDownArrow: DoubleDownArrow,
	DoubleLeftArrow: DoubleLeftArrow,
	DoubleLeftRightArrow: DoubleLeftRightArrow,
	DoubleLeftTee: DoubleLeftTee,
	DoubleLongLeftArrow: DoubleLongLeftArrow,
	DoubleLongLeftRightArrow: DoubleLongLeftRightArrow,
	DoubleLongRightArrow: DoubleLongRightArrow,
	DoubleRightArrow: DoubleRightArrow,
	DoubleRightTee: DoubleRightTee,
	DoubleUpArrow: DoubleUpArrow,
	DoubleUpDownArrow: DoubleUpDownArrow,
	DoubleVerticalBar: DoubleVerticalBar,
	DownArrow: DownArrow,
	DownArrowBar: DownArrowBar,
	DownArrowUpArrow: DownArrowUpArrow,
	DownBreve: DownBreve,
	DownLeftRightVector: DownLeftRightVector,
	DownLeftTeeVector: DownLeftTeeVector,
	DownLeftVector: DownLeftVector,
	DownLeftVectorBar: DownLeftVectorBar,
	DownRightTeeVector: DownRightTeeVector,
	DownRightVector: DownRightVector,
	DownRightVectorBar: DownRightVectorBar,
	DownTee: DownTee,
	DownTeeArrow: DownTeeArrow,
	Downarrow: Downarrow,
	Dscr: Dscr,
	Dstrok: Dstrok,
	ENG: ENG,
	ET: ET,
	ETH: ETH,
	Eacut: Eacut,
	Eacute: Eacute,
	Ecaron: Ecaron,
	Ecir: Ecir,
	Ecirc: Ecirc,
	Ecy: Ecy,
	Edot: Edot,
	Efr: Efr,
	Egrav: Egrav,
	Egrave: Egrave,
	Element: Element,
	Emacr: Emacr,
	EmptySmallSquare: EmptySmallSquare,
	EmptyVerySmallSquare: EmptyVerySmallSquare,
	Eogon: Eogon,
	Eopf: Eopf,
	Epsilon: Epsilon,
	Equal: Equal,
	EqualTilde: EqualTilde,
	Equilibrium: Equilibrium,
	Escr: Escr,
	Esim: Esim,
	Eta: Eta,
	Eum: Eum,
	Euml: Euml,
	Exists: Exists,
	ExponentialE: ExponentialE,
	Fcy: Fcy,
	Ffr: Ffr,
	FilledSmallSquare: FilledSmallSquare,
	FilledVerySmallSquare: FilledVerySmallSquare,
	Fopf: Fopf,
	ForAll: ForAll,
	Fouriertrf: Fouriertrf,
	Fscr: Fscr,
	GJcy: GJcy,
	G: G,
	GT: GT,
	Gamma: Gamma,
	Gammad: Gammad,
	Gbreve: Gbreve,
	Gcedil: Gcedil,
	Gcirc: Gcirc,
	Gcy: Gcy,
	Gdot: Gdot,
	Gfr: Gfr,
	Gg: Gg,
	Gopf: Gopf,
	GreaterEqual: GreaterEqual,
	GreaterEqualLess: GreaterEqualLess,
	GreaterFullEqual: GreaterFullEqual,
	GreaterGreater: GreaterGreater,
	GreaterLess: GreaterLess,
	GreaterSlantEqual: GreaterSlantEqual,
	GreaterTilde: GreaterTilde,
	Gscr: Gscr,
	Gt: Gt,
	HARDcy: HARDcy,
	Hacek: Hacek,
	Hat: Hat,
	Hcirc: Hcirc,
	Hfr: Hfr,
	HilbertSpace: HilbertSpace,
	Hopf: Hopf,
	HorizontalLine: HorizontalLine,
	Hscr: Hscr,
	Hstrok: Hstrok,
	HumpDownHump: HumpDownHump,
	HumpEqual: HumpEqual,
	IEcy: IEcy,
	IJlig: IJlig,
	IOcy: IOcy,
	Iacut: Iacut,
	Iacute: Iacute,
	Icir: Icir,
	Icirc: Icirc,
	Icy: Icy,
	Idot: Idot,
	Ifr: Ifr,
	Igrav: Igrav,
	Igrave: Igrave,
	Im: Im,
	Imacr: Imacr,
	ImaginaryI: ImaginaryI,
	Implies: Implies,
	Int: Int,
	Integral: Integral,
	Intersection: Intersection,
	InvisibleComma: InvisibleComma,
	InvisibleTimes: InvisibleTimes,
	Iogon: Iogon,
	Iopf: Iopf,
	Iota: Iota,
	Iscr: Iscr,
	Itilde: Itilde,
	Iukcy: Iukcy,
	Ium: Ium,
	Iuml: Iuml,
	Jcirc: Jcirc,
	Jcy: Jcy,
	Jfr: Jfr,
	Jopf: Jopf,
	Jscr: Jscr,
	Jsercy: Jsercy,
	Jukcy: Jukcy,
	KHcy: KHcy,
	KJcy: KJcy,
	Kappa: Kappa,
	Kcedil: Kcedil,
	Kcy: Kcy,
	Kfr: Kfr,
	Kopf: Kopf,
	Kscr: Kscr,
	LJcy: LJcy,
	L: L,
	LT: LT,
	Lacute: Lacute,
	Lambda: Lambda,
	Lang: Lang,
	Laplacetrf: Laplacetrf,
	Larr: Larr,
	Lcaron: Lcaron,
	Lcedil: Lcedil,
	Lcy: Lcy,
	LeftAngleBracket: LeftAngleBracket,
	LeftArrow: LeftArrow,
	LeftArrowBar: LeftArrowBar,
	LeftArrowRightArrow: LeftArrowRightArrow,
	LeftCeiling: LeftCeiling,
	LeftDoubleBracket: LeftDoubleBracket,
	LeftDownTeeVector: LeftDownTeeVector,
	LeftDownVector: LeftDownVector,
	LeftDownVectorBar: LeftDownVectorBar,
	LeftFloor: LeftFloor,
	LeftRightArrow: LeftRightArrow,
	LeftRightVector: LeftRightVector,
	LeftTee: LeftTee,
	LeftTeeArrow: LeftTeeArrow,
	LeftTeeVector: LeftTeeVector,
	LeftTriangle: LeftTriangle,
	LeftTriangleBar: LeftTriangleBar,
	LeftTriangleEqual: LeftTriangleEqual,
	LeftUpDownVector: LeftUpDownVector,
	LeftUpTeeVector: LeftUpTeeVector,
	LeftUpVector: LeftUpVector,
	LeftUpVectorBar: LeftUpVectorBar,
	LeftVector: LeftVector,
	LeftVectorBar: LeftVectorBar,
	Leftarrow: Leftarrow,
	Leftrightarrow: Leftrightarrow,
	LessEqualGreater: LessEqualGreater,
	LessFullEqual: LessFullEqual,
	LessGreater: LessGreater,
	LessLess: LessLess,
	LessSlantEqual: LessSlantEqual,
	LessTilde: LessTilde,
	Lfr: Lfr,
	Ll: Ll,
	Lleftarrow: Lleftarrow,
	Lmidot: Lmidot,
	LongLeftArrow: LongLeftArrow,
	LongLeftRightArrow: LongLeftRightArrow,
	LongRightArrow: LongRightArrow,
	Longleftarrow: Longleftarrow,
	Longleftrightarrow: Longleftrightarrow,
	Longrightarrow: Longrightarrow,
	Lopf: Lopf,
	LowerLeftArrow: LowerLeftArrow,
	LowerRightArrow: LowerRightArrow,
	Lscr: Lscr,
	Lsh: Lsh,
	Lstrok: Lstrok,
	Lt: Lt,
	Mcy: Mcy,
	MediumSpace: MediumSpace,
	Mellintrf: Mellintrf,
	Mfr: Mfr,
	MinusPlus: MinusPlus,
	Mopf: Mopf,
	Mscr: Mscr,
	Mu: Mu,
	NJcy: NJcy,
	Nacute: Nacute,
	Ncaron: Ncaron,
	Ncedil: Ncedil,
	Ncy: Ncy,
	NegativeMediumSpace: NegativeMediumSpace,
	NegativeThickSpace: NegativeThickSpace,
	NegativeThinSpace: NegativeThinSpace,
	NegativeVeryThinSpace: NegativeVeryThinSpace,
	NestedGreaterGreater: NestedGreaterGreater,
	NestedLessLess: NestedLessLess,
	NewLine: NewLine,
	Nfr: Nfr,
	NoBreak: NoBreak,
	NonBreakingSpace: NonBreakingSpace,
	Nopf: Nopf,
	Not: Not,
	NotCongruent: NotCongruent,
	NotCupCap: NotCupCap,
	NotDoubleVerticalBar: NotDoubleVerticalBar,
	NotElement: NotElement,
	NotEqual: NotEqual,
	NotEqualTilde: NotEqualTilde,
	NotExists: NotExists,
	NotGreater: NotGreater,
	NotGreaterEqual: NotGreaterEqual,
	NotGreaterFullEqual: NotGreaterFullEqual,
	NotGreaterGreater: NotGreaterGreater,
	NotGreaterLess: NotGreaterLess,
	NotGreaterSlantEqual: NotGreaterSlantEqual,
	NotGreaterTilde: NotGreaterTilde,
	NotHumpDownHump: NotHumpDownHump,
	NotHumpEqual: NotHumpEqual,
	NotLeftTriangle: NotLeftTriangle,
	NotLeftTriangleBar: NotLeftTriangleBar,
	NotLeftTriangleEqual: NotLeftTriangleEqual,
	NotLess: NotLess,
	NotLessEqual: NotLessEqual,
	NotLessGreater: NotLessGreater,
	NotLessLess: NotLessLess,
	NotLessSlantEqual: NotLessSlantEqual,
	NotLessTilde: NotLessTilde,
	NotNestedGreaterGreater: NotNestedGreaterGreater,
	NotNestedLessLess: NotNestedLessLess,
	NotPrecedes: NotPrecedes,
	NotPrecedesEqual: NotPrecedesEqual,
	NotPrecedesSlantEqual: NotPrecedesSlantEqual,
	NotReverseElement: NotReverseElement,
	NotRightTriangle: NotRightTriangle,
	NotRightTriangleBar: NotRightTriangleBar,
	NotRightTriangleEqual: NotRightTriangleEqual,
	NotSquareSubset: NotSquareSubset,
	NotSquareSubsetEqual: NotSquareSubsetEqual,
	NotSquareSuperset: NotSquareSuperset,
	NotSquareSupersetEqual: NotSquareSupersetEqual,
	NotSubset: NotSubset,
	NotSubsetEqual: NotSubsetEqual,
	NotSucceeds: NotSucceeds,
	NotSucceedsEqual: NotSucceedsEqual,
	NotSucceedsSlantEqual: NotSucceedsSlantEqual,
	NotSucceedsTilde: NotSucceedsTilde,
	NotSuperset: NotSuperset,
	NotSupersetEqual: NotSupersetEqual,
	NotTilde: NotTilde,
	NotTildeEqual: NotTildeEqual,
	NotTildeFullEqual: NotTildeFullEqual,
	NotTildeTilde: NotTildeTilde,
	NotVerticalBar: NotVerticalBar,
	Nscr: Nscr,
	Ntild: Ntild,
	Ntilde: Ntilde,
	Nu: Nu,
	OElig: OElig,
	Oacut: Oacut,
	Oacute: Oacute,
	Ocir: Ocir,
	Ocirc: Ocirc,
	Ocy: Ocy,
	Odblac: Odblac,
	Ofr: Ofr,
	Ograv: Ograv,
	Ograve: Ograve,
	Omacr: Omacr,
	Omega: Omega,
	Omicron: Omicron,
	Oopf: Oopf,
	OpenCurlyDoubleQuote: OpenCurlyDoubleQuote,
	OpenCurlyQuote: OpenCurlyQuote,
	Or: Or,
	Oscr: Oscr,
	Oslas: Oslas,
	Oslash: Oslash,
	Otild: Otild,
	Otilde: Otilde,
	Otimes: Otimes,
	Oum: Oum,
	Ouml: Ouml,
	OverBar: OverBar,
	OverBrace: OverBrace,
	OverBracket: OverBracket,
	OverParenthesis: OverParenthesis,
	PartialD: PartialD,
	Pcy: Pcy,
	Pfr: Pfr,
	Phi: Phi,
	Pi: Pi,
	PlusMinus: PlusMinus,
	Poincareplane: Poincareplane,
	Popf: Popf,
	Pr: Pr,
	Precedes: Precedes,
	PrecedesEqual: PrecedesEqual,
	PrecedesSlantEqual: PrecedesSlantEqual,
	PrecedesTilde: PrecedesTilde,
	Prime: Prime,
	Product: Product,
	Proportion: Proportion,
	Proportional: Proportional,
	Pscr: Pscr,
	Psi: Psi,
	QUO: QUO,
	QUOT: QUOT,
	Qfr: Qfr,
	Qopf: Qopf,
	Qscr: Qscr,
	RBarr: RBarr,
	RE: RE,
	REG: REG,
	Racute: Racute,
	Rang: Rang,
	Rarr: Rarr,
	Rarrtl: Rarrtl,
	Rcaron: Rcaron,
	Rcedil: Rcedil,
	Rcy: Rcy,
	Re: Re,
	ReverseElement: ReverseElement,
	ReverseEquilibrium: ReverseEquilibrium,
	ReverseUpEquilibrium: ReverseUpEquilibrium,
	Rfr: Rfr,
	Rho: Rho,
	RightAngleBracket: RightAngleBracket,
	RightArrow: RightArrow,
	RightArrowBar: RightArrowBar,
	RightArrowLeftArrow: RightArrowLeftArrow,
	RightCeiling: RightCeiling,
	RightDoubleBracket: RightDoubleBracket,
	RightDownTeeVector: RightDownTeeVector,
	RightDownVector: RightDownVector,
	RightDownVectorBar: RightDownVectorBar,
	RightFloor: RightFloor,
	RightTee: RightTee,
	RightTeeArrow: RightTeeArrow,
	RightTeeVector: RightTeeVector,
	RightTriangle: RightTriangle,
	RightTriangleBar: RightTriangleBar,
	RightTriangleEqual: RightTriangleEqual,
	RightUpDownVector: RightUpDownVector,
	RightUpTeeVector: RightUpTeeVector,
	RightUpVector: RightUpVector,
	RightUpVectorBar: RightUpVectorBar,
	RightVector: RightVector,
	RightVectorBar: RightVectorBar,
	Rightarrow: Rightarrow,
	Ropf: Ropf,
	RoundImplies: RoundImplies,
	Rrightarrow: Rrightarrow,
	Rscr: Rscr,
	Rsh: Rsh,
	RuleDelayed: RuleDelayed,
	SHCHcy: SHCHcy,
	SHcy: SHcy,
	SOFTcy: SOFTcy,
	Sacute: Sacute,
	Sc: Sc,
	Scaron: Scaron,
	Scedil: Scedil,
	Scirc: Scirc,
	Scy: Scy,
	Sfr: Sfr,
	ShortDownArrow: ShortDownArrow,
	ShortLeftArrow: ShortLeftArrow,
	ShortRightArrow: ShortRightArrow,
	ShortUpArrow: ShortUpArrow,
	Sigma: Sigma,
	SmallCircle: SmallCircle,
	Sopf: Sopf,
	Sqrt: Sqrt,
	Square: Square,
	SquareIntersection: SquareIntersection,
	SquareSubset: SquareSubset,
	SquareSubsetEqual: SquareSubsetEqual,
	SquareSuperset: SquareSuperset,
	SquareSupersetEqual: SquareSupersetEqual,
	SquareUnion: SquareUnion,
	Sscr: Sscr,
	Star: Star,
	Sub: Sub,
	Subset: Subset,
	SubsetEqual: SubsetEqual,
	Succeeds: Succeeds,
	SucceedsEqual: SucceedsEqual,
	SucceedsSlantEqual: SucceedsSlantEqual,
	SucceedsTilde: SucceedsTilde,
	SuchThat: SuchThat,
	Sum: Sum,
	Sup: Sup,
	Superset: Superset,
	SupersetEqual: SupersetEqual,
	Supset: Supset,
	THOR: THOR,
	THORN: THORN,
	TRADE: TRADE,
	TSHcy: TSHcy,
	TScy: TScy,
	Tab: Tab,
	Tau: Tau,
	Tcaron: Tcaron,
	Tcedil: Tcedil,
	Tcy: Tcy,
	Tfr: Tfr,
	Therefore: Therefore,
	Theta: Theta,
	ThickSpace: ThickSpace,
	ThinSpace: ThinSpace,
	Tilde: Tilde,
	TildeEqual: TildeEqual,
	TildeFullEqual: TildeFullEqual,
	TildeTilde: TildeTilde,
	Topf: Topf,
	TripleDot: TripleDot,
	Tscr: Tscr,
	Tstrok: Tstrok,
	Uacut: Uacut,
	Uacute: Uacute,
	Uarr: Uarr,
	Uarrocir: Uarrocir,
	Ubrcy: Ubrcy,
	Ubreve: Ubreve,
	Ucir: Ucir,
	Ucirc: Ucirc,
	Ucy: Ucy,
	Udblac: Udblac,
	Ufr: Ufr,
	Ugrav: Ugrav,
	Ugrave: Ugrave,
	Umacr: Umacr,
	UnderBar: UnderBar,
	UnderBrace: UnderBrace,
	UnderBracket: UnderBracket,
	UnderParenthesis: UnderParenthesis,
	Union: Union,
	UnionPlus: UnionPlus,
	Uogon: Uogon,
	Uopf: Uopf,
	UpArrow: UpArrow,
	UpArrowBar: UpArrowBar,
	UpArrowDownArrow: UpArrowDownArrow,
	UpDownArrow: UpDownArrow,
	UpEquilibrium: UpEquilibrium,
	UpTee: UpTee,
	UpTeeArrow: UpTeeArrow,
	Uparrow: Uparrow,
	Updownarrow: Updownarrow,
	UpperLeftArrow: UpperLeftArrow,
	UpperRightArrow: UpperRightArrow,
	Upsi: Upsi,
	Upsilon: Upsilon,
	Uring: Uring,
	Uscr: Uscr,
	Utilde: Utilde,
	Uum: Uum,
	Uuml: Uuml,
	VDash: VDash,
	Vbar: Vbar,
	Vcy: Vcy,
	Vdash: Vdash,
	Vdashl: Vdashl,
	Vee: Vee,
	Verbar: Verbar,
	Vert: Vert,
	VerticalBar: VerticalBar,
	VerticalLine: VerticalLine,
	VerticalSeparator: VerticalSeparator,
	VerticalTilde: VerticalTilde,
	VeryThinSpace: VeryThinSpace,
	Vfr: Vfr,
	Vopf: Vopf,
	Vscr: Vscr,
	Vvdash: Vvdash,
	Wcirc: Wcirc,
	Wedge: Wedge,
	Wfr: Wfr,
	Wopf: Wopf,
	Wscr: Wscr,
	Xfr: Xfr,
	Xi: Xi,
	Xopf: Xopf,
	Xscr: Xscr,
	YAcy: YAcy,
	YIcy: YIcy,
	YUcy: YUcy,
	Yacut: Yacut,
	Yacute: Yacute,
	Ycirc: Ycirc,
	Ycy: Ycy,
	Yfr: Yfr,
	Yopf: Yopf,
	Yscr: Yscr,
	Yuml: Yuml,
	ZHcy: ZHcy,
	Zacute: Zacute,
	Zcaron: Zcaron,
	Zcy: Zcy,
	Zdot: Zdot,
	ZeroWidthSpace: ZeroWidthSpace,
	Zeta: Zeta,
	Zfr: Zfr,
	Zopf: Zopf,
	Zscr: Zscr,
	aacut: aacut,
	aacute: aacute,
	abreve: abreve,
	ac: ac,
	acE: acE,
	acd: acd,
	acir: acir,
	acirc: acirc,
	acut: acut,
	acute: acute,
	acy: acy,
	aeli: aeli,
	aelig: aelig,
	af: af,
	afr: afr,
	agrav: agrav,
	agrave: agrave,
	alefsym: alefsym,
	aleph: aleph,
	alpha: alpha,
	amacr: amacr,
	amalg: amalg,
	am: am,
	amp: amp,
	and: and,
	andand: andand,
	andd: andd,
	andslope: andslope,
	andv: andv,
	ang: ang,
	ange: ange,
	angle: angle,
	angmsd: angmsd,
	angmsdaa: angmsdaa,
	angmsdab: angmsdab,
	angmsdac: angmsdac,
	angmsdad: angmsdad,
	angmsdae: angmsdae,
	angmsdaf: angmsdaf,
	angmsdag: angmsdag,
	angmsdah: angmsdah,
	angrt: angrt,
	angrtvb: angrtvb,
	angrtvbd: angrtvbd,
	angsph: angsph,
	angst: angst,
	angzarr: angzarr,
	aogon: aogon,
	aopf: aopf,
	ap: ap,
	apE: apE,
	apacir: apacir,
	ape: ape,
	apid: apid,
	apos: apos,
	approx: approx,
	approxeq: approxeq,
	arin: arin,
	aring: aring,
	ascr: ascr,
	ast: ast,
	asymp: asymp,
	asympeq: asympeq,
	atild: atild,
	atilde: atilde,
	aum: aum,
	auml: auml,
	awconint: awconint,
	awint: awint,
	bNot: bNot,
	backcong: backcong,
	backepsilon: backepsilon,
	backprime: backprime,
	backsim: backsim,
	backsimeq: backsimeq,
	barvee: barvee,
	barwed: barwed,
	barwedge: barwedge,
	bbrk: bbrk,
	bbrktbrk: bbrktbrk,
	bcong: bcong,
	bcy: bcy,
	bdquo: bdquo,
	becaus: becaus,
	because: because,
	bemptyv: bemptyv,
	bepsi: bepsi,
	bernou: bernou,
	beta: beta,
	beth: beth,
	between: between,
	bfr: bfr,
	bigcap: bigcap,
	bigcirc: bigcirc,
	bigcup: bigcup,
	bigodot: bigodot,
	bigoplus: bigoplus,
	bigotimes: bigotimes,
	bigsqcup: bigsqcup,
	bigstar: bigstar,
	bigtriangledown: bigtriangledown,
	bigtriangleup: bigtriangleup,
	biguplus: biguplus,
	bigvee: bigvee,
	bigwedge: bigwedge,
	bkarow: bkarow,
	blacklozenge: blacklozenge,
	blacksquare: blacksquare,
	blacktriangle: blacktriangle,
	blacktriangledown: blacktriangledown,
	blacktriangleleft: blacktriangleleft,
	blacktriangleright: blacktriangleright,
	blank: blank,
	blk12: blk12,
	blk14: blk14,
	blk34: blk34,
	block: block,
	bne: bne,
	bnequiv: bnequiv,
	bnot: bnot,
	bopf: bopf,
	bot: bot,
	bottom: bottom,
	bowtie: bowtie,
	boxDL: boxDL,
	boxDR: boxDR,
	boxDl: boxDl,
	boxDr: boxDr,
	boxH: boxH,
	boxHD: boxHD,
	boxHU: boxHU,
	boxHd: boxHd,
	boxHu: boxHu,
	boxUL: boxUL,
	boxUR: boxUR,
	boxUl: boxUl,
	boxUr: boxUr,
	boxV: boxV,
	boxVH: boxVH,
	boxVL: boxVL,
	boxVR: boxVR,
	boxVh: boxVh,
	boxVl: boxVl,
	boxVr: boxVr,
	boxbox: boxbox,
	boxdL: boxdL,
	boxdR: boxdR,
	boxdl: boxdl,
	boxdr: boxdr,
	boxh: boxh,
	boxhD: boxhD,
	boxhU: boxhU,
	boxhd: boxhd,
	boxhu: boxhu,
	boxminus: boxminus,
	boxplus: boxplus,
	boxtimes: boxtimes,
	boxuL: boxuL,
	boxuR: boxuR,
	boxul: boxul,
	boxur: boxur,
	boxv: boxv,
	boxvH: boxvH,
	boxvL: boxvL,
	boxvR: boxvR,
	boxvh: boxvh,
	boxvl: boxvl,
	boxvr: boxvr,
	bprime: bprime,
	breve: breve,
	brvba: brvba,
	brvbar: brvbar,
	bscr: bscr,
	bsemi: bsemi,
	bsim: bsim,
	bsime: bsime,
	bsol: bsol,
	bsolb: bsolb,
	bsolhsub: bsolhsub,
	bull: bull,
	bullet: bullet,
	bump: bump,
	bumpE: bumpE,
	bumpe: bumpe,
	bumpeq: bumpeq,
	cacute: cacute,
	cap: cap,
	capand: capand,
	capbrcup: capbrcup,
	capcap: capcap,
	capcup: capcup,
	capdot: capdot,
	caps: caps,
	caret: caret,
	caron: caron,
	ccaps: ccaps,
	ccaron: ccaron,
	ccedi: ccedi,
	ccedil: ccedil,
	ccirc: ccirc,
	ccups: ccups,
	ccupssm: ccupssm,
	cdot: cdot,
	cedi: cedi,
	cedil: cedil,
	cemptyv: cemptyv,
	cen: cen,
	cent: cent,
	centerdot: centerdot,
	cfr: cfr,
	chcy: chcy,
	check: check$1,
	checkmark: checkmark,
	chi: chi,
	cir: cir,
	cirE: cirE,
	circ: circ,
	circeq: circeq,
	circlearrowleft: circlearrowleft,
	circlearrowright: circlearrowright,
	circledR: circledR,
	circledS: circledS,
	circledast: circledast,
	circledcirc: circledcirc,
	circleddash: circleddash,
	cire: cire,
	cirfnint: cirfnint,
	cirmid: cirmid,
	cirscir: cirscir,
	clubs: clubs,
	clubsuit: clubsuit,
	colon: colon,
	colone: colone,
	coloneq: coloneq,
	comma: comma,
	commat: commat,
	comp: comp,
	compfn: compfn,
	complement: complement,
	complexes: complexes,
	cong: cong,
	congdot: congdot,
	conint: conint,
	copf: copf,
	coprod: coprod,
	cop: cop,
	copy: copy,
	copysr: copysr,
	crarr: crarr,
	cross: cross,
	cscr: cscr,
	csub: csub,
	csube: csube,
	csup: csup,
	csupe: csupe,
	ctdot: ctdot,
	cudarrl: cudarrl,
	cudarrr: cudarrr,
	cuepr: cuepr,
	cuesc: cuesc,
	cularr: cularr,
	cularrp: cularrp,
	cup: cup,
	cupbrcap: cupbrcap,
	cupcap: cupcap,
	cupcup: cupcup,
	cupdot: cupdot,
	cupor: cupor,
	cups: cups,
	curarr: curarr,
	curarrm: curarrm,
	curlyeqprec: curlyeqprec,
	curlyeqsucc: curlyeqsucc,
	curlyvee: curlyvee,
	curlywedge: curlywedge,
	curre: curre,
	curren: curren,
	curvearrowleft: curvearrowleft,
	curvearrowright: curvearrowright,
	cuvee: cuvee,
	cuwed: cuwed,
	cwconint: cwconint,
	cwint: cwint,
	cylcty: cylcty,
	dArr: dArr,
	dHar: dHar,
	dagger: dagger,
	daleth: daleth,
	darr: darr,
	dash: dash,
	dashv: dashv,
	dbkarow: dbkarow,
	dblac: dblac,
	dcaron: dcaron,
	dcy: dcy,
	dd: dd,
	ddagger: ddagger,
	ddarr: ddarr,
	ddotseq: ddotseq,
	de: de,
	deg: deg,
	delta: delta,
	demptyv: demptyv,
	dfisht: dfisht,
	dfr: dfr,
	dharl: dharl,
	dharr: dharr,
	diam: diam,
	diamond: diamond,
	diamondsuit: diamondsuit,
	diams: diams,
	die: die,
	digamma: digamma,
	disin: disin,
	div: div,
	divid: divid,
	divide: divide$1,
	divideontimes: divideontimes,
	divonx: divonx,
	djcy: djcy,
	dlcorn: dlcorn,
	dlcrop: dlcrop,
	dollar: dollar,
	dopf: dopf,
	dot: dot,
	doteq: doteq,
	doteqdot: doteqdot,
	dotminus: dotminus,
	dotplus: dotplus,
	dotsquare: dotsquare,
	doublebarwedge: doublebarwedge,
	downarrow: downarrow,
	downdownarrows: downdownarrows,
	downharpoonleft: downharpoonleft,
	downharpoonright: downharpoonright,
	drbkarow: drbkarow,
	drcorn: drcorn,
	drcrop: drcrop,
	dscr: dscr,
	dscy: dscy,
	dsol: dsol,
	dstrok: dstrok,
	dtdot: dtdot,
	dtri: dtri,
	dtrif: dtrif,
	duarr: duarr,
	duhar: duhar,
	dwangle: dwangle,
	dzcy: dzcy,
	dzigrarr: dzigrarr,
	eDDot: eDDot,
	eDot: eDot,
	eacut: eacut,
	eacute: eacute,
	easter: easter,
	ecaron: ecaron,
	ecir: ecir,
	ecirc: ecirc,
	ecolon: ecolon,
	ecy: ecy,
	edot: edot,
	ee: ee,
	efDot: efDot,
	efr: efr,
	eg: eg,
	egrav: egrav,
	egrave: egrave,
	egs: egs,
	egsdot: egsdot,
	el: el,
	elinters: elinters,
	ell: ell,
	els: els,
	elsdot: elsdot,
	emacr: emacr,
	empty: empty$1,
	emptyset: emptyset,
	emptyv: emptyv,
	emsp13: emsp13,
	emsp14: emsp14,
	emsp: emsp,
	eng: eng,
	ensp: ensp,
	eogon: eogon,
	eopf: eopf,
	epar: epar,
	eparsl: eparsl,
	eplus: eplus,
	epsi: epsi,
	epsilon: epsilon,
	epsiv: epsiv,
	eqcirc: eqcirc,
	eqcolon: eqcolon,
	eqsim: eqsim,
	eqslantgtr: eqslantgtr,
	eqslantless: eqslantless,
	equals: equals,
	equest: equest,
	equiv: equiv,
	equivDD: equivDD,
	eqvparsl: eqvparsl,
	erDot: erDot,
	erarr: erarr,
	escr: escr,
	esdot: esdot,
	esim: esim,
	eta: eta,
	et: et,
	eth: eth,
	eum: eum,
	euml: euml,
	euro: euro,
	excl: excl,
	exist: exist,
	expectation: expectation,
	exponentiale: exponentiale,
	fallingdotseq: fallingdotseq,
	fcy: fcy,
	female: female,
	ffilig: ffilig,
	fflig: fflig,
	ffllig: ffllig,
	ffr: ffr,
	filig: filig,
	fjlig: fjlig,
	flat: flat,
	fllig: fllig,
	fltns: fltns,
	fnof: fnof,
	fopf: fopf,
	forall: forall,
	fork: fork,
	forkv: forkv,
	fpartint: fpartint,
	frac1: frac1,
	frac12: frac12,
	frac13: frac13,
	frac14: frac14,
	frac15: frac15,
	frac16: frac16,
	frac18: frac18,
	frac23: frac23,
	frac25: frac25,
	frac3: frac3,
	frac34: frac34,
	frac35: frac35,
	frac38: frac38,
	frac45: frac45,
	frac56: frac56,
	frac58: frac58,
	frac78: frac78,
	frasl: frasl,
	frown: frown,
	fscr: fscr,
	gE: gE,
	gEl: gEl,
	gacute: gacute,
	gamma: gamma,
	gammad: gammad,
	gap: gap,
	gbreve: gbreve,
	gcirc: gcirc,
	gcy: gcy,
	gdot: gdot,
	ge: ge,
	gel: gel,
	geq: geq,
	geqq: geqq,
	geqslant: geqslant,
	ges: ges,
	gescc: gescc,
	gesdot: gesdot,
	gesdoto: gesdoto,
	gesdotol: gesdotol,
	gesl: gesl,
	gesles: gesles,
	gfr: gfr,
	gg: gg,
	ggg: ggg,
	gimel: gimel,
	gjcy: gjcy,
	gl: gl,
	glE: glE,
	gla: gla,
	glj: glj,
	gnE: gnE,
	gnap: gnap,
	gnapprox: gnapprox,
	gne: gne,
	gneq: gneq,
	gneqq: gneqq,
	gnsim: gnsim,
	gopf: gopf,
	grave: grave,
	gscr: gscr,
	gsim: gsim,
	gsime: gsime,
	gsiml: gsiml,
	g: g,
	gt: gt,
	gtcc: gtcc,
	gtcir: gtcir,
	gtdot: gtdot,
	gtlPar: gtlPar,
	gtquest: gtquest,
	gtrapprox: gtrapprox,
	gtrarr: gtrarr,
	gtrdot: gtrdot,
	gtreqless: gtreqless,
	gtreqqless: gtreqqless,
	gtrless: gtrless,
	gtrsim: gtrsim,
	gvertneqq: gvertneqq,
	gvnE: gvnE,
	hArr: hArr,
	hairsp: hairsp,
	half: half,
	hamilt: hamilt,
	hardcy: hardcy,
	harr: harr,
	harrcir: harrcir,
	harrw: harrw,
	hbar: hbar,
	hcirc: hcirc,
	hearts: hearts,
	heartsuit: heartsuit,
	hellip: hellip,
	hercon: hercon,
	hfr: hfr,
	hksearow: hksearow,
	hkswarow: hkswarow,
	hoarr: hoarr,
	homtht: homtht,
	hookleftarrow: hookleftarrow,
	hookrightarrow: hookrightarrow,
	hopf: hopf,
	horbar: horbar,
	hscr: hscr,
	hslash: hslash,
	hstrok: hstrok,
	hybull: hybull,
	hyphen: hyphen,
	iacut: iacut,
	iacute: iacute,
	ic: ic,
	icir: icir,
	icirc: icirc,
	icy: icy,
	iecy: iecy,
	iexc: iexc,
	iexcl: iexcl,
	iff: iff,
	ifr: ifr,
	igrav: igrav,
	igrave: igrave,
	ii: ii,
	iiiint: iiiint,
	iiint: iiint,
	iinfin: iinfin,
	iiota: iiota,
	ijlig: ijlig,
	imacr: imacr,
	image: image,
	imagline: imagline,
	imagpart: imagpart,
	imath: imath,
	imof: imof,
	imped: imped,
	incare: incare,
	infin: infin,
	infintie: infintie,
	inodot: inodot,
	int: int,
	intcal: intcal,
	integers: integers,
	intercal: intercal,
	intlarhk: intlarhk,
	intprod: intprod,
	iocy: iocy,
	iogon: iogon,
	iopf: iopf,
	iota: iota,
	iprod: iprod,
	iques: iques,
	iquest: iquest,
	iscr: iscr,
	isin: isin,
	isinE: isinE,
	isindot: isindot,
	isins: isins,
	isinsv: isinsv,
	isinv: isinv,
	it: it,
	itilde: itilde,
	iukcy: iukcy,
	ium: ium,
	iuml: iuml,
	jcirc: jcirc,
	jcy: jcy,
	jfr: jfr,
	jmath: jmath,
	jopf: jopf,
	jscr: jscr,
	jsercy: jsercy,
	jukcy: jukcy,
	kappa: kappa,
	kappav: kappav,
	kcedil: kcedil,
	kcy: kcy,
	kfr: kfr,
	kgreen: kgreen,
	khcy: khcy,
	kjcy: kjcy,
	kopf: kopf,
	kscr: kscr,
	lAarr: lAarr,
	lArr: lArr,
	lAtail: lAtail,
	lBarr: lBarr,
	lE: lE,
	lEg: lEg,
	lHar: lHar,
	lacute: lacute,
	laemptyv: laemptyv,
	lagran: lagran,
	lambda: lambda,
	lang: lang,
	langd: langd,
	langle: langle,
	lap: lap,
	laqu: laqu,
	laquo: laquo,
	larr: larr,
	larrb: larrb,
	larrbfs: larrbfs,
	larrfs: larrfs,
	larrhk: larrhk,
	larrlp: larrlp,
	larrpl: larrpl,
	larrsim: larrsim,
	larrtl: larrtl,
	lat: lat,
	latail: latail,
	late: late,
	lates: lates,
	lbarr: lbarr,
	lbbrk: lbbrk,
	lbrace: lbrace,
	lbrack: lbrack,
	lbrke: lbrke,
	lbrksld: lbrksld,
	lbrkslu: lbrkslu,
	lcaron: lcaron,
	lcedil: lcedil,
	lceil: lceil,
	lcub: lcub,
	lcy: lcy,
	ldca: ldca,
	ldquo: ldquo,
	ldquor: ldquor,
	ldrdhar: ldrdhar,
	ldrushar: ldrushar,
	ldsh: ldsh,
	le: le,
	leftarrow: leftarrow,
	leftarrowtail: leftarrowtail,
	leftharpoondown: leftharpoondown,
	leftharpoonup: leftharpoonup,
	leftleftarrows: leftleftarrows,
	leftrightarrow: leftrightarrow,
	leftrightarrows: leftrightarrows,
	leftrightharpoons: leftrightharpoons,
	leftrightsquigarrow: leftrightsquigarrow,
	leftthreetimes: leftthreetimes,
	leg: leg,
	leq: leq,
	leqq: leqq,
	leqslant: leqslant,
	les: les,
	lescc: lescc,
	lesdot: lesdot,
	lesdoto: lesdoto,
	lesdotor: lesdotor,
	lesg: lesg,
	lesges: lesges,
	lessapprox: lessapprox,
	lessdot: lessdot,
	lesseqgtr: lesseqgtr,
	lesseqqgtr: lesseqqgtr,
	lessgtr: lessgtr,
	lesssim: lesssim,
	lfisht: lfisht,
	lfloor: lfloor,
	lfr: lfr,
	lg: lg,
	lgE: lgE,
	lhard: lhard,
	lharu: lharu,
	lharul: lharul,
	lhblk: lhblk,
	ljcy: ljcy,
	ll: ll,
	llarr: llarr,
	llcorner: llcorner,
	llhard: llhard,
	lltri: lltri,
	lmidot: lmidot,
	lmoust: lmoust,
	lmoustache: lmoustache,
	lnE: lnE,
	lnap: lnap,
	lnapprox: lnapprox,
	lne: lne,
	lneq: lneq,
	lneqq: lneqq,
	lnsim: lnsim,
	loang: loang,
	loarr: loarr,
	lobrk: lobrk,
	longleftarrow: longleftarrow,
	longleftrightarrow: longleftrightarrow,
	longmapsto: longmapsto,
	longrightarrow: longrightarrow,
	looparrowleft: looparrowleft,
	looparrowright: looparrowright,
	lopar: lopar,
	lopf: lopf,
	loplus: loplus,
	lotimes: lotimes,
	lowast: lowast,
	lowbar: lowbar,
	loz: loz,
	lozenge: lozenge,
	lozf: lozf,
	lpar: lpar,
	lparlt: lparlt,
	lrarr: lrarr,
	lrcorner: lrcorner,
	lrhar: lrhar,
	lrhard: lrhard,
	lrm: lrm,
	lrtri: lrtri,
	lsaquo: lsaquo,
	lscr: lscr,
	lsh: lsh,
	lsim: lsim,
	lsime: lsime,
	lsimg: lsimg,
	lsqb: lsqb,
	lsquo: lsquo,
	lsquor: lsquor,
	lstrok: lstrok,
	l: l$1,
	lt: lt,
	ltcc: ltcc,
	ltcir: ltcir,
	ltdot: ltdot,
	lthree: lthree,
	ltimes: ltimes,
	ltlarr: ltlarr,
	ltquest: ltquest,
	ltrPar: ltrPar,
	ltri: ltri,
	ltrie: ltrie,
	ltrif: ltrif,
	lurdshar: lurdshar,
	luruhar: luruhar,
	lvertneqq: lvertneqq,
	lvnE: lvnE,
	mDDot: mDDot,
	mac: mac,
	macr: macr,
	male: male,
	malt: malt,
	maltese: maltese,
	map: map,
	mapsto: mapsto,
	mapstodown: mapstodown,
	mapstoleft: mapstoleft,
	mapstoup: mapstoup,
	marker: marker,
	mcomma: mcomma,
	mcy: mcy,
	mdash: mdash,
	measuredangle: measuredangle,
	mfr: mfr,
	mho: mho,
	micr: micr,
	micro: micro,
	mid: mid,
	midast: midast,
	midcir: midcir,
	middo: middo,
	middot: middot,
	minus: minus,
	minusb: minusb,
	minusd: minusd,
	minusdu: minusdu,
	mlcp: mlcp,
	mldr: mldr,
	mnplus: mnplus,
	models: models,
	mopf: mopf,
	mp: mp,
	mscr: mscr,
	mstpos: mstpos,
	mu: mu,
	multimap: multimap,
	mumap: mumap,
	nGg: nGg,
	nGt: nGt,
	nGtv: nGtv,
	nLeftarrow: nLeftarrow,
	nLeftrightarrow: nLeftrightarrow,
	nLl: nLl,
	nLt: nLt,
	nLtv: nLtv,
	nRightarrow: nRightarrow,
	nVDash: nVDash,
	nVdash: nVdash,
	nabla: nabla,
	nacute: nacute,
	nang: nang,
	nap: nap,
	napE: napE,
	napid: napid,
	napos: napos,
	napprox: napprox,
	natur: natur,
	natural: natural,
	naturals: naturals,
	nbs: nbs,
	nbsp: nbsp,
	nbump: nbump,
	nbumpe: nbumpe,
	ncap: ncap,
	ncaron: ncaron,
	ncedil: ncedil,
	ncong: ncong,
	ncongdot: ncongdot,
	ncup: ncup,
	ncy: ncy,
	ndash: ndash,
	ne: ne,
	neArr: neArr,
	nearhk: nearhk,
	nearr: nearr,
	nearrow: nearrow,
	nedot: nedot,
	nequiv: nequiv,
	nesear: nesear,
	nesim: nesim,
	nexist: nexist,
	nexists: nexists,
	nfr: nfr,
	ngE: ngE,
	nge: nge,
	ngeq: ngeq,
	ngeqq: ngeqq,
	ngeqslant: ngeqslant,
	nges: nges,
	ngsim: ngsim,
	ngt: ngt,
	ngtr: ngtr,
	nhArr: nhArr,
	nharr: nharr,
	nhpar: nhpar,
	ni: ni,
	nis: nis,
	nisd: nisd,
	niv: niv,
	njcy: njcy,
	nlArr: nlArr,
	nlE: nlE,
	nlarr: nlarr,
	nldr: nldr,
	nle: nle,
	nleftarrow: nleftarrow,
	nleftrightarrow: nleftrightarrow,
	nleq: nleq,
	nleqq: nleqq,
	nleqslant: nleqslant,
	nles: nles,
	nless: nless,
	nlsim: nlsim,
	nlt: nlt,
	nltri: nltri,
	nltrie: nltrie,
	nmid: nmid,
	nopf: nopf,
	no: no,
	not: not,
	notin: notin,
	notinE: notinE,
	notindot: notindot,
	notinva: notinva,
	notinvb: notinvb,
	notinvc: notinvc,
	notni: notni,
	notniva: notniva,
	notnivb: notnivb,
	notnivc: notnivc,
	npar: npar,
	nparallel: nparallel,
	nparsl: nparsl,
	npart: npart,
	npolint: npolint,
	npr: npr,
	nprcue: nprcue,
	npre: npre,
	nprec: nprec,
	npreceq: npreceq,
	nrArr: nrArr,
	nrarr: nrarr,
	nrarrc: nrarrc,
	nrarrw: nrarrw,
	nrightarrow: nrightarrow,
	nrtri: nrtri,
	nrtrie: nrtrie,
	nsc: nsc,
	nsccue: nsccue,
	nsce: nsce,
	nscr: nscr,
	nshortmid: nshortmid,
	nshortparallel: nshortparallel,
	nsim: nsim,
	nsime: nsime,
	nsimeq: nsimeq,
	nsmid: nsmid,
	nspar: nspar,
	nsqsube: nsqsube,
	nsqsupe: nsqsupe,
	nsub: nsub,
	nsubE: nsubE,
	nsube: nsube,
	nsubset: nsubset,
	nsubseteq: nsubseteq,
	nsubseteqq: nsubseteqq,
	nsucc: nsucc,
	nsucceq: nsucceq,
	nsup: nsup,
	nsupE: nsupE,
	nsupe: nsupe,
	nsupset: nsupset,
	nsupseteq: nsupseteq,
	nsupseteqq: nsupseteqq,
	ntgl: ntgl,
	ntild: ntild,
	ntilde: ntilde,
	ntlg: ntlg,
	ntriangleleft: ntriangleleft,
	ntrianglelefteq: ntrianglelefteq,
	ntriangleright: ntriangleright,
	ntrianglerighteq: ntrianglerighteq,
	nu: nu,
	num: num,
	numero: numero,
	numsp: numsp,
	nvDash: nvDash,
	nvHarr: nvHarr,
	nvap: nvap,
	nvdash: nvdash,
	nvge: nvge,
	nvgt: nvgt,
	nvinfin: nvinfin,
	nvlArr: nvlArr,
	nvle: nvle,
	nvlt: nvlt,
	nvltrie: nvltrie,
	nvrArr: nvrArr,
	nvrtrie: nvrtrie,
	nvsim: nvsim,
	nwArr: nwArr,
	nwarhk: nwarhk,
	nwarr: nwarr,
	nwarrow: nwarrow,
	nwnear: nwnear,
	oS: oS,
	oacut: oacut,
	oacute: oacute,
	oast: oast,
	ocir: ocir,
	ocirc: ocirc,
	ocy: ocy,
	odash: odash,
	odblac: odblac,
	odiv: odiv,
	odot: odot,
	odsold: odsold,
	oelig: oelig,
	ofcir: ofcir,
	ofr: ofr,
	ogon: ogon,
	ograv: ograv,
	ograve: ograve,
	ogt: ogt,
	ohbar: ohbar,
	ohm: ohm,
	oint: oint,
	olarr: olarr,
	olcir: olcir,
	olcross: olcross,
	oline: oline,
	olt: olt,
	omacr: omacr,
	omega: omega,
	omicron: omicron,
	omid: omid,
	ominus: ominus,
	oopf: oopf,
	opar: opar,
	operp: operp,
	oplus: oplus,
	or: or,
	orarr: orarr,
	ord: ord,
	order: order$1,
	orderof: orderof,
	ordf: ordf,
	ordm: ordm,
	origof: origof,
	oror: oror,
	orslope: orslope,
	orv: orv,
	oscr: oscr,
	oslas: oslas,
	oslash: oslash,
	osol: osol,
	otild: otild,
	otilde: otilde,
	otimes: otimes,
	otimesas: otimesas,
	oum: oum,
	ouml: ouml,
	ovbar: ovbar,
	par: par,
	para: para,
	parallel: parallel,
	parsim: parsim,
	parsl: parsl,
	part: part,
	pcy: pcy,
	percnt: percnt,
	period: period,
	permil: permil,
	perp: perp,
	pertenk: pertenk,
	pfr: pfr,
	phi: phi,
	phiv: phiv,
	phmmat: phmmat,
	phone: phone,
	pi: pi,
	pitchfork: pitchfork,
	piv: piv,
	planck: planck,
	planckh: planckh,
	plankv: plankv,
	plus: plus,
	plusacir: plusacir,
	plusb: plusb,
	pluscir: pluscir,
	plusdo: plusdo,
	plusdu: plusdu,
	pluse: pluse,
	plusm: plusm,
	plusmn: plusmn,
	plussim: plussim,
	plustwo: plustwo,
	pm: pm,
	pointint: pointint,
	popf: popf,
	poun: poun,
	pound: pound,
	pr: pr,
	prE: prE,
	prap: prap,
	prcue: prcue,
	pre: pre,
	prec: prec,
	precapprox: precapprox,
	preccurlyeq: preccurlyeq,
	preceq: preceq,
	precnapprox: precnapprox,
	precneqq: precneqq,
	precnsim: precnsim,
	precsim: precsim,
	prime: prime,
	primes: primes,
	prnE: prnE,
	prnap: prnap,
	prnsim: prnsim,
	prod: prod,
	profalar: profalar,
	profline: profline,
	profsurf: profsurf,
	prop: prop,
	propto: propto,
	prsim: prsim,
	prurel: prurel,
	pscr: pscr,
	psi: psi,
	puncsp: puncsp,
	qfr: qfr,
	qint: qint,
	qopf: qopf,
	qprime: qprime,
	qscr: qscr,
	quaternions: quaternions,
	quatint: quatint,
	quest: quest,
	questeq: questeq,
	quo: quo,
	quot: quot$1,
	rAarr: rAarr,
	rArr: rArr,
	rAtail: rAtail,
	rBarr: rBarr,
	rHar: rHar,
	race: race,
	racute: racute,
	radic: radic,
	raemptyv: raemptyv,
	rang: rang,
	rangd: rangd,
	range: range,
	rangle: rangle,
	raqu: raqu,
	raquo: raquo,
	rarr: rarr,
	rarrap: rarrap,
	rarrb: rarrb,
	rarrbfs: rarrbfs,
	rarrc: rarrc,
	rarrfs: rarrfs,
	rarrhk: rarrhk,
	rarrlp: rarrlp,
	rarrpl: rarrpl,
	rarrsim: rarrsim,
	rarrtl: rarrtl,
	rarrw: rarrw,
	ratail: ratail,
	ratio: ratio,
	rationals: rationals,
	rbarr: rbarr,
	rbbrk: rbbrk,
	rbrace: rbrace,
	rbrack: rbrack,
	rbrke: rbrke,
	rbrksld: rbrksld,
	rbrkslu: rbrkslu,
	rcaron: rcaron,
	rcedil: rcedil,
	rceil: rceil,
	rcub: rcub,
	rcy: rcy,
	rdca: rdca,
	rdldhar: rdldhar,
	rdquo: rdquo,
	rdquor: rdquor,
	rdsh: rdsh,
	real: real,
	realine: realine,
	realpart: realpart,
	reals: reals,
	rect: rect,
	re: re,
	reg: reg,
	rfisht: rfisht,
	rfloor: rfloor,
	rfr: rfr,
	rhard: rhard,
	rharu: rharu,
	rharul: rharul,
	rho: rho,
	rhov: rhov,
	rightarrow: rightarrow,
	rightarrowtail: rightarrowtail,
	rightharpoondown: rightharpoondown,
	rightharpoonup: rightharpoonup,
	rightleftarrows: rightleftarrows,
	rightleftharpoons: rightleftharpoons,
	rightrightarrows: rightrightarrows,
	rightsquigarrow: rightsquigarrow,
	rightthreetimes: rightthreetimes,
	ring: ring,
	risingdotseq: risingdotseq,
	rlarr: rlarr,
	rlhar: rlhar,
	rlm: rlm,
	rmoust: rmoust,
	rmoustache: rmoustache,
	rnmid: rnmid,
	roang: roang,
	roarr: roarr,
	robrk: robrk,
	ropar: ropar,
	ropf: ropf,
	roplus: roplus,
	rotimes: rotimes,
	rpar: rpar,
	rpargt: rpargt,
	rppolint: rppolint,
	rrarr: rrarr,
	rsaquo: rsaquo,
	rscr: rscr,
	rsh: rsh,
	rsqb: rsqb,
	rsquo: rsquo,
	rsquor: rsquor,
	rthree: rthree,
	rtimes: rtimes,
	rtri: rtri,
	rtrie: rtrie,
	rtrif: rtrif,
	rtriltri: rtriltri,
	ruluhar: ruluhar,
	rx: rx,
	sacute: sacute,
	sbquo: sbquo,
	sc: sc,
	scE: scE,
	scap: scap,
	scaron: scaron,
	sccue: sccue,
	sce: sce,
	scedil: scedil,
	scirc: scirc,
	scnE: scnE,
	scnap: scnap,
	scnsim: scnsim,
	scpolint: scpolint,
	scsim: scsim,
	scy: scy,
	sdot: sdot,
	sdotb: sdotb,
	sdote: sdote,
	seArr: seArr,
	searhk: searhk,
	searr: searr,
	searrow: searrow,
	sec: sec,
	sect: sect,
	semi: semi,
	seswar: seswar,
	setminus: setminus,
	setmn: setmn,
	sext: sext,
	sfr: sfr,
	sfrown: sfrown,
	sharp: sharp,
	shchcy: shchcy,
	shcy: shcy,
	shortmid: shortmid,
	shortparallel: shortparallel,
	sh: sh,
	shy: shy,
	sigma: sigma,
	sigmaf: sigmaf,
	sigmav: sigmav,
	sim: sim,
	simdot: simdot,
	sime: sime,
	simeq: simeq,
	simg: simg,
	simgE: simgE,
	siml: siml,
	simlE: simlE,
	simne: simne,
	simplus: simplus,
	simrarr: simrarr,
	slarr: slarr,
	smallsetminus: smallsetminus,
	smashp: smashp,
	smeparsl: smeparsl,
	smid: smid,
	smile: smile,
	smt: smt,
	smte: smte,
	smtes: smtes,
	softcy: softcy,
	sol: sol,
	solb: solb,
	solbar: solbar,
	sopf: sopf,
	spades: spades,
	spadesuit: spadesuit,
	spar: spar,
	sqcap: sqcap,
	sqcaps: sqcaps,
	sqcup: sqcup,
	sqcups: sqcups,
	sqsub: sqsub,
	sqsube: sqsube,
	sqsubset: sqsubset,
	sqsubseteq: sqsubseteq,
	sqsup: sqsup,
	sqsupe: sqsupe,
	sqsupset: sqsupset,
	sqsupseteq: sqsupseteq,
	squ: squ,
	square: square,
	squarf: squarf,
	squf: squf,
	srarr: srarr,
	sscr: sscr,
	ssetmn: ssetmn,
	ssmile: ssmile,
	sstarf: sstarf,
	star: star,
	starf: starf,
	straightepsilon: straightepsilon,
	straightphi: straightphi,
	strns: strns,
	sub: sub,
	subE: subE,
	subdot: subdot,
	sube: sube,
	subedot: subedot,
	submult: submult,
	subnE: subnE,
	subne: subne,
	subplus: subplus,
	subrarr: subrarr,
	subset: subset,
	subseteq: subseteq,
	subseteqq: subseteqq,
	subsetneq: subsetneq,
	subsetneqq: subsetneqq,
	subsim: subsim,
	subsub: subsub,
	subsup: subsup,
	succ: succ,
	succapprox: succapprox,
	succcurlyeq: succcurlyeq,
	succeq: succeq,
	succnapprox: succnapprox,
	succneqq: succneqq,
	succnsim: succnsim,
	succsim: succsim,
	sum: sum,
	sung: sung,
	sup: sup,
	sup1: sup1,
	sup2: sup2,
	sup3: sup3,
	supE: supE,
	supdot: supdot,
	supdsub: supdsub,
	supe: supe,
	supedot: supedot,
	suphsol: suphsol,
	suphsub: suphsub,
	suplarr: suplarr,
	supmult: supmult,
	supnE: supnE,
	supne: supne,
	supplus: supplus,
	supset: supset,
	supseteq: supseteq,
	supseteqq: supseteqq,
	supsetneq: supsetneq,
	supsetneqq: supsetneqq,
	supsim: supsim,
	supsub: supsub,
	supsup: supsup,
	swArr: swArr,
	swarhk: swarhk,
	swarr: swarr,
	swarrow: swarrow,
	swnwar: swnwar,
	szli: szli,
	szlig: szlig,
	target: target,
	tau: tau,
	tbrk: tbrk,
	tcaron: tcaron,
	tcedil: tcedil,
	tcy: tcy,
	tdot: tdot,
	telrec: telrec,
	tfr: tfr,
	there4: there4,
	therefore: therefore,
	theta: theta,
	thetasym: thetasym,
	thetav: thetav,
	thickapprox: thickapprox,
	thicksim: thicksim,
	thinsp: thinsp,
	thkap: thkap,
	thksim: thksim,
	thor: thor,
	thorn: thorn,
	tilde: tilde,
	time: time,
	times: times,
	timesb: timesb,
	timesbar: timesbar,
	timesd: timesd,
	tint: tint,
	toea: toea,
	top: top,
	topbot: topbot,
	topcir: topcir,
	topf: topf,
	topfork: topfork,
	tosa: tosa,
	tprime: tprime,
	trade: trade,
	triangle: triangle,
	triangledown: triangledown,
	triangleleft: triangleleft,
	trianglelefteq: trianglelefteq,
	triangleq: triangleq,
	triangleright: triangleright,
	trianglerighteq: trianglerighteq,
	tridot: tridot,
	trie: trie,
	triminus: triminus,
	triplus: triplus,
	trisb: trisb,
	tritime: tritime,
	trpezium: trpezium,
	tscr: tscr,
	tscy: tscy,
	tshcy: tshcy,
	tstrok: tstrok,
	twixt: twixt,
	twoheadleftarrow: twoheadleftarrow,
	twoheadrightarrow: twoheadrightarrow,
	uArr: uArr,
	uHar: uHar,
	uacut: uacut,
	uacute: uacute,
	uarr: uarr,
	ubrcy: ubrcy,
	ubreve: ubreve,
	ucir: ucir,
	ucirc: ucirc,
	ucy: ucy,
	udarr: udarr,
	udblac: udblac,
	udhar: udhar,
	ufisht: ufisht,
	ufr: ufr,
	ugrav: ugrav,
	ugrave: ugrave,
	uharl: uharl,
	uharr: uharr,
	uhblk: uhblk,
	ulcorn: ulcorn,
	ulcorner: ulcorner,
	ulcrop: ulcrop,
	ultri: ultri,
	umacr: umacr,
	um: um,
	uml: uml,
	uogon: uogon,
	uopf: uopf,
	uparrow: uparrow,
	updownarrow: updownarrow,
	upharpoonleft: upharpoonleft,
	upharpoonright: upharpoonright,
	uplus: uplus,
	upsi: upsi,
	upsih: upsih,
	upsilon: upsilon,
	upuparrows: upuparrows,
	urcorn: urcorn,
	urcorner: urcorner,
	urcrop: urcrop,
	uring: uring,
	urtri: urtri,
	uscr: uscr,
	utdot: utdot,
	utilde: utilde,
	utri: utri,
	utrif: utrif,
	uuarr: uuarr,
	uum: uum,
	uuml: uuml,
	uwangle: uwangle,
	vArr: vArr,
	vBar: vBar,
	vBarv: vBarv,
	vDash: vDash,
	vangrt: vangrt,
	varepsilon: varepsilon,
	varkappa: varkappa,
	varnothing: varnothing,
	varphi: varphi,
	varpi: varpi,
	varpropto: varpropto,
	varr: varr,
	varrho: varrho,
	varsigma: varsigma,
	varsubsetneq: varsubsetneq,
	varsubsetneqq: varsubsetneqq,
	varsupsetneq: varsupsetneq,
	varsupsetneqq: varsupsetneqq,
	vartheta: vartheta,
	vartriangleleft: vartriangleleft,
	vartriangleright: vartriangleright,
	vcy: vcy,
	vdash: vdash,
	vee: vee,
	veebar: veebar,
	veeeq: veeeq,
	vellip: vellip,
	verbar: verbar,
	vert: vert,
	vfr: vfr,
	vltri: vltri,
	vnsub: vnsub,
	vnsup: vnsup,
	vopf: vopf,
	vprop: vprop,
	vrtri: vrtri,
	vscr: vscr,
	vsubnE: vsubnE,
	vsubne: vsubne,
	vsupnE: vsupnE,
	vsupne: vsupne,
	vzigzag: vzigzag,
	wcirc: wcirc,
	wedbar: wedbar,
	wedge: wedge,
	wedgeq: wedgeq,
	weierp: weierp,
	wfr: wfr,
	wopf: wopf,
	wp: wp,
	wr: wr,
	wreath: wreath,
	wscr: wscr,
	xcap: xcap,
	xcirc: xcirc,
	xcup: xcup,
	xdtri: xdtri,
	xfr: xfr,
	xhArr: xhArr,
	xharr: xharr,
	xi: xi,
	xlArr: xlArr,
	xlarr: xlarr,
	xmap: xmap,
	xnis: xnis,
	xodot: xodot,
	xopf: xopf,
	xoplus: xoplus,
	xotime: xotime,
	xrArr: xrArr,
	xrarr: xrarr,
	xscr: xscr,
	xsqcup: xsqcup,
	xuplus: xuplus,
	xutri: xutri,
	xvee: xvee,
	xwedge: xwedge,
	yacut: yacut,
	yacute: yacute,
	yacy: yacy,
	ycirc: ycirc,
	ycy: ycy,
	ye: ye,
	yen: yen,
	yfr: yfr,
	yicy: yicy,
	yopf: yopf,
	yscr: yscr,
	yucy: yucy,
	yum: yum,
	yuml: yuml,
	zacute: zacute,
	zcaron: zcaron,
	zcy: zcy,
	zdot: zdot,
	zeetrf: zeetrf,
	zeta: zeta,
	zfr: zfr,
	zhcy: zhcy,
	zigrarr: zigrarr,
	zopf: zopf,
	zscr: zscr,
	zwj: zwj,
	zwnj: zwnj,
	default: index$1
});

var AElig$1 = "Æ";
var AMP$1 = "&";
var Aacute$1 = "Á";
var Acirc$1 = "Â";
var Agrave$1 = "À";
var Aring$1 = "Å";
var Atilde$1 = "Ã";
var Auml$1 = "Ä";
var COPY$1 = "©";
var Ccedil$1 = "Ç";
var ETH$1 = "Ð";
var Eacute$1 = "É";
var Ecirc$1 = "Ê";
var Egrave$1 = "È";
var Euml$1 = "Ë";
var GT$1 = ">";
var Iacute$1 = "Í";
var Icirc$1 = "Î";
var Igrave$1 = "Ì";
var Iuml$1 = "Ï";
var LT$1 = "<";
var Ntilde$1 = "Ñ";
var Oacute$1 = "Ó";
var Ocirc$1 = "Ô";
var Ograve$1 = "Ò";
var Oslash$1 = "Ø";
var Otilde$1 = "Õ";
var Ouml$1 = "Ö";
var QUOT$1 = "\"";
var REG$1 = "®";
var THORN$1 = "Þ";
var Uacute$1 = "Ú";
var Ucirc$1 = "Û";
var Ugrave$1 = "Ù";
var Uuml$1 = "Ü";
var Yacute$1 = "Ý";
var aacute$1 = "á";
var acirc$1 = "â";
var acute$1 = "´";
var aelig$1 = "æ";
var agrave$1 = "à";
var amp$1 = "&";
var aring$1 = "å";
var atilde$1 = "ã";
var auml$1 = "ä";
var brvbar$1 = "¦";
var ccedil$1 = "ç";
var cedil$1 = "¸";
var cent$1 = "¢";
var copy$1 = "©";
var curren$1 = "¤";
var deg$1 = "°";
var divide$2 = "÷";
var eacute$1 = "é";
var ecirc$1 = "ê";
var egrave$1 = "è";
var eth$1 = "ð";
var euml$1 = "ë";
var frac12$1 = "½";
var frac14$1 = "¼";
var frac34$1 = "¾";
var gt$1 = ">";
var iacute$1 = "í";
var icirc$1 = "î";
var iexcl$1 = "¡";
var igrave$1 = "ì";
var iquest$1 = "¿";
var iuml$1 = "ï";
var laquo$1 = "«";
var lt$1 = "<";
var macr$1 = "¯";
var micro$1 = "µ";
var middot$1 = "·";
var nbsp$1 = " ";
var not$1 = "¬";
var ntilde$1 = "ñ";
var oacute$1 = "ó";
var ocirc$1 = "ô";
var ograve$1 = "ò";
var ordf$1 = "ª";
var ordm$1 = "º";
var oslash$1 = "ø";
var otilde$1 = "õ";
var ouml$1 = "ö";
var para$1 = "¶";
var plusmn$1 = "±";
var pound$1 = "£";
var quot$2 = "\"";
var raquo$1 = "»";
var reg$1 = "®";
var sect$1 = "§";
var shy$1 = "­";
var sup1$1 = "¹";
var sup2$1 = "²";
var sup3$1 = "³";
var szlig$1 = "ß";
var thorn$1 = "þ";
var times$1 = "×";
var uacute$1 = "ú";
var ucirc$1 = "û";
var ugrave$1 = "ù";
var uml$1 = "¨";
var uuml$1 = "ü";
var yacute$1 = "ý";
var yen$1 = "¥";
var yuml$1 = "ÿ";
var index$2 = {
	AElig: AElig$1,
	AMP: AMP$1,
	Aacute: Aacute$1,
	Acirc: Acirc$1,
	Agrave: Agrave$1,
	Aring: Aring$1,
	Atilde: Atilde$1,
	Auml: Auml$1,
	COPY: COPY$1,
	Ccedil: Ccedil$1,
	ETH: ETH$1,
	Eacute: Eacute$1,
	Ecirc: Ecirc$1,
	Egrave: Egrave$1,
	Euml: Euml$1,
	GT: GT$1,
	Iacute: Iacute$1,
	Icirc: Icirc$1,
	Igrave: Igrave$1,
	Iuml: Iuml$1,
	LT: LT$1,
	Ntilde: Ntilde$1,
	Oacute: Oacute$1,
	Ocirc: Ocirc$1,
	Ograve: Ograve$1,
	Oslash: Oslash$1,
	Otilde: Otilde$1,
	Ouml: Ouml$1,
	QUOT: QUOT$1,
	REG: REG$1,
	THORN: THORN$1,
	Uacute: Uacute$1,
	Ucirc: Ucirc$1,
	Ugrave: Ugrave$1,
	Uuml: Uuml$1,
	Yacute: Yacute$1,
	aacute: aacute$1,
	acirc: acirc$1,
	acute: acute$1,
	aelig: aelig$1,
	agrave: agrave$1,
	amp: amp$1,
	aring: aring$1,
	atilde: atilde$1,
	auml: auml$1,
	brvbar: brvbar$1,
	ccedil: ccedil$1,
	cedil: cedil$1,
	cent: cent$1,
	copy: copy$1,
	curren: curren$1,
	deg: deg$1,
	divide: divide$2,
	eacute: eacute$1,
	ecirc: ecirc$1,
	egrave: egrave$1,
	eth: eth$1,
	euml: euml$1,
	frac12: frac12$1,
	frac14: frac14$1,
	frac34: frac34$1,
	gt: gt$1,
	iacute: iacute$1,
	icirc: icirc$1,
	iexcl: iexcl$1,
	igrave: igrave$1,
	iquest: iquest$1,
	iuml: iuml$1,
	laquo: laquo$1,
	lt: lt$1,
	macr: macr$1,
	micro: micro$1,
	middot: middot$1,
	nbsp: nbsp$1,
	not: not$1,
	ntilde: ntilde$1,
	oacute: oacute$1,
	ocirc: ocirc$1,
	ograve: ograve$1,
	ordf: ordf$1,
	ordm: ordm$1,
	oslash: oslash$1,
	otilde: otilde$1,
	ouml: ouml$1,
	para: para$1,
	plusmn: plusmn$1,
	pound: pound$1,
	quot: quot$2,
	raquo: raquo$1,
	reg: reg$1,
	sect: sect$1,
	shy: shy$1,
	sup1: sup1$1,
	sup2: sup2$1,
	sup3: sup3$1,
	szlig: szlig$1,
	thorn: thorn$1,
	times: times$1,
	uacute: uacute$1,
	ucirc: ucirc$1,
	ugrave: ugrave$1,
	uml: uml$1,
	uuml: uuml$1,
	yacute: yacute$1,
	yen: yen$1,
	yuml: yuml$1
};

var characterEntitiesLegacy = Object.freeze({
	AElig: AElig$1,
	AMP: AMP$1,
	Aacute: Aacute$1,
	Acirc: Acirc$1,
	Agrave: Agrave$1,
	Aring: Aring$1,
	Atilde: Atilde$1,
	Auml: Auml$1,
	COPY: COPY$1,
	Ccedil: Ccedil$1,
	ETH: ETH$1,
	Eacute: Eacute$1,
	Ecirc: Ecirc$1,
	Egrave: Egrave$1,
	Euml: Euml$1,
	GT: GT$1,
	Iacute: Iacute$1,
	Icirc: Icirc$1,
	Igrave: Igrave$1,
	Iuml: Iuml$1,
	LT: LT$1,
	Ntilde: Ntilde$1,
	Oacute: Oacute$1,
	Ocirc: Ocirc$1,
	Ograve: Ograve$1,
	Oslash: Oslash$1,
	Otilde: Otilde$1,
	Ouml: Ouml$1,
	QUOT: QUOT$1,
	REG: REG$1,
	THORN: THORN$1,
	Uacute: Uacute$1,
	Ucirc: Ucirc$1,
	Ugrave: Ugrave$1,
	Uuml: Uuml$1,
	Yacute: Yacute$1,
	aacute: aacute$1,
	acirc: acirc$1,
	acute: acute$1,
	aelig: aelig$1,
	agrave: agrave$1,
	amp: amp$1,
	aring: aring$1,
	atilde: atilde$1,
	auml: auml$1,
	brvbar: brvbar$1,
	ccedil: ccedil$1,
	cedil: cedil$1,
	cent: cent$1,
	copy: copy$1,
	curren: curren$1,
	deg: deg$1,
	divide: divide$2,
	eacute: eacute$1,
	ecirc: ecirc$1,
	egrave: egrave$1,
	eth: eth$1,
	euml: euml$1,
	frac12: frac12$1,
	frac14: frac14$1,
	frac34: frac34$1,
	gt: gt$1,
	iacute: iacute$1,
	icirc: icirc$1,
	iexcl: iexcl$1,
	igrave: igrave$1,
	iquest: iquest$1,
	iuml: iuml$1,
	laquo: laquo$1,
	lt: lt$1,
	macr: macr$1,
	micro: micro$1,
	middot: middot$1,
	nbsp: nbsp$1,
	not: not$1,
	ntilde: ntilde$1,
	oacute: oacute$1,
	ocirc: ocirc$1,
	ograve: ograve$1,
	ordf: ordf$1,
	ordm: ordm$1,
	oslash: oslash$1,
	otilde: otilde$1,
	ouml: ouml$1,
	para: para$1,
	plusmn: plusmn$1,
	pound: pound$1,
	quot: quot$2,
	raquo: raquo$1,
	reg: reg$1,
	sect: sect$1,
	shy: shy$1,
	sup1: sup1$1,
	sup2: sup2$1,
	sup3: sup3$1,
	szlig: szlig$1,
	thorn: thorn$1,
	times: times$1,
	uacute: uacute$1,
	ucirc: ucirc$1,
	ugrave: ugrave$1,
	uml: uml$1,
	uuml: uuml$1,
	yacute: yacute$1,
	yen: yen$1,
	yuml: yuml$1,
	default: index$2
});

var index$3 = {
	"0": "�",
	"128": "€",
	"130": "‚",
	"131": "ƒ",
	"132": "„",
	"133": "…",
	"134": "†",
	"135": "‡",
	"136": "ˆ",
	"137": "‰",
	"138": "Š",
	"139": "‹",
	"140": "Œ",
	"142": "Ž",
	"145": "‘",
	"146": "’",
	"147": "“",
	"148": "”",
	"149": "•",
	"150": "–",
	"151": "—",
	"152": "˜",
	"153": "™",
	"154": "š",
	"155": "›",
	"156": "œ",
	"158": "ž",
	"159": "Ÿ"
};

var characterReferenceInvalid = Object.freeze({
	default: index$3
});

var isDecimal = decimal;

/* Check if the given character code, or the character
 * code at the first character, is decimal. */
function decimal(character) {
  var code = typeof character === 'string' ? character.charCodeAt(0) : character;

  return code >= 48 && code <= 57; /* 0-9 */
}

var isHexadecimal = hexadecimal;

/* Check if the given character code, or the character
 * code at the first character, is hexadecimal. */
function hexadecimal(character) {
  var code = typeof character === 'string' ? character.charCodeAt(0) : character;

  return code >= 97 /* a */ && code <= 102 /* z */ || code >= 65 /* A */ && code <= 70 /* Z */ || code >= 48 /* A */ && code <= 57 /* Z */;
}

var isAlphabetical = alphabetical;

/* Check if the given character code, or the character
 * code at the first character, is alphabetical. */
function alphabetical(character) {
  var code = typeof character === 'string' ? character.charCodeAt(0) : character;

  return code >= 97 && code <= 122 || /* a-z */
  code >= 65 && code <= 90; /* A-Z */
}

var isAlphanumerical = alphanumerical;

/* Check if the given character code, or the character
 * code at the first character, is alphanumerical. */
function alphanumerical(character) {
  return isAlphabetical(character) || isDecimal(character);
}

var characterEntities$1 = ( characterEntities && index$1 ) || characterEntities;

var legacy = ( characterEntitiesLegacy && index$2 ) || characterEntitiesLegacy;

var invalid = ( characterReferenceInvalid && index$3 ) || characterReferenceInvalid;

/* Dependencies. */

/* Expose. */
var parseEntities = wrapper;

/* Methods. */
var own$3 = {}.hasOwnProperty;
var fromCharCode$1 = String.fromCharCode;
var noop$1 = Function.prototype;

/* Characters. */
var REPLACEMENT = '\uFFFD';
var FORM_FEED = '\f';
var AMPERSAND = '&';
var OCTOTHORP = '#';
var SEMICOLON = ';';
var NEWLINE = '\n';
var X_LOWER = 'x';
var X_UPPER = 'X';
var SPACE = ' ';
var LESS_THAN = '<';
var EQUAL = '=';
var EMPTY = '';
var TAB = '\t';

/* Default settings. */
var defaults$1 = {
  warning: null,
  reference: null,
  text: null,
  warningContext: null,
  referenceContext: null,
  textContext: null,
  position: {},
  additional: null,
  attribute: false,
  nonTerminated: true
};

/* Reference types. */
var NAMED = 'named';
var HEXADECIMAL = 'hexadecimal';
var DECIMAL = 'decimal';

/* Map of bases. */
var BASE = {};

BASE[HEXADECIMAL] = 16;
BASE[DECIMAL] = 10;

/* Map of types to tests. Each type of character reference
 * accepts different characters. This test is used to
 * detect whether a reference has ended (as the semicolon
 * is not strictly needed). */
var TESTS = {};

TESTS[NAMED] = isAlphanumerical;
TESTS[DECIMAL] = isDecimal;
TESTS[HEXADECIMAL] = isHexadecimal;

/* Warning messages. */
var NAMED_NOT_TERMINATED = 1;
var NUMERIC_NOT_TERMINATED = 2;
var NAMED_EMPTY = 3;
var NUMERIC_EMPTY = 4;
var NAMED_UNKNOWN = 5;
var NUMERIC_DISALLOWED = 6;
var NUMERIC_PROHIBITED = 7;

var NUMERIC_REFERENCE = 'Numeric character references';
var NAMED_REFERENCE = 'Named character references';
var TERMINATED = ' must be terminated by a semicolon';
var VOID = ' cannot be empty';

var MESSAGES = {};

MESSAGES[NAMED_NOT_TERMINATED] = NAMED_REFERENCE + TERMINATED;
MESSAGES[NUMERIC_NOT_TERMINATED] = NUMERIC_REFERENCE + TERMINATED;
MESSAGES[NAMED_EMPTY] = NAMED_REFERENCE + VOID;
MESSAGES[NUMERIC_EMPTY] = NUMERIC_REFERENCE + VOID;
MESSAGES[NAMED_UNKNOWN] = NAMED_REFERENCE + ' must be known';
MESSAGES[NUMERIC_DISALLOWED] = NUMERIC_REFERENCE + ' cannot be disallowed';
MESSAGES[NUMERIC_PROHIBITED] = NUMERIC_REFERENCE + ' cannot be outside the ' + 'permissible Unicode range';

/* Wrap to ensure clean parameters are given to `parse`. */
function wrapper(value, options) {
  var settings = {};
  var option;
  var key;

  if (!options) {
    options = {};
  }

  for (key in defaults$1) {
    option = options[key];
    settings[key] = option === null || option === undefined ? defaults$1[key] : option;
  }

  if (settings.position.indent || settings.position.start) {
    settings.indent = settings.position.indent || [];
    settings.position = settings.position.start;
  }

  return parse(value, settings);
}

/* Parse entities. */
function parse(value, settings) {
  var additional = settings.additional;
  var nonTerminated = settings.nonTerminated;
  var handleText = settings.text;
  var handleReference = settings.reference;
  var handleWarning = settings.warning;
  var textContext = settings.textContext;
  var referenceContext = settings.referenceContext;
  var warningContext = settings.warningContext;
  var pos = settings.position;
  var indent = settings.indent || [];
  var length = value.length;
  var index = 0;
  var lines = -1;
  var column = pos.column || 1;
  var line = pos.line || 1;
  var queue = EMPTY;
  var result = [];
  var entityCharacters;
  var terminated;
  var characters;
  var character;
  var reference;
  var following;
  var warning;
  var reason;
  var output;
  var entity;
  var begin;
  var start;
  var type;
  var test;
  var prev;
  var next;
  var diff;
  var end;

  /* Cache the current point. */
  prev = now();

  /* Wrap `handleWarning`. */
  warning = handleWarning ? parseError : noop$1;

  /* Ensure the algorithm walks over the first character
   * and the end (inclusive). */
  index--;
  length++;

  while (++index < length) {
    /* If the previous character was a newline. */
    if (character === NEWLINE) {
      column = indent[lines] || 1;
    }

    character = at(index);

    /* Handle anything other than an ampersand,
     * including newlines and EOF. */
    if (character !== AMPERSAND) {
      if (character === NEWLINE) {
        line++;
        lines++;
        column = 0;
      }

      if (character) {
        queue += character;
        column++;
      } else {
        flush();
      }
    } else {
      following = at(index + 1);

      /* The behaviour depends on the identity of the next
       * character. */
      if (following === TAB || following === NEWLINE || following === FORM_FEED || following === SPACE || following === LESS_THAN || following === AMPERSAND || following === EMPTY || additional && following === additional) {
        /* Not a character reference. No characters
         * are consumed, and nothing is returned.
         * This is not an error, either. */
        queue += character;
        column++;

        continue;
      }

      start = index + 1;
      begin = start;
      end = start;

      /* Numerical entity. */
      if (following !== OCTOTHORP) {
        type = NAMED;
      } else {
        end = ++begin;

        /* The behaviour further depends on the
         * character after the U+0023 NUMBER SIGN. */
        following = at(end);

        if (following === X_LOWER || following === X_UPPER) {
          /* ASCII hex digits. */
          type = HEXADECIMAL;
          end = ++begin;
        } else {
          /* ASCII digits. */
          type = DECIMAL;
        }
      }

      entityCharacters = EMPTY;
      entity = EMPTY;
      characters = EMPTY;
      test = TESTS[type];
      end--;

      while (++end < length) {
        following = at(end);

        if (!test(following)) {
          break;
        }

        characters += following;

        /* Check if we can match a legacy named
         * reference.  If so, we cache that as the
         * last viable named reference.  This
         * ensures we do not need to walk backwards
         * later. */
        if (type === NAMED && own$3.call(legacy, characters)) {
          entityCharacters = characters;
          entity = legacy[characters];
        }
      }

      terminated = at(end) === SEMICOLON;

      if (terminated) {
        end++;

        if (type === NAMED && own$3.call(characterEntities$1, characters)) {
          entityCharacters = characters;
          entity = characterEntities$1[characters];
        }
      }

      diff = 1 + end - start;

      if (!terminated && !nonTerminated) {
        /* Empty. */
      } else if (!characters) {
        /* An empty (possible) entity is valid, unless
         * its numeric (thus an ampersand followed by
         * an octothorp). */
        if (type !== NAMED) {
          warning(NUMERIC_EMPTY, diff);
        }
      } else if (type === NAMED) {
        /* An ampersand followed by anything
         * unknown, and not terminated, is invalid. */
        if (terminated && !entity) {
          warning(NAMED_UNKNOWN, 1);
        } else {
          /* If theres something after an entity
           * name which is not known, cap the
           * reference. */
          if (entityCharacters !== characters) {
            end = begin + entityCharacters.length;
            diff = 1 + end - begin;
            terminated = false;
          }

          /* If the reference is not terminated,
           * warn. */
          if (!terminated) {
            reason = entityCharacters ? NAMED_NOT_TERMINATED : NAMED_EMPTY;

            if (!settings.attribute) {
              warning(reason, diff);
            } else {
              following = at(end);

              if (following === EQUAL) {
                warning(reason, diff);
                entity = null;
              } else if (isAlphanumerical(following)) {
                entity = null;
              } else {
                warning(reason, diff);
              }
            }
          }
        }

        reference = entity;
      } else {
        if (!terminated) {
          /* All non-terminated numeric entities are
           * not rendered, and trigger a warning. */
          warning(NUMERIC_NOT_TERMINATED, diff);
        }

        /* When terminated and number, parse as
         * either hexadecimal or decimal. */
        reference = parseInt(characters, BASE[type]);

        /* Trigger a warning when the parsed number
         * is prohibited, and replace with
         * replacement character. */
        if (isProhibited(reference)) {
          warning(NUMERIC_PROHIBITED, diff);

          reference = REPLACEMENT;
        } else if (reference in invalid) {
          /* Trigger a warning when the parsed number
           * is disallowed, and replace by an
           * alternative. */
          warning(NUMERIC_DISALLOWED, diff);

          reference = invalid[reference];
        } else {
          /* Parse the number. */
          output = EMPTY;

          /* Trigger a warning when the parsed
           * number should not be used. */
          if (isWarning(reference)) {
            warning(NUMERIC_DISALLOWED, diff);
          }

          /* Stringify the number. */
          if (reference > 0xFFFF) {
            reference -= 0x10000;
            output += fromCharCode$1(reference >>> (10 & 0x3FF) | 0xD800);
            reference = 0xDC00 | reference & 0x3FF;
          }

          reference = output + fromCharCode$1(reference);
        }
      }

      /* If we could not find a reference, queue the
       * checked characters (as normal characters),
       * and move the pointer to their end. This is
       * possible because we can be certain neither
       * newlines nor ampersands are included. */
      if (!reference) {
        characters = value.slice(start - 1, end);
        queue += characters;
        column += characters.length;
        index = end - 1;
      } else {
        /* Found it! First eat the queued
         * characters as normal text, then eat
         * an entity. */
        flush();

        prev = now();
        index = end - 1;
        column += end - start + 1;
        result.push(reference);
        next = now();
        next.offset++;

        if (handleReference) {
          handleReference.call(referenceContext, reference, {
            start: prev,
            end: next
          }, value.slice(start - 1, end));
        }

        prev = next;
      }
    }
  }

  /* Return the reduced nodes, and any possible warnings. */
  return result.join(EMPTY);

  /* Get current position. */
  function now() {
    return {
      line: line,
      column: column,
      offset: index + (pos.offset || 0)
    };
  }

  /* “Throw” a parse-error: a warning. */
  function parseError(code, offset) {
    var position = now();

    position.column += offset;
    position.offset += offset;

    handleWarning.call(warningContext, MESSAGES[code], position, code);
  }

  /* Get character at position. */
  function at(position) {
    return value.charAt(position);
  }

  /* Flush `queue` (normal text). Macro invoked before
   * each entity and at the end of `value`.
   * Does nothing when `queue` is empty. */
  function flush() {
    if (queue) {
      result.push(queue);

      if (handleText) {
        handleText.call(textContext, queue, {
          start: prev,
          end: now()
        });
      }

      queue = EMPTY;
    }
  }
}

/* Check if `character` is outside the permissible
 * unicode range. */
function isProhibited(code) {
  return code >= 0xD800 && code <= 0xDFFF || code > 0x10FFFF;
}

/* Check if `character` is disallowed. */
function isWarning(code) {
  if (code >= 0x0001 && code <= 0x0008 || code === 0x000B || code >= 0x000D && code <= 0x001F || code >= 0x007F && code <= 0x009F || code >= 0xFDD0 && code <= 0xFDEF || (code & 0xFFFF) === 0xFFFF || (code & 0xFFFF) === 0xFFFE) {
    return true;
  }

  return false;
}

var decode$1 = factory$3;

/* Factory to create an entity decoder. */
function factory$3(ctx) {
  decoder.raw = decodeRaw;

  return decoder;

  /* Normalize `position` to add an `indent`. */
  function normalize(position) {
    var offsets = ctx.offset;
    var line = position.line;
    var result = [];

    while (++line) {
      if (!(line in offsets)) {
        break;
      }

      result.push((offsets[line] || 0) + 1);
    }

    return {
      start: position,
      indent: result
    };
  }

  /* Handle a warning.
   * See https://github.com/wooorm/parse-entities
   * for the warnings. */
  function handleWarning(reason, position, code) {
    if (code === 3) {
      return;
    }

    ctx.file.message(reason, position);
  }

  /* Decode `value` (at `position`) into text-nodes. */
  function decoder(value, position, handler) {
    parseEntities(value, {
      position: normalize(position),
      warning: handleWarning,
      text: handler,
      reference: handler,
      textContext: ctx,
      referenceContext: ctx
    });
  }

  /* Decode `value` (at `position`) into a string. */
  function decodeRaw(value, position, options) {
    return parseEntities(value, immutable(options, {
      position: normalize(position),
      warning: handleWarning
    }));
  }
}

var tokenizer = factory$4;

var MERGEABLE_NODES = {
  text: mergeText,
  blockquote: mergeBlockquote
};

/* Check whether a node is mergeable with adjacent nodes. */
function mergeable(node) {
  var start;
  var end;

  if (node.type !== 'text' || !node.position) {
    return true;
  }

  start = node.position.start;
  end = node.position.end;

  /* Only merge nodes which occupy the same size as their
   * `value`. */
  return start.line !== end.line || end.column - start.column === node.value.length;
}

/* Merge two text nodes: `node` into `prev`. */
function mergeText(prev, node) {
  prev.value += node.value;

  return prev;
}

/* Merge two blockquotes: `node` into `prev`, unless in
 * CommonMark mode. */
function mergeBlockquote(prev, node) {
  if (this.options.commonmark) {
    return node;
  }

  prev.children = prev.children.concat(node.children);

  return prev;
}

/* Construct a tokenizer.  This creates both
 * `tokenizeInline` and `tokenizeBlock`. */
function factory$4(type) {
  return tokenize;

  /* Tokenizer for a bound `type`. */
  function tokenize(value, location) {
    var self = this;
    var offset = self.offset;
    var tokens = [];
    var methods = self[type + 'Methods'];
    var tokenizers = self[type + 'Tokenizers'];
    var line = location.line;
    var column = location.column;
    var index;
    var length;
    var method;
    var name;
    var matched;
    var valueLength;

    /* Trim white space only lines. */
    if (!value) {
      return tokens;
    }

    /* Expose on `eat`. */
    eat.now = now;
    eat.file = self.file;

    /* Sync initial offset. */
    updatePosition('');

    /* Iterate over `value`, and iterate over all
     * tokenizers.  When one eats something, re-iterate
     * with the remaining value.  If no tokenizer eats,
     * something failed (should not happen) and an
     * exception is thrown. */
    while (value) {
      index = -1;
      length = methods.length;
      matched = false;

      while (++index < length) {
        name = methods[index];
        method = tokenizers[name];

        if (method && (
        /* istanbul ignore next */!method.onlyAtStart || self.atStart) && (!method.notInList || !self.inList) && (!method.notInBlock || !self.inBlock) && (!method.notInLink || !self.inLink)) {
          valueLength = value.length;

          method.apply(self, [eat, value]);

          matched = valueLength !== value.length;

          if (matched) {
            break;
          }
        }
      }

      /* istanbul ignore if */
      if (!matched) {
        self.file.fail(new Error('Infinite loop'), eat.now());
      }
    }

    self.eof = now();

    return tokens;

    /* Update line, column, and offset based on
     * `value`. */
    function updatePosition(subvalue) {
      var lastIndex = -1;
      var index = subvalue.indexOf('\n');

      while (index !== -1) {
        line++;
        lastIndex = index;
        index = subvalue.indexOf('\n', index + 1);
      }

      if (lastIndex === -1) {
        column += subvalue.length;
      } else {
        column = subvalue.length - lastIndex;
      }

      if (line in offset) {
        if (lastIndex !== -1) {
          column += offset[line];
        } else if (column <= offset[line]) {
          column = offset[line] + 1;
        }
      }
    }

    /* Get offset.  Called before the first character is
     * eaten to retrieve the range's offsets. */
    function getOffset() {
      var indentation = [];
      var pos = line + 1;

      /* Done.  Called when the last character is
       * eaten to retrieve the range’s offsets. */
      return function () {
        var last = line + 1;

        while (pos < last) {
          indentation.push((offset[pos] || 0) + 1);

          pos++;
        }

        return indentation;
      };
    }

    /* Get the current position. */
    function now() {
      var pos = { line: line, column: column };

      pos.offset = self.toOffset(pos);

      return pos;
    }

    /* Store position information for a node. */
    function Position(start) {
      this.start = start;
      this.end = now();
    }

    /* Throw when a value is incorrectly eaten.
     * This shouldn’t happen but will throw on new,
     * incorrect rules. */
    function validateEat(subvalue) {
      /* istanbul ignore if */
      if (value.substring(0, subvalue.length) !== subvalue) {
        /* Capture stack-trace. */
        self.file.fail(new Error('Incorrectly eaten value: please report this ' + 'warning on http://git.io/vg5Ft'), now());
      }
    }

    /* Mark position and patch `node.position`. */
    function position() {
      var before = now();

      return update;

      /* Add the position to a node. */
      function update(node, indent) {
        var prev = node.position;
        var start = prev ? prev.start : before;
        var combined = [];
        var n = prev && prev.end.line;
        var l = before.line;

        node.position = new Position(start);

        /* If there was already a `position`, this
         * node was merged.  Fixing `start` wasn’t
         * hard, but the indent is different.
         * Especially because some information, the
         * indent between `n` and `l` wasn’t
         * tracked.  Luckily, that space is
         * (should be?) empty, so we can safely
         * check for it now. */
        if (prev && indent && prev.indent) {
          combined = prev.indent;

          if (n < l) {
            while (++n < l) {
              combined.push((offset[n] || 0) + 1);
            }

            combined.push(before.column);
          }

          indent = combined.concat(indent);
        }

        node.position.indent = indent || [];

        return node;
      }
    }

    /* Add `node` to `parent`s children or to `tokens`.
     * Performs merges where possible. */
    function add(node, parent) {
      var children = parent ? parent.children : tokens;
      var prev = children[children.length - 1];

      if (prev && node.type === prev.type && node.type in MERGEABLE_NODES && mergeable(prev) && mergeable(node)) {
        node = MERGEABLE_NODES[node.type].call(self, prev, node);
      }

      if (node !== prev) {
        children.push(node);
      }

      if (self.atStart && tokens.length !== 0) {
        self.exitStart();
      }

      return node;
    }

    /* Remove `subvalue` from `value`.
     * `subvalue` must be at the start of `value`. */
    function eat(subvalue) {
      var indent = getOffset();
      var pos = position();
      var current = now();

      validateEat(subvalue);

      apply.reset = reset;
      reset.test = test;
      apply.test = test;

      value = value.substring(subvalue.length);

      updatePosition(subvalue);

      indent = indent();

      return apply;

      /* Add the given arguments, add `position` to
       * the returned node, and return the node. */
      function apply(node, parent) {
        return pos(add(pos(node), parent), indent);
      }

      /* Functions just like apply, but resets the
       * content:  the line and column are reversed,
       * and the eaten value is re-added.
       * This is useful for nodes with a single
       * type of content, such as lists and tables.
       * See `apply` above for what parameters are
       * expected. */
      function reset() {
        var node = apply.apply(null, arguments);

        line = current.line;
        column = current.column;
        value = subvalue + value;

        return node;
      }

      /* Test the position, after eating, and reverse
       * to a not-eaten state. */
      function test() {
        var result = pos({});

        line = current.line;
        column = current.column;
        value = subvalue + value;

        return result.position;
      }
    }
  }
}

var markdownEscapes = escapes;

var defaults$2 = ['\\', '`', '*', '{', '}', '[', ']', '(', ')', '#', '+', '-', '.', '!', '_', '>'];

var gfm = defaults$2.concat(['~', '|']);

var commonmark = gfm.concat(['\n', '"', '$', '%', '&', '\'', ',', '/', ':', ';', '<', '=', '?', '@', '^']);

escapes.default = defaults$2;
escapes.gfm = gfm;
escapes.commonmark = commonmark;

/* Get markdown escapes. */
function escapes(options) {
  var settings = options || {};

  if (settings.commonmark) {
    return commonmark;
  }

  return settings.gfm ? gfm : defaults$2;
}

var blockElements = ["address", "article", "aside", "base", "basefont", "blockquote", "body", "caption", "center", "col", "colgroup", "dd", "details", "dialog", "dir", "div", "dl", "dt", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "legend", "li", "link", "main", "menu", "menuitem", "meta", "nav", "noframes", "ol", "optgroup", "option", "p", "param", "pre", "section", "source", "title", "summary", "table", "tbody", "td", "tfoot", "th", "thead", "title", "tr", "track", "ul"];

var blockElements$1 = Object.freeze({
	default: blockElements
});

var require$$0$30 = ( blockElements$1 && blockElements ) || blockElements$1;

var defaults$3 = {
  position: true,
  gfm: true,
  commonmark: false,
  footnotes: false,
  pedantic: false,
  blocks: require$$0$30
};

var setOptions_1 = setOptions;

function setOptions(options) {
  var self = this;
  var current = self.options;
  var key;
  var value;

  if (options == null) {
    options = {};
  } else if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
    options = immutable(options);
  } else {
    throw new Error('Invalid value `' + options + '` ' + 'for setting `options`');
  }

  for (key in defaults$3) {
    value = options[key];

    if (value == null) {
      value = current[key];
    }

    if (key !== 'blocks' && typeof value !== 'boolean' || key === 'blocks' && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
      throw new Error('Invalid value `' + value + '` for setting `options.' + key + '`');
    }

    options[key] = value;
  }

  self.options = options;
  self.escape = markdownEscapes(options);

  return self;
}

var unistUtilRemovePosition = removePosition;

/* Remove `position`s from `tree`. */
function removePosition(node, force) {
  unistUtilVisit(node, force ? hard : soft);
  return node;
}

function hard(node) {
  delete node.position;
}

function soft(node) {
  node.position = undefined;
}

var parse_1 = parse$1;

var C_NEWLINE = '\n';
var EXPRESSION_LINE_BREAKS = /\r\n|\r/g;

/* Parse the bound file. */
function parse$1() {
  var self = this;
  var value = String(self.file);
  var start = { line: 1, column: 1, offset: 0 };
  var content = immutable(start);
  var node;

  /* Clean non-unix newlines: `\r\n` and `\r` are all
   * changed to `\n`.  This should not affect positional
   * information. */
  value = value.replace(EXPRESSION_LINE_BREAKS, C_NEWLINE);

  if (value.charCodeAt(0) === 0xFEFF) {
    value = value.slice(1);

    content.column++;
    content.offset++;
  }

  node = {
    type: 'root',
    children: self.tokenizeBlock(value, content),
    position: {
      start: start,
      end: self.eof || immutable(start)
    }
  };

  if (!self.options.position) {
    unistUtilRemovePosition(node, true);
  }

  return node;
}

var isWhitespaceCharacter = whitespace;

var fromCode = String.fromCharCode;
var re$1 = /\s/;

/* Check if the given character code, or the character
 * code at the first character, is a whitespace character. */
function whitespace(character) {
  return re$1.test(typeof character === 'number' ? fromCode(character) : character.charAt(0));
}

var newline_1 = newline;

/* Tokenise newline. */
function newline(eat, value, silent) {
  var character = value.charAt(0);
  var length;
  var subvalue;
  var queue;
  var index;

  if (character !== '\n') {
    return;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  index = 1;
  length = value.length;
  subvalue = character;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (!isWhitespaceCharacter(character)) {
      break;
    }

    queue += character;

    if (character === '\n') {
      subvalue += queue;
      queue = '';
    }

    index++;
  }

  eat(subvalue);
}

/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

/**
 * Results cache
 */

var res = '';
var cache;

/**
 * Expose `repeat`
 */

var repeatString = repeat$1;

/**
 * Repeat the given `string` the specified `number`
 * of times.
 *
 * **Example:**
 *
 * ```js
 * var repeat = require('repeat-string');
 * repeat('A', 5);
 * //=> AAAAA
 * ```
 *
 * @param {String} `string` The string to repeat
 * @param {Number} `number` The number of times to repeat the string
 * @return {String} Repeated string
 * @api public
 */

function repeat$1(str, num) {
  if (typeof str !== 'string') {
    throw new TypeError('expected a string');
  }

  // cover common, quick use cases
  if (num === 1) return str;
  if (num === 2) return str + str;

  var max = str.length * num;
  if (cache !== str || typeof cache === 'undefined') {
    cache = str;
    res = '';
  } else if (res.length >= max) {
    return res.substr(0, max);
  }

  while (max > res.length && num > 1) {
    if (num & 1) {
      res += str;
    }

    num >>= 1;
    str += str;
  }

  res += str;
  res = res.substr(0, max);
  return res;
}

var trimTrailingLines_1 = trimTrailingLines;

var line = '\n';

/* Remove final newline characters from `value`. */
function trimTrailingLines(value) {
  var val = String(value);
  var index = val.length;

  while (val.charAt(--index) === line) {/* empty */}

  return val.slice(0, index + 1);
}

var codeIndented = indentedCode;

var C_NEWLINE$1 = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';

var CODE_INDENT_COUNT = 4;
var CODE_INDENT = repeatString(C_SPACE, CODE_INDENT_COUNT);

/* Tokenise indented code. */
function indentedCode(eat, value, silent) {
  var index = -1;
  var length = value.length;
  var subvalue = '';
  var content = '';
  var subvalueQueue = '';
  var contentQueue = '';
  var character;
  var blankQueue;
  var indent;

  while (++index < length) {
    character = value.charAt(index);

    if (indent) {
      indent = false;

      subvalue += subvalueQueue;
      content += contentQueue;
      subvalueQueue = '';
      contentQueue = '';

      if (character === C_NEWLINE$1) {
        subvalueQueue = character;
        contentQueue = character;
      } else {
        subvalue += character;
        content += character;

        while (++index < length) {
          character = value.charAt(index);

          if (!character || character === C_NEWLINE$1) {
            contentQueue = character;
            subvalueQueue = character;
            break;
          }

          subvalue += character;
          content += character;
        }
      }
    } else if (character === C_SPACE && value.charAt(index + 1) === character && value.charAt(index + 2) === character && value.charAt(index + 3) === character) {
      subvalueQueue += CODE_INDENT;
      index += 3;
      indent = true;
    } else if (character === C_TAB) {
      subvalueQueue += character;
      indent = true;
    } else {
      blankQueue = '';

      while (character === C_TAB || character === C_SPACE) {
        blankQueue += character;
        character = value.charAt(++index);
      }

      if (character !== C_NEWLINE$1) {
        break;
      }

      subvalueQueue += blankQueue + character;
      contentQueue += character;
    }
  }

  if (content) {
    if (silent) {
      return true;
    }

    return eat(subvalue)({
      type: 'code',
      lang: null,
      value: trimTrailingLines_1(content)
    });
  }
}

var codeFenced = fencedCode;

var C_NEWLINE$2 = '\n';
var C_TAB$1 = '\t';
var C_SPACE$1 = ' ';
var C_TILDE = '~';
var C_TICK = '`';

var MIN_FENCE_COUNT = 3;
var CODE_INDENT_COUNT$1 = 4;

function fencedCode(eat, value, silent) {
  var self = this;
  var settings = self.options;
  var length = value.length + 1;
  var index = 0;
  var subvalue = '';
  var fenceCount;
  var marker;
  var character;
  var flag;
  var queue;
  var content;
  var exdentedContent;
  var closing;
  var exdentedClosing;
  var indent;
  var now;

  if (!settings.gfm) {
    return;
  }

  /* Eat initial spacing. */
  while (index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE$1 && character !== C_TAB$1) {
      break;
    }

    subvalue += character;
    index++;
  }

  indent = index;

  /* Eat the fence. */
  character = value.charAt(index);

  if (character !== C_TILDE && character !== C_TICK) {
    return;
  }

  index++;
  marker = character;
  fenceCount = 1;
  subvalue += character;

  while (index < length) {
    character = value.charAt(index);

    if (character !== marker) {
      break;
    }

    subvalue += character;
    fenceCount++;
    index++;
  }

  if (fenceCount < MIN_FENCE_COUNT) {
    return;
  }

  /* Eat spacing before flag. */
  while (index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE$1 && character !== C_TAB$1) {
      break;
    }

    subvalue += character;
    index++;
  }

  /* Eat flag. */
  flag = '';
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (character === C_NEWLINE$2 || character === C_TILDE || character === C_TICK) {
      break;
    }

    if (character === C_SPACE$1 || character === C_TAB$1) {
      queue += character;
    } else {
      flag += queue + character;
      queue = '';
    }

    index++;
  }

  character = value.charAt(index);

  if (character && character !== C_NEWLINE$2) {
    return;
  }

  if (silent) {
    return true;
  }

  now = eat.now();
  now.column += subvalue.length;
  now.offset += subvalue.length;

  subvalue += flag;
  flag = self.decode.raw(self.unescape(flag), now);

  if (queue) {
    subvalue += queue;
  }

  queue = '';
  closing = '';
  exdentedClosing = '';
  content = '';
  exdentedContent = '';

  /* Eat content. */
  while (index < length) {
    character = value.charAt(index);
    content += closing;
    exdentedContent += exdentedClosing;
    closing = '';
    exdentedClosing = '';

    if (character !== C_NEWLINE$2) {
      content += character;
      exdentedClosing += character;
      index++;
      continue;
    }

    /* Add the newline to `subvalue` if its the first
     * character.  Otherwise, add it to the `closing`
     * queue. */
    if (content) {
      closing += character;
      exdentedClosing += character;
    } else {
      subvalue += character;
    }

    queue = '';
    index++;

    while (index < length) {
      character = value.charAt(index);

      if (character !== C_SPACE$1) {
        break;
      }

      queue += character;
      index++;
    }

    closing += queue;
    exdentedClosing += queue.slice(indent);

    if (queue.length >= CODE_INDENT_COUNT$1) {
      continue;
    }

    queue = '';

    while (index < length) {
      character = value.charAt(index);

      if (character !== marker) {
        break;
      }

      queue += character;
      index++;
    }

    closing += queue;
    exdentedClosing += queue;

    if (queue.length < fenceCount) {
      continue;
    }

    queue = '';

    while (index < length) {
      character = value.charAt(index);

      if (character !== C_SPACE$1 && character !== C_TAB$1) {
        break;
      }

      closing += character;
      exdentedClosing += character;
      index++;
    }

    if (!character || character === C_NEWLINE$2) {
      break;
    }
  }

  subvalue += content + closing;

  return eat(subvalue)({
    type: 'code',
    lang: flag || null,
    value: trimTrailingLines_1(exdentedContent)
  });
}

var trim_1 = createCommonjsModule(function (module, exports) {
  exports = module.exports = trim;

  function trim(str) {
    return str.replace(/^\s*|\s*$/g, '');
  }

  exports.left = function (str) {
    return str.replace(/^\s*/, '');
  };

  exports.right = function (str) {
    return str.replace(/\s*$/, '');
  };
});

var trim_2 = trim_1.left;
var trim_3 = trim_1.right;

var interrupt_1 = interrupt;

function interrupt(interruptors, tokenizers, ctx, params) {
  var bools = ['pedantic', 'commonmark'];
  var count = bools.length;
  var length = interruptors.length;
  var index = -1;
  var interruptor;
  var config;
  var fn;
  var offset;
  var bool;
  var ignore;

  while (++index < length) {
    interruptor = interruptors[index];
    config = interruptor[1] || {};
    fn = interruptor[0];
    offset = -1;
    ignore = false;

    while (++offset < count) {
      bool = bools[offset];

      if (config[bool] !== undefined && config[bool] !== ctx.options[bool]) {
        ignore = true;
        break;
      }
    }

    if (ignore) {
      continue;
    }

    if (tokenizers[fn].apply(ctx, params)) {
      return true;
    }
  }

  return false;
}

var blockquote_1 = blockquote;

var C_NEWLINE$3 = '\n';
var C_TAB$2 = '\t';
var C_SPACE$2 = ' ';
var C_GT = '>';

/* Tokenise a blockquote. */
function blockquote(eat, value, silent) {
  var self = this;
  var offsets = self.offset;
  var tokenizers = self.blockTokenizers;
  var interruptors = self.interruptBlockquote;
  var now = eat.now();
  var currentLine = now.line;
  var length = value.length;
  var values = [];
  var contents = [];
  var indents = [];
  var add;
  var index = 0;
  var character;
  var rest;
  var nextIndex;
  var content;
  var line;
  var startIndex;
  var prefixed;
  var exit;

  while (index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE$2 && character !== C_TAB$2) {
      break;
    }

    index++;
  }

  if (value.charAt(index) !== C_GT) {
    return;
  }

  if (silent) {
    return true;
  }

  index = 0;

  while (index < length) {
    nextIndex = value.indexOf(C_NEWLINE$3, index);
    startIndex = index;
    prefixed = false;

    if (nextIndex === -1) {
      nextIndex = length;
    }

    while (index < length) {
      character = value.charAt(index);

      if (character !== C_SPACE$2 && character !== C_TAB$2) {
        break;
      }

      index++;
    }

    if (value.charAt(index) === C_GT) {
      index++;
      prefixed = true;

      if (value.charAt(index) === C_SPACE$2) {
        index++;
      }
    } else {
      index = startIndex;
    }

    content = value.slice(index, nextIndex);

    if (!prefixed && !trim_1(content)) {
      index = startIndex;
      break;
    }

    if (!prefixed) {
      rest = value.slice(index);

      /* Check if the following code contains a possible
       * block. */
      if (interrupt_1(interruptors, tokenizers, self, [eat, rest, true])) {
        break;
      }
    }

    line = startIndex === index ? content : value.slice(startIndex, nextIndex);

    indents.push(index - startIndex);
    values.push(line);
    contents.push(content);

    index = nextIndex + 1;
  }

  index = -1;
  length = indents.length;
  add = eat(values.join(C_NEWLINE$3));

  while (++index < length) {
    offsets[currentLine] = (offsets[currentLine] || 0) + indents[index];
    currentLine++;
  }

  exit = self.enterBlock();
  contents = self.tokenizeBlock(contents.join(C_NEWLINE$3), now);
  exit();

  return add({
    type: 'blockquote',
    children: contents
  });
}

var headingAtx = atxHeading;

var C_NEWLINE$4 = '\n';
var C_TAB$3 = '\t';
var C_SPACE$3 = ' ';
var C_HASH = '#';

var MAX_ATX_COUNT = 6;

function atxHeading(eat, value, silent) {
  var self = this;
  var settings = self.options;
  var length = value.length + 1;
  var index = -1;
  var now = eat.now();
  var subvalue = '';
  var content = '';
  var character;
  var queue;
  var depth;

  /* Eat initial spacing. */
  while (++index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE$3 && character !== C_TAB$3) {
      index--;
      break;
    }

    subvalue += character;
  }

  /* Eat hashes. */
  depth = 0;

  while (++index <= length) {
    character = value.charAt(index);

    if (character !== C_HASH) {
      index--;
      break;
    }

    subvalue += character;
    depth++;
  }

  if (depth > MAX_ATX_COUNT) {
    return;
  }

  if (!depth || !settings.pedantic && value.charAt(index + 1) === C_HASH) {
    return;
  }

  length = value.length + 1;

  /* Eat intermediate white-space. */
  queue = '';

  while (++index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE$3 && character !== C_TAB$3) {
      index--;
      break;
    }

    queue += character;
  }

  /* Exit when not in pedantic mode without spacing. */
  if (!settings.pedantic && queue.length === 0 && character && character !== C_NEWLINE$4) {
    return;
  }

  if (silent) {
    return true;
  }

  /* Eat content. */
  subvalue += queue;
  queue = '';
  content = '';

  while (++index < length) {
    character = value.charAt(index);

    if (!character || character === C_NEWLINE$4) {
      break;
    }

    if (character !== C_SPACE$3 && character !== C_TAB$3 && character !== C_HASH) {
      content += queue + character;
      queue = '';
      continue;
    }

    while (character === C_SPACE$3 || character === C_TAB$3) {
      queue += character;
      character = value.charAt(++index);
    }

    while (character === C_HASH) {
      queue += character;
      character = value.charAt(++index);
    }

    while (character === C_SPACE$3 || character === C_TAB$3) {
      queue += character;
      character = value.charAt(++index);
    }

    index--;
  }

  now.column += subvalue.length;
  now.offset += subvalue.length;
  subvalue += content + queue;

  return eat(subvalue)({
    type: 'heading',
    depth: depth,
    children: self.tokenizeInline(content, now)
  });
}

var thematicBreak_1 = thematicBreak;

var C_NEWLINE$5 = '\n';
var C_TAB$4 = '\t';
var C_SPACE$4 = ' ';
var C_ASTERISK = '*';
var C_UNDERSCORE = '_';
var C_DASH = '-';

var THEMATIC_BREAK_MARKER_COUNT = 3;

function thematicBreak(eat, value, silent) {
  var index = -1;
  var length = value.length + 1;
  var subvalue = '';
  var character;
  var marker;
  var markerCount;
  var queue;

  while (++index < length) {
    character = value.charAt(index);

    if (character !== C_TAB$4 && character !== C_SPACE$4) {
      break;
    }

    subvalue += character;
  }

  if (character !== C_ASTERISK && character !== C_DASH && character !== C_UNDERSCORE) {
    return;
  }

  marker = character;
  subvalue += character;
  markerCount = 1;
  queue = '';

  while (++index < length) {
    character = value.charAt(index);

    if (character === marker) {
      markerCount++;
      subvalue += queue + marker;
      queue = '';
    } else if (character === C_SPACE$4) {
      queue += character;
    } else if (markerCount >= THEMATIC_BREAK_MARKER_COUNT && (!character || character === C_NEWLINE$5)) {
      subvalue += queue;

      if (silent) {
        return true;
      }

      return eat(subvalue)({ type: 'thematicBreak' });
    } else {
      return;
    }
  }
}

var getIndentation = indentation;

/* Map of characters, and their column length,
 * which can be used as indentation. */
var characters = { ' ': 1, '\t': 4 };

/* Gets indentation information for a line. */
function indentation(value) {
  var index = 0;
  var indent = 0;
  var character = value.charAt(index);
  var stops = {};
  var size;

  while (character in characters) {
    size = characters[character];

    indent += size;

    if (size > 1) {
      indent = Math.floor(indent / size) * size;
    }

    stops[indent] = index;

    character = value.charAt(++index);
  }

  return { indent: indent, stops: stops };
}

var removeIndentation = indentation$1;

var C_SPACE$5 = ' ';
var C_NEWLINE$6 = '\n';
var C_TAB$5 = '\t';

/* Remove the minimum indent from every line in `value`.
 * Supports both tab, spaced, and mixed indentation (as
 * well as possible). */
function indentation$1(value, maximum) {
  var values = value.split(C_NEWLINE$6);
  var position = values.length + 1;
  var minIndent = Infinity;
  var matrix = [];
  var index;
  var indentation;
  var stops;
  var padding;

  values.unshift(repeatString(C_SPACE$5, maximum) + '!');

  while (position--) {
    indentation = getIndentation(values[position]);

    matrix[position] = indentation.stops;

    if (trim_1(values[position]).length === 0) {
      continue;
    }

    if (indentation.indent) {
      if (indentation.indent > 0 && indentation.indent < minIndent) {
        minIndent = indentation.indent;
      }
    } else {
      minIndent = Infinity;

      break;
    }
  }

  if (minIndent !== Infinity) {
    position = values.length;

    while (position--) {
      stops = matrix[position];
      index = minIndent;

      while (index && !(index in stops)) {
        index--;
      }

      if (trim_1(values[position]).length !== 0 && minIndent && index !== minIndent) {
        padding = C_TAB$5;
      } else {
        padding = '';
      }

      values[position] = padding + values[position].slice(index in stops ? stops[index] + 1 : 0);
    }
  }

  values.shift();

  return values.join(C_NEWLINE$6);
}

/* eslint-disable max-params */

var list_1 = list;

var C_ASTERISK$1 = '*';
var C_UNDERSCORE$1 = '_';
var C_PLUS = '+';
var C_DASH$1 = '-';
var C_DOT = '.';
var C_SPACE$6 = ' ';
var C_NEWLINE$7 = '\n';
var C_TAB$6 = '\t';
var C_PAREN_CLOSE = ')';
var C_X_LOWER = 'x';

var TAB_SIZE = 4;
var EXPRESSION_LOOSE_LIST_ITEM = /\n\n(?!\s*$)/;
var EXPRESSION_TASK_ITEM = /^\[([ \t]|x|X)][ \t]/;
var EXPRESSION_BULLET = /^([ \t]*)([*+-]|\d+[.)])( {1,4}(?! )| |\t|$|(?=\n))([^\n]*)/;
var EXPRESSION_PEDANTIC_BULLET = /^([ \t]*)([*+-]|\d+[.)])([ \t]+)/;
var EXPRESSION_INITIAL_INDENT = /^( {1,4}|\t)?/gm;

/* Map of characters which can be used to mark
 * list-items. */
var LIST_UNORDERED_MARKERS = {};

LIST_UNORDERED_MARKERS[C_ASTERISK$1] = true;
LIST_UNORDERED_MARKERS[C_PLUS] = true;
LIST_UNORDERED_MARKERS[C_DASH$1] = true;

/* Map of characters which can be used to mark
 * list-items after a digit. */
var LIST_ORDERED_MARKERS = {};

LIST_ORDERED_MARKERS[C_DOT] = true;

/* Map of characters which can be used to mark
 * list-items after a digit. */
var LIST_ORDERED_COMMONMARK_MARKERS = {};

LIST_ORDERED_COMMONMARK_MARKERS[C_DOT] = true;
LIST_ORDERED_COMMONMARK_MARKERS[C_PAREN_CLOSE] = true;

function list(eat, value, silent) {
  var self = this;
  var commonmark = self.options.commonmark;
  var pedantic = self.options.pedantic;
  var tokenizers = self.blockTokenizers;
  var interuptors = self.interruptList;
  var markers;
  var index = 0;
  var length = value.length;
  var start = null;
  var size = 0;
  var queue;
  var ordered;
  var character;
  var marker;
  var nextIndex;
  var startIndex;
  var prefixed;
  var currentMarker;
  var content;
  var line;
  var prevEmpty;
  var empty;
  var items;
  var allLines;
  var emptyLines;
  var item;
  var enterTop;
  var exitBlockquote;
  var isLoose;
  var node;
  var now;
  var end;
  var indented;

  while (index < length) {
    character = value.charAt(index);

    if (character === C_TAB$6) {
      size += TAB_SIZE - size % TAB_SIZE;
    } else if (character === C_SPACE$6) {
      size++;
    } else {
      break;
    }

    index++;
  }

  if (size >= TAB_SIZE) {
    return;
  }

  character = value.charAt(index);

  markers = commonmark ? LIST_ORDERED_COMMONMARK_MARKERS : LIST_ORDERED_MARKERS;

  if (LIST_UNORDERED_MARKERS[character] === true) {
    marker = character;
    ordered = false;
  } else {
    ordered = true;
    queue = '';

    while (index < length) {
      character = value.charAt(index);

      if (!isDecimal(character)) {
        break;
      }

      queue += character;
      index++;
    }

    character = value.charAt(index);

    if (!queue || markers[character] !== true) {
      return;
    }

    start = parseInt(queue, 10);
    marker = character;
  }

  character = value.charAt(++index);

  if (character !== C_SPACE$6 && character !== C_TAB$6) {
    return;
  }

  if (silent) {
    return true;
  }

  index = 0;
  items = [];
  allLines = [];
  emptyLines = [];

  while (index < length) {
    nextIndex = value.indexOf(C_NEWLINE$7, index);
    startIndex = index;
    prefixed = false;
    indented = false;

    if (nextIndex === -1) {
      nextIndex = length;
    }

    end = index + TAB_SIZE;
    size = 0;

    while (index < length) {
      character = value.charAt(index);

      if (character === C_TAB$6) {
        size += TAB_SIZE - size % TAB_SIZE;
      } else if (character === C_SPACE$6) {
        size++;
      } else {
        break;
      }

      index++;
    }

    if (size >= TAB_SIZE) {
      indented = true;
    }

    if (item && size >= item.indent) {
      indented = true;
    }

    character = value.charAt(index);
    currentMarker = null;

    if (!indented) {
      if (LIST_UNORDERED_MARKERS[character] === true) {
        currentMarker = character;
        index++;
        size++;
      } else {
        queue = '';

        while (index < length) {
          character = value.charAt(index);

          if (!isDecimal(character)) {
            break;
          }

          queue += character;
          index++;
        }

        character = value.charAt(index);
        index++;

        if (queue && markers[character] === true) {
          currentMarker = character;
          size += queue.length + 1;
        }
      }

      if (currentMarker) {
        character = value.charAt(index);

        if (character === C_TAB$6) {
          size += TAB_SIZE - size % TAB_SIZE;
          index++;
        } else if (character === C_SPACE$6) {
          end = index + TAB_SIZE;

          while (index < end) {
            if (value.charAt(index) !== C_SPACE$6) {
              break;
            }

            index++;
            size++;
          }

          if (index === end && value.charAt(index) === C_SPACE$6) {
            index -= TAB_SIZE - 1;
            size -= TAB_SIZE - 1;
          }
        } else if (character !== C_NEWLINE$7 && character !== '') {
          currentMarker = null;
        }
      }
    }

    if (currentMarker) {
      if (!pedantic && marker !== currentMarker) {
        break;
      }

      prefixed = true;
    } else {
      if (!commonmark && !indented && value.charAt(startIndex) === C_SPACE$6) {
        indented = true;
      } else if (commonmark && item) {
        indented = size >= item.indent || size > TAB_SIZE;
      }

      prefixed = false;
      index = startIndex;
    }

    line = value.slice(startIndex, nextIndex);
    content = startIndex === index ? line : value.slice(index, nextIndex);

    if (currentMarker === C_ASTERISK$1 || currentMarker === C_UNDERSCORE$1 || currentMarker === C_DASH$1) {
      if (tokenizers.thematicBreak.call(self, eat, line, true)) {
        break;
      }
    }

    prevEmpty = empty;
    empty = !trim_1(content).length;

    if (indented && item) {
      item.value = item.value.concat(emptyLines, line);
      allLines = allLines.concat(emptyLines, line);
      emptyLines = [];
    } else if (prefixed) {
      if (emptyLines.length !== 0) {
        item.value.push('');
        item.trail = emptyLines.concat();
      }

      item = {
        value: [line],
        indent: size,
        trail: []
      };

      items.push(item);
      allLines = allLines.concat(emptyLines, line);
      emptyLines = [];
    } else if (empty) {
      if (prevEmpty) {
        break;
      }

      emptyLines.push(line);
    } else {
      if (prevEmpty) {
        break;
      }

      if (interrupt_1(interuptors, tokenizers, self, [eat, line, true])) {
        break;
      }

      item.value = item.value.concat(emptyLines, line);
      allLines = allLines.concat(emptyLines, line);
      emptyLines = [];
    }

    index = nextIndex + 1;
  }

  node = eat(allLines.join(C_NEWLINE$7)).reset({
    type: 'list',
    ordered: ordered,
    start: start,
    loose: null,
    children: []
  });

  enterTop = self.enterList();
  exitBlockquote = self.enterBlock();
  isLoose = false;
  index = -1;
  length = items.length;

  while (++index < length) {
    item = items[index].value.join(C_NEWLINE$7);
    now = eat.now();

    item = eat(item)(listItem(self, item, now), node);

    if (item.loose) {
      isLoose = true;
    }

    item = items[index].trail.join(C_NEWLINE$7);

    if (index !== length - 1) {
      item += C_NEWLINE$7;
    }

    eat(item);
  }

  enterTop();
  exitBlockquote();

  node.loose = isLoose;

  return node;
}

function listItem(ctx, value, position) {
  var offsets = ctx.offset;
  var fn = ctx.options.pedantic ? pedanticListItem : normalListItem;
  var checked = null;
  var task;
  var indent;

  value = fn.apply(null, arguments);

  if (ctx.options.gfm) {
    task = value.match(EXPRESSION_TASK_ITEM);

    if (task) {
      indent = task[0].length;
      checked = task[1].toLowerCase() === C_X_LOWER;
      offsets[position.line] += indent;
      value = value.slice(indent);
    }
  }

  return {
    type: 'listItem',
    loose: EXPRESSION_LOOSE_LIST_ITEM.test(value) || value.charAt(value.length - 1) === C_NEWLINE$7,
    checked: checked,
    children: ctx.tokenizeBlock(value, position)
  };
}

/* Create a list-item using overly simple mechanics. */
function pedanticListItem(ctx, value, position) {
  var offsets = ctx.offset;
  var line = position.line;

  /* Remove the list-item’s bullet. */
  value = value.replace(EXPRESSION_PEDANTIC_BULLET, replacer);

  /* The initial line was also matched by the below, so
   * we reset the `line`. */
  line = position.line;

  return value.replace(EXPRESSION_INITIAL_INDENT, replacer);

  /* A simple replacer which removed all matches,
   * and adds their length to `offset`. */
  function replacer($0) {
    offsets[line] = (offsets[line] || 0) + $0.length;
    line++;

    return '';
  }
}

/* Create a list-item using sane mechanics. */
function normalListItem(ctx, value, position) {
  var offsets = ctx.offset;
  var line = position.line;
  var max;
  var bullet;
  var rest;
  var lines;
  var trimmedLines;
  var index;
  var length;

  /* Remove the list-item’s bullet. */
  value = value.replace(EXPRESSION_BULLET, replacer);

  lines = value.split(C_NEWLINE$7);

  trimmedLines = removeIndentation(value, getIndentation(max).indent).split(C_NEWLINE$7);

  /* We replaced the initial bullet with something
   * else above, which was used to trick
   * `removeIndentation` into removing some more
   * characters when possible.  However, that could
   * result in the initial line to be stripped more
   * than it should be. */
  trimmedLines[0] = rest;

  offsets[line] = (offsets[line] || 0) + bullet.length;
  line++;

  index = 0;
  length = lines.length;

  while (++index < length) {
    offsets[line] = (offsets[line] || 0) + lines[index].length - trimmedLines[index].length;
    line++;
  }

  return trimmedLines.join(C_NEWLINE$7);

  function replacer($0, $1, $2, $3, $4) {
    bullet = $1 + $2 + $3;
    rest = $4;

    /* Make sure that the first nine numbered list items
     * can indent with an extra space.  That is, when
     * the bullet did not receive an extra final space. */
    if (Number($2) < 10 && bullet.length % 2 === 1) {
      $2 = C_SPACE$6 + $2;
    }

    max = $1 + repeatString(C_SPACE$6, $2.length) + $3;

    return max + rest;
  }
}

var headingSetext = setextHeading;

var C_NEWLINE$8 = '\n';
var C_TAB$7 = '\t';
var C_SPACE$7 = ' ';
var C_EQUALS = '=';
var C_DASH$2 = '-';

var MAX_HEADING_INDENT = 3;

/* Map of characters which can be used to mark setext
 * headers, mapping to their corresponding depth. */
var SETEXT_MARKERS = {};

SETEXT_MARKERS[C_EQUALS] = 1;
SETEXT_MARKERS[C_DASH$2] = 2;

function setextHeading(eat, value, silent) {
  var self = this;
  var now = eat.now();
  var length = value.length;
  var index = -1;
  var subvalue = '';
  var content;
  var queue;
  var character;
  var marker;
  var depth;

  /* Eat initial indentation. */
  while (++index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE$7 || index >= MAX_HEADING_INDENT) {
      index--;
      break;
    }

    subvalue += character;
  }

  /* Eat content. */
  content = '';
  queue = '';

  while (++index < length) {
    character = value.charAt(index);

    if (character === C_NEWLINE$8) {
      index--;
      break;
    }

    if (character === C_SPACE$7 || character === C_TAB$7) {
      queue += character;
    } else {
      content += queue + character;
      queue = '';
    }
  }

  now.column += subvalue.length;
  now.offset += subvalue.length;
  subvalue += content + queue;

  /* Ensure the content is followed by a newline and a
   * valid marker. */
  character = value.charAt(++index);
  marker = value.charAt(++index);

  if (character !== C_NEWLINE$8 || !SETEXT_MARKERS[marker]) {
    return;
  }

  subvalue += character;

  /* Eat Setext-line. */
  queue = marker;
  depth = SETEXT_MARKERS[marker];

  while (++index < length) {
    character = value.charAt(index);

    if (character !== marker) {
      if (character !== C_NEWLINE$8) {
        return;
      }

      index--;
      break;
    }

    queue += character;
  }

  if (silent) {
    return true;
  }

  return eat(subvalue + queue)({
    type: 'heading',
    depth: depth,
    children: self.tokenizeInline(content, now)
  });
}

var attributeName = '[a-zA-Z_:][a-zA-Z0-9:._-]*';
var unquoted = '[^"\'=<>`\\u0000-\\u0020]+';
var singleQuoted = '\'[^\']*\'';
var doubleQuoted = '"[^"]*"';
var attributeValue = '(?:' + unquoted + '|' + singleQuoted + '|' + doubleQuoted + ')';
var attribute = '(?:\\s+' + attributeName + '(?:\\s*=\\s*' + attributeValue + ')?)';
var openTag = '<[A-Za-z][A-Za-z0-9\\-]*' + attribute + '*\\s*\\/?>';
var closeTag = '<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>';
var comment = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';
var processing = '<[?].*?[?]>';
var declaration = '<![A-Za-z]+\\s+[^>]*>';
var cdata = '<!\\[CDATA\\[[\\s\\S]*?\\]\\]>';

var openCloseTag = new RegExp('^(?:' + openTag + '|' + closeTag + ')');

var tag = new RegExp('^(?:' + openTag + '|' + closeTag + '|' + comment + '|' + processing + '|' + declaration + '|' + cdata + ')');

var html$1 = {
  openCloseTag: openCloseTag,
  tag: tag
};

var openCloseTag$1 = html$1.openCloseTag;

var htmlBlock = blockHTML;

var C_TAB$8 = '\t';
var C_SPACE$8 = ' ';
var C_NEWLINE$9 = '\n';
var C_LT = '<';

function blockHTML(eat, value, silent) {
  var self = this;
  var blocks = self.options.blocks;
  var length = value.length;
  var index = 0;
  var next;
  var line;
  var offset;
  var character;
  var count;
  var sequence;
  var subvalue;

  var sequences = [[/^<(script|pre|style)(?=(\s|>|$))/i, /<\/(script|pre|style)>/i, true], [/^<!--/, /-->/, true], [/^<\?/, /\?>/, true], [/^<![A-Za-z]/, />/, true], [/^<!\[CDATA\[/, /\]\]>/, true], [new RegExp('^</?(' + blocks.join('|') + ')(?=(\\s|/?>|$))', 'i'), /^$/, true], [new RegExp(openCloseTag$1.source + '\\s*$'), /^$/, false]];

  /* Eat initial spacing. */
  while (index < length) {
    character = value.charAt(index);

    if (character !== C_TAB$8 && character !== C_SPACE$8) {
      break;
    }

    index++;
  }

  if (value.charAt(index) !== C_LT) {
    return;
  }

  next = value.indexOf(C_NEWLINE$9, index + 1);
  next = next === -1 ? length : next;
  line = value.slice(index, next);
  offset = -1;
  count = sequences.length;

  while (++offset < count) {
    if (sequences[offset][0].test(line)) {
      sequence = sequences[offset];
      break;
    }
  }

  if (!sequence) {
    return;
  }

  if (silent) {
    return sequence[2];
  }

  index = next;

  if (!sequence[1].test(line)) {
    while (index < length) {
      next = value.indexOf(C_NEWLINE$9, index + 1);
      next = next === -1 ? length : next;
      line = value.slice(index + 1, next);

      if (sequence[1].test(line)) {
        if (line) {
          index = next;
        }

        break;
      }

      index = next;
    }
  }

  subvalue = value.slice(0, index);

  return eat(subvalue)({ type: 'html', value: subvalue });
}

var collapseWhiteSpace = collapse;

/* collapse(' \t\nbar \nbaz\t'); // ' bar baz ' */
function collapse(value) {
  return String(value).replace(/\s+/g, ' ');
}

var normalize_1 = normalize$1;

/* Normalize an identifier.  Collapses multiple white space
 * characters into a single space, and removes casing. */
function normalize$1(value) {
  return collapseWhiteSpace(value).toLowerCase();
}

var footnoteDefinition_1 = footnoteDefinition;
footnoteDefinition.notInList = true;
footnoteDefinition.notInBlock = true;

var C_BACKSLASH = '\\';
var C_NEWLINE$10 = '\n';
var C_TAB$9 = '\t';
var C_SPACE$9 = ' ';
var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';
var C_CARET = '^';
var C_COLON = ':';

var EXPRESSION_INITIAL_TAB = /^( {4}|\t)?/gm;

function footnoteDefinition(eat, value, silent) {
  var self = this;
  var offsets = self.offset;
  var index;
  var length;
  var subvalue;
  var now;
  var currentLine;
  var content;
  var queue;
  var subqueue;
  var character;
  var identifier;
  var add;
  var exit;

  if (!self.options.footnotes) {
    return;
  }

  index = 0;
  length = value.length;
  subvalue = '';
  now = eat.now();
  currentLine = now.line;

  while (index < length) {
    character = value.charAt(index);

    if (!isWhitespaceCharacter(character)) {
      break;
    }

    subvalue += character;
    index++;
  }

  if (value.charAt(index) !== C_BRACKET_OPEN || value.charAt(index + 1) !== C_CARET) {
    return;
  }

  subvalue += C_BRACKET_OPEN + C_CARET;
  index = subvalue.length;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (character === C_BRACKET_CLOSE) {
      break;
    } else if (character === C_BACKSLASH) {
      queue += character;
      index++;
      character = value.charAt(index);
    }

    queue += character;
    index++;
  }

  if (!queue || value.charAt(index) !== C_BRACKET_CLOSE || value.charAt(index + 1) !== C_COLON) {
    return;
  }

  if (silent) {
    return true;
  }

  identifier = normalize_1(queue);
  subvalue += queue + C_BRACKET_CLOSE + C_COLON;
  index = subvalue.length;

  while (index < length) {
    character = value.charAt(index);

    if (character !== C_TAB$9 && character !== C_SPACE$9) {
      break;
    }

    subvalue += character;
    index++;
  }

  now.column += subvalue.length;
  now.offset += subvalue.length;
  queue = '';
  content = '';
  subqueue = '';

  while (index < length) {
    character = value.charAt(index);

    if (character === C_NEWLINE$10) {
      subqueue = character;
      index++;

      while (index < length) {
        character = value.charAt(index);

        if (character !== C_NEWLINE$10) {
          break;
        }

        subqueue += character;
        index++;
      }

      queue += subqueue;
      subqueue = '';

      while (index < length) {
        character = value.charAt(index);

        if (character !== C_SPACE$9) {
          break;
        }

        subqueue += character;
        index++;
      }

      if (subqueue.length === 0) {
        break;
      }

      queue += subqueue;
    }

    if (queue) {
      content += queue;
      queue = '';
    }

    content += character;
    index++;
  }

  subvalue += content;

  content = content.replace(EXPRESSION_INITIAL_TAB, function (line) {
    offsets[currentLine] = (offsets[currentLine] || 0) + line.length;
    currentLine++;

    return '';
  });

  add = eat(subvalue);

  exit = self.enterBlock();
  content = self.tokenizeBlock(content, now);
  exit();

  return add({
    type: 'footnoteDefinition',
    identifier: identifier,
    children: content
  });
}

var definition_1 = definition;
definition.notInList = true;
definition.notInBlock = true;

var C_DOUBLE_QUOTE = '"';
var C_SINGLE_QUOTE = '\'';
var C_BACKSLASH$1 = '\\';
var C_NEWLINE$11 = '\n';
var C_TAB$10 = '\t';
var C_SPACE$10 = ' ';
var C_BRACKET_OPEN$1 = '[';
var C_BRACKET_CLOSE$1 = ']';
var C_PAREN_OPEN = '(';
var C_PAREN_CLOSE$1 = ')';
var C_COLON$1 = ':';
var C_LT$1 = '<';
var C_GT$1 = '>';

function definition(eat, value, silent) {
  var self = this;
  var commonmark = self.options.commonmark;
  var index = 0;
  var length = value.length;
  var subvalue = '';
  var beforeURL;
  var beforeTitle;
  var queue;
  var character;
  var test;
  var identifier;
  var url;
  var title;

  while (index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE$10 && character !== C_TAB$10) {
      break;
    }

    subvalue += character;
    index++;
  }

  character = value.charAt(index);

  if (character !== C_BRACKET_OPEN$1) {
    return;
  }

  index++;
  subvalue += character;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (character === C_BRACKET_CLOSE$1) {
      break;
    } else if (character === C_BACKSLASH$1) {
      queue += character;
      index++;
      character = value.charAt(index);
    }

    queue += character;
    index++;
  }

  if (!queue || value.charAt(index) !== C_BRACKET_CLOSE$1 || value.charAt(index + 1) !== C_COLON$1) {
    return;
  }

  identifier = queue;
  subvalue += queue + C_BRACKET_CLOSE$1 + C_COLON$1;
  index = subvalue.length;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (character !== C_TAB$10 && character !== C_SPACE$10 && character !== C_NEWLINE$11) {
      break;
    }

    subvalue += character;
    index++;
  }

  character = value.charAt(index);
  queue = '';
  beforeURL = subvalue;

  if (character === C_LT$1) {
    index++;

    while (index < length) {
      character = value.charAt(index);

      if (!isEnclosedURLCharacter(character)) {
        break;
      }

      queue += character;
      index++;
    }

    character = value.charAt(index);

    if (character === isEnclosedURLCharacter.delimiter) {
      subvalue += C_LT$1 + queue + character;
      index++;
    } else {
      if (commonmark) {
        return;
      }

      index -= queue.length + 1;
      queue = '';
    }
  }

  if (!queue) {
    while (index < length) {
      character = value.charAt(index);

      if (!isUnclosedURLCharacter(character)) {
        break;
      }

      queue += character;
      index++;
    }

    subvalue += queue;
  }

  if (!queue) {
    return;
  }

  url = queue;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (character !== C_TAB$10 && character !== C_SPACE$10 && character !== C_NEWLINE$11) {
      break;
    }

    queue += character;
    index++;
  }

  character = value.charAt(index);
  test = null;

  if (character === C_DOUBLE_QUOTE) {
    test = C_DOUBLE_QUOTE;
  } else if (character === C_SINGLE_QUOTE) {
    test = C_SINGLE_QUOTE;
  } else if (character === C_PAREN_OPEN) {
    test = C_PAREN_CLOSE$1;
  }

  if (!test) {
    queue = '';
    index = subvalue.length;
  } else if (queue) {
    subvalue += queue + character;
    index = subvalue.length;
    queue = '';

    while (index < length) {
      character = value.charAt(index);

      if (character === test) {
        break;
      }

      if (character === C_NEWLINE$11) {
        index++;
        character = value.charAt(index);

        if (character === C_NEWLINE$11 || character === test) {
          return;
        }

        queue += C_NEWLINE$11;
      }

      queue += character;
      index++;
    }

    character = value.charAt(index);

    if (character !== test) {
      return;
    }

    beforeTitle = subvalue;
    subvalue += queue + character;
    index++;
    title = queue;
    queue = '';
  } else {
    return;
  }

  while (index < length) {
    character = value.charAt(index);

    if (character !== C_TAB$10 && character !== C_SPACE$10) {
      break;
    }

    subvalue += character;
    index++;
  }

  character = value.charAt(index);

  if (!character || character === C_NEWLINE$11) {
    if (silent) {
      return true;
    }

    beforeURL = eat(beforeURL).test().end;
    url = self.decode.raw(self.unescape(url), beforeURL, { nonTerminated: false });

    if (title) {
      beforeTitle = eat(beforeTitle).test().end;
      title = self.decode.raw(self.unescape(title), beforeTitle);
    }

    return eat(subvalue)({
      type: 'definition',
      identifier: normalize_1(identifier),
      title: title || null,
      url: url
    });
  }
}

/* Check if `character` can be inside an enclosed URI. */
function isEnclosedURLCharacter(character) {
  return character !== C_GT$1 && character !== C_BRACKET_OPEN$1 && character !== C_BRACKET_CLOSE$1;
}

isEnclosedURLCharacter.delimiter = C_GT$1;

/* Check if `character` can be inside an unclosed URI. */
function isUnclosedURLCharacter(character) {
  return character !== C_BRACKET_OPEN$1 && character !== C_BRACKET_CLOSE$1 && !isWhitespaceCharacter(character);
}

var table_1 = table;

var C_BACKSLASH$2 = '\\';
var C_TICK$1 = '`';
var C_DASH$3 = '-';
var C_PIPE = '|';
var C_COLON$2 = ':';
var C_SPACE$11 = ' ';
var C_NEWLINE$12 = '\n';
var C_TAB$11 = '\t';

var MIN_TABLE_COLUMNS = 1;
var MIN_TABLE_ROWS = 2;

var TABLE_ALIGN_LEFT = 'left';
var TABLE_ALIGN_CENTER = 'center';
var TABLE_ALIGN_RIGHT = 'right';
var TABLE_ALIGN_NONE = null;

function table(eat, value, silent) {
  var self = this;
  var index;
  var alignments;
  var alignment;
  var subvalue;
  var row;
  var length;
  var lines;
  var queue;
  var character;
  var hasDash;
  var align;
  var cell;
  var preamble;
  var count;
  var opening;
  var now;
  var position;
  var lineCount;
  var line;
  var rows;
  var table;
  var lineIndex;
  var pipeIndex;
  var first;

  /* Exit when not in gfm-mode. */
  if (!self.options.gfm) {
    return;
  }

  /* Get the rows.
   * Detecting tables soon is hard, so there are some
   * checks for performance here, such as the minimum
   * number of rows, and allowed characters in the
   * alignment row. */
  index = 0;
  lineCount = 0;
  length = value.length + 1;
  lines = [];

  while (index < length) {
    lineIndex = value.indexOf(C_NEWLINE$12, index);
    pipeIndex = value.indexOf(C_PIPE, index + 1);

    if (lineIndex === -1) {
      lineIndex = value.length;
    }

    if (pipeIndex === -1 || pipeIndex > lineIndex) {
      if (lineCount < MIN_TABLE_ROWS) {
        return;
      }

      break;
    }

    lines.push(value.slice(index, lineIndex));
    lineCount++;
    index = lineIndex + 1;
  }

  /* Parse the alignment row. */
  subvalue = lines.join(C_NEWLINE$12);
  alignments = lines.splice(1, 1)[0] || [];
  index = 0;
  length = alignments.length;
  lineCount--;
  alignment = false;
  align = [];

  while (index < length) {
    character = alignments.charAt(index);

    if (character === C_PIPE) {
      hasDash = null;

      if (alignment === false) {
        if (first === false) {
          return;
        }
      } else {
        align.push(alignment);
        alignment = false;
      }

      first = false;
    } else if (character === C_DASH$3) {
      hasDash = true;
      alignment = alignment || TABLE_ALIGN_NONE;
    } else if (character === C_COLON$2) {
      if (alignment === TABLE_ALIGN_LEFT) {
        alignment = TABLE_ALIGN_CENTER;
      } else if (hasDash && alignment === TABLE_ALIGN_NONE) {
        alignment = TABLE_ALIGN_RIGHT;
      } else {
        alignment = TABLE_ALIGN_LEFT;
      }
    } else if (!isWhitespaceCharacter(character)) {
      return;
    }

    index++;
  }

  if (alignment !== false) {
    align.push(alignment);
  }

  /* Exit when without enough columns. */
  if (align.length < MIN_TABLE_COLUMNS) {
    return;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  /* Parse the rows. */
  position = -1;
  rows = [];

  table = eat(subvalue).reset({
    type: 'table',
    align: align,
    children: rows
  });

  while (++position < lineCount) {
    line = lines[position];
    row = { type: 'tableRow', children: [] };

    /* Eat a newline character when this is not the
     * first row. */
    if (position) {
      eat(C_NEWLINE$12);
    }

    /* Eat the row. */
    eat(line).reset(row, table);

    length = line.length + 1;
    index = 0;
    queue = '';
    cell = '';
    preamble = true;
    count = null;
    opening = null;

    while (index < length) {
      character = line.charAt(index);

      if (character === C_TAB$11 || character === C_SPACE$11) {
        if (cell) {
          queue += character;
        } else {
          eat(character);
        }

        index++;
        continue;
      }

      if (character === '' || character === C_PIPE) {
        if (preamble) {
          eat(character);
        } else {
          if (character && opening) {
            queue += character;
            index++;
            continue;
          }

          if ((cell || character) && !preamble) {
            subvalue = cell;

            if (queue.length > 1) {
              if (character) {
                subvalue += queue.slice(0, queue.length - 1);
                queue = queue.charAt(queue.length - 1);
              } else {
                subvalue += queue;
                queue = '';
              }
            }

            now = eat.now();

            eat(subvalue)({
              type: 'tableCell',
              children: self.tokenizeInline(cell, now)
            }, row);
          }

          eat(queue + character);

          queue = '';
          cell = '';
        }
      } else {
        if (queue) {
          cell += queue;
          queue = '';
        }

        cell += character;

        if (character === C_BACKSLASH$2 && index !== length - 2) {
          cell += line.charAt(index + 1);
          index++;
        }

        if (character === C_TICK$1) {
          count = 1;

          while (line.charAt(index + 1) === character) {
            cell += character;
            index++;
            count++;
          }

          if (!opening) {
            opening = count;
          } else if (count >= opening) {
            opening = 0;
          }
        }
      }

      preamble = false;
      index++;
    }

    /* Eat the alignment row. */
    if (!position) {
      eat(C_NEWLINE$12 + alignments);
    }
  }

  return table;
}

var paragraph_1 = paragraph;

var C_NEWLINE$13 = '\n';
var C_TAB$12 = '\t';
var C_SPACE$12 = ' ';

var TAB_SIZE$1 = 4;

/* Tokenise paragraph. */
function paragraph(eat, value, silent) {
  var self = this;
  var settings = self.options;
  var commonmark = settings.commonmark;
  var gfm = settings.gfm;
  var tokenizers = self.blockTokenizers;
  var interruptors = self.interruptParagraph;
  var index = value.indexOf(C_NEWLINE$13);
  var length = value.length;
  var position;
  var subvalue;
  var character;
  var size;
  var now;

  while (index < length) {
    /* Eat everything if there’s no following newline. */
    if (index === -1) {
      index = length;
      break;
    }

    /* Stop if the next character is NEWLINE. */
    if (value.charAt(index + 1) === C_NEWLINE$13) {
      break;
    }

    /* In commonmark-mode, following indented lines
     * are part of the paragraph. */
    if (commonmark) {
      size = 0;
      position = index + 1;

      while (position < length) {
        character = value.charAt(position);

        if (character === C_TAB$12) {
          size = TAB_SIZE$1;
          break;
        } else if (character === C_SPACE$12) {
          size++;
        } else {
          break;
        }

        position++;
      }

      if (size >= TAB_SIZE$1) {
        index = value.indexOf(C_NEWLINE$13, index + 1);
        continue;
      }
    }

    subvalue = value.slice(index + 1);

    /* Check if the following code contains a possible
     * block. */
    if (interrupt_1(interruptors, tokenizers, self, [eat, subvalue, true])) {
      break;
    }

    /* Break if the following line starts a list, when
     * already in a list, or when in commonmark, or when
     * in gfm mode and the bullet is *not* numeric. */
    if (tokenizers.list.call(self, eat, subvalue, true) && (self.inList || commonmark || gfm && !isDecimal(trim_1.left(subvalue).charAt(0)))) {
      break;
    }

    position = index;
    index = value.indexOf(C_NEWLINE$13, index + 1);

    if (index !== -1 && trim_1(value.slice(position, index)) === '') {
      index = position;
      break;
    }
  }

  subvalue = value.slice(0, index);

  if (trim_1(subvalue) === '') {
    eat(subvalue);

    return null;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  now = eat.now();
  subvalue = trimTrailingLines_1(subvalue);

  return eat(subvalue)({
    type: 'paragraph',
    children: self.tokenizeInline(subvalue, now)
  });
}

var _escape$2 = locate;

function locate(value, fromIndex) {
  return value.indexOf('\\', fromIndex);
}

var _escape$4 = escape$1;
escape$1.locator = _escape$2;

function escape$1(eat, value, silent) {
  var self = this;
  var character;
  var node;

  if (value.charAt(0) === '\\') {
    character = value.charAt(1);

    if (self.escape.indexOf(character) !== -1) {
      /* istanbul ignore if - never used (yet) */
      if (silent) {
        return true;
      }

      if (character === '\n') {
        node = { type: 'break' };
      } else {
        node = {
          type: 'text',
          value: character
        };
      }

      return eat('\\' + character)(node);
    }
  }
}

var tag$1 = locate$2;

function locate$2(value, fromIndex) {
  return value.indexOf('<', fromIndex);
}

var autoLink_1 = autoLink;
autoLink.locator = tag$1;
autoLink.notInLink = true;

var C_LT$2 = '<';
var C_GT$2 = '>';
var C_AT_SIGN = '@';
var C_SLASH = '/';
var MAILTO = 'mailto:';
var MAILTO_LENGTH = MAILTO.length;

/* Tokenise a link. */
function autoLink(eat, value, silent) {
  var self;
  var subvalue;
  var length;
  var index;
  var queue;
  var character;
  var hasAtCharacter;
  var link;
  var now;
  var content;
  var tokenizers;
  var exit;

  if (value.charAt(0) !== C_LT$2) {
    return;
  }

  self = this;
  subvalue = '';
  length = value.length;
  index = 0;
  queue = '';
  hasAtCharacter = false;
  link = '';

  index++;
  subvalue = C_LT$2;

  while (index < length) {
    character = value.charAt(index);

    if (isWhitespaceCharacter(character) || character === C_GT$2 || character === C_AT_SIGN || character === ':' && value.charAt(index + 1) === C_SLASH) {
      break;
    }

    queue += character;
    index++;
  }

  if (!queue) {
    return;
  }

  link += queue;
  queue = '';

  character = value.charAt(index);
  link += character;
  index++;

  if (character === C_AT_SIGN) {
    hasAtCharacter = true;
  } else {
    if (character !== ':' || value.charAt(index + 1) !== C_SLASH) {
      return;
    }

    link += C_SLASH;
    index++;
  }

  while (index < length) {
    character = value.charAt(index);

    if (isWhitespaceCharacter(character) || character === C_GT$2) {
      break;
    }

    queue += character;
    index++;
  }

  character = value.charAt(index);

  if (!queue || character !== C_GT$2) {
    return;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  link += queue;
  content = link;
  subvalue += link + character;
  now = eat.now();
  now.column++;
  now.offset++;

  if (hasAtCharacter) {
    if (link.slice(0, MAILTO_LENGTH).toLowerCase() === MAILTO) {
      content = content.substr(MAILTO_LENGTH);
      now.column += MAILTO_LENGTH;
      now.offset += MAILTO_LENGTH;
    } else {
      link = MAILTO + link;
    }
  }

  /* Temporarily remove all tokenizers except text in autolinks. */
  tokenizers = self.inlineTokenizers;
  self.inlineTokenizers = { text: tokenizers.text };

  exit = self.enterLink();

  content = self.tokenizeInline(content, now);

  self.inlineTokenizers = tokenizers;
  exit();

  return eat(subvalue)({
    type: 'link',
    title: null,
    url: parseEntities(link, { nonTerminated: false }),
    children: content
  });
}

var url = locate$4;

var PROTOCOLS = ['https://', 'http://', 'mailto:'];

function locate$4(value, fromIndex) {
  var length = PROTOCOLS.length;
  var index = -1;
  var min = -1;
  var position;

  if (!this.options.gfm) {
    return -1;
  }

  while (++index < length) {
    position = value.indexOf(PROTOCOLS[index], fromIndex);

    if (position !== -1 && (position < min || min === -1)) {
      min = position;
    }
  }

  return min;
}

var url_1 = url$2;
url$2.locator = url;
url$2.notInLink = true;

var C_BRACKET_OPEN$2 = '[';
var C_BRACKET_CLOSE$2 = ']';
var C_PAREN_OPEN$1 = '(';
var C_PAREN_CLOSE$2 = ')';
var C_LT$3 = '<';
var C_AT_SIGN$1 = '@';

var HTTP_PROTOCOL = 'http://';
var HTTPS_PROTOCOL = 'https://';
var MAILTO_PROTOCOL = 'mailto:';

var PROTOCOLS$1 = [HTTP_PROTOCOL, HTTPS_PROTOCOL, MAILTO_PROTOCOL];

var PROTOCOLS_LENGTH = PROTOCOLS$1.length;

function url$2(eat, value, silent) {
  var self = this;
  var subvalue;
  var content;
  var character;
  var index;
  var position;
  var protocol;
  var match;
  var length;
  var queue;
  var parenCount;
  var nextCharacter;
  var exit;

  if (!self.options.gfm) {
    return;
  }

  subvalue = '';
  index = -1;
  length = PROTOCOLS_LENGTH;

  while (++index < length) {
    protocol = PROTOCOLS$1[index];
    match = value.slice(0, protocol.length);

    if (match.toLowerCase() === protocol) {
      subvalue = match;
      break;
    }
  }

  if (!subvalue) {
    return;
  }

  index = subvalue.length;
  length = value.length;
  queue = '';
  parenCount = 0;

  while (index < length) {
    character = value.charAt(index);

    if (isWhitespaceCharacter(character) || character === C_LT$3) {
      break;
    }

    if (character === '.' || character === ',' || character === ':' || character === ';' || character === '"' || character === '\'' || character === ')' || character === ']') {
      nextCharacter = value.charAt(index + 1);

      if (!nextCharacter || isWhitespaceCharacter(nextCharacter)) {
        break;
      }
    }

    if (character === C_PAREN_OPEN$1 || character === C_BRACKET_OPEN$2) {
      parenCount++;
    }

    if (character === C_PAREN_CLOSE$2 || character === C_BRACKET_CLOSE$2) {
      parenCount--;

      if (parenCount < 0) {
        break;
      }
    }

    queue += character;
    index++;
  }

  if (!queue) {
    return;
  }

  subvalue += queue;
  content = subvalue;

  if (protocol === MAILTO_PROTOCOL) {
    position = queue.indexOf(C_AT_SIGN$1);

    if (position === -1 || position === length - 1) {
      return;
    }

    content = content.substr(MAILTO_PROTOCOL.length);
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  exit = self.enterLink();
  content = self.tokenizeInline(content, eat.now());
  exit();

  return eat(subvalue)({
    type: 'link',
    title: null,
    url: parseEntities(subvalue, { nonTerminated: false }),
    children: content
  });
}

var tag$3 = html$1.tag;

var htmlInline = inlineHTML;
inlineHTML.locator = tag$1;

var EXPRESSION_HTML_LINK_OPEN = /^<a /i;
var EXPRESSION_HTML_LINK_CLOSE = /^<\/a>/i;

function inlineHTML(eat, value, silent) {
  var self = this;
  var length = value.length;
  var character;
  var subvalue;

  if (value.charAt(0) !== '<' || length < 3) {
    return;
  }

  character = value.charAt(1);

  if (!isAlphabetical(character) && character !== '?' && character !== '!' && character !== '/') {
    return;
  }

  subvalue = value.match(tag$3);

  if (!subvalue) {
    return;
  }

  /* istanbul ignore if - not used yet. */
  if (silent) {
    return true;
  }

  subvalue = subvalue[0];

  if (!self.inLink && EXPRESSION_HTML_LINK_OPEN.test(subvalue)) {
    self.inLink = true;
  } else if (self.inLink && EXPRESSION_HTML_LINK_CLOSE.test(subvalue)) {
    self.inLink = false;
  }

  return eat(subvalue)({ type: 'html', value: subvalue });
}

var link = locate$6;

function locate$6(value, fromIndex) {
  var link = value.indexOf('[', fromIndex);
  var image = value.indexOf('![', fromIndex);

  if (image === -1) {
    return link;
  }

  /* Link can never be `-1` if an image is found, so we don’t need
   * to check for that :) */
  return link < image ? link : image;
}

var link_1 = link$2;
link$2.locator = link;

var own$4 = {}.hasOwnProperty;

var C_BACKSLASH$3 = '\\';
var C_BRACKET_OPEN$3 = '[';
var C_BRACKET_CLOSE$3 = ']';
var C_PAREN_OPEN$2 = '(';
var C_PAREN_CLOSE$3 = ')';
var C_LT$4 = '<';
var C_GT$3 = '>';
var C_TICK$2 = '`';
var C_DOUBLE_QUOTE$1 = '"';
var C_SINGLE_QUOTE$1 = '\'';

/* Map of characters, which can be used to mark link
 * and image titles. */
var LINK_MARKERS = {};

LINK_MARKERS[C_DOUBLE_QUOTE$1] = C_DOUBLE_QUOTE$1;
LINK_MARKERS[C_SINGLE_QUOTE$1] = C_SINGLE_QUOTE$1;

/* Map of characters, which can be used to mark link
 * and image titles in commonmark-mode. */
var COMMONMARK_LINK_MARKERS = {};

COMMONMARK_LINK_MARKERS[C_DOUBLE_QUOTE$1] = C_DOUBLE_QUOTE$1;
COMMONMARK_LINK_MARKERS[C_SINGLE_QUOTE$1] = C_SINGLE_QUOTE$1;
COMMONMARK_LINK_MARKERS[C_PAREN_OPEN$2] = C_PAREN_CLOSE$3;

function link$2(eat, value, silent) {
  var self = this;
  var subvalue = '';
  var index = 0;
  var character = value.charAt(0);
  var pedantic = self.options.pedantic;
  var commonmark = self.options.commonmark;
  var gfm = self.options.gfm;
  var closed;
  var count;
  var opening;
  var beforeURL;
  var beforeTitle;
  var subqueue;
  var hasMarker;
  var markers;
  var isImage;
  var content;
  var marker;
  var length;
  var title;
  var depth;
  var queue;
  var url;
  var now;
  var exit;
  var node;

  /* Detect whether this is an image. */
  if (character === '!') {
    isImage = true;
    subvalue = character;
    character = value.charAt(++index);
  }

  /* Eat the opening. */
  if (character !== C_BRACKET_OPEN$3) {
    return;
  }

  /* Exit when this is a link and we’re already inside
   * a link. */
  if (!isImage && self.inLink) {
    return;
  }

  subvalue += character;
  queue = '';
  index++;

  /* Eat the content. */
  length = value.length;
  now = eat.now();
  depth = 0;

  now.column += index;
  now.offset += index;

  while (index < length) {
    character = value.charAt(index);
    subqueue = character;

    if (character === C_TICK$2) {
      /* Inline-code in link content. */
      count = 1;

      while (value.charAt(index + 1) === C_TICK$2) {
        subqueue += character;
        index++;
        count++;
      }

      if (!opening) {
        opening = count;
      } else if (count >= opening) {
        opening = 0;
      }
    } else if (character === C_BACKSLASH$3) {
      /* Allow brackets to be escaped. */
      index++;
      subqueue += value.charAt(index);
      /* In GFM mode, brackets in code still count.
       * In all other modes, they don’t.  This empty
       * block prevents the next statements are
       * entered. */
    } else if ((!opening || gfm) && character === C_BRACKET_OPEN$3) {
      depth++;
    } else if ((!opening || gfm) && character === C_BRACKET_CLOSE$3) {
      if (depth) {
        depth--;
      } else {
        /* Allow white-space between content and
         * url in GFM mode. */
        if (!pedantic) {
          while (index < length) {
            character = value.charAt(index + 1);

            if (!isWhitespaceCharacter(character)) {
              break;
            }

            subqueue += character;
            index++;
          }
        }

        if (value.charAt(index + 1) !== C_PAREN_OPEN$2) {
          return;
        }

        subqueue += C_PAREN_OPEN$2;
        closed = true;
        index++;

        break;
      }
    }

    queue += subqueue;
    subqueue = '';
    index++;
  }

  /* Eat the content closing. */
  if (!closed) {
    return;
  }

  content = queue;
  subvalue += queue + subqueue;
  index++;

  /* Eat white-space. */
  while (index < length) {
    character = value.charAt(index);

    if (!isWhitespaceCharacter(character)) {
      break;
    }

    subvalue += character;
    index++;
  }

  /* Eat the URL. */
  character = value.charAt(index);
  markers = commonmark ? COMMONMARK_LINK_MARKERS : LINK_MARKERS;
  queue = '';
  beforeURL = subvalue;

  if (character === C_LT$4) {
    index++;
    beforeURL += C_LT$4;

    while (index < length) {
      character = value.charAt(index);

      if (character === C_GT$3) {
        break;
      }

      if (commonmark && character === '\n') {
        return;
      }

      queue += character;
      index++;
    }

    if (value.charAt(index) !== C_GT$3) {
      return;
    }

    subvalue += C_LT$4 + queue + C_GT$3;
    url = queue;
    index++;
  } else {
    character = null;
    subqueue = '';

    while (index < length) {
      character = value.charAt(index);

      if (subqueue && own$4.call(markers, character)) {
        break;
      }

      if (isWhitespaceCharacter(character)) {
        if (!pedantic) {
          break;
        }

        subqueue += character;
      } else {
        if (character === C_PAREN_OPEN$2) {
          depth++;
        } else if (character === C_PAREN_CLOSE$3) {
          if (depth === 0) {
            break;
          }

          depth--;
        }

        queue += subqueue;
        subqueue = '';

        if (character === C_BACKSLASH$3) {
          queue += C_BACKSLASH$3;
          character = value.charAt(++index);
        }

        queue += character;
      }

      index++;
    }

    subvalue += queue;
    url = queue;
    index = subvalue.length;
  }

  /* Eat white-space. */
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (!isWhitespaceCharacter(character)) {
      break;
    }

    queue += character;
    index++;
  }

  character = value.charAt(index);
  subvalue += queue;

  /* Eat the title. */
  if (queue && own$4.call(markers, character)) {
    index++;
    subvalue += character;
    queue = '';
    marker = markers[character];
    beforeTitle = subvalue;

    /* In commonmark-mode, things are pretty easy: the
     * marker cannot occur inside the title.
     *
     * Non-commonmark does, however, support nested
     * delimiters. */
    if (commonmark) {
      while (index < length) {
        character = value.charAt(index);

        if (character === marker) {
          break;
        }

        if (character === C_BACKSLASH$3) {
          queue += C_BACKSLASH$3;
          character = value.charAt(++index);
        }

        index++;
        queue += character;
      }

      character = value.charAt(index);

      if (character !== marker) {
        return;
      }

      title = queue;
      subvalue += queue + character;
      index++;

      while (index < length) {
        character = value.charAt(index);

        if (!isWhitespaceCharacter(character)) {
          break;
        }

        subvalue += character;
        index++;
      }
    } else {
      subqueue = '';

      while (index < length) {
        character = value.charAt(index);

        if (character === marker) {
          if (hasMarker) {
            queue += marker + subqueue;
            subqueue = '';
          }

          hasMarker = true;
        } else if (!hasMarker) {
          queue += character;
        } else if (character === C_PAREN_CLOSE$3) {
          subvalue += queue + marker + subqueue;
          title = queue;
          break;
        } else if (isWhitespaceCharacter(character)) {
          subqueue += character;
        } else {
          queue += marker + subqueue + character;
          subqueue = '';
          hasMarker = false;
        }

        index++;
      }
    }
  }

  if (value.charAt(index) !== C_PAREN_CLOSE$3) {
    return;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  subvalue += C_PAREN_CLOSE$3;

  url = self.decode.raw(self.unescape(url), eat(beforeURL).test().end, { nonTerminated: false });

  if (title) {
    beforeTitle = eat(beforeTitle).test().end;
    title = self.decode.raw(self.unescape(title), beforeTitle);
  }

  node = {
    type: isImage ? 'image' : 'link',
    title: title || null,
    url: url
  };

  if (isImage) {
    node.alt = self.decode.raw(self.unescape(content), now) || null;
  } else {
    exit = self.enterLink();
    node.children = self.tokenizeInline(content, now);
    exit();
  }

  return eat(subvalue)(node);
}

var reference_1 = reference;
reference.locator = link;

var T_LINK = 'link';
var T_IMAGE = 'image';
var T_FOOTNOTE = 'footnote';
var REFERENCE_TYPE_SHORTCUT = 'shortcut';
var REFERENCE_TYPE_COLLAPSED = 'collapsed';
var REFERENCE_TYPE_FULL = 'full';
var C_CARET$1 = '^';
var C_BACKSLASH$4 = '\\';
var C_BRACKET_OPEN$4 = '[';
var C_BRACKET_CLOSE$4 = ']';

function reference(eat, value, silent) {
  var self = this;
  var character = value.charAt(0);
  var index = 0;
  var length = value.length;
  var subvalue = '';
  var intro = '';
  var type = T_LINK;
  var referenceType = REFERENCE_TYPE_SHORTCUT;
  var content;
  var identifier;
  var now;
  var node;
  var exit;
  var queue;
  var bracketed;
  var depth;

  /* Check whether we’re eating an image. */
  if (character === '!') {
    type = T_IMAGE;
    intro = character;
    character = value.charAt(++index);
  }

  if (character !== C_BRACKET_OPEN$4) {
    return;
  }

  index++;
  intro += character;
  queue = '';

  /* Check whether we’re eating a footnote. */
  if (self.options.footnotes && value.charAt(index) === C_CARET$1) {
    /* Exit if `![^` is found, so the `!` will be seen as text after this,
     * and we’ll enter this function again when `[^` is found. */
    if (type === T_IMAGE) {
      return;
    }

    intro += C_CARET$1;
    index++;
    type = T_FOOTNOTE;
  }

  /* Eat the text. */
  depth = 0;

  while (index < length) {
    character = value.charAt(index);

    if (character === C_BRACKET_OPEN$4) {
      bracketed = true;
      depth++;
    } else if (character === C_BRACKET_CLOSE$4) {
      if (!depth) {
        break;
      }

      depth--;
    }

    if (character === C_BACKSLASH$4) {
      queue += C_BACKSLASH$4;
      character = value.charAt(++index);
    }

    queue += character;
    index++;
  }

  subvalue = queue;
  content = queue;
  character = value.charAt(index);

  if (character !== C_BRACKET_CLOSE$4) {
    return;
  }

  index++;
  subvalue += character;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (!isWhitespaceCharacter(character)) {
      break;
    }

    queue += character;
    index++;
  }

  character = value.charAt(index);

  /* Inline footnotes cannot have an identifier. */
  if (type !== T_FOOTNOTE && character === C_BRACKET_OPEN$4) {
    identifier = '';
    queue += character;
    index++;

    while (index < length) {
      character = value.charAt(index);

      if (character === C_BRACKET_OPEN$4 || character === C_BRACKET_CLOSE$4) {
        break;
      }

      if (character === C_BACKSLASH$4) {
        identifier += C_BACKSLASH$4;
        character = value.charAt(++index);
      }

      identifier += character;
      index++;
    }

    character = value.charAt(index);

    if (character === C_BRACKET_CLOSE$4) {
      referenceType = identifier ? REFERENCE_TYPE_FULL : REFERENCE_TYPE_COLLAPSED;
      queue += identifier + character;
      index++;
    } else {
      identifier = '';
    }

    subvalue += queue;
    queue = '';
  } else {
    if (!content) {
      return;
    }

    identifier = content;
  }

  /* Brackets cannot be inside the identifier. */
  if (referenceType !== REFERENCE_TYPE_FULL && bracketed) {
    return;
  }

  subvalue = intro + subvalue;

  if (type === T_LINK && self.inLink) {
    return null;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  if (type === T_FOOTNOTE && content.indexOf(' ') !== -1) {
    return eat(subvalue)({
      type: 'footnote',
      children: this.tokenizeInline(content, eat.now())
    });
  }

  now = eat.now();
  now.column += intro.length;
  now.offset += intro.length;
  identifier = referenceType === REFERENCE_TYPE_FULL ? identifier : content;

  node = {
    type: type + 'Reference',
    identifier: normalize_1(identifier)
  };

  if (type === T_LINK || type === T_IMAGE) {
    node.referenceType = referenceType;
  }

  if (type === T_LINK) {
    exit = self.enterLink();
    node.children = self.tokenizeInline(content, now);
    exit();
  } else if (type === T_IMAGE) {
    node.alt = self.decode.raw(self.unescape(content), now) || null;
  }

  return eat(subvalue)(node);
}

var strong$1 = locate$8;

function locate$8(value, fromIndex) {
  var asterisk = value.indexOf('**', fromIndex);
  var underscore = value.indexOf('__', fromIndex);

  if (underscore === -1) {
    return asterisk;
  }

  if (asterisk === -1) {
    return underscore;
  }

  return underscore < asterisk ? underscore : asterisk;
}

var strong_1 = strong$3;
strong$3.locator = strong$1;

var C_ASTERISK$2 = '*';
var C_UNDERSCORE$2 = '_';

function strong$3(eat, value, silent) {
  var self = this;
  var index = 0;
  var character = value.charAt(index);
  var now;
  var pedantic;
  var marker;
  var queue;
  var subvalue;
  var length;
  var prev;

  if (character !== C_ASTERISK$2 && character !== C_UNDERSCORE$2 || value.charAt(++index) !== character) {
    return;
  }

  pedantic = self.options.pedantic;
  marker = character;
  subvalue = marker + marker;
  length = value.length;
  index++;
  queue = '';
  character = '';

  if (pedantic && isWhitespaceCharacter(value.charAt(index))) {
    return;
  }

  while (index < length) {
    prev = character;
    character = value.charAt(index);

    if (character === marker && value.charAt(index + 1) === marker && (!pedantic || !isWhitespaceCharacter(prev))) {
      character = value.charAt(index + 2);

      if (character !== marker) {
        if (!trim_1(queue)) {
          return;
        }

        /* istanbul ignore if - never used (yet) */
        if (silent) {
          return true;
        }

        now = eat.now();
        now.column += 2;
        now.offset += 2;

        return eat(subvalue + queue + subvalue)({
          type: 'strong',
          children: self.tokenizeInline(queue, now)
        });
      }
    }

    if (!pedantic && character === '\\') {
      queue += character;
      character = value.charAt(++index);
    }

    queue += character;
    index++;
  }
}

var isWordCharacter = wordCharacter;

var fromCode$1 = String.fromCharCode;
var re$2 = /\w/;

/* Check if the given character code, or the character
 * code at the first character, is a word character. */
function wordCharacter(character) {
  return re$2.test(typeof character === 'number' ? fromCode$1(character) : character.charAt(0));
}

var emphasis = locate$10;

function locate$10(value, fromIndex) {
  var asterisk = value.indexOf('*', fromIndex);
  var underscore = value.indexOf('_', fromIndex);

  if (underscore === -1) {
    return asterisk;
  }

  if (asterisk === -1) {
    return underscore;
  }

  return underscore < asterisk ? underscore : asterisk;
}

var emphasis_1 = emphasis$2;
emphasis$2.locator = emphasis;

var C_ASTERISK$3 = '*';
var C_UNDERSCORE$3 = '_';

function emphasis$2(eat, value, silent) {
  var self = this;
  var index = 0;
  var character = value.charAt(index);
  var now;
  var pedantic;
  var marker;
  var queue;
  var subvalue;
  var length;
  var prev;

  if (character !== C_ASTERISK$3 && character !== C_UNDERSCORE$3) {
    return;
  }

  pedantic = self.options.pedantic;
  subvalue = character;
  marker = character;
  length = value.length;
  index++;
  queue = '';
  character = '';

  if (pedantic && isWhitespaceCharacter(value.charAt(index))) {
    return;
  }

  while (index < length) {
    prev = character;
    character = value.charAt(index);

    if (character === marker && (!pedantic || !isWhitespaceCharacter(prev))) {
      character = value.charAt(++index);

      if (character !== marker) {
        if (!trim_1(queue) || prev === marker) {
          return;
        }

        if (!pedantic && marker === C_UNDERSCORE$3 && isWordCharacter(character)) {
          queue += marker;
          continue;
        }

        /* istanbul ignore if - never used (yet) */
        if (silent) {
          return true;
        }

        now = eat.now();
        now.column++;
        now.offset++;

        return eat(subvalue + queue + marker)({
          type: 'emphasis',
          children: self.tokenizeInline(queue, now)
        });
      }

      queue += marker;
    }

    if (!pedantic && character === '\\') {
      queue += character;
      character = value.charAt(++index);
    }

    queue += character;
    index++;
  }
}

var _delete = locate$12;

function locate$12(value, fromIndex) {
  return value.indexOf('~~', fromIndex);
}

var _delete$2 = strikethrough;
strikethrough.locator = _delete;

var C_TILDE$1 = '~';
var DOUBLE = '~~';

function strikethrough(eat, value, silent) {
  var self = this;
  var character = '';
  var previous = '';
  var preceding = '';
  var subvalue = '';
  var index;
  var length;
  var now;

  if (!self.options.gfm || value.charAt(0) !== C_TILDE$1 || value.charAt(1) !== C_TILDE$1 || isWhitespaceCharacter(value.charAt(2))) {
    return;
  }

  index = 1;
  length = value.length;
  now = eat.now();
  now.column += 2;
  now.offset += 2;

  while (++index < length) {
    character = value.charAt(index);

    if (character === C_TILDE$1 && previous === C_TILDE$1 && (!preceding || !isWhitespaceCharacter(preceding))) {
      /* istanbul ignore if - never used (yet) */
      if (silent) {
        return true;
      }

      return eat(DOUBLE + subvalue + DOUBLE)({
        type: 'delete',
        children: self.tokenizeInline(subvalue, now)
      });
    }

    subvalue += previous;
    preceding = previous;
    previous = character;
  }
}

var codeInline = locate$14;

function locate$14(value, fromIndex) {
  return value.indexOf('`', fromIndex);
}

var codeInline$2 = inlineCode;
inlineCode.locator = codeInline;

var C_TICK$3 = '`';

/* Tokenise inline code. */
function inlineCode(eat, value, silent) {
  var length = value.length;
  var index = 0;
  var queue = '';
  var tickQueue = '';
  var contentQueue;
  var subqueue;
  var count;
  var openingCount;
  var subvalue;
  var character;
  var found;
  var next;

  while (index < length) {
    if (value.charAt(index) !== C_TICK$3) {
      break;
    }

    queue += C_TICK$3;
    index++;
  }

  if (!queue) {
    return;
  }

  subvalue = queue;
  openingCount = index;
  queue = '';
  next = value.charAt(index);
  count = 0;

  while (index < length) {
    character = next;
    next = value.charAt(index + 1);

    if (character === C_TICK$3) {
      count++;
      tickQueue += character;
    } else {
      count = 0;
      queue += character;
    }

    if (count && next !== C_TICK$3) {
      if (count === openingCount) {
        subvalue += queue + tickQueue;
        found = true;
        break;
      }

      queue += tickQueue;
      tickQueue = '';
    }

    index++;
  }

  if (!found) {
    if (openingCount % 2 !== 0) {
      return;
    }

    queue = '';
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  contentQueue = '';
  subqueue = '';
  length = queue.length;
  index = -1;

  while (++index < length) {
    character = queue.charAt(index);

    if (isWhitespaceCharacter(character)) {
      subqueue += character;
      continue;
    }

    if (subqueue) {
      if (contentQueue) {
        contentQueue += subqueue;
      }

      subqueue = '';
    }

    contentQueue += character;
  }

  return eat(subvalue)({
    type: 'inlineCode',
    value: contentQueue
  });
}

var _break = locate$16;

function locate$16(value, fromIndex) {
  var index = value.indexOf('\n', fromIndex);

  while (index > fromIndex) {
    if (value.charAt(index - 1) !== ' ') {
      break;
    }

    index--;
  }

  return index;
}

var _break$2 = hardBreak;
hardBreak.locator = _break;

var MIN_BREAK_LENGTH = 2;

function hardBreak(eat, value, silent) {
  var length = value.length;
  var index = -1;
  var queue = '';
  var character;

  while (++index < length) {
    character = value.charAt(index);

    if (character === '\n') {
      if (index < MIN_BREAK_LENGTH) {
        return;
      }

      /* istanbul ignore if - never used (yet) */
      if (silent) {
        return true;
      }

      queue += character;

      return eat(queue)({ type: 'break' });
    }

    if (character !== ' ') {
      return;
    }

    queue += character;
  }
}

var text_1 = text;

function text(eat, value, silent) {
  var self = this;
  var methods;
  var tokenizers;
  var index;
  var length;
  var subvalue;
  var position;
  var tokenizer;
  var name;
  var min;
  var now;

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  methods = self.inlineMethods;
  length = methods.length;
  tokenizers = self.inlineTokenizers;
  index = -1;
  min = value.length;

  while (++index < length) {
    name = methods[index];

    if (name === 'text' || !tokenizers[name]) {
      continue;
    }

    tokenizer = tokenizers[name].locator;

    if (!tokenizer) {
      eat.file.fail('Missing locator: `' + name + '`');
    }

    position = tokenizer.call(self, value, 1);

    if (position !== -1 && position < min) {
      min = position;
    }
  }

  subvalue = value.slice(0, min);
  now = eat.now();

  self.decode(subvalue, now, function (content, position, source) {
    eat(source || content)({
      type: 'text',
      value: content
    });
  });
}

var parser = Parser;

function Parser(doc, file) {
  this.file = file;
  this.offset = {};
  this.options = immutable(this.options);
  this.setOptions({});

  this.inList = false;
  this.inBlock = false;
  this.inLink = false;
  this.atStart = true;

  this.toOffset = vfileLocation(file).toOffset;
  this.unescape = _unescape(this, 'escape');
  this.decode = decode$1(this);
}

var proto$7 = Parser.prototype;

/* Expose core. */
proto$7.setOptions = setOptions_1;
proto$7.parse = parse_1;

/* Expose `defaults`. */
proto$7.options = defaults$3;

/* Enter and exit helpers. */
proto$7.exitStart = stateToggle('atStart', true);
proto$7.enterList = stateToggle('inList', false);
proto$7.enterLink = stateToggle('inLink', false);
proto$7.enterBlock = stateToggle('inBlock', false);

/* Nodes that can interupt a paragraph:
 *
 * ```markdown
 * A paragraph, followed by a thematic break.
 * ___
 * ```
 *
 * In the above example, the thematic break “interupts”
 * the paragraph. */
proto$7.interruptParagraph = [['thematicBreak'], ['atxHeading'], ['fencedCode'], ['blockquote'], ['html'], ['setextHeading', { commonmark: false }], ['definition', { commonmark: false }], ['footnote', { commonmark: false }]];

/* Nodes that can interupt a list:
 *
 * ```markdown
 * - One
 * ___
 * ```
 *
 * In the above example, the thematic break “interupts”
 * the list. */
proto$7.interruptList = [['atxHeading', { pedantic: false }], ['fencedCode', { pedantic: false }], ['thematicBreak', { pedantic: false }], ['definition', { commonmark: false }], ['footnote', { commonmark: false }]];

/* Nodes that can interupt a blockquote:
 *
 * ```markdown
 * > A paragraph.
 * ___
 * ```
 *
 * In the above example, the thematic break “interupts”
 * the blockquote. */
proto$7.interruptBlockquote = [['indentedCode', { commonmark: true }], ['fencedCode', { commonmark: true }], ['atxHeading', { commonmark: true }], ['setextHeading', { commonmark: true }], ['thematicBreak', { commonmark: true }], ['html', { commonmark: true }], ['list', { commonmark: true }], ['definition', { commonmark: false }], ['footnote', { commonmark: false }]];

/* Handlers. */
proto$7.blockTokenizers = {
  newline: newline_1,
  indentedCode: codeIndented,
  fencedCode: codeFenced,
  blockquote: blockquote_1,
  atxHeading: headingAtx,
  thematicBreak: thematicBreak_1,
  list: list_1,
  setextHeading: headingSetext,
  html: htmlBlock,
  footnote: footnoteDefinition_1,
  definition: definition_1,
  table: table_1,
  paragraph: paragraph_1
};

proto$7.inlineTokenizers = {
  escape: _escape$4,
  autoLink: autoLink_1,
  url: url_1,
  html: htmlInline,
  link: link_1,
  reference: reference_1,
  strong: strong_1,
  emphasis: emphasis_1,
  deletion: _delete$2,
  code: codeInline$2,
  break: _break$2,
  text: text_1
};

/* Expose precedence. */
proto$7.blockMethods = keys$3(proto$7.blockTokenizers);
proto$7.inlineMethods = keys$3(proto$7.inlineTokenizers);

/* Tokenizers. */
proto$7.tokenizeBlock = tokenizer('block');
proto$7.tokenizeInline = tokenizer('inline');
proto$7.tokenizeFactory = tokenizer;

/* Get all keys in `value`. */
function keys$3(value) {
  var result = [];
  var key;

  for (key in value) {
    result.push(key);
  }

  return result;
}

var remarkParse = parse$2;
parse$2.Parser = parser;

function parse$2(options) {
  var Local = unherit_1(parser);
  Local.prototype.options = immutable(Local.prototype.options, this.data('settings'), options);
  this.Parser = Local;
}

function plugin() {
  function locator(value, fromIndex) {
    return value.indexOf('*[', fromIndex);
  }

  function inlineTokenizer(eat, value, silent) {
    var regex = new RegExp(/[*]\[([^\]]*)\]:\s*(.+)\n*/);
    var keep = regex.exec(value);

    /* istanbul ignore if - never used (yet) */
    if (silent) return silent;
    if (!keep || keep.index !== 0) return;

    var _keep = slicedToArray(keep, 3),
        matched = _keep[0],
        abbr = _keep[1],
        reference = _keep[2];

    return eat(matched)({
      type: 'abbr',
      abbr: abbr,
      reference: reference,
      children: [{ type: 'text', value: abbr }],
      data: {
        hName: 'abbr',
        hProperties: {
          title: reference
        }
      }
    });
  }

  function transformer(tree) {
    var abbrs = {};
    unistUtilVisit(tree, 'paragraph', find(abbrs));
    unistUtilVisit(tree, replace(abbrs));
  }

  function find(abbrs) {
    return function one(node, index, parent) {
      for (var i = 0; i < node.children.length; i++) {
        var child = node.children[i];
        if (child.type !== 'abbr') continue;
        // Store abbr node for later use
        abbrs[child.abbr] = child;
        node.children.splice(i, 1);
        i -= 1;
      }
      // Remove paragraph if there is no child
      if (node.children.length === 0) parent.children.splice(index, 1);
    };
  }

  function replace(abbrs) {
    function escapeRegExp(str) {
      return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'); // eslint-disable-line no-useless-escape
    }

    var pattern = Object.keys(abbrs).map(escapeRegExp).join('|');
    var regex = new RegExp('\\b(' + pattern + ')\\b');

    function one(node, index, parent) {
      if (Object.keys(abbrs).length === 0) return;
      if (!node.children) return;

      // If a text node is present in child nodes, check if an abbreviation is present
      for (var c = 0; c < node.children.length; c++) {
        var child = node.children[c];
        if (node.type === 'abbr' || child.type !== 'text') continue;
        if (!regex.test(child.value)) continue;

        // Transform node
        var newTexts = child.value.split(regex);

        // Remove old text node
        node.children.splice(c, 1);

        // Replace abbreviations
        for (var i = 0; i < newTexts.length; i++) {
          var content = newTexts[i];
          if (abbrs.hasOwnProperty(content)) {
            node.children.splice(c + i, 0, abbrs[content]);
          } else {
            node.children.splice(c + i, 0, {
              type: 'text',
              value: content
            });
          }
        }
      }
    }
    return one;
  }

  inlineTokenizer.locator = locator;

  var Parser = this.Parser;

  // Inject inlineTokenizer
  var inlineTokenizers = Parser.prototype.inlineTokenizers;
  var inlineMethods = Parser.prototype.inlineMethods;
  inlineTokenizers.abbr = inlineTokenizer;
  inlineMethods.splice(0, 0, 'abbr');

  var Compiler = this.Compiler;
  if (Compiler) {
    var visitors = Compiler.prototype.visitors;
    if (!visitors) return;

    var abbrMap = {};
    visitors.abbr = function (node) {
      if (!abbrMap[node.abbr]) {
        abbrMap[node.abbr] = '*[' + node.abbr + ']: ' + node.reference;
      }
      return '' + node.abbr;
    };

    var originalRootCompiler = visitors.root;
    visitors.root = function (node) {
      return originalRootCompiler.apply(this, arguments) + '\n' + Object.values(abbrMap).join('\n');
    };
  }
  return transformer;
}

var src = plugin;

var parse_1$2 = parse$3;
var stringify_1 = stringify$2;

var empty$2 = '';
var space$1 = ' ';
var whiteSpace = /[ \t\n\r\f]+/g;

function parse$3(value) {
  var input = trim_1(String(value || empty$2));
  return input === empty$2 ? [] : input.split(whiteSpace);
}

function stringify$2(values) {
  return trim_1(values.join(space$1));
}

var spaceSeparatedTokens = {
  parse: parse_1$2,
  stringify: stringify_1
};

var C_NEWLINE$14 = '\n';
var C_NEWPARAGRAPH = '\n\n';

var src$2 = function plugin() {
  var classNames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var locateMarker = new RegExp('[^\\\\]?(->|<-)');
  var endMarkers = ['->', '<-'];

  function alignTokenizer(eat, value, silent) {
    var keep = value.match(locateMarker);
    if (!keep || keep.index !== 0) return;

    var now = eat.now();

    var _keep = slicedToArray(keep, 2),
        startMarker = _keep[1];

    /* istanbul ignore if - never used (yet) */


    if (silent) return true;

    var index = 0;
    var linesToEat = [];
    var finishedBlocks = [];
    var endMarker = '';
    var canEatLine = true;
    var blockStartIndex = 0;

    while (canEatLine) {
      var nextIndex = value.indexOf(C_NEWLINE$14, index + 1);
      var lineToEat = nextIndex !== -1 ? value.slice(index, nextIndex) : value.slice(index);

      linesToEat.push(lineToEat);

      var endIndex = endMarkers.indexOf(lineToEat.slice(-2));

      // If nextIndex = (blockStartIndex + 2), it's the first marker of the block.
      if ((nextIndex > blockStartIndex + 2 || nextIndex === -1) && lineToEat.length >= 2 && endIndex !== -1) {

        if (endMarker === '') endMarker = lineToEat.slice(-2);

        finishedBlocks.push(linesToEat.join(C_NEWLINE$14));

        // Check if another block is following
        if (value.indexOf('->', nextIndex) !== nextIndex + 1) break;
        linesToEat = [];
        blockStartIndex = nextIndex + 1;
      }

      index = nextIndex + 1;
      canEatLine = nextIndex !== -1;
    }

    var elementType = '';
    var classes = '';
    if (startMarker === '<-' && endMarker === '<-') {
      elementType = 'leftAligned';
      classes = classNames.left ? classNames.left : 'align-left';
    }
    if (startMarker === '->') {
      if (endMarker === '<-') {
        elementType = 'centerAligned';
        classes = classNames.center ? classNames.center : 'align-center';
      }
      if (endMarker === '->') {
        elementType = 'rightAligned';
        classes = classNames.right ? classNames.right : 'align-right';
      }
    }

    if (!elementType) return;
    if (finishedBlocks.length === 0) return;

    var stringToEat = '';
    var marker = finishedBlocks[0].substring(finishedBlocks[0].length - 2, finishedBlocks[0].length);
    var toEat = [];
    for (var i = 0; i < finishedBlocks.length; ++i) {
      var block = finishedBlocks[i];
      if (marker !== block.substring(block.length - 2, block.length)) break;
      toEat.push(block);
      stringToEat += block.slice(2, -2) + C_NEWPARAGRAPH;
    }

    var add = eat(toEat.join(C_NEWLINE$14));
    var exit = this.enterBlock();
    var values = this.tokenizeBlock(stringToEat, now);
    exit();

    return add({
      type: elementType,
      children: values,
      data: {
        hName: 'div',
        hProperties: {
          class: spaceSeparatedTokens.parse(classes)
        }
      }
    });
  }

  var Parser = this.Parser;

  // Inject blockTokenizer
  var blockTokenizers = Parser.prototype.blockTokenizers;
  var blockMethods = Parser.prototype.blockMethods;
  blockTokenizers.alignBlocks = alignTokenizer;
  blockMethods.splice(blockMethods.indexOf('list') + 1, 0, 'alignBlocks');

  var Compiler = this.Compiler;

  // Stringify
  if (Compiler) {
    var visitors = Compiler.prototype.visitors;
    if (!visitors) return;

    var alignCompiler = function alignCompiler(node) {
      var innerContent = this.all(node);

      var markers = {
        left: ['<-', '<-'],
        right: ['->', '->'],
        center: ['->', '<-']
      };
      var alignType = node.type.slice(0, -7);

      if (!markers[alignType]) return innerContent.join('\n\n');

      var _markers$alignType = slicedToArray(markers[alignType], 2),
          start = _markers$alignType[0],
          end = _markers$alignType[1];

      if (innerContent.length < 2) return start + ' ' + innerContent.join('\n').trim() + ' ' + end;

      return start + '\n' + innerContent.join('\n\n').trim() + '\n' + end;
    };
    visitors.leftAligned = alignCompiler;
    visitors.rightAligned = alignCompiler;
    visitors.centerAligned = alignCompiler;
  }
};

var clone_1 = createCommonjsModule(function (module) {
  var clone = function () {
    function _instanceof$$1(obj, type) {
      return type != null && obj instanceof type;
    }

    var nativeMap;
    try {
      nativeMap = Map;
    } catch (_) {
      // maybe a reference error because no `Map`. Give it a dummy value that no
      // value will ever be an instanceof.
      nativeMap = function nativeMap() {};
    }

    var nativeSet;
    try {
      nativeSet = Set;
    } catch (_) {
      nativeSet = function nativeSet() {};
    }

    var nativePromise;
    try {
      nativePromise = Promise;
    } catch (_) {
      nativePromise = function nativePromise() {};
    }

    /**
     * Clones (copies) an Object using deep copying.
     *
     * This function supports circular references by default, but if you are certain
     * there are no circular references in your object, you can save some CPU time
     * by calling clone(obj, false).
     *
     * Caution: if `circular` is false and `parent` contains circular references,
     * your program may enter an infinite loop and crash.
     *
     * @param `parent` - the object to be cloned
     * @param `circular` - set to true if the object to be cloned may contain
     *    circular references. (optional - true by default)
     * @param `depth` - set to a number if the object is only to be cloned to
     *    a particular depth. (optional - defaults to Infinity)
     * @param `prototype` - sets the prototype to be used when cloning an object.
     *    (optional - defaults to parent prototype).
     * @param `includeNonEnumerable` - set to true if the non-enumerable properties
     *    should be cloned as well. Non-enumerable properties on the prototype
     *    chain will be ignored. (optional - false by default)
    */
    function clone(parent, circular, depth, prototype, includeNonEnumerable) {
      if ((typeof circular === 'undefined' ? 'undefined' : _typeof(circular)) === 'object') {
        depth = circular.depth;
        prototype = circular.prototype;
        includeNonEnumerable = circular.includeNonEnumerable;
        circular = circular.circular;
      }
      // maintain two arrays for circular references, where corresponding parents
      // and children have the same index
      var allParents = [];
      var allChildren = [];

      var useBuffer = typeof Buffer != 'undefined';

      if (typeof circular == 'undefined') circular = true;

      if (typeof depth == 'undefined') depth = Infinity;

      // recurse this function so we don't reset allParents and allChildren
      function _clone(parent, depth) {
        // cloning null always returns null
        if (parent === null) return null;

        if (depth === 0) return parent;

        var child;
        var proto;
        if ((typeof parent === 'undefined' ? 'undefined' : _typeof(parent)) != 'object') {
          return parent;
        }

        if (_instanceof$$1(parent, nativeMap)) {
          child = new nativeMap();
        } else if (_instanceof$$1(parent, nativeSet)) {
          child = new nativeSet();
        } else if (_instanceof$$1(parent, nativePromise)) {
          child = new nativePromise(function (resolve, reject) {
            parent.then(function (value) {
              resolve(_clone(value, depth - 1));
            }, function (err) {
              reject(_clone(err, depth - 1));
            });
          });
        } else if (clone.__isArray(parent)) {
          child = [];
        } else if (clone.__isRegExp(parent)) {
          child = new RegExp(parent.source, __getRegExpFlags(parent));
          if (parent.lastIndex) child.lastIndex = parent.lastIndex;
        } else if (clone.__isDate(parent)) {
          child = new Date(parent.getTime());
        } else if (useBuffer && isBuffer$1(parent)) {
          if (Buffer.allocUnsafe) {
            // Node.js >= 4.5.0
            child = Buffer.allocUnsafe(parent.length);
          } else {
            // Older Node.js versions
            child = new Buffer(parent.length);
          }
          parent.copy(child);
          return child;
        } else if (_instanceof$$1(parent, Error)) {
          child = Object.create(parent);
        } else {
          if (typeof prototype == 'undefined') {
            proto = Object.getPrototypeOf(parent);
            child = Object.create(proto);
          } else {
            child = Object.create(prototype);
            proto = prototype;
          }
        }

        if (circular) {
          var index = allParents.indexOf(parent);

          if (index != -1) {
            return allChildren[index];
          }
          allParents.push(parent);
          allChildren.push(child);
        }

        if (_instanceof$$1(parent, nativeMap)) {
          parent.forEach(function (value, key) {
            var keyChild = _clone(key, depth - 1);
            var valueChild = _clone(value, depth - 1);
            child.set(keyChild, valueChild);
          });
        }
        if (_instanceof$$1(parent, nativeSet)) {
          parent.forEach(function (value) {
            var entryChild = _clone(value, depth - 1);
            child.add(entryChild);
          });
        }

        for (var i in parent) {
          var attrs;
          if (proto) {
            attrs = Object.getOwnPropertyDescriptor(proto, i);
          }

          if (attrs && attrs.set == null) {
            continue;
          }
          child[i] = _clone(parent[i], depth - 1);
        }

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(parent);
          for (var i = 0; i < symbols.length; i++) {
            // Don't need to worry about cloning a symbol because it is a primitive,
            // like a number or string.
            var symbol = symbols[i];
            var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
            if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
              continue;
            }
            child[symbol] = _clone(parent[symbol], depth - 1);
            if (!descriptor.enumerable) {
              Object.defineProperty(child, symbol, {
                enumerable: false
              });
            }
          }
        }

        if (includeNonEnumerable) {
          var allPropertyNames = Object.getOwnPropertyNames(parent);
          for (var i = 0; i < allPropertyNames.length; i++) {
            var propertyName = allPropertyNames[i];
            var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
            if (descriptor && descriptor.enumerable) {
              continue;
            }
            child[propertyName] = _clone(parent[propertyName], depth - 1);
            Object.defineProperty(child, propertyName, {
              enumerable: false
            });
          }
        }

        return child;
      }

      return _clone(parent, depth);
    }

    /**
     * Simple flat clone using prototype, accepts only objects, usefull for property
     * override on FLAT configuration object (no nested props).
     *
     * USE WITH CAUTION! This may not behave as you wish if you do not know how this
     * works.
     */
    clone.clonePrototype = function clonePrototype(parent) {
      if (parent === null) return null;

      var c = function c() {};
      c.prototype = parent;
      return new c();
    };

    // private utility functions

    function __objToStr(o) {
      return Object.prototype.toString.call(o);
    }
    clone.__objToStr = __objToStr;

    function __isDate(o) {
      return (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object' && __objToStr(o) === '[object Date]';
    }
    clone.__isDate = __isDate;

    function __isArray(o) {
      return (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object' && __objToStr(o) === '[object Array]';
    }
    clone.__isArray = __isArray;

    function __isRegExp(o) {
      return (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object' && __objToStr(o) === '[object RegExp]';
    }
    clone.__isRegExp = __isRegExp;

    function __getRegExpFlags(re) {
      var flags = '';
      if (re.global) flags += 'g';
      if (re.ignoreCase) flags += 'i';
      if (re.multiline) flags += 'm';
      return flags;
    }
    clone.__getRegExpFlags = __getRegExpFlags;

    return clone;
  }();

  if ('object' === 'object' && module.exports) {
    module.exports = clone;
  }
});

var legendBlock = {
  table: 'Table:',
  code: 'Code:'
};

var internLegendBlock = {
  blockquote: 'Source:',
  image: 'Figure:'
};

function plugin$1(opts) {
  var externalBlocks = immutable(legendBlock, opts && opts.external || {});
  var internalBlocks = immutable(internLegendBlock, opts && opts.internal || {});

  var Compiler = this.Compiler;
  if (Compiler) {
    var visitors = Compiler.prototype.visitors;
    if (!visitors) return;

    visitors.figure = function (node) {
      var captionedNode = node.children[0];
      var captionNode = node.children[1];
      var captionedMarkdown = this.visit(captionedNode);

      // compile without taking care of the "figcaption" wrapper node
      var captionMarkdown = this.all(captionNode).join('');
      if (!(captionedNode.type in externalBlocks || captionedNode.type in internalBlocks)) {
        return captionedMarkdown;
      }

      var prefix = '';
      if (captionedNode.type in externalBlocks) {
        prefix = externalBlocks[captionedNode.type];
      } else if (captionedNode.type in internalBlocks) {
        prefix = internalBlocks[captionedNode.type];
      }

      return captionedMarkdown + '\n' + prefix + ' ' + captionMarkdown;
    };
  }

  return function transformer(tree) {
    Object.keys(internalBlocks).forEach(function (nodeType) {
      return unistUtilVisit(tree, nodeType, internLegendVisitor(internalBlocks));
    });

    Object.keys(externalBlocks).forEach(function (nodeType) {
      return unistUtilVisit(tree, nodeType, externLegendVisitorCreator(externalBlocks));
    });
  };
}

function internLegendVisitor(internalBlocks) {
  return function (node, index, parent) {
    // if already wrapped in figure, skip
    if (parent && parent.type === 'figure') return;

    // if the current node has some children, the legend is the last child.
    // if not, the legend is the last child of the parent node.
    var lastP = node.children ? getLastParagraph(node.children) : parent;
    // legend can only be in a paragraph.
    if (!lastP || node.children && lastP.type !== 'paragraph' || !node.children && parent.type !== 'paragraph') {
      return;
    }

    // find which child contains the last legend
    var legendChildIndex = -1;
    lastP.children.forEach(function (child, index) {
      if (child.type === 'text' && (child.value.startsWith(internalBlocks[node.type]) || child.value.includes('\n' + internalBlocks[node.type]))) {
        legendChildIndex = index;
      }
    });
    if (legendChildIndex === -1 || !node.children && legendChildIndex < index) {
      return;
    }

    // split the text node containing the last legend and find the line containing it
    var potentialLegendLines = lastP.children[legendChildIndex].value.split('\n');
    var lastLegendIndex = -1;
    potentialLegendLines.forEach(function (line, index) {
      if (line.startsWith(internalBlocks[node.type])) {
        lastLegendIndex = index;
      }
    });

    // the child containing the last legend is split in two: head contains text until
    // legend, tail contains legend text
    var tail = clone_1(lastP.children[legendChildIndex]);
    var headText = potentialLegendLines.slice(0, lastLegendIndex).join('\n');
    // replace existing node 'head' content with text until legend
    lastP.children[legendChildIndex].value = headText;

    // legend text is put into the cloned node…
    var legendText = potentialLegendLines.slice(lastLegendIndex).join('\n').slice(internalBlocks[node.type].length).trimLeft();

    tail.value = legendText;
    // … and 'tail', the cloned node is inserted after 'head'
    lastP.children.splice(legendChildIndex + 1, 0, tail);

    // gather all nodes that should be inside the legend
    var legendNodes = lastP.children.slice(legendChildIndex + 1);
    // remove them from the parent paragraph
    lastP.children = lastP.children.slice(0, legendChildIndex + 1);

    var figcaption = {
      type: 'figcaption',
      children: legendNodes,
      data: {
        hName: 'figcaption'
      }
    };

    var figure = {
      type: 'figure',
      children: [clone_1(node), figcaption],
      data: {
        hName: 'figure'
      }
    };

    node.type = figure.type;
    node.children = figure.children;
    node.data = figure.data;
  };
}

function externLegendVisitorCreator(blocks) {
  return function (node, index, parent) {
    if (index >= parent.children.length - 1) return;
    if (parent.children[index + 1].type !== 'paragraph') return;

    var legendNode = parent.children[index + 1];
    var firstChild = legendNode.children[0];
    if (firstChild.type !== 'text' || !firstChild.value.startsWith(blocks[node.type])) return;

    var legendNodes = [];
    var followingNodes = [];
    var firstTextLine = firstChild.value.replace(blocks[node.type], '').split('\n')[0];

    if (firstChild.value.includes('\n')) {
      followingNodes.push({ type: 'text',
        value: firstChild.value.replace(blocks[node.type], '').split('\n')[1] });
    }
    legendNodes.push({
      type: 'text',
      value: firstTextLine.trimLeft() // remove the " " after the {prefix}:
    });

    legendNode.children.forEach(function (node, index) {
      if (index === 0) return;

      if (node.type === 'text') {
        var keepInLegend = node.value.split('\n')[0];
        if (node.value.includes('\n')) {
          node.value = node.value.split('\n')[1];
          followingNodes.push(node);
        }
        legendNodes.push({ type: 'text', value: keepInLegend });
      } else {
        legendNodes.push(clone_1(node));
      }
    });

    var figcaption = {
      type: 'figcaption',
      children: legendNodes,
      data: {
        hName: 'figcaption'
      }
    };
    var figure = {
      type: 'figure',
      children: [clone_1(node), figcaption],
      data: {
        hName: 'figure'
      }
    };

    node.type = figure.type;
    node.children = figure.children;
    node.data = figure.data;

    if (followingNodes.length) {
      parent.children.splice(index + 1, 1, { type: 'paragraph', children: followingNodes });
    } else {
      parent.children.splice(index + 1, 1);
    }
  };
}

function getLastParagraph(xs, lastParagraph) {
  var len = xs.length;
  if (!len) return;

  var last = xs[len - 1];
  if (last.type === 'text') return lastParagraph;
  if (!last.children || !last.children.length) return lastParagraph;

  if (last.type === 'paragraph') return getLastParagraph(last.children, last);
  return getLastParagraph(last.children, lastParagraph);
}

var src$4 = plugin$1;

var beginMarkerFactory = function beginMarkerFactory() {
  var marker = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'COMMENTS';
  return '<--' + marker + ' ';
};
var endMarkerFactory = function endMarkerFactory() {
  var marker = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'COMMENTS';
  return ' ' + marker + '-->';
};

function plugin$2() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$beginMarker = _ref.beginMarker,
      beginMarker = _ref$beginMarker === undefined ? 'COMMENTS' : _ref$beginMarker,
      _ref$endMarker = _ref.endMarker,
      endMarker = _ref$endMarker === undefined ? 'COMMENTS' : _ref$endMarker;

  beginMarker = beginMarkerFactory(beginMarker);
  endMarker = endMarkerFactory(endMarker);

  function locator(value, fromIndex) {
    return value.indexOf(beginMarker, fromIndex);
  }

  function inlineTokenizer(eat, value, silent) {
    var keepBegin = value.indexOf(beginMarker);
    var keepEnd = value.indexOf(endMarker);
    if (keepBegin !== 0 || keepEnd === -1) return;

    /* istanbul ignore if - never used (yet) */
    if (silent) return true;

    var comment = value.substring(beginMarker.length, keepEnd);
    return eat(beginMarker + comment + endMarker)({
      type: 'comments',
      value: '',
      data: { comment: comment }
    });
  }
  inlineTokenizer.locator = locator;

  var Parser = this.Parser;

  // Inject inlineTokenizer
  var inlineTokenizers = Parser.prototype.inlineTokenizers;
  var inlineMethods = Parser.prototype.inlineMethods;
  inlineTokenizers.comments = inlineTokenizer;
  inlineMethods.splice(inlineMethods.indexOf('text'), 0, 'comments');

  var Compiler = this.Compiler;
  if (Compiler) {
    var visitors = Compiler.prototype.visitors;
    if (!visitors) return;
    visitors.comments = function (node) {
      return beginMarker + node.data.comment + endMarker;
    };
  }
}

var src$6 = plugin$2;

function escapeRegExp(str) {
  return str.replace(/[-[]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}

var C_NEWLINE$15 = '\n';
var C_FENCE = '|';

var src$8 = function blockPlugin() {
  var availableBlocks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var pattern = Object.keys(availableBlocks).map(escapeRegExp).join('|');

  if (!pattern) {
    throw new Error('remark-custom-blocks needs to be passed a configuration object as option');
  }

  var regex = new RegExp('\\[\\[(' + pattern + ')(?: *\\| *(.*))?\\]\\]\n');

  function blockTokenizer(eat, value, silent) {
    var now = eat.now();
    var keep = regex.exec(value);
    if (!keep) return;
    if (keep.index !== 0) return;

    var _keep = slicedToArray(keep, 3),
        eaten = _keep[0],
        blockType = _keep[1],
        blockTitle = _keep[2];

    /* istanbul ignore if - never used (yet) */


    if (silent) return true;

    var linesToEat = [];
    var content = [];

    var idx = 0;
    while ((idx = value.indexOf(C_NEWLINE$15)) !== -1) {
      var next = value.indexOf(C_NEWLINE$15, idx + 1);
      // either slice until next NEWLINE or slice until end of string
      var lineToEat = next !== -1 ? value.slice(idx + 1, next) : value.slice(idx + 1);
      if (lineToEat[0] !== C_FENCE) break;
      // remove leading `FENCE ` or leading `FENCE`
      var line = lineToEat.slice(lineToEat.startsWith(C_FENCE + ' ') ? 2 : 1);
      linesToEat.push(lineToEat);
      content.push(line);
      value = value.slice(idx + 1);
    }

    var contentString = content.join(C_NEWLINE$15);

    var stringToEat = eaten + linesToEat.join(C_NEWLINE$15);

    var potentialBlock = availableBlocks[blockType];
    var titleAllowed = potentialBlock.title && ['optional', 'required'].includes(potentialBlock.title);
    var titleRequired = potentialBlock.title && potentialBlock.title === 'required';

    if (titleRequired && !blockTitle) return;
    if (!titleAllowed && blockTitle) return;

    var add = eat(stringToEat);

    var exit = this.enterBlock();
    var contents = {
      type: blockType + 'CustomBlockBody',
      data: {
        hName: 'div',
        hProperties: {
          className: 'custom-block-body'
        }
      },
      children: this.tokenizeBlock(contentString, now)
    };
    exit();

    var blockChildren = [contents];
    if (titleAllowed && blockTitle) {
      var titleNode = {
        type: blockType + 'CustomBlockHeading',
        data: {
          hName: potentialBlock.details ? 'summary' : 'div',
          hProperties: {
            className: 'custom-block-heading'
          }
        },
        children: this.tokenizeInline(blockTitle, now)
      };
      blockChildren.unshift(titleNode);
    }

    var classList = spaceSeparatedTokens.parse(potentialBlock.classes || '');

    return add({
      type: blockType + 'CustomBlock',
      children: blockChildren,
      data: {
        hName: potentialBlock.details ? 'details' : 'div',
        hProperties: {
          className: ['custom-block'].concat(toConsumableArray(classList))
        }
      }
    });
  }

  var Parser = this.Parser;

  // Inject blockTokenizer
  var blockTokenizers = Parser.prototype.blockTokenizers;
  var blockMethods = Parser.prototype.blockMethods;
  blockTokenizers.customBlocks = blockTokenizer;
  blockMethods.splice(blockMethods.indexOf('fencedCode') + 1, 0, 'customBlocks');

  // Inject into interrupt rules
  var interruptParagraph = Parser.prototype.interruptParagraph;
  var interruptList = Parser.prototype.interruptList;
  var interruptBlockquote = Parser.prototype.interruptBlockquote;
  interruptParagraph.splice(interruptParagraph.indexOf('fencedCode') + 1, 0, ['customBlocks']);
  interruptList.splice(interruptList.indexOf('fencedCode') + 1, 0, ['customBlocks']);
  interruptBlockquote.splice(interruptBlockquote.indexOf('fencedCode') + 1, 0, ['customBlocks']);
};

var noop$2 = function noop() {
  return true;
};

var throwing = function throwing(msg) {
  return function () {
    throw new Error(msg);
  };
};

function plugin$3() {
  var _this = this;

  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$block = _ref.block,
      block = _ref$block === undefined ? [] : _ref$block,
      _ref$inline = _ref.inline,
      inline = _ref$inline === undefined ? [] : _ref$inline;

  if (block.length) {
    block.filter(function (key) {
      if (Array.isArray(key)) return block.map(function (xs) {
        return xs[0];
      }).includes(key[0]);
      return block.includes(key);
    }).forEach(function (key) {
      if (Array.isArray(key) && key.length === 2) {
        _this.Parser.prototype.blockTokenizers[key[0]] = throwing(key[1]);
      } else {
        _this.Parser.prototype.blockTokenizers[key] = noop$2;
      }
    });
  }

  if (inline.length) {
    inline.filter(function (key) {
      if (Array.isArray(key)) return inline.map(function (xs) {
        return xs[0];
      }).includes(key[0]);
      return inline.includes(key);
    }).forEach(function (key) {
      var tokenizerName = void 0;
      var replacer = void 0;
      if (Array.isArray(key) && key.length === 2) {
        tokenizerName = key[0];
        replacer = throwing(key[1]);
      } else {
        tokenizerName = key;
        replacer = clone_1(noop$2);
      }
      if (_this.Parser.prototype.inlineTokenizers[tokenizerName]) {
        Object.keys(_this.Parser.prototype.inlineTokenizers[tokenizerName]).forEach(function (prop) {
          replacer[prop] = _this.Parser.prototype.inlineTokenizers[tokenizerName][prop];
        });
      }
      _this.Parser.prototype.inlineTokenizers[tokenizerName] = replacer;
    });
  }
}

var src$10 = plugin$3;

function escapeRegExp$1(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'); // eslint-disable-line no-useless-escape
}

var SPACE$1 = ' ';

var src$12 = function inlinePlugin(ctx) {
  var emoticonClasses = ctx && ctx.classes;
  var emoticons = ctx && ctx.emoticons;
  var pattern = Object.keys(emoticons).map(escapeRegExp$1).join('|');

  if (!pattern) {
    throw new Error('remark-emoticons needs to be passed a configuration object as option');
  }

  var regex = new RegExp('(\\s|^)(' + pattern + ')(\\s|$)');

  function locator(value, fromIndex) {
    var keep = regex.exec(value);
    if (keep && value[keep.index] === SPACE$1) return keep.index + 1;
    return -1;
  }

  function inlineTokenizer(eat, value, silent) {
    var keep = regex.exec(value);
    if (keep) {
      if (keep.index !== 0) return true;

      /* istanbul ignore if - never used (yet) */
      if (silent) return true;

      var toEat = keep[0];
      if (toEat.charAt(toEat.length - 1) === SPACE$1) {
        toEat = toEat.substring(0, toEat.length - 1);
      }
      var emoticon = toEat.trim();
      var emoticonNode = {
        type: 'emoticon',
        value: emoticon,
        data: {
          hName: 'img',
          hProperties: {
            src: emoticons[emoticon],
            alt: emoticon
          }
        }
      };

      if (emoticonClasses) {
        emoticonNode.data.hProperties.class = emoticonClasses;
      }

      eat(toEat)(emoticonNode);
    }
  }

  inlineTokenizer.locator = locator;

  var Parser = this.Parser;

  // Inject inlineTokenizer
  var inlineTokenizers = Parser.prototype.inlineTokenizers;
  var inlineMethods = Parser.prototype.inlineMethods;
  inlineTokenizers.emoticons = inlineTokenizer;
  inlineMethods.splice(inlineMethods.indexOf('text'), 0, 'emoticons');

  var Compiler = this.Compiler;
  if (Compiler) {
    var visitors = Compiler.prototype.visitors;
    if (!visitors) return;
    visitors.emoticon = function (node) {
      return node.value;
    };
  }
};

function escapeRegExp$2(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'); // eslint-disable-line no-useless-escape
}

var src$14 = function escapeEscaped() {
  var entitiesToKeep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['&'];

  if (!Array.isArray(entitiesToKeep) || !entitiesToKeep.length) {
    throw new Error('remark-escape-escaped needs to be passed a configuration array as option');
  }
  var pattern = entitiesToKeep.map(escapeRegExp$2).join('|');
  var regex = new RegExp('(' + pattern + ')');

  function locator(value, fromIndex) {
    var indices = entitiesToKeep.map(function (entity) {
      return value.indexOf(entity, fromIndex);
    });
    return Math.min.apply(Math, toConsumableArray(indices));
  }

  function inlineTokenizer(eat, value, silent) {
    var keep = regex.exec(value);
    if (keep) {
      if (keep.index !== 0) return true;

      /* istanbul ignore if - never used (yet) */
      if (silent) return true;

      eat(keep[0])({
        type: 'text',
        value: keep[0]
      });
    }
  }
  inlineTokenizer.locator = locator;

  var Parser = this.Parser;

  // Inject inlineTokenizer
  var inlineTokenizers = Parser.prototype.inlineTokenizers;
  var inlineMethods = Parser.prototype.inlineMethods;
  inlineTokenizers.keep_entities = inlineTokenizer;
  inlineMethods.splice(inlineMethods.indexOf('text'), 0, 'keep_entities');
};

var mainLineRegex = new RegExp(/((\+)|(\|)).+((\|)|(\+))/);
var totalMainLineRegex = new RegExp(/^((\+)|(\|)).+((\|)|(\+))$/);
var headerLineRegex = new RegExp(/^\+=[=+]+=\+$/);
var partLineRegex = new RegExp(/\+-[-+]+-\+/);
var separationLineRegex = new RegExp(/^\+-[-+]+-\+$/);

var src$16 = plugin$4;

// A small class helping table generation

var Table = function () {
  function Table(linesInfos) {
    classCallCheck(this, Table);

    this._parts = [];
    this._linesInfos = linesInfos;
    this.addPart();
  }

  createClass(Table, [{
    key: 'lastPart',
    value: function lastPart() {
      return this._parts[this._parts.length - 1];
    }
  }, {
    key: 'addPart',
    value: function addPart() {
      this._parts.push(new TablePart(this._linesInfos));
    }
  }]);
  return Table;
}();

var TablePart = function () {
  function TablePart(linesInfos) {
    classCallCheck(this, TablePart);

    this._rows = [];
    this._linesInfos = linesInfos;
    this.addRow();
  }

  createClass(TablePart, [{
    key: 'addRow',
    value: function addRow() {
      this._rows.push(new TableRow(this._linesInfos));
    }
  }, {
    key: 'removeLastRow',
    value: function removeLastRow() {
      this._rows.pop();
    }
  }, {
    key: 'lastRow',
    value: function lastRow() {
      return this._rows[this._rows.length - 1];
    }
  }, {
    key: 'updateWithMainLine',
    value: function updateWithMainLine(line, isEndLine) {
      // Update last row according to a line.
      var mergeChars = isEndLine ? '+|' : '|';
      var newCells = [this.lastRow()._cells[0]];
      for (var c = 1; c < this.lastRow()._cells.length; ++c) {
        var cell = this.lastRow()._cells[c];

        // Only cells with rowspan equals can be merged
        // Test if the char before the cell is a separation character
        if (cell._rowspan === newCells[newCells.length - 1]._rowspan && !mergeChars.includes(line[cell._startPosition - 1])) {
          newCells[newCells.length - 1].mergeWith(cell);
        } else {
          newCells.push(cell);
        }
      }
      this.lastRow()._cells = newCells;
    }
  }, {
    key: 'updateWithPartLine',
    value: function updateWithPartLine(line) {
      // Get cells not finished
      var remainingCells = [];
      for (var c = 0; c < this.lastRow()._cells.length; ++c) {
        var cell = this.lastRow()._cells[c];
        var partLine = line.substring(cell._startPosition - 1, cell._endPosition + 1);
        if (!isSeparationLine(partLine)) {
          cell._lines.push(line.substring(cell._startPosition, cell._endPosition));
          cell._rowspan += 1;
          remainingCells.push(cell);
        }
      }
      // Generate new row
      this.addRow();
      var newCells = [];
      for (var _c = 0; _c < remainingCells.length; ++_c) {
        var remainingCell = remainingCells[_c];
        for (var cc = 0; cc < this.lastRow()._cells.length; ++cc) {
          var _cell = this.lastRow()._cells[cc];
          if (_cell._endPosition < remainingCell._startPosition && !newCells.includes(_cell)) {
            newCells.push(_cell);
          }
        }
        newCells.push(remainingCell);
        for (var _cc = 0; _cc < this.lastRow()._cells.length; ++_cc) {
          var _cell2 = this.lastRow()._cells[_cc];
          if (_cell2._startPosition > remainingCell._endPosition && !newCells.includes(_cell2)) {
            newCells.push(_cell2);
          }
        }
      }

      // Remove duplicates
      for (var nc = 0; nc < newCells.length; ++nc) {
        var newCell = newCells[nc];
        for (var ncc = 0; ncc < newCells.length; ++ncc) {
          if (nc !== ncc) {
            var other = newCells[ncc];
            if (other._startPosition >= newCell._startPosition && other._endPosition <= newCell._endPosition) {
              if (other._lines.length === 0) {
                newCells.splice(ncc, 1);
                ncc -= 1;
                if (nc > ncc) {
                  nc -= 1;
                  newCell = newCells[nc];
                }
              }
            }
          }
        }
      }
      this.lastRow()._cells = newCells;
    }
  }]);
  return TablePart;
}();

var TableRow = function () {
  function TableRow(linesInfos) {
    classCallCheck(this, TableRow);

    this._linesInfos = linesInfos;
    this._cells = [];
    for (var i = 0; i < linesInfos.length - 1; ++i) {
      this._cells.push(new TableCell(linesInfos[i] + 1, linesInfos[i + 1]));
    }
  }

  createClass(TableRow, [{
    key: 'updateContent',
    value: function updateContent(line) {
      for (var c = 0; c < this._cells.length; ++c) {
        var cell = this._cells[c];
        cell._lines.push(line.substring(cell._startPosition, cell._endPosition));
      }
    }
  }]);
  return TableRow;
}();

var TableCell = function () {
  function TableCell(startPosition, endPosition) {
    classCallCheck(this, TableCell);

    this._startPosition = startPosition;
    this._endPosition = endPosition;
    this._colspan = 1;
    this._rowspan = 1;
    this._lines = [];
  }

  createClass(TableCell, [{
    key: 'mergeWith',
    value: function mergeWith(other) {
      this._endPosition = other._endPosition;
      this._colspan += other._colspan;
      var newLines = [];
      for (var l = 0; l < this._lines.length; ++l) {
        newLines.push(this._lines[l] + '|' + other._lines[l]);
      }
      this._lines = newLines;
    }
  }]);
  return TableCell;
}();

function merge(beforeTable, gridTable, afterTable) {
  // get the eaten text
  var total = beforeTable.join('\n');
  if (total.length) {
    total += '\n';
  }
  total += gridTable.join('\n');
  if (afterTable.join('\n').length) {
    total += '\n';
  }
  total += afterTable.join('\n');
  return total;
}

function isSeparationLine(line) {
  return separationLineRegex.exec(line);
}

function isHeaderLine(line) {
  return headerLineRegex.exec(line);
}

function isPartLine(line) {
  return partLineRegex.exec(line);
}

function findAll(content, characters) {
  var pos = [];
  for (var i = 0; i < content.length; ++i) {
    var char = content[i];
    if (characters.includes(char)) {
      pos.push(i);
    }
  }
  return pos;
}

function computePlainLineColumnsStartingPositions(line) {
  return findAll(line, '+|');
}

function mergeColumnsStartingPositions(allPos) {
  // Get all starting positions, allPos is an array of array of positions
  var positions = [];

  allPos.forEach(function (posRow) {
    return posRow.forEach(function (pos) {
      if (!positions.includes(pos)) {
        positions.push(pos);
      }
    });
  });

  return positions.sort(function (a, b) {
    return a - b;
  });
}

function computeColumnStartingPositions(lines) {
  var linesInfo = [];

  lines.forEach(function (line) {
    if (isHeaderLine(line) || isPartLine(line)) {
      linesInfo.push(computePlainLineColumnsStartingPositions(line));
    }
  });

  return mergeColumnsStartingPositions(linesInfo);
}

function extractTable(value, eat, tokenizer) {
  // Extract lines before the grid table
  var possibleGridTable = value.split('\n');
  var i = 0;
  var before = [];
  for (; i < possibleGridTable.length; ++i) {
    var line = possibleGridTable[i];
    if (isSeparationLine(line)) break;
    if (line.length === 0) break;
    before.push(line);
  }

  // Extract table
  if (!possibleGridTable[i + 1]) return [null, null, null, null];
  var lineLength = possibleGridTable[i + 1].length;
  var gridTable = [];
  var hasHeader = false;
  for (; i < possibleGridTable.length; ++i) {
    var _line = possibleGridTable[i];
    var isMainLine = totalMainLineRegex.exec(_line);
    // line is in table
    if (isMainLine && _line.length === lineLength) {
      var _isHeaderLine = headerLineRegex.exec(_line);
      if (_isHeaderLine && !hasHeader) hasHeader = true;
      // A table can't have 2 headers
      else if (_isHeaderLine && hasHeader) {
          break;
        }
      gridTable.push(_line);
    } else {
      // this line is not in the grid table.
      break;
    }
  }

  // if the last line is not a plain line
  if (!separationLineRegex.exec(gridTable[gridTable.length - 1])) {
    // Remove lines not in the table
    for (var j = gridTable.length - 1; j >= 0; --j) {
      var isSeparation = separationLineRegex.exec(gridTable[j]);
      if (isSeparation) break;
      gridTable.pop();
      i -= 1;
    }
  }

  // Extract lines after table
  var after = [];
  for (; i < possibleGridTable.length; ++i) {
    var _line2 = possibleGridTable[i];
    if (_line2.length === 0) break;
    after.push(_line2);
  }

  return [before, gridTable, after, hasHeader];
}

function extractTableContent(lines, linesInfos, hasHeader) {
  var table = new Table(linesInfos);

  for (var l = 0; l < lines.length; ++l) {
    var line = lines[l];
    // Get if the line separate the head of the table from the body
    var matchHeader = hasHeader & isHeaderLine(line) !== null;
    // Get if the line close some cells
    var isEndLine = matchHeader | isPartLine(line) !== null;

    if (isEndLine) {
      // It is a header, a plain line or a line with plain line part.
      // First, update the last row
      table.lastPart().updateWithMainLine(line, isEndLine);

      // Create the new row
      if (l !== 0) {
        if (matchHeader) {
          table.addPart();
        } else if (isSeparationLine(line)) {
          table.lastPart().addRow();
        } else {
          table.lastPart().updateWithPartLine(line);
        }
      }
      // update the last row
      table.lastPart().updateWithMainLine(line, isEndLine);
    } else {
      // it's a plain line
      table.lastPart().updateWithMainLine(line, isEndLine);
      table.lastPart().lastRow().updateContent(line);
    }
  }
  // Because the last line is a separation, the last row is always empty
  table.lastPart().removeLastRow();
  return table;
}

function generateTable(tableContent, now, tokenizer) {
  // Generate the gridTable node to insert in the AST
  var tableElt = {
    type: 'gridTable',
    children: [],
    data: {
      hName: 'table'
    }
  };

  var hasHeader = tableContent._parts.length > 1;

  for (var p = 0; p < tableContent._parts.length; ++p) {
    var part = tableContent._parts[p];
    var partElt = {
      type: 'tableHeader',
      children: [],
      data: {
        hName: hasHeader && p === 0 ? 'thead' : 'tbody'
      }
    };
    for (var r = 0; r < part._rows.length; ++r) {
      var row = part._rows[r];
      var rowElt = {
        type: 'tableRow',
        children: [],
        data: {
          hName: 'tr'
        }
      };
      for (var c = 0; c < row._cells.length; ++c) {
        var cell = row._cells[c];
        var cellElt = {
          type: 'tableCell',
          children: tokenizer.tokenizeBlock(cell._lines.map(function (e) {
            return e.trim();
          }).join('\n'), now),
          data: {
            hName: hasHeader && p === 0 ? 'th' : 'td',
            hProperties: {
              colspan: cell._colspan,
              rowspan: cell._rowspan
            }
          }
        };

        var endLine = r + cell._rowspan;
        if (cell._rowspan > 1 && endLine - 1 < part._rows.length) {
          for (var rs = 1; rs < cell._rowspan; ++rs) {
            for (var cc = 0; cc < part._rows[r + rs]._cells.length; ++cc) {
              var other = part._rows[r + rs]._cells[cc];
              if (cell._startPosition === other._startPosition && cell._endPosition === other._endPosition && cell._colspan === other._colspan && cell._rowspan === other._rowspan && cell._lines === other._lines) {
                part._rows[r + rs]._cells.splice(cc, 1);
              }
            }
          }
        }

        rowElt.children.push(cellElt);
      }
      partElt.children.push(rowElt);
    }
    tableElt.children.push(partElt);
  }

  return tableElt;
}

function gridTableTokenizer(eat, value, silent) {
  var keep = mainLineRegex.exec(value);
  if (!keep) return;

  var _extractTable = extractTable(value, eat, this),
      _extractTable2 = slicedToArray(_extractTable, 4),
      before = _extractTable2[0],
      gridTable = _extractTable2[1],
      after = _extractTable2[2],
      hasHeader = _extractTable2[3];

  if (!gridTable || gridTable.length < 3) return;

  var now = eat.now();
  var linesInfos = computeColumnStartingPositions(gridTable);
  var tableContent = extractTableContent(gridTable, linesInfos, hasHeader);
  var tableElt = generateTable(tableContent, now, this);
  var merged = merge(before, gridTable, after);

  // Because we can't add multiples blocs in one eat, I use a temp block
  var wrapperBlock = {
    type: 'element',
    tagName: 'WrapperBlock',
    children: []
  };
  if (before.length) {
    wrapperBlock.children.push(this.tokenizeBlock(before.join('\n'), now)[0]);
  }
  wrapperBlock.children.push(tableElt);
  if (after.length) {
    wrapperBlock.children.push(this.tokenizeBlock(after.join('\n'), now)[0]);
  }
  return eat(merged)(wrapperBlock);
}

function deleteWrapperBlock() {
  function one(node, index, parent) {
    if (!node.children) return;

    var newChildren = [];
    var replace = false;
    for (var c = 0; c < node.children.length; ++c) {
      var child = node.children[c];
      if (child.tagName === 'WrapperBlock' && child.type === 'element') {
        replace = true;
        for (var cc = 0; cc < child.children.length; ++cc) {
          newChildren.push(child.children[cc]);
        }
      } else {
        newChildren.push(child);
      }
    }
    if (replace) {
      node.children = newChildren;
    }
  }
  return one;
}

function transformer(tree) {
  // Remove the temporary block in which we previously wrapped the table parts
  unistUtilVisit(tree, deleteWrapperBlock());
}

function plugin$4() {
  var Parser = this.Parser;

  // Inject blockTokenizer
  var blockTokenizers = Parser.prototype.blockTokenizers;
  var blockMethods = Parser.prototype.blockMethods;
  blockTokenizers.grid_table = gridTableTokenizer;
  blockMethods.splice(blockMethods.indexOf('fencedCode') + 1, 0, 'grid_table');

  return transformer;
}

function shifter() {
  var shift = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

  return function (tree) {
    unistUtilVisit(tree, 'heading', function (node) {
      if (!shift) return;
      if (node.depth + shift <= 1) {
        node.depth = 1;
        return;
      }
      if (node.depth + shift >= 6) {
        node.depth = 6;
        return;
      }
      node.depth += shift;
    });
  };
}

var src$18 = shifter;

/*! https://mths.be/punycode v1.4.1 by @mathias */

/** Highest positive signed 32-bit float value */
var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

/** Bootstring parameters */
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80
var delimiter$1 = '-'; // '\x2D'

var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars
var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

/** Error messages */
var errors = {
  'overflow': 'Overflow: input needs wider integers to process',
  'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
  'invalid-input': 'Invalid input'
};

/** Convenience shortcuts */
var baseMinusTMin = base - tMin;
var floor$3 = Math.floor;
var stringFromCharCode = String.fromCharCode;

/*--------------------------------------------------------------------------*/

/**
 * A generic error utility function.
 * @private
 * @param {String} type The error type.
 * @returns {Error} Throws a `RangeError` with the applicable error message.
 */
function error(type) {
  throw new RangeError(errors[type]);
}

/**
 * A generic `Array#map` utility function.
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} callback The function that gets called for every array
 * item.
 * @returns {Array} A new array of values returned by the callback function.
 */
function map$1(array, fn) {
  var length = array.length;
  var result = [];
  while (length--) {
    result[length] = fn(array[length]);
  }
  return result;
}

/**
 * A simple `Array#map`-like wrapper to work with domain name strings or email
 * addresses.
 * @private
 * @param {String} domain The domain name or email address.
 * @param {Function} callback The function that gets called for every
 * character.
 * @returns {Array} A new string of characters returned by the callback
 * function.
 */
function mapDomain(string, fn) {
  var parts = string.split('@');
  var result = '';
  if (parts.length > 1) {
    // In email addresses, only the domain name should be punycoded. Leave
    // the local part (i.e. everything up to `@`) intact.
    result = parts[0] + '@';
    string = parts[1];
  }
  // Avoid `split(regex)` for IE8 compatibility. See #17.
  string = string.replace(regexSeparators, '\x2E');
  var labels = string.split('.');
  var encoded = map$1(labels, fn).join('.');
  return result + encoded;
}

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */
function ucs2decode(string) {
  var output = [],
      counter = 0,
      length = string.length,
      value,
      extra;
  while (counter < length) {
    value = string.charCodeAt(counter++);
    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // high surrogate, and there is a next character
      extra = string.charCodeAt(counter++);
      if ((extra & 0xFC00) == 0xDC00) {
        // low surrogate
        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // unmatched surrogate; only append this code unit, in case the next
        // code unit is the high surrogate of a surrogate pair
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
}

/**
 * Converts a digit/integer into a basic code point.
 * @see `basicToDigit()`
 * @private
 * @param {Number} digit The numeric value of a basic code point.
 * @returns {Number} The basic code point whose value (when used for
 * representing integers) is `digit`, which needs to be in the range
 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
 * used; else, the lowercase form is used. The behavior is undefined
 * if `flag` is non-zero and `digit` has no uppercase form.
 */
function digitToBasic(digit, flag) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
}

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 * @private
 */
function adapt(delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor$3(delta / damp) : delta >> 1;
  delta += floor$3(delta / numPoints);
  for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
    delta = floor$3(delta / baseMinusTMin);
  }
  return floor$3(k + (baseMinusTMin + 1) * delta / (delta + skew));
}

/**
 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
 * symbols.
 * @memberOf punycode
 * @param {String} input The Punycode string of ASCII-only symbols.
 * @returns {String} The resulting string of Unicode symbols.
 */


/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 * @memberOf punycode
 * @param {String} input The string of Unicode symbols.
 * @returns {String} The resulting Punycode string of ASCII-only symbols.
 */
function encode(input) {
  var n,
      delta,
      handledCPCount,
      basicLength,
      bias,
      j,
      m,
      q,
      k,
      t,
      currentValue,
      output = [],

  /** `inputLength` will hold the number of code points in `input`. */
  inputLength,

  /** Cached calculation results */
  handledCPCountPlusOne,
      baseMinusT,
      qMinusT;

  // Convert the input in UCS-2 to Unicode
  input = ucs2decode(input);

  // Cache the length
  inputLength = input.length;

  // Initialize the state
  n = initialN;
  delta = 0;
  bias = initialBias;

  // Handle the basic code points
  for (j = 0; j < inputLength; ++j) {
    currentValue = input[j];
    if (currentValue < 0x80) {
      output.push(stringFromCharCode(currentValue));
    }
  }

  handledCPCount = basicLength = output.length;

  // `handledCPCount` is the number of code points that have been handled;
  // `basicLength` is the number of basic code points.

  // Finish the basic string - if it is not empty - with a delimiter
  if (basicLength) {
    output.push(delimiter$1);
  }

  // Main encoding loop:
  while (handledCPCount < inputLength) {

    // All non-basic code points < n have been handled already. Find the next
    // larger one:
    for (m = maxInt, j = 0; j < inputLength; ++j) {
      currentValue = input[j];
      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    }

    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
    // but guard against overflow
    handledCPCountPlusOne = handledCPCount + 1;
    if (m - n > floor$3((maxInt - delta) / handledCPCountPlusOne)) {
      error('overflow');
    }

    delta += (m - n) * handledCPCountPlusOne;
    n = m;

    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];

      if (currentValue < n && ++delta > maxInt) {
        error('overflow');
      }

      if (currentValue == n) {
        // Represent delta as a generalized variable-length integer
        for (q = delta, k = base;; /* no condition */k += base) {
          t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
          if (q < t) {
            break;
          }
          qMinusT = q - t;
          baseMinusT = base - t;
          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
          q = floor$3(qMinusT / baseMinusT);
        }

        output.push(stringFromCharCode(digitToBasic(q, 0)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }

    ++delta;
    ++n;
  }
  return output.join('');
}

/**
 * Converts a Punycode string representing a domain name or an email address
 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
 * it doesn't matter if you call it on a string that has already been
 * converted to Unicode.
 * @memberOf punycode
 * @param {String} input The Punycoded domain name or email address to
 * convert to Unicode.
 * @returns {String} The Unicode representation of the given Punycode
 * string.
 */


/**
 * Converts a Unicode string representing a domain name or an email address to
 * Punycode. Only the non-ASCII parts of the domain name will be converted,
 * i.e. it doesn't matter if you call it with a domain that's already in
 * ASCII.
 * @memberOf punycode
 * @param {String} input The domain name or email address to convert, as a
 * Unicode string.
 * @returns {String} The Punycode representation of the given domain name or
 * email address.
 */
function toASCII(input) {
  return mapDomain(input, function (string) {
    return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
  });
}

/**
 * An object of methods to convert from JavaScript's internal character
 * representation (UCS-2) to Unicode code points, and back.
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode
 * @type Object
 */

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty$3(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
var isArray$4 = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};
function stringifyPrimitive(v) {
  switch (typeof v === 'undefined' ? 'undefined' : _typeof(v)) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
}

function stringify$3(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
    return map$2(objectKeys$1(obj), function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray$4(obj[k])) {
        return map$2(obj[k], function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
}

function map$2(xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys$1 = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

function parse$4(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr,
        vstr,
        k,
        v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty$3(obj, k)) {
      obj[k] = v;
    } else if (isArray$4(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
}

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var url$3 = {
  parse: urlParse,
  resolve: urlResolve,
  resolveObject: urlResolveObject,
  format: urlFormat,
  Url: Url
};
function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i;
var portPattern = /:[0-9]*$/;
var simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
var delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'];
var unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims);
var autoEscape = ['\''].concat(unwise);
var nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape);
var hostEndingChars = ['/', '?', '#'];
var hostnameMaxLen = 255;
var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
var unsafeProtocol = {
  'javascript': true,
  'javascript:': true
};
var hostlessProtocol = {
  'javascript': true,
  'javascript:': true
};
var slashedProtocol = {
  'http': true,
  'https': true,
  'ftp': true,
  'gopher': true,
  'file': true,
  'http:': true,
  'https:': true,
  'ftp:': true,
  'gopher:': true,
  'file:': true
};

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && isObject$1(url) && url instanceof Url) return url;

  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}
Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
  return parse$5(this, url, parseQueryString, slashesDenoteHost);
};

function parse$5(self, url, parseQueryString, slashesDenoteHost) {
  if (!isString$1(url)) {
    throw new TypeError('Parameter \'url\' must be a string, not ' + (typeof url === 'undefined' ? 'undefined' : _typeof(url)));
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      self.path = rest;
      self.href = rest;
      self.pathname = simplePath[1];
      if (simplePath[2]) {
        self.search = simplePath[2];
        if (parseQueryString) {
          self.query = parse$4(self.search.substr(1));
        } else {
          self.query = self.search.substr(1);
        }
      } else if (parseQueryString) {
        self.search = '';
        self.query = {};
      }
      return self;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    self.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      self.slashes = true;
    }
  }
  var i, hec, l, p;
  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (i = 0; i < hostEndingChars.length; i++) {
      hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      self.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (i = 0; i < nonHostChars.length; i++) {
      hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1) hostEnd = rest.length;

    self.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    parseHost(self);

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    self.hostname = self.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = self.hostname[0] === '[' && self.hostname[self.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = self.hostname.split(/\./);
      for (i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            self.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (self.hostname.length > hostnameMaxLen) {
      self.hostname = '';
    } else {
      // hostnames are always lower case.
      self.hostname = self.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      self.hostname = toASCII(self.hostname);
    }

    p = self.port ? ':' + self.port : '';
    var h = self.hostname || '';
    self.host = h + p;
    self.href += self.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      self.hostname = self.hostname.substr(1, self.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1) continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }

  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    self.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    self.search = rest.substr(qm);
    self.query = rest.substr(qm + 1);
    if (parseQueryString) {
      self.query = parse$4(self.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    self.search = '';
    self.query = {};
  }
  if (rest) self.pathname = rest;
  if (slashedProtocol[lowerProto] && self.hostname && !self.pathname) {
    self.pathname = '/';
  }

  //to support http.request
  if (self.pathname || self.search) {
    p = self.pathname || '';
    var s = self.search || '';
    self.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  self.href = format$1(self);
  return self;
}

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (isString$1(obj)) obj = parse$5({}, obj);
  return format$1(obj);
}

function format$1(self) {
  var auth = self.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = self.protocol || '',
      pathname = self.pathname || '',
      hash = self.hash || '',
      host = false,
      query = '';

  if (self.host) {
    host = auth + self.host;
  } else if (self.hostname) {
    host = auth + (self.hostname.indexOf(':') === -1 ? self.hostname : '[' + this.hostname + ']');
    if (self.port) {
      host += ':' + self.port;
    }
  }

  if (self.query && isObject$1(self.query) && Object.keys(self.query).length) {
    query = stringify$3(self.query);
  }

  var search = self.search || query && '?' + query || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (self.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
}

Url.prototype.format = function () {
  return format$1(this);
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function (relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function (relative) {
  if (isString$1(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol') result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }
  var relPath;
  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift())) {}
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];
  relPath = relative.pathname && relative.pathname.split('/') || [];
  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }
  var authInHost;
  if (isRelAbs) {
    // it's absolute.
    result.host = relative.host || relative.host === '' ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/';

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || result.host && srcPath.length;

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!isNull(result.pathname) || !isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function () {
  return parseHost(this);
};

function parseHost(self) {
  var host = self.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      self.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) self.hostname = host;
}



var url$4 = Object.freeze({
	parse: urlParse,
	resolve: urlResolve,
	resolveObject: urlResolveObject,
	format: urlFormat,
	default: url$3,
	Url: Url
});

var require$$0$34 = ( url$4 && url$3 ) || url$4;

var format$2 = require$$0$34.format;
var parse$6 = require$$0$34.parse;
var URLSearchParams = require$$0$34.URLSearchParams;


var src$20 = function plugin(opts) {
  if ((typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) !== 'object' || !Object.keys(opts).length) {
    throw new Error('remark-iframes needs to be passed a configuration object as option');
  }

  function detectProvider(url) {
    var hostname = parse$6(url).hostname;
    return opts[hostname];
  }

  function blockTokenizer(eat, value, silent) {
    if (!value.startsWith('!(http')) return;

    var eatenValue = '';
    var url = '';
    var specialChars = ['!', '(', ')'];
    for (var i = 0; i < value.length && value[i - 1] !== ')'; i++) {
      eatenValue += value[i];
      if (!specialChars.includes(value[i])) {
        url += value[i];
      }
    }

    /* istanbul ignore if - never used (yet) */
    if (silent) return true;

    var provider = detectProvider(url);
    if (!provider || provider.disabled === true || provider.match && provider.match instanceof RegExp && !provider.match.test(url)) {
      return eat(eatenValue)({
        type: 'paragraph',
        children: [{
          type: 'text',
          value: eatenValue
        }]
      });
    }

    var finalUrl = computeFinalUrl(provider, url);
    var thumbnail = computeThumbnail(provider, finalUrl);
    eat(eatenValue)({
      type: 'iframe',
      src: url,
      data: {
        hName: provider.tag,
        hProperties: {
          src: finalUrl,
          width: provider.width,
          height: provider.height,
          allowfullscreen: true,
          frameborder: '0'
        },
        thumbnail: thumbnail
      }
    });
  }

  var Parser = this.Parser;

  // Inject blockTokenizer
  var blockTokenizers = Parser.prototype.blockTokenizers;
  var blockMethods = Parser.prototype.blockMethods;
  blockTokenizers.iframes = blockTokenizer;
  blockMethods.splice(blockMethods.indexOf('blockquote') + 1, 0, 'iframes');

  var Compiler = this.Compiler;
  if (Compiler) {
    var visitors = Compiler.prototype.visitors;
    if (!visitors) return;
    visitors.iframe = function (node) {
      return '!(' + node.src + ')';
    };
  }
};

function computeFinalUrl(provider, url) {
  var finalUrl = url;
  var parsed = parse$6(finalUrl);

  if (provider.droppedQueryParameters && parsed.search) {
    var search = new URLSearchParams(parsed.search);
    provider.droppedQueryParameters.forEach(function (ignored) {
      return search.delete(ignored);
    });
    parsed.search = search.toString();
    finalUrl = format$2(parsed);
  }

  if (provider.replace && provider.replace.length) {
    provider.replace.forEach(function (rule) {
      var _rule = slicedToArray(rule, 2),
          from = _rule[0],
          to = _rule[1];

      if (from && to) finalUrl = finalUrl.replace(from, to);
      parsed = parse$6(finalUrl);
    });
    finalUrl = format$2(parsed);
  }

  if (provider.removeFileName) {
    parsed.pathname = parsed.pathname.substring(0, parsed.pathname.lastIndexOf('/'));
    finalUrl = format$2(parsed);
  }

  if (provider.removeAfter && finalUrl.includes(provider.removeAfter)) {
    finalUrl = finalUrl.substring(0, finalUrl.indexOf(provider.removeAfter));
  }

  if (provider.append) {
    finalUrl += provider.append;
  }

  return finalUrl;
}

function computeThumbnail(provider, url) {
  var thumbnailURL = '';
  var thumbnailConfig = provider.thumbnail;
  if (thumbnailConfig && thumbnailConfig.format) {
    thumbnailURL = thumbnailConfig.format;
    Object.keys(thumbnailConfig).filter(function (key) {
      return key !== 'format';
    }).forEach(function (key) {
      var search = new RegExp('{' + key + '}', 'g');
      var replace = new RegExp(thumbnailConfig[key]).exec(url);
      if (replace) thumbnailURL = thumbnailURL.replace(search, replace[1]);
    });
  }
  return thumbnailURL;
}

var C_PIPE$1 = '|';
var DOUBLE$1 = '||';

function locator(value, fromIndex) {
  var index = value.indexOf(DOUBLE$1, fromIndex);
  return index;
}

function plugin$5() {
  function inlineTokenizer(eat, value, silent) {
    if (!this.options.gfm || !value.startsWith(DOUBLE$1) || value.startsWith(C_PIPE$1.repeat(4)) || isWhitespaceCharacter(value.charAt(2))) {
      return;
    }

    var character = '';
    var previous = '';
    var preceding = '';
    var subvalue = '';
    var index = 1;
    var length = value.length;
    var now = eat.now();
    now.column += 2;
    now.offset += 2;

    while (++index < length) {
      character = value.charAt(index);

      if (character === C_PIPE$1 && previous === C_PIPE$1 && (!preceding || !isWhitespaceCharacter(preceding))) {

        /* istanbul ignore if - never used (yet) */
        if (silent) return true;

        return eat(DOUBLE$1 + subvalue + DOUBLE$1)({
          type: 'kbd',
          children: this.tokenizeInline(subvalue, now),
          data: {
            hName: 'kbd'
          }
        });
      }

      subvalue += previous;
      preceding = previous;
      previous = character;
    }
  }
  inlineTokenizer.locator = locator;

  var Parser = this.Parser;

  // Inject inlineTokenizer
  var inlineTokenizers = Parser.prototype.inlineTokenizers;
  var inlineMethods = Parser.prototype.inlineMethods;
  inlineTokenizers.kbd = inlineTokenizer;
  inlineMethods.splice(inlineMethods.indexOf('text'), 0, 'kbd');

  var Compiler = this.Compiler;

  // Stringify
  if (Compiler) {
    var visitors = Compiler.prototype.visitors;
    visitors.kbd = function (node) {
      return '||' + this.all(node).join('') + '||';
    };
  }
}

var src$22 = plugin$5;

function locator$1(value, fromIndex) {
  return value.indexOf('$', fromIndex);
}

var ESCAPED_INLINE_MATH = /^\\\$/;
var INLINE_MATH = /^\$((?:\\\$|[^$])+)\$/;
var INLINE_MATH_DOUBLE = /^\$\$((?:\\\$|[^$])+)\$\$/;

var inline = function inlinePlugin(opts) {
  function inlineTokenizer(eat, value, silent) {
    var isDouble = true;
    var match = INLINE_MATH_DOUBLE.exec(value);
    if (!match) {
      match = INLINE_MATH.exec(value);
      isDouble = false;
    }
    var escaped = ESCAPED_INLINE_MATH.exec(value);

    if (escaped) {
      /* istanbul ignore if - never used (yet) */
      if (silent) {
        return true;
      }
      return eat(escaped[0])({
        type: 'text',
        value: '$'
      });
    }

    if (value.slice(-2) === '\\$') {
      return eat(value)({
        type: 'text',
        value: value.slice(0, -2) + '$'
      });
    }

    if (match) {
      /* istanbul ignore if - never used (yet) */
      if (silent) {
        return true;
      }

      var endingDollarInBackticks = match[0].includes('`') && value.slice(match[0].length).includes('`');
      if (endingDollarInBackticks) {
        var toEat = value.slice(0, value.indexOf('`'));
        return eat(toEat)({
          type: 'text',
          value: toEat
        });
      }

      var trimmedContent = match[1].trim();

      return eat(match[0])({
        type: 'inlineMath',
        value: trimmedContent,
        data: {
          hName: 'span',
          hProperties: {
            className: 'inlineMath' + (isDouble && opts.inlineMathDouble ? ' inlineMathDouble' : '')
          },
          hChildren: [{
            type: 'text',
            value: trimmedContent
          }]
        }
      });
    }
  }
  inlineTokenizer.locator = locator$1;

  var Parser = this.Parser;

  // Inject inlineTokenizer
  var inlineTokenizers = Parser.prototype.inlineTokenizers;
  var inlineMethods = Parser.prototype.inlineMethods;
  inlineTokenizers.math = inlineTokenizer;
  inlineMethods.splice(inlineMethods.indexOf('text'), 0, 'math');

  var Compiler = this.Compiler;

  // Stringify for math inline
  if (Compiler != null) {
    var visitors = Compiler.prototype.visitors;
    visitors.inlineMath = function (node) {
      return '$' + node.value + '$';
    };
  }
};

var C_NEWLINE$16 = '\n';
var C_TAB$13 = '\t';
var C_SPACE$13 = ' ';
var C_DOLLAR = '$';

var MIN_FENCE_COUNT$1 = 2;
var CODE_INDENT_COUNT$2 = 4;

var block$1 = function blockPlugin(opts) {
  function blockTokenizer(eat, value, silent) {
    var length = value.length + 1;
    var index = 0;
    var subvalue = '';
    var fenceCount;
    var marker;
    var character;
    var queue;
    var content;
    var exdentedContent;
    var closing;
    var exdentedClosing;
    var indent;
    var now;

    /* Eat initial spacing. */
    while (index < length) {
      character = value.charAt(index);

      if (character !== C_SPACE$13 && character !== C_TAB$13) {
        break;
      }

      subvalue += character;
      index++;
    }

    indent = index;

    /* Eat the fence. */
    character = value.charAt(index);

    if (character !== C_DOLLAR) {
      return;
    }

    index++;
    marker = character;
    fenceCount = 1;
    subvalue += character;

    while (index < length) {
      character = value.charAt(index);

      if (character !== marker) {
        break;
      }

      subvalue += character;
      fenceCount++;
      index++;
    }

    if (fenceCount < MIN_FENCE_COUNT$1) {
      return;
    }

    /* Eat everything after the fence. */
    while (index < length) {
      character = value.charAt(index);

      if (character === C_NEWLINE$16) {
        break;
      }
      if (character === C_DOLLAR) {
        return;
      }

      subvalue += character;
      index++;
    }

    character = value.charAt(index);

    if (silent) {
      return true;
    }

    now = eat.now();
    now.column += subvalue.length;
    now.offset += subvalue.length;

    queue = closing = exdentedClosing = content = exdentedContent = '';

    /* Eat content. */
    while (index < length) {
      character = value.charAt(index);
      content += closing;
      exdentedContent += exdentedClosing;
      closing = exdentedClosing = '';

      if (character !== C_NEWLINE$16) {
        content += character;
        exdentedClosing += character;
        index++;
        continue;
      }

      /* Add the newline to `subvalue` if its the first
      * character.  Otherwise, add it to the `closing`
      * queue. */
      if (content) {
        closing += character;
        exdentedClosing += character;
      } else {
        subvalue += character;
      }

      queue = '';
      index++;

      while (index < length) {
        character = value.charAt(index);

        if (character !== C_SPACE$13) {
          break;
        }

        queue += character;
        index++;
      }

      closing += queue;
      exdentedClosing += queue.slice(indent);

      if (queue.length >= CODE_INDENT_COUNT$2) {
        continue;
      }

      queue = '';

      while (index < length) {
        character = value.charAt(index);

        if (character !== marker) {
          break;
        }

        queue += character;
        index++;
      }

      closing += queue;
      exdentedClosing += queue;

      if (queue.length < fenceCount) {
        continue;
      }

      queue = '';

      while (index < length) {
        character = value.charAt(index);

        if (character === C_NEWLINE$16) {
          break;
        }

        closing += character;
        exdentedClosing += character;
        index++;
      }

      break;
    }

    subvalue += content + closing;
    var trimmedContent = trimTrailingLines_1(exdentedContent);
    return eat(subvalue)({
      type: 'math',
      value: trimmedContent,
      data: {
        hName: 'div',
        hProperties: {
          className: 'math'
        },
        hChildren: [{
          type: 'text',
          value: trimmedContent
        }]
      }
    });
  }

  var Parser = this.Parser;

  // Inject blockTokenizer
  var blockTokenizers = Parser.prototype.blockTokenizers;
  var blockMethods = Parser.prototype.blockMethods;
  blockTokenizers.math = blockTokenizer;
  blockMethods.splice(blockMethods.indexOf('fencedCode') + 1, 0, 'math');

  // Inject math to interrupt rules
  var interruptParagraph = Parser.prototype.interruptParagraph;
  var interruptList = Parser.prototype.interruptList;
  var interruptBlockquote = Parser.prototype.interruptBlockquote;
  interruptParagraph.splice(interruptParagraph.indexOf('fencedCode') + 1, 0, ['math']);
  interruptList.splice(interruptList.indexOf('fencedCode') + 1, 0, ['math']);
  interruptBlockquote.splice(interruptBlockquote.indexOf('fencedCode') + 1, 0, ['math']);

  var Compiler = this.Compiler;

  // Stringify for math block
  if (Compiler != null) {
    var visitors = Compiler.prototype.visitors;
    visitors.math = function (node) {
      return '$$\n' + node.value + '\n$$';
    };
  }
};

var remarkMath = function mathPlugin() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  block$1.call(this, opts);
  inline.call(this, opts);
};

function plugin$6() {
  return transformer$1;
}

function transformer$1(tree) {
  var footnotes = {};
  unistUtilVisit(tree, 'footnote', convert$1);

  unistUtilVisit(tree, 'footnoteDefinition', createIds(footnotes));

  unistUtilVisit(tree, 'footnoteReference', replaceIds(footnotes));
}

function convert$1(node, index, parent) {
  var id = autoId(node.position.start);
  var footnoteDefinition = {
    type: 'footnoteDefinition',
    identifier: id,
    children: node.children
  };
  var footnoteReference = {
    type: 'footnoteReference',
    identifier: id
  };
  parent.children.splice(index, 1, footnoteReference, footnoteDefinition);
}

function createIds(footnotes) {
  return function (node, index, parent) {
    var identifier = node.identifier;

    if (!footnotes.hasOwnProperty(identifier)) {
      footnotes[identifier] = Object.keys(footnotes).length + 1;
    }
    node.identifier = footnotes[identifier];
  };
}

function replaceIds(footnotes) {
  return function (node, index, parent) {
    var identifier = node.identifier;

    if (!footnotes.hasOwnProperty(identifier)) {
      footnotes[identifier] = Object.keys(footnotes).length + 1;
    }
    node.identifier = footnotes[identifier];
  };
}

function autoId(node) {
  var line = node.line,
      column = node.column,
      offset = node.offset;

  return 'l' + line + 'c' + column + 'o' + offset;
}

var src$24 = plugin$6;

var helpMsg = 'remark-ping: expected configuration to be passed: {\n  pingUsername: (username) => bool,\n  userURL: (username) => string\n}';

var src$26 = function plugin(_ref) {
  var pingUsername = _ref.pingUsername,
      userURL = _ref.userURL,
      _ref$usernameRegex = _ref.usernameRegex,
      usernameRegex = _ref$usernameRegex === undefined ? /@(?:\*\*([^*]+)\*\*|(\w+))/ : _ref$usernameRegex;

  if (typeof pingUsername !== 'function' || typeof userURL !== 'function') {
    throw new Error(helpMsg);
  }

  function inlineTokenizer(eat, value, silent) {
    var keep = usernameRegex.exec(value);
    if (!keep || keep.index > 0) return;

    var total = keep[0];
    var username = keep[2] ? keep[2] : keep[1];

    if (pingUsername(username) === true) {
      var url = userURL(username);

      return eat(total)({
        type: 'ping',
        username: username,
        url: url,
        data: {
          hName: 'a',
          hProperties: {
            href: url,
            rel: 'nofollow',
            class: 'ping ping-link'
          }
        },
        children: [{
          type: 'text',
          value: '@'
        }, {
          type: 'emphasis',
          data: {
            hName: 'span',
            hProperties: {
              class: 'ping-username'
            }
          },
          children: [{
            type: 'text',
            value: username
          }]
        }]
      });
    } else {
      return eat(total[0])({
        type: 'text',
        value: total[0]
      });
    }
  }

  function locator(value, fromIndex) {
    var keep = usernameRegex.exec(value, fromIndex);
    if (keep) {
      return value.indexOf('@', keep.index);
    }
    return -1;
  }

  inlineTokenizer.locator = locator;

  var Parser = this.Parser;

  // Inject inlineTokenizer
  var inlineTokenizers = Parser.prototype.inlineTokenizers;
  var inlineMethods = Parser.prototype.inlineMethods;
  inlineTokenizers.ping = inlineTokenizer;
  inlineMethods.splice(inlineMethods.indexOf('text'), 0, 'ping');

  var Compiler = this.Compiler;

  // Stringify
  if (Compiler) {
    var visitors = Compiler.prototype.visitors;
    visitors.ping = function (node) {
      if (!node.username.includes(' ')) {
        return '@' + node.username;
      }
      return '@**' + node.username + '**';
    };
  }

  return function (tree, file) {
    // mark pings in blockquotes, later on we'll need that info to avoid pinging from quotes
    unistUtilVisit(tree, 'blockquote', markInBlockquotes);
    // remove ping links from pings already in links
    unistUtilVisit(tree, 'link', function (node) {
      unistUtilVisit(node, 'ping', function (ping, index) {
        ping.data.hName = 'span';
        ping.data.hProperties = { class: 'ping ping-in-link' };
      });
    });
    unistUtilVisit(tree, 'ping', function (node) {
      if (!node.__inBlockquote) {
        if (!file.data[node.type]) {
          file.data[node.type] = [];
        }
        // collect usernames to ping, they will be made available on the vfile
        // for some backend to act on
        file.data[node.type].push(node.username);
      }
    });
  };
};

function markInBlockquotes(node) {
  mark(node);

  if (node.children) {
    node.children.map(function (n, i) {
      return markInBlockquotes(n);
    });
  }
}

function mark(node) {
  if (node.type === 'ping') node.__inBlockquote = true;
}

var SPACE$2 = ' ';
var markers = {
  '~': 'sub',
  '^': 'sup'
};

function locator$2(value, fromIndex) {
  var index = -1;
  var found = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Object.keys(markers)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var marker = _step.value;

      index = value.indexOf(marker, fromIndex);
      if (index !== -1) {
        found.push(index);
        continue;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (found.length) {
    found.sort(function (a, b) {
      return a - b;
    });
    return found[0];
  }

  return -1;
}

function inlinePlugin$1() {
  function inlineTokenizer(eat, value, silent) {
    // allow escaping of all markers
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = Object.keys(markers)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _marker = _step2.value;

        if (!this.escape.includes(_marker)) this.escape.push(_marker);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    var marker = value[0];
    var now = eat.now();
    now.column += 1;
    now.offset += 1;

    if (markers.hasOwnProperty(marker) && !value.startsWith(marker + SPACE$2) && !value.startsWith(marker + marker)) {
      var endMarkerIndex = 1;
      for (; value[endMarkerIndex] !== marker && endMarkerIndex < value.length; endMarkerIndex++) {}

      // if it's actually empty, don't tokenize (disallows e.g. <sup></sup>)
      if (endMarkerIndex === value.length) return;

      /* istanbul ignore if - never used (yet) */
      if (silent) return true;

      eat(value.substring(0, endMarkerIndex + 1))({
        type: markers[marker],
        children: this.tokenizeInline(value.substring(1, endMarkerIndex), now),
        data: {
          hName: markers[marker]
        }
      });
    }
  }

  inlineTokenizer.locator = locator$2;

  var Parser = this.Parser;

  // Inject inlineTokenizer
  var inlineTokenizers = Parser.prototype.inlineTokenizers;
  var inlineMethods = Parser.prototype.inlineMethods;
  inlineTokenizers.sub_super = inlineTokenizer;
  inlineMethods.splice(inlineMethods.indexOf('text'), 0, 'sub_super');
}

var src$28 = inlinePlugin$1;

/**
 * Create new transform function
 *
 * @constructor
 * @return {object:{exec:fn,use:fn}}
 * @return {fn:exec}
 * @api public
 */

var textr = function textr(defaults) {

  /**
   * list of registred middlewares
   * @api public
   */
  var mws = [];

  /**
   * Default options will be passed to either of the middlewares as second param.
   * You can redefine props by passing your options to `tf.exec()` as second arg.
   * @api private
   */
  defaults = defaults || {};

  /**
   * expose public interface of the textr
   *
   * @example
   *
   *      // functional style
   *      text = textr()
   *        // register plugins
   *        .use(quotes)
   *        .use(capitalize)
   *        .exec(text)
   *
   *      // save transformer to reuse
   *      tf = textr()
   *        // register plugins
   *        .use(quotes, elipses, capitalize)
   *      ;
   *      return ['Hello', 'world'].map(tf);
   *
   * @constructor
   * @alias exec
   */
  function api() {
    return exec.apply(null, arguments);
  }

  /**
   * Expose `exec`, `use` and `mws` as properties
   * of the `api`
   *
   * @alias exec
   * @alias use
   * @alias mws
   */
  api.exec = exec;
  api.use = use;
  api.mws = mws;

  return api;

  /**
   * process given text by the middlewares
   * @param {string} text
   * @param {Object} options Options to merge with defaults
   * @return {string} text
   * @api public
   */
  function exec(text, options) {
    options = clone$1(defaults, options);
    var l = mws.length;
    for (var i = 0; i < l; i++) {
      text = mws[i].apply(text, [text, options]) || text;
    }
    return text;
  }

  /**
   * Register either middleware and array of middlewares
   * @param {...fn} ...middlewares
   * @return {api}
   * @api public
   */
  function use() {
    [].push.apply(mws, arguments);
    return api;
  }
};

/**
 * merge given objects to new one. Returns clone
 * @param {Object} ...objects Objects to clone into the one new
 * @return {Object}
 */
function clone$1() {
  var res = {};
  var length = arguments.length;
  for (var i = 0; i < length; i++) {
    var obj = arguments[i];
    for (var k in obj) {
      res[k] = obj[k];
    }
  }
  return res;
}

var remarkTextr = plugin$7;

function plugin$7() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$plugins = _ref.plugins,
      plugins = _ref$plugins === undefined ? [] : _ref$plugins,
      _ref$options = _ref.options,
      options = _ref$options === undefined ? {} : _ref$options;

  var fn = void 0;

  return function transformer(tree) {
    fn = plugins.reduce(function (processor, p) {
      return processor.use(typeof p === 'string' ? commonjsRequire(p) : p);
    }, textr(options));

    unistUtilVisit(tree, 'text', visitor);
  };

  function visitor(node) {
    node.value = fn(node.value);
  }
}

var src$30 = function alignPlugin() {

  function headingTokenizer(eat, value, silent) {
    /* istanbul ignore if - never used (yet) */
    if (silent) return true;

    var lines = value.match(/.*\n/g) || [];
    // Check if first line is not empty,
    // here, we don't use \s because a line with a tab is not empty
    if (/^$| +/.test(lines[0])) return;
    // and if the second line is a heading with trailing spaces
    if (!/^(-+|=+)\s+\n?$/.test(lines[1])) return;

    var now = eat.now();
    var head = lines[0] + lines[1];
    var add = eat(head);
    var exit = this.enterBlock();
    exit();

    return add({
      type: 'heading',
      depth: lines[1][0] === '=' ? 1 : 2,
      children: this.tokenizeInline(lines[0].slice(0, -1), now)
    });
  }

  var Parser = this.Parser;

  // Inject blockTokenizer
  var blockTokenizers = Parser.prototype.blockTokenizers;
  var blockMethods = Parser.prototype.blockMethods;
  blockTokenizers.heading_blocks = headingTokenizer;
  blockMethods.splice(blockMethods.indexOf('fencedCode') + 1, 0, 'heading_blocks');
};

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty$4 = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject$1(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject$1(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty$4.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

var unistBuilder = function u(type, props, value) {
  if (value == null && ((typeof props === 'undefined' ? 'undefined' : _typeof(props)) != 'object' || Array.isArray(props))) {
    value = props;
    props = {};
  }

  return objectAssign({}, props, { type: String(type) }, value != null && (Array.isArray(value) ? { children: value } : { value: String(value) }));
};

var unistUtilPosition = createCommonjsModule(function (module, exports) {
  var position = exports;

  position.start = positionFactory('start');
  position.end = positionFactory('end');

  /* Factory to get a position at `type`. */
  function positionFactory(type) {
    return pos;

    /* Get a position in `node` at a bound `type`. */
    function pos(node) {
      var pos = node && node.position && node.position[type] || {};

      return {
        line: pos.line || null,
        column: pos.column || null,
        offset: isNaN(pos.offset) ? null : pos.offset
      };
    }
  }
});

/* Expose. */

var unistUtilGenerated = generated;

/* Detect if a node was available in the original document. */
function generated(node) {
  var position = optional(optional(node).position);
  var start = optional(position.start);
  var end = optional(position.end);

  return !start.line || !start.column || !end.line || !end.column;
}

/* Return `value` if it’s an object, an empty object
 * otherwise. */
function optional(value) {
  return value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? value : {};
}

var mdastUtilDefinitions = getDefinitionFactory;

var own$5 = {}.hasOwnProperty;

/* Get a definition in `node` by `identifier`. */
function getDefinitionFactory(node, options) {
  return getterFactory(gather(node, options));
}

/* Gather all definitions in `node` */
function gather(node, options) {
  var cache = {};

  if (!node || !node.type) {
    throw new Error('mdast-util-definitions expected node');
  }

  unistUtilVisit(node, 'definition', options && options.commonmark ? commonmark : normal);

  return cache;

  function commonmark(definition) {
    var id = normalise(definition.identifier);
    if (!own$5.call(cache, id)) {
      cache[id] = definition;
    }
  }

  function normal(definition) {
    cache[normalise(definition.identifier)] = definition;
  }
}

/* Factory to get a node from the given definition-cache. */
function getterFactory(cache) {
  return getter;

  /* Get a node from the bound definition-cache. */
  function getter(identifier) {
    var id = identifier && normalise(identifier);
    return id && own$5.call(cache, id) ? cache[id] : null;
  }
}

function normalise(identifier) {
  return identifier.toUpperCase();
}

var all_1 = all;

/* Transform the children of `parent`. */
function all(h, parent) {
  var nodes = parent.children || [];
  var length = nodes.length;
  var values = [];
  var index = -1;
  var result;
  var head;

  while (++index < length) {
    result = one_1(h, nodes[index], parent);

    if (result) {
      if (index && nodes[index - 1].type === 'break') {
        if (result.value) {
          result.value = trim_1.left(result.value);
        }

        head = result.children && result.children[0];

        if (head && head.value) {
          head.value = trim_1.left(head.value);
        }
      }

      values = values.concat(result);
    }
  }

  return values;
}

var one_1 = one$1;

var own$6 = {}.hasOwnProperty;

/* Transform an unknown node. */
function unknown(h, node) {
  if (text$1(node)) {
    return h.augment(node, unistBuilder('text', node.value));
  }

  return h(node, 'div', all_1(h, node));
}

/* Visit a node. */
function one$1(h, node, parent) {
  var type = node && node.type;
  var fn = own$6.call(h.handlers, type) ? h.handlers[type] : null;

  /* Fail on non-nodes. */
  if (!type) {
    throw new Error('Expected node, got `' + node + '`');
  }

  return (typeof fn === 'function' ? fn : unknown)(h, node, parent);
}

/* Check if the node should be renderered a text node. */
function text$1(node) {
  var data = node.data || {};

  if (own$6.call(data, 'hName') || own$6.call(data, 'hProperties') || own$6.call(data, 'hChildren')) {
    return false;
  }

  return 'value' in node;
}

var thematicBreak_1$2 = thematicBreak$1;

/* Transform a thematic break / horizontal rule. */
function thematicBreak$1(h, node) {
  return h(node, 'hr');
}

var wrap_1 = wrap$4;

/* Wrap `nodes` with newlines between each entry.
 * Optionally adds newlines at the start and end. */
function wrap$4(nodes, loose) {
  var result = [];
  var index = -1;
  var length = nodes.length;

  if (loose) {
    result.push(unistBuilder('text', '\n'));
  }

  while (++index < length) {
    if (index) {
      result.push(unistBuilder('text', '\n'));
    }

    result.push(nodes[index]);
  }

  if (loose && nodes.length !== 0) {
    result.push(unistBuilder('text', '\n'));
  }

  return result;
}

var list_1$2 = list$1;

/* Transform a list. */
function list$1(h, node) {
  var props = {};
  var name = node.ordered ? 'ol' : 'ul';

  if (typeof node.start === 'number' && node.start !== 1) {
    props.start = node.start;
  }

  return h(node, name, props, wrap_1(all_1(h, node), true));
}

var footer = generateFootnotes;

/* Transform all footnote definitions, if any. */
function generateFootnotes(h) {
  var footnotes = h.footnotes;
  var length = footnotes.length;
  var index = -1;
  var listItems = [];
  var def;

  if (!length) {
    return null;
  }

  while (++index < length) {
    def = footnotes[index];

    listItems[index] = {
      type: 'listItem',
      data: { hProperties: { id: 'fn-' + def.identifier } },
      children: def.children.concat({
        type: 'link',
        url: '#fnref-' + def.identifier,
        data: { hProperties: { className: ['footnote-backref'] } },
        children: [{
          type: 'text',
          value: '↩'
        }]
      }),
      position: def.position
    };
  }

  return h(null, 'div', {
    className: ['footnotes']
  }, wrap_1([thematicBreak_1$2(h), list_1$2(h, {
    type: 'list',
    ordered: true,
    children: listItems
  })], true));
}

var blockquote_1$2 = blockquote$1;

/* Transform a block quote. */
function blockquote$1(h, node) {
  return h(node, 'blockquote', wrap_1(all_1(h, node), true));
}

var _break$4 = hardBreak$1;

/* Transform an inline break. */
function hardBreak$1(h, node) {
  return [h(node, 'br'), unistBuilder('text', '\n')];
}

var detab_1 = detab;

var TAB$1 = 0x09;
var LF = 0x0A;
var CR = 0x0D;

/* Replace tabs with spaces, being smart about which
 * column the tab is at and which size should be used. */
function detab(value, size) {
  var string = typeof value === 'string';
  var length = string && value.length;
  var start = 0;
  var index = -1;
  var column = -1;
  var tabSize = size || 4;
  var results = [];
  var code;
  var add;

  if (!string) {
    throw new Error('detab expected string');
  }

  while (++index < length) {
    code = value.charCodeAt(index);

    if (code === TAB$1) {
      add = tabSize - (column + 1) % tabSize;
      column += add;
      results.push(value.slice(start, index) + repeatString(' ', add));
      start = index + 1;
    } else if (code === LF || code === CR) {
      column = -1;
    } else {
      column++;
    }
  }

  results.push(value.slice(start));

  return results.join('');
}

var code_1 = code;

/* Transform a code block. */
function code(h, node) {
  var value = node.value ? detab_1(node.value + '\n') : '';
  var lang = node.lang && node.lang.match(/^[^ \t]+(?=[ \t]|$)/);
  var props = {};

  if (lang) {
    props.className = ['language-' + lang];
  }

  return h(node.position, 'pre', [h(node, 'code', props, [unistBuilder('text', value)])]);
}

var _delete$4 = strikethrough$1;

/* Transform deletions. */
function strikethrough$1(h, node) {
  return h(node, 'del', all_1(h, node));
}

var emphasis_1$2 = emphasis$3;

/* Transform emphasis. */
function emphasis$3(h, node) {
  return h(node, 'em', all_1(h, node));
}

var footnoteReference_1 = footnoteReference;

/* Transform a reference to a footnote. */
function footnoteReference(h, node) {
  var identifier = node.identifier;

  return h(node.position, 'sup', { id: 'fnref-' + identifier }, [h(node, 'a', {
    href: '#fn-' + identifier,
    className: ['footnote-ref']
  }, [unistBuilder('text', identifier)])]);
}

var footnote_1 = footnote;

/* Transform an inline footnote. */
function footnote(h, node) {
  var identifiers = [];
  var identifier = 1;
  var footnotes = h.footnotes;
  var length = footnotes.length;
  var index = -1;

  while (++index < length) {
    identifiers[index] = footnotes[index].identifier;
  }

  while (identifiers.indexOf(String(identifier)) !== -1) {
    identifier++;
  }

  identifier = String(identifier);

  footnotes.push({
    type: 'footnoteDefinition',
    identifier: identifier,
    children: [{
      type: 'paragraph',
      children: node.children
    }],
    position: node.position
  });

  return footnoteReference_1(h, {
    type: 'footnoteReference',
    identifier: identifier,
    position: node.position
  });
}

var heading_1 = heading;

/* Transform a heading. */
function heading(h, node) {
  return h(node, 'h' + node.depth, all_1(h, node));
}

var html_1 = html$3;

/* Return either a `raw` node, in dangerous mode, or
 * nothing. */
function html$3(h, node) {
  return h.dangerous ? h.augment(node, unistBuilder('raw', node.value)) : null;
}

var encodeCache = {};

// Create a lookup array where anything but characters in `chars` string
// and alphanumeric chars is percent-encoded.
//
function getEncodeCache(exclude) {
  var i,
      ch,
      cache = encodeCache[exclude];
  if (cache) {
    return cache;
  }

  cache = encodeCache[exclude] = [];

  for (i = 0; i < 128; i++) {
    ch = String.fromCharCode(i);

    if (/^[0-9a-z]$/i.test(ch)) {
      // always allow unencoded alphanumeric characters
      cache.push(ch);
    } else {
      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));
    }
  }

  for (i = 0; i < exclude.length; i++) {
    cache[exclude.charCodeAt(i)] = exclude[i];
  }

  return cache;
}

// Encode unsafe characters with percent-encoding, skipping already
// encoded sequences.
//
//  - string       - string to encode
//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)
//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)
//
function encode$1(string, exclude, keepEscaped) {
  var i,
      l,
      code,
      nextCode,
      cache,
      result = '';

  if (typeof exclude !== 'string') {
    // encode(string, keepEscaped)
    keepEscaped = exclude;
    exclude = encode$1.defaultChars;
  }

  if (typeof keepEscaped === 'undefined') {
    keepEscaped = true;
  }

  cache = getEncodeCache(exclude);

  for (i = 0, l = string.length; i < l; i++) {
    code = string.charCodeAt(i);

    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {
      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
        result += string.slice(i, i + 3);
        i += 2;
        continue;
      }
    }

    if (code < 128) {
      result += cache[code];
      continue;
    }

    if (code >= 0xD800 && code <= 0xDFFF) {
      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {
        nextCode = string.charCodeAt(i + 1);
        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {
          result += encodeURIComponent(string[i] + string[i + 1]);
          i++;
          continue;
        }
      }
      result += '%EF%BF%BD';
      continue;
    }

    result += encodeURIComponent(string[i]);
  }

  return result;
}

encode$1.defaultChars = ";/?:@&=+$,-_.!~*'()#";
encode$1.componentChars = "-_.!~*'()";

var encode_1 = encode$1;

var failsafe_1 = failsafe;

/* Return the content of a reference without definition
 * as markdown. */
function failsafe(h, node, definition) {
  var subtype = node.referenceType;

  if (subtype !== 'collapsed' && subtype !== 'full' && !definition) {
    if (node.type === 'imageReference') {
      return unistBuilder('text', '![' + node.alt + ']');
    }

    return [unistBuilder('text', '[')].concat(all_1(h, node), unistBuilder('text', ']'));
  }
}

var imageReference_1 = imageReference;

/* Transform a reference to an image. */
function imageReference(h, node) {
  var def = h.definition(node.identifier);
  var props = { src: encode_1(def && def.url || ''), alt: node.alt };

  if (def && def.title !== null && def.title !== undefined) {
    props.title = def.title;
  }

  return failsafe_1(h, node, def) || h(node, 'img', props);
}

var image_1 = image$1;

/* Transform an image. */
function image$1(h, node) {
  var props = { src: encode_1(node.url), alt: node.alt };

  if (node.title !== null && node.title !== undefined) {
    props.title = node.title;
  }

  return h(node, 'img', props);
}

var inlineCode_1 = inlineCode$1;

/* Transform inline code. */
function inlineCode$1(h, node) {
  return h(node, 'code', [unistBuilder('text', collapseWhiteSpace(node.value))]);
}

var linkReference_1 = linkReference;

/* Transform a reference to a link. */
function linkReference(h, node) {
  var def = h.definition(node.identifier);
  var props = { href: encode_1(def && def.url || '') };

  if (def && def.title !== null && def.title !== undefined) {
    props.title = def.title;
  }

  return failsafe_1(h, node, def) || h(node, 'a', props, all_1(h, node));
}

var link_1$2 = link$3;

/* Transform a link. */
function link$3(h, node) {
  var props = { href: encode_1(node.url) };

  if (node.title !== null && node.title !== undefined) {
    props.title = node.title;
  }

  return h(node, 'a', props, all_1(h, node));
}

var listItem_1 = listItem$1;

/* Transform a list-item. */
function listItem$1(h, node, parent) {
  var children = node.children;
  var head = children[0];
  var props = {};
  var single = false;
  var result;
  var container;

  if ((!parent || !parent.loose) && children.length === 1 && head.type === 'paragraph') {
    single = true;
  }

  result = all_1(h, single ? head : node);

  if (typeof node.checked === 'boolean') {
    if (!single && (!head || head.type !== 'paragraph')) {
      result.unshift(h(null, 'p', []));
    }

    container = single ? result : result[0].children;

    if (container.length !== 0) {
      container.unshift(unistBuilder('text', ' '));
    }

    container.unshift(h(null, 'input', {
      type: 'checkbox',
      checked: node.checked,
      disabled: true
    }));

    /* According to github-markdown-css, this class hides bullet. */
    props.className = ['task-list-item'];
  }

  if (!single && result.length !== 0) {
    result = wrap_1(result, true);
  }

  return h(node, 'li', props, result);
}

var paragraph_1$2 = paragraph$1;

/* Transform a paragraph. */
function paragraph$1(h, node) {
  return h(node, 'p', all_1(h, node));
}

var root_1 = root;

/* Transform a `root`. */
function root(h, node) {
  return h.augment(node, unistBuilder('root', wrap_1(all_1(h, node))));
}

var strong_1$2 = strong$4;

/* Transform importance. */
function strong$4(h, node) {
  return h(node, 'strong', all_1(h, node));
}

var table_1$2 = table$1;

/* Transform a table. */
function table$1(h, node) {
  var rows = node.children;
  var index = rows.length;
  var align = node.align;
  var alignLength = align.length;
  var result = [];
  var pos;
  var row;
  var out;
  var name;
  var cell;

  while (index--) {
    row = rows[index].children;
    name = index === 0 ? 'th' : 'td';
    pos = alignLength;
    out = [];

    while (pos--) {
      cell = row[pos];
      out[pos] = h(cell, name, {
        align: align[pos]
      }, cell ? wrap_1(all_1(h, cell)) : []);
    }

    result[index] = h(rows[index], 'tr', wrap_1(out, true));
  }

  return h(node, 'table', wrap_1([h(result[0].position, 'thead', wrap_1([result[0]], true)), h({
    start: unistUtilPosition.start(result[1]),
    end: unistUtilPosition.end(result[result.length - 1])
  }, 'tbody', wrap_1(result.slice(1), true))], true));
}

var trimLines_1 = trimLines;

var ws = /[ \t]*\n+[ \t]*/g;
var newline$1 = '\n';

function trimLines(value) {
  return String(value).replace(ws, newline$1);
}

var text_1$2 = text$2;

/* Transform text. */
function text$2(h, node) {
  return h.augment(node, unistBuilder('text', trimLines_1(node.value)));
}

var handlers = {
  blockquote: blockquote_1$2,
  break: _break$4,
  code: code_1,
  delete: _delete$4,
  emphasis: emphasis_1$2,
  footnoteReference: footnoteReference_1,
  footnote: footnote_1,
  heading: heading_1,
  html: html_1,
  imageReference: imageReference_1,
  image: image_1,
  inlineCode: inlineCode_1,
  linkReference: linkReference_1,
  link: link_1$2,
  listItem: listItem_1,
  list: list_1$2,
  paragraph: paragraph_1$2,
  root: root_1,
  strong: strong_1$2,
  table: table_1$2,
  text: text_1$2,
  thematicBreak: thematicBreak_1$2,
  toml: ignore,
  yaml: ignore,
  definition: ignore,
  footnoteDefinition: ignore
};

/* Return nothing for nodes which are ignored. */
function ignore() {
  return null;
}

var lib$2 = toHAST;

/* Factory to transform. */
function factory$5(tree, options) {
  var settings = options || {};
  var dangerous = settings.allowDangerousHTML;

  h.dangerous = dangerous;
  h.definition = mdastUtilDefinitions(tree, settings);
  h.footnotes = [];
  h.augment = augment;
  h.handlers = immutable(handlers, settings.handlers || {});

  unistUtilVisit(tree, 'footnoteDefinition', visitor);

  return h;

  /* Finalise the created `right`, a HAST node, from
   * `left`, an MDAST node.   */
  function augment(left, right) {
    var data;
    var ctx;

    /* Handle `data.hName`, `data.hProperties, `hChildren`. */
    if (left && 'data' in left) {
      data = left.data;

      if (right.type === 'element' && data.hName) {
        right.tagName = data.hName;
      }

      if (right.type === 'element' && data.hProperties) {
        right.properties = immutable(right.properties, data.hProperties);
      }

      if (right.children && data.hChildren) {
        right.children = data.hChildren;
      }
    }

    ctx = left && left.position ? left : { position: left };

    if (!unistUtilGenerated(ctx)) {
      right.position = {
        start: unistUtilPosition.start(ctx),
        end: unistUtilPosition.end(ctx)
      };
    }

    return right;
  }

  /* Create an element for a `node`. */
  function h(node, tagName, props, children) {
    if ((children === undefined || children === null) && (typeof props === 'undefined' ? 'undefined' : _typeof(props)) === 'object' && 'length' in props) {
      children = props;
      props = {};
    }

    return augment(node, {
      type: 'element',
      tagName: tagName,
      properties: props || {},
      children: children || []
    });
  }

  function visitor(definition) {
    h.footnotes.push(definition);
  }
}

/* Transform `tree`, which is an MDAST node, to a HAST node. */
function toHAST(tree, options) {
  var h = factory$5(tree, options);
  var node = one_1(h, tree);
  var footnotes = footer(h);

  if (node && node.children && footnotes) {
    node.children = node.children.concat(unistBuilder('text', '\n'), footnotes);
  }

  return node;
}

var mdastUtilToHast = lib$2;

var remarkRehype = remark2rehype;

/* Attacher.
 * If a destination is given, runs the destination with
 * the new HAST tree (bridge-mode).
 * Without destination, returns the HAST tree: further
 * plug-ins run on that tree (mutate-mode). */
function remark2rehype(destination, options) {
  if (destination && !destination.process) {
    options = destination;
    destination = null;
  }

  return destination ? bridge(destination, options) : mutate(options);
}

/* Bridge-mode.  Runs the destination with the new HAST
 * tree. */
function bridge(destination, options) {
  return transformer;
  function transformer(node, file, next) {
    destination.run(mdastUtilToHast(node, options), file, done);
    function done(err) {
      next(err);
    }
  }
}

/* Mutate-mode.  Further transformers run on the HAST tree. */
function mutate(options) {
  return transformer;
  function transformer(node) {
    return mdastUtilToHast(node, options);
  }
}

var katex=createCommonjsModule(function(module,exports){(function webpackUniversalModuleDefinition(root,factory){module.exports=factory();})(commonjsGlobal,function(){return(/******/function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******//******/// The require function
/******/function __webpack_require__(moduleId){/******//******/// Check if module is in cache
/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******//******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******//******/// Flag the module as loaded
/******/module.l=true;/******//******/// Return the exports of the module
/******/return module.exports;/******/}/******//******//******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******//******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******//******/// define getter function for harmony exports
/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{/******/configurable:false,/******/enumerable:true,/******/get:getter/******/});/******/}/******/};/******//******/// getDefaultExport function for compatibility with non-harmony modules
/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******//******/// Object.prototype.hasOwnProperty.call
/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******//******/// __webpack_public_path__
/******/__webpack_require__.p="";/******//******/// Load entry module and return exports
/******/return __webpack_require__(__webpack_require__.s=63);/******/}(/************************************************************************//******/[/* 0 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray__=__webpack_require__(57);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator__=__webpack_require__(18);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__domTree__=__webpack_require__(12);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__fontMetrics__=__webpack_require__(30);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__symbols__=__webpack_require__(28);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__utils__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__stretchy__=__webpack_require__(13);/* harmony import */var __WEBPACK_IMPORTED_MODULE_7__units__=__webpack_require__(19);/* eslint no-console:0 *//**
 * This module contains general functions that can be used for building
 * different kinds of domTree nodes in a consistent manner.
 */// The following have to be loaded from Main-Italic font, using class mainit
var mainitLetters=["\\imath","ı",// dotless i
"\\jmath","ȷ",// dotless j
"\\pounds","\\mathsterling","\\textsterling","£"];/**
 * Looks up the given symbol in fontMetrics, after applying any symbol
 * replacements defined in symbol.js
 */var lookupSymbol=function lookupSymbol(value,// TODO(#963): Use a union type for this.
fontFamily,mode){// Replace the value with its replaced value from symbol.js
if(__WEBPACK_IMPORTED_MODULE_4__symbols__["a"/* default */][mode][value]&&__WEBPACK_IMPORTED_MODULE_4__symbols__["a"/* default */][mode][value].replace){value=__WEBPACK_IMPORTED_MODULE_4__symbols__["a"/* default */][mode][value].replace;}return{value:value,metrics:__WEBPACK_IMPORTED_MODULE_3__fontMetrics__["a"/* default */].getCharacterMetrics(value,fontFamily,mode)};};/**
 * Makes a symbolNode after translation via the list of symbols in symbols.js.
 * Correctly pulls out metrics for the character, and optionally takes a list of
 * classes to be attached to the node.
 *
 * TODO: make argument order closer to makeSpan
 * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
 * should if present come first in `classes`.
 * TODO(#953): Make `options` mandatory and always pass it in.
 */var makeSymbol=function makeSymbol(value,fontFamily,mode,options,classes){var lookup=lookupSymbol(value,fontFamily,mode);var metrics=lookup.metrics;value=lookup.value;var symbolNode=void 0;if(metrics){var italic=metrics.italic;if(mode==="text"){italic=0;}symbolNode=new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"/* default */].symbolNode(value,metrics.height,metrics.depth,italic,metrics.skew,metrics.width,classes);}else{// TODO(emily): Figure out a good way to only print this in development
typeof console!=="undefined"&&console.warn("No character metrics for '"+value+"' in style '"+fontFamily+"'");symbolNode=new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"/* default */].symbolNode(value,0,0,0,0,0,classes);}if(options){symbolNode.maxFontSize=options.sizeMultiplier;if(options.style.isTight()){symbolNode.classes.push("mtight");}var color=options.getColor();if(color){symbolNode.style.color=color;}}return symbolNode;};/**
 * Makes a symbol in Main-Regular or AMS-Regular.
 * Used for rel, bin, open, close, inner, and punct.
 *
 * TODO(#953): Make `options` mandatory and always pass it in.
 */var mathsym=function mathsym(value,mode,options){var classes=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[];// Decide what font to render the symbol in by its entry in the symbols
// table.
// Have a special case for when the value = \ because the \ is used as a
// textord in unsupported command errors but cannot be parsed as a regular
// text ordinal and is therefore not present as a symbol in the symbols
// table for text, as well as a special case for boldsymbol because it
// can be used for bold + and -
if(options&&options.fontFamily&&options.fontFamily==="boldsymbol"&&lookupSymbol(value,"Main-Bold",mode).metrics){return makeSymbol(value,"Main-Bold",mode,options,classes.concat(["mathbf"]));}else if(value==="\\"||__WEBPACK_IMPORTED_MODULE_4__symbols__["a"/* default */][mode][value].font==="main"){return makeSymbol(value,"Main-Regular",mode,options,classes);}else{return makeSymbol(value,"AMS-Regular",mode,options,classes.concat(["amsrm"]));}};/**
 * Makes a symbol in the default font for mathords and textords.
 */var mathDefault=function mathDefault(value,mode,options,classes,type){if(type==="mathord"){var fontLookup=mathit(value,mode,options,classes);return makeSymbol(value,fontLookup.fontName,mode,options,classes.concat([fontLookup.fontClass]));}else if(type==="textord"){var font=__WEBPACK_IMPORTED_MODULE_4__symbols__["a"/* default */][mode][value]&&__WEBPACK_IMPORTED_MODULE_4__symbols__["a"/* default */][mode][value].font;if(font==="ams"){var _fontName=retrieveTextFontName("amsrm",options.fontWeight,options.fontShape);return makeSymbol(value,_fontName,mode,options,classes.concat("amsrm",options.fontWeight,options.fontShape));}else{// if (font === "main") {
var _fontName2=retrieveTextFontName("textrm",options.fontWeight,options.fontShape);return makeSymbol(value,_fontName2,mode,options,classes.concat(options.fontWeight,options.fontShape));}}else{throw new Error("unexpected type: "+type+" in mathDefault");}};/**
 * Determines which of the two font names (Main-Italic and Math-Italic) and
 * corresponding style tags (mainit or mathit) to use for font "mathit",
 * depending on the symbol.  Use this function instead of fontMap for font
 * "mathit".
 */var mathit=function mathit(value,mode,options,classes){if(/[0-9]/.test(value.charAt(0))||// glyphs for \imath and \jmath do not exist in Math-Italic so we
// need to use Main-Italic instead
__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].contains(mainitLetters,value)){return{fontName:"Main-Italic",fontClass:"mainit"};}else{return{fontName:"Math-Italic",fontClass:"mathit"};}};/**
 * Determines which of the two font names (Main-Bold and Math-BoldItalic) and
 * corresponding style tags (mathbf or boldsymbol) to use for font "boldsymbol",
 * depending on the symbol.  Use this function instead of fontMap for font
 * "boldsymbol".
 */var boldsymbol=function boldsymbol(value,mode,options,classes){if(lookupSymbol(value,"Math-BoldItalic",mode).metrics){return{fontName:"Math-BoldItalic",fontClass:"boldsymbol"};}else{// Some glyphs do not exist in Math-BoldItalic so we need to use
// Main-Bold instead.
return{fontName:"Main-Bold",fontClass:"mathbf"};}};/**
 * Makes either a mathord or textord in the correct font and color.
 */var makeOrd=function makeOrd(group,options,type){var mode=group.mode;var value=group.value;var classes=["mord"];var fontFamily=options.fontFamily;if(fontFamily){var _fontName3=void 0;var fontClasses=void 0;if(fontFamily==="boldsymbol"){var fontData=boldsymbol(value,mode,options,classes);_fontName3=fontData.fontName;fontClasses=[fontData.fontClass];}else if(fontFamily==="mathit"||__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].contains(mainitLetters,value)){var _fontData=mathit(value,mode,options,classes);_fontName3=_fontData.fontName;fontClasses=[_fontData.fontClass];}else if(fontFamily.indexOf("math")!==-1||mode==="math"){// To support old font functions (i.e. \rm \sf etc.) or math mode.
_fontName3=fontMap[fontFamily].fontName;fontClasses=[fontFamily];}else{_fontName3=retrieveTextFontName(fontFamily,options.fontWeight,options.fontShape);fontClasses=[fontFamily,options.fontWeight,options.fontShape];}if(lookupSymbol(value,_fontName3,mode).metrics){return makeSymbol(value,_fontName3,mode,options,classes.concat(fontClasses));}else{return mathDefault(value,mode,options,classes,type);}}else{return mathDefault(value,mode,options,classes,type);}};/**
 * Combine as many characters as possible in the given array of characters
 * via their tryCombine method.
 */var tryCombineChars=function tryCombineChars(chars){for(var i=0;i<chars.length-1;i++){if(chars[i].tryCombine(chars[i+1])){chars.splice(i+1,1);i--;}}return chars;};/**
 * Calculate the height, depth, and maxFontSize of an element based on its
 * children.
 */var sizeElementFromChildren=function sizeElementFromChildren(elem){var height=0;var depth=0;var maxFontSize=0;var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(elem.children),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var child=_step.value;if(child.height>height){height=child.height;}if(child.depth>depth){depth=child.depth;}if(child.maxFontSize>maxFontSize){maxFontSize=child.maxFontSize;}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}elem.height=height;elem.depth=depth;elem.maxFontSize=maxFontSize;};/**
 * Makes a span with the given list of classes, list of children, and options.
 *
 * TODO(#953): Ensure that `options` is always provided (currently some call
 * sites don't pass it) and make the type below mandatory.
 * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
 * should if present come first in `classes`.
 */var makeSpan=function makeSpan(classes,children,options,style){var span=new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"/* default */].span(classes,children,options,style);sizeElementFromChildren(span);return span;};var makeLineSpan=function makeLineSpan(className,options){// Return a span with an SVG image of a horizontal line. The SVG path
// fills the middle fifth of the span. We want an extra tall span
// because Chrome will sometimes not display a span that is 0.04em tall.
var lineHeight=options.fontMetrics().defaultRuleThickness;var line=__WEBPACK_IMPORTED_MODULE_6__stretchy__["a"/* default */].ruleSpan(className,lineHeight,options);line.height=lineHeight;line.style.height=5*line.height+"em";line.maxFontSize=1.0;return line;};/**
 * Makes an anchor with the given href, list of classes, list of children,
 * and options.
 */var makeAnchor=function makeAnchor(href,classes,children,options){var anchor=new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"/* default */].anchor(href,classes,children,options);sizeElementFromChildren(anchor);return anchor;};/**
 * Makes a document fragment with the given list of children.
 */var makeFragment=function makeFragment(children){var fragment=new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"/* default */].documentFragment(children);sizeElementFromChildren(fragment);return fragment;};// These are exact object types to catch typos in the names of the optional fields.
// A list of child or kern nodes to be stacked on top of each other (i.e. the
// first element will be at the bottom, and the last at the top).
// Computes the updated `children` list and the overall depth.
//
// This helper function for makeVList makes it easier to enforce type safety by
// allowing early exits (returns) in the logic.
var getVListChildrenAndDepth=function getVListChildrenAndDepth(params){if(params.positionType==="individualShift"){var oldChildren=params.children;var _children=[oldChildren[0]];// Add in kerns to the list of params.children to get each element to be
// shifted to the correct specified shift
var _depth=-oldChildren[0].shift-oldChildren[0].elem.depth;var currPos=_depth;for(var i=1;i<oldChildren.length;i++){var diff=-oldChildren[i].shift-currPos-oldChildren[i].elem.depth;var _size=diff-(oldChildren[i-1].elem.height+oldChildren[i-1].elem.depth);currPos=currPos+diff;_children.push({type:"kern",size:_size});_children.push(oldChildren[i]);}return{children:_children,depth:_depth};}var depth=void 0;if(params.positionType==="top"){// We always start at the bottom, so calculate the bottom by adding up
// all the sizes
var bottom=params.positionData;var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(params.children),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var child=_step2.value;bottom-=child.type==="kern"?child.size:child.elem.height+child.elem.depth;}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}depth=bottom;}else if(params.positionType==="bottom"){depth=-params.positionData;}else{var firstChild=params.children[0];if(firstChild.type!=="elem"){throw new Error('First child must have type "elem".');}if(params.positionType==="shift"){depth=-firstChild.elem.depth-params.positionData;}else if(params.positionType==="firstBaseline"){depth=-firstChild.elem.depth;}else{throw new Error("Invalid positionType "+params.positionType+".");}}return{children:params.children,depth:depth};};/**
 * Makes a vertical list by stacking elements and kerns on top of each other.
 * Allows for many different ways of specifying the positioning method.
 *
 * See VListParam documentation above.
 */var makeVList=function makeVList(params,options){var _getVListChildrenAndD=getVListChildrenAndDepth(params),children=_getVListChildrenAndD.children,depth=_getVListChildrenAndD.depth;// Create a strut that is taller than any list item. The strut is added to
// each item, where it will determine the item's baseline. Since it has
// `overflow:hidden`, the strut's top edge will sit on the item's line box's
// top edge and the strut's bottom edge will sit on the item's baseline,
// with no additional line-height spacing. This allows the item baseline to
// be positioned precisely without worrying about font ascent and
// line-height.
var pstrutSize=0;var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(children),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var child=_step3.value;if(child.type==="elem"){var _elem=child.elem;pstrutSize=Math.max(pstrutSize,_elem.maxFontSize,_elem.height);}}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3.return){_iterator3.return();}}finally{if(_didIteratorError3){throw _iteratorError3;}}}pstrutSize+=2;var pstrut=makeSpan(["pstrut"],[]);pstrut.style.height=pstrutSize+"em";// Create a new list of actual children at the correct offsets
var realChildren=[];var minPos=depth;var maxPos=depth;var currPos=depth;var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(children),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=true){var _child=_step4.value;if(_child.type==="kern"){currPos+=_child.size;}else{var _elem2=_child.elem;var classes=_child.wrapperClasses||[];var style=_child.wrapperStyle||{};var childWrap=makeSpan(classes,[pstrut,_elem2],undefined,style);childWrap.style.top=-pstrutSize-currPos-_elem2.depth+"em";if(_child.marginLeft){childWrap.style.marginLeft=_child.marginLeft;}if(_child.marginRight){childWrap.style.marginRight=_child.marginRight;}realChildren.push(childWrap);currPos+=_elem2.height+_elem2.depth;}minPos=Math.min(minPos,currPos);maxPos=Math.max(maxPos,currPos);}// The vlist contents go in a table-cell with `vertical-align:bottom`.
// This cell's bottom edge will determine the containing table's baseline
// without overly expanding the containing line-box.
}catch(err){_didIteratorError4=true;_iteratorError4=err;}finally{try{if(!_iteratorNormalCompletion4&&_iterator4.return){_iterator4.return();}}finally{if(_didIteratorError4){throw _iteratorError4;}}}var vlist=makeSpan(["vlist"],realChildren);vlist.style.height=maxPos+"em";// A second row is used if necessary to represent the vlist's depth.
var rows=void 0;if(minPos<0){var depthStrut=makeSpan(["vlist"],[]);depthStrut.style.height=-minPos+"em";// Safari wants the first row to have inline content; otherwise it
// puts the bottom of the *second* row on the baseline.
var topStrut=makeSpan(["vlist-s"],[new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"/* default */].symbolNode('\u200B')]);rows=[makeSpan(["vlist-r"],[vlist,topStrut]),makeSpan(["vlist-r"],[depthStrut])];}else{rows=[makeSpan(["vlist-r"],[vlist])];}var vtable=makeSpan(["vlist-t"],rows);if(rows.length===2){vtable.classes.push("vlist-t2");}vtable.height=maxPos;vtable.depth=-minPos;return vtable;};// Converts verb group into body string, dealing with \verb* form
var makeVerb=function makeVerb(group,options){// TODO(#892): Make ParseNode type-safe and confirm `group.type` to guarantee
// that `group.value.body` is of type string.
var text=group.value.body;if(group.value.star){text=text.replace(/ /g,'\u2423');// Open Box
}else{text=text.replace(/ /g,'\xA0');// No-Break Space
// (so that, in particular, spaces don't coalesce)
}return text;};// Glue is a concept from TeX which is a flexible space between elements in
// either a vertical or horizontal list.  In KaTeX, at least for now, it's
// static space between elements in a horizontal layout.
var makeGlue=function makeGlue(measurement,options){// Make an empty span for the rule
var rule=makeSpan(["mord","rule"],[],options);var size=Object(__WEBPACK_IMPORTED_MODULE_7__units__["a"/* calculateSize */])(measurement,options);rule.style.marginRight=size+"em";return rule;};// Takes an Options object, and returns the appropriate fontLookup
var retrieveTextFontName=function retrieveTextFontName(fontFamily,fontWeight,fontShape){var baseFontName=retrieveBaseFontName(fontFamily);var fontStylesName=retrieveFontStylesName(fontWeight,fontShape);return baseFontName+"-"+fontStylesName;};var retrieveBaseFontName=function retrieveBaseFontName(font){var baseFontName="";switch(font){case"amsrm":baseFontName="AMS";break;case"textrm":baseFontName="Main";break;case"textsf":baseFontName="SansSerif";break;case"texttt":baseFontName="Typewriter";break;default:throw new Error("Invalid font provided: "+font);}return baseFontName;};var retrieveFontStylesName=function retrieveFontStylesName(fontWeight,fontShape){var fontStylesName='';if(fontWeight==="textbf"){fontStylesName+="Bold";}if(fontShape==="textit"){fontStylesName+="Italic";}return fontStylesName||"Regular";};// A map of spacing functions to their attributes, like size and corresponding
// CSS class
var spacingFunctions={"\\qquad":{size:"2em",className:"qquad"},"\\quad":{size:"1em",className:"quad"},"\\enspace":{size:"0.5em",className:"enspace"},"\\;":{size:"0.277778em",className:"thickspace"},"\\:":{size:"0.22222em",className:"mediumspace"},"\\,":{size:"0.16667em",className:"thinspace"},"\\!":{size:"-0.16667em",className:"negativethinspace"}};/**
 * Maps TeX font commands to objects containing:
 * - variant: string used for "mathvariant" attribute in buildMathML.js
 * - fontName: the "style" parameter to fontMetrics.getCharacterMetrics
 */// A map between tex font commands an MathML mathvariant attribute values
var fontMap={// styles
"mathbf":{variant:"bold",fontName:"Main-Bold"},"mathrm":{variant:"normal",fontName:"Main-Regular"},"textit":{variant:"italic",fontName:"Main-Italic"},// "mathit" and "boldsymbol" are missing because they require the use of two
// fonts: Main-Italic and Math-Italic for "mathit", and Math-BoldItalic and
// Main-Bold for "boldsymbol".  This is handled by a special case in makeOrd
// which ends up calling mathit and boldsymbol.
// families
"mathbb":{variant:"double-struck",fontName:"AMS-Regular"},"mathcal":{variant:"script",fontName:"Caligraphic-Regular"},"mathfrak":{variant:"fraktur",fontName:"Fraktur-Regular"},"mathscr":{variant:"script",fontName:"Script-Regular"},"mathsf":{variant:"sans-serif",fontName:"SansSerif-Regular"},"mathtt":{variant:"monospace",fontName:"Typewriter-Regular"}};var svgData={//   path, width, height
vec:["vec",0.471,0.714]// values from the font glyph
};var staticSvg=function staticSvg(value,options){// Create a span with inline SVG for the element.
var _svgData$value=__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray___default()(svgData[value],3),pathName=_svgData$value[0],width=_svgData$value[1],height=_svgData$value[2];var path=new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"/* default */].pathNode(pathName);var svgNode=new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"/* default */].svgNode([path],{"width":width+"em","height":height+"em",// Override CSS rule `.katex svg { width: 100% }`
"style":"width:"+width+"em","viewBox":"0 0 "+1000*width+" "+1000*height,"preserveAspectRatio":"xMinYMin"});var span=makeSpan(["overlay"],[svgNode],options);span.height=height;span.style.height=height+"em";span.style.width=width+"em";return span;};/* harmony default export */__webpack_exports__["a"]={fontMap:fontMap,makeSymbol:makeSymbol,mathsym:mathsym,makeSpan:makeSpan,makeLineSpan:makeLineSpan,makeAnchor:makeAnchor,makeFragment:makeFragment,makeVList:makeVList,makeOrd:makeOrd,makeVerb:makeVerb,makeGlue:makeGlue,staticSvg:staticSvg,svgData:svgData,tryCombineChars:tryCombineChars,spacingFunctions:spacingFunctions};/***/},/* 1 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__=__webpack_require__(18);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass__=__webpack_require__(10);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__utils__=__webpack_require__(5);/**
 * These objects store data about MathML nodes. This is the MathML equivalent
 * of the types in domTree.js. Since MathML handles its own rendering, and
 * since we're mainly using MathML to improve accessibility, we don't manage
 * any of the styling state that the plain DOM nodes do.
 *
 * The `toNode` and `toMarkup` functions work simlarly to how they do in
 * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.
 *//**
 * MathML node types used in KaTeX. For a complete list of MathML nodes, see
 * https://developer.mozilla.org/en-US/docs/Web/MathML/Element.
 *//**
 * This node represents a general purpose MathML node of any type. The
 * constructor requires the type of node to create (for example, `"mo"` or
 * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).
 */var MathNode=function(){function MathNode(type,children){__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default()(this,MathNode);this.type=type;this.attributes={};this.children=children||[];}/**
     * Sets an attribute on a MathML node. MathML depends on attributes to convey a
     * semantic content, so this is used heavily.
     */__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default()(MathNode,[{key:"setAttribute",value:function setAttribute(name,value){this.attributes[name]=value;}/**
         * Converts the math node into a MathML-namespaced DOM element.
         */},{key:"toNode",value:function toNode(){var node=document.createElementNS("http://www.w3.org/1998/Math/MathML",this.type);for(var attr in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,attr)){node.setAttribute(attr,this.attributes[attr]);}}var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(this.children),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var child=_step.value;node.appendChild(child.toNode());}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}return node;}/**
         * Converts the math node into an HTML markup string.
         */},{key:"toMarkup",value:function toMarkup(){var markup="<"+this.type;// Add the attributes
for(var attr in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,attr)){markup+=" "+attr+"=\"";markup+=__WEBPACK_IMPORTED_MODULE_3__utils__["a"/* default */].escape(this.attributes[attr]);markup+="\"";}}markup+=">";for(var i=0;i<this.children.length;i++){markup+=this.children[i].toMarkup();}markup+="</"+this.type+">";return markup;}/**
         * Converts the math node into a string, similar to innerText.
         */},{key:"toText",value:function toText(){if(this.type==="mspace"){if(this.attributes.width==="0.16667em"){return'\u2006';}else{// TODO: Use other space characters for different widths.
// https://github.com/Khan/KaTeX/issues/1036
return" ";}}return this.children.map(function(child){return child.toText();}).join("");}}]);return MathNode;}();/**
 * This node represents a piece of text.
 */var TextNode=function(){function TextNode(text){__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default()(this,TextNode);this.text=text;}/**
     * Converts the text node into a DOM text node.
     */__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default()(TextNode,[{key:"toNode",value:function toNode(){return document.createTextNode(this.text);}/**
         * Converts the text node into HTML markup (which is just the text itself).
         */},{key:"toMarkup",value:function toMarkup(){return __WEBPACK_IMPORTED_MODULE_3__utils__["a"/* default */].escape(this.text);}/**
         * Converts the text node into a string (which is just the text iteself).
         */},{key:"toText",value:function toText(){return this.text;}}]);return TextNode;}();/* harmony default export */__webpack_exports__["a"]={MathNode:MathNode,TextNode:TextNode};/***/},/* 2 *//***/function(module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,"e",function(){return makeText;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"d",function(){return groupTypes;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return buildExpression;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"b",function(){return buildGroup;});/* harmony export (immutable) */__webpack_exports__["c"]=buildMathML;/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__fontMetrics__=__webpack_require__(30);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__ParseError__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__Style__=__webpack_require__(9);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__symbols__=__webpack_require__(28);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__utils__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_7__stretchy__=__webpack_require__(13);/**
 * WARNING: New methods on groupTypes should be added to src/functions.
 *
 * This file converts a parse tree into a cooresponding MathML tree. The main
 * entry point is the `buildMathML` function, which takes a parse tree from the
 * parser.
 *//**
 * Takes a symbol and converts it into a MathML text node after performing
 * optional replacement from symbols.js.
 */var makeText=function makeText(text,mode){if(__WEBPACK_IMPORTED_MODULE_5__symbols__["a"/* default */][mode][text]&&__WEBPACK_IMPORTED_MODULE_5__symbols__["a"/* default */][mode][text].replace){text=__WEBPACK_IMPORTED_MODULE_5__symbols__["a"/* default */][mode][text].replace;}return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].TextNode(text);};/**
 * Returns the math variant as a string or null if none is required.
 */var getVariant=function getVariant(group,options){var font=options.fontFamily;if(!font){return null;}var mode=group.mode;if(font==="mathit"){return"italic";}else if(font==="boldsymbol"){return"bold-italic";}var value=group.value;if(__WEBPACK_IMPORTED_MODULE_6__utils__["a"/* default */].contains(["\\imath","\\jmath"],value)){return null;}if(__WEBPACK_IMPORTED_MODULE_5__symbols__["a"/* default */][mode][value]&&__WEBPACK_IMPORTED_MODULE_5__symbols__["a"/* default */][mode][value].replace){value=__WEBPACK_IMPORTED_MODULE_5__symbols__["a"/* default */][mode][value].replace;}var fontName=__WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"/* default */].fontMap[font].fontName;if(__WEBPACK_IMPORTED_MODULE_1__fontMetrics__["a"/* default */].getCharacterMetrics(value,fontName,mode)){return __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"/* default */].fontMap[font].variant;}return null;};/**
 * Functions for handling the different types of groups found in the parse
 * tree. Each function should take a parse group and return a MathML node.
 */var groupTypes={};var defaultVariant={"mi":"italic","mn":"normal","mtext":"normal"};groupTypes.mathord=function(group,options){var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mi",[makeText(group.value,group.mode)]);var variant=getVariant(group,options)||"italic";if(variant!==defaultVariant[node.type]){node.setAttribute("mathvariant",variant);}return node;};groupTypes.textord=function(group,options){var text=makeText(group.value,group.mode);var variant=getVariant(group,options)||"normal";var node=void 0;if(group.mode==='text'){node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mtext",[text]);}else if(/[0-9]/.test(group.value)){// TODO(kevinb) merge adjacent <mn> nodes
// do it as a post processing step
node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mn",[text]);}else if(group.value==="\\prime"){node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mo",[text]);}else{node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mi",[text]);}if(variant!==defaultVariant[node.type]){node.setAttribute("mathvariant",variant);}return node;};groupTypes.bin=function(group,options){var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mo",[makeText(group.value,group.mode)]);var variant=getVariant(group,options);if(variant==="bold-italic"){node.setAttribute("mathvariant",variant);}return node;};groupTypes.rel=function(group){var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mo",[makeText(group.value,group.mode)]);return node;};groupTypes.open=function(group){var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mo",[makeText(group.value,group.mode)]);return node;};groupTypes.close=function(group){var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mo",[makeText(group.value,group.mode)]);return node;};groupTypes.inner=function(group){var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mo",[makeText(group.value,group.mode)]);return node;};groupTypes.punct=function(group){var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mo",[makeText(group.value,group.mode)]);node.setAttribute("separator","true");return node;};groupTypes.ordgroup=function(group,options){var inner=buildExpression(group.value,options);var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mrow",inner);return node;};groupTypes.supsub=function(group,options){// Is the inner group a relevant horizonal brace?
var isBrace=false;var isOver=void 0;var isSup=void 0;if(group.value.base){if(group.value.base.value.type==="horizBrace"){isSup=group.value.sup?true:false;if(isSup===group.value.base.value.isOver){isBrace=true;isOver=group.value.base.value.isOver;}}}var removeUnnecessaryRow=true;var children=[buildGroup(group.value.base,options,removeUnnecessaryRow)];if(group.value.sub){children.push(buildGroup(group.value.sub,options,removeUnnecessaryRow));}if(group.value.sup){children.push(buildGroup(group.value.sup,options,removeUnnecessaryRow));}var nodeType=void 0;if(isBrace){nodeType=isOver?"mover":"munder";}else if(!group.value.sub){var base=group.value.base;if(base&&base.value.limits&&options.style===__WEBPACK_IMPORTED_MODULE_4__Style__["a"/* default */].DISPLAY){nodeType="mover";}else{nodeType="msup";}}else if(!group.value.sup){var _base=group.value.base;if(_base&&_base.value.limits&&options.style===__WEBPACK_IMPORTED_MODULE_4__Style__["a"/* default */].DISPLAY){nodeType="munder";}else{nodeType="msub";}}else{var _base2=group.value.base;if(_base2&&_base2.value.limits&&options.style===__WEBPACK_IMPORTED_MODULE_4__Style__["a"/* default */].DISPLAY){nodeType="munderover";}else{nodeType="msubsup";}}var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode(nodeType,children);return node;};groupTypes.spacing=function(group){var node=void 0;if(group.value==="\\ "||group.value==="\\space"||group.value===" "||group.value==="~"){node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mtext",[new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].TextNode("\xA0")]);}else{node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mspace");node.setAttribute("width",__WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"/* default */].spacingFunctions[group.value].size);}return node;};groupTypes.horizBrace=function(group,options){var accentNode=__WEBPACK_IMPORTED_MODULE_7__stretchy__["a"/* default */].mathMLnode(group.value.label);return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode(group.value.isOver?"mover":"munder",[buildGroup(group.value.base,options),accentNode]);};groupTypes.xArrow=function(group,options){var arrowNode=__WEBPACK_IMPORTED_MODULE_7__stretchy__["a"/* default */].mathMLnode(group.value.label);var node=void 0;var lowerNode=void 0;if(group.value.body){var upperNode=buildGroup(group.value.body,options);if(group.value.below){lowerNode=buildGroup(group.value.below,options);node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("munderover",[arrowNode,lowerNode,upperNode]);}else{node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mover",[arrowNode,upperNode]);}}else if(group.value.below){lowerNode=buildGroup(group.value.below,options);node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("munder",[arrowNode,lowerNode]);}else{node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mover",[arrowNode]);}return node;};groupTypes.mclass=function(group,options){var inner=buildExpression(group.value.value,options);return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mstyle",inner);};groupTypes.raisebox=function(group,options){var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mpadded",[buildGroup(group.value.body,options)]);var dy=group.value.dy.value.number+group.value.dy.value.unit;node.setAttribute("voffset",dy);return node;};/**
 * Takes a list of nodes, builds them, and returns a list of the generated
 * MathML nodes. A little simpler than the HTML version because we don't do any
 * previous-node handling.
 */var buildExpression=function buildExpression(expression,options){var groups=[];for(var i=0;i<expression.length;i++){var group=expression[i];groups.push(buildGroup(group,options));}// TODO(kevinb): combine \\not with mrels and mords
return groups;};/**
 * Takes a group from the parser and calls the appropriate groupTypes function
 * on it to produce a MathML node.
 */var buildGroup=function buildGroup(group,options){var removeUnnecessaryRow=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(!group){return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mrow");}if(groupTypes[group.type]){// Call the groupTypes function
var result=groupTypes[group.type](group,options);if(removeUnnecessaryRow){if(result.type==="mrow"&&result.children.length===1){return result.children[0];}}return result;}else{throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"/* default */]("Got group of unknown type: '"+group.type+"'");}};/**
 * Takes a full parse tree and settings and builds a MathML representation of
 * it. In particular, we put the elements from building the parse tree into a
 * <semantics> tag so we can also include that TeX source as an annotation.
 *
 * Note that we actually return a domTree element with a `<math>` inside it so
 * we can do appropriate styling.
 */function buildMathML(tree,texExpression,options){var expression=buildExpression(tree,options);// Wrap up the expression in an mrow so it is presented in the semantics
// tag correctly.
var wrapper=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mrow",expression);// Build a TeX annotation of the source
var annotation=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("annotation",[new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].TextNode(texExpression)]);annotation.setAttribute("encoding","application/x-tex");var semantics=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("semantics",[wrapper,annotation]);var math=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("math",[semantics]);// You can't style <math> nodes, so we wrap the node in a span.
return __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"/* default */].makeSpan(["katex-mathml"],[math]);}/***/},/* 3 *//***/function(module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,"a",function(){return _functions;});/* harmony export (immutable) */__webpack_exports__["b"]=defineFunction;/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"c",function(){return ordargument;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildMathML__=__webpack_require__(2);/** Context provided to function handlers for error messages. */// TODO: Enumerate all allowed output types.
/**
 * Final function spec for use at parse time.
 * This is almost identical to `FunctionPropSpec`, except it
 * 1. includes the function handler, and
 * 2. requires all arguments except argTypes.
 * It is generated by `defineFunction()` below.
 *//**
 * All registered functions.
 * `functions.js` just exports this same dictionary again and makes it public.
 * `Parser.js` requires this dictionary.
 */var _functions={};function defineFunction(_ref){var type=_ref.type,names=_ref.names,props=_ref.props,handler=_ref.handler,htmlBuilder=_ref.htmlBuilder,mathmlBuilder=_ref.mathmlBuilder;// Set default values of functions
var data={numArgs:props.numArgs,argTypes:props.argTypes,greediness:props.greediness===undefined?1:props.greediness,allowedInText:!!props.allowedInText,allowedInMath:props.allowedInMath===undefined?true:props.allowedInMath,numOptionalArgs:props.numOptionalArgs||0,infix:!!props.infix,handler:handler};for(var i=0;i<names.length;++i){_functions[names[i]]=data;}if(type){if(htmlBuilder){__WEBPACK_IMPORTED_MODULE_0__buildHTML__["d"/* groupTypes */][type]=htmlBuilder;}if(mathmlBuilder){__WEBPACK_IMPORTED_MODULE_1__buildMathML__["d"/* groupTypes */][type]=mathmlBuilder;}}}// Since the corresponding buildHTML/buildMathML function expects a
// list of elements, we normalize for different kinds of arguments
var ordargument=function ordargument(arg){if(arg.type==="ordgroup"){return arg.value;}else{return[arg];}};/***/},/* 4 *//***/function(module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,"a",function(){return buildExpression;});/* unused harmony export getTypeOfDomTree *//* unused harmony export isLeftTight *//* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"e",function(){return makeNullDelimiter;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"d",function(){return groupTypes;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"b",function(){return buildGroup;});/* harmony export (immutable) */__webpack_exports__["c"]=buildHTML;/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__=__webpack_require__(77);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_toConsumableArray__=__webpack_require__(35);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_toConsumableArray___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_toConsumableArray__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__ParseError__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__Style__=__webpack_require__(9);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__domTree__=__webpack_require__(12);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__units__=__webpack_require__(19);/* harmony import */var __WEBPACK_IMPORTED_MODULE_7__utils__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_8__stretchy__=__webpack_require__(13);/* harmony import */var __WEBPACK_IMPORTED_MODULE_9__spacingData__=__webpack_require__(112);/**
 * WARNING: New methods on groupTypes should be added to src/functions.
 *
 * This file does the main work of building a domTree structure from a parse
 * tree. The entry point is the `buildHTML` function, which takes a parse tree.
 * Then, the buildExpression, buildGroup, and various groupTypes functions are
 * called, to produce a final HTML tree.
 */var makeSpan=__WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].makeSpan;// Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)
// depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,
// and the text before Rule 19.
var isBinLeftCanceller=function isBinLeftCanceller(node,isRealGroup){// TODO: This code assumes that a node's math class is the first element
// of its `classes` array. A later cleanup should ensure this, for
// instance by changing the signature of `makeSpan`.
if(node){return __WEBPACK_IMPORTED_MODULE_7__utils__["a"/* default */].contains(["mbin","mopen","mrel","mop","mpunct"],getTypeOfDomTree(node,"right"));}else{return isRealGroup;}};var isBinRightCanceller=function isBinRightCanceller(node,isRealGroup){if(node){return __WEBPACK_IMPORTED_MODULE_7__utils__["a"/* default */].contains(["mrel","mclose","mpunct"],getTypeOfDomTree(node,"left"));}else{return isRealGroup;}};var styleMap={"display":__WEBPACK_IMPORTED_MODULE_3__Style__["a"/* default */].DISPLAY,"text":__WEBPACK_IMPORTED_MODULE_3__Style__["a"/* default */].TEXT,"script":__WEBPACK_IMPORTED_MODULE_3__Style__["a"/* default */].SCRIPT,"scriptscript":__WEBPACK_IMPORTED_MODULE_3__Style__["a"/* default */].SCRIPTSCRIPT};/**
 * Take a list of nodes, build them in order, and return a list of the built
 * nodes. documentFragments are flattened into their contents, so the
 * returned list contains no fragments. `isRealGroup` is true if `expression`
 * is a real group (no atoms will be added on either side), as opposed to
 * a partial group (e.g. one created by \color). `surrounding` is an array
 * consisting type of nodes that will be added to the left and right.
 */var buildExpression=function buildExpression(expression,options,isRealGroup){var surrounding=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[null,null];// Parse expressions into `groups`.
var rawGroups=[];for(var i=0;i<expression.length;i++){var group=expression[i];var output=buildGroup(group,options);if(output instanceof __WEBPACK_IMPORTED_MODULE_5__domTree__["a"/* default */].documentFragment){rawGroups.push.apply(rawGroups,__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_toConsumableArray___default()(output.children));}else{rawGroups.push(output);}}// At this point `rawGroups` consists entirely of `symbolNode`s and `span`s.
// Ignore explicit spaces (e.g., \;, \,) when determining what implicit
// spacing should go between atoms of different classes, and add dummy
// spans for determining spacings between surrounding atoms
var nonSpaces=[surrounding[0]&&makeSpan([surrounding[0]],[],options)].concat(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_toConsumableArray___default()(rawGroups.filter(function(group){return group&&group.classes[0]!=="mspace";})),[surrounding[1]&&makeSpan([surrounding[1]],[],options)]);// Before determining what spaces to insert, perform bin cancellation.
// Binary operators change to ordinary symbols in some contexts.
for(var _i=1;_i<nonSpaces.length-1;_i++){var left=getOutermostNode(nonSpaces[_i],"left");if(left.classes[0]==="mbin"&&isBinLeftCanceller(nonSpaces[_i-1],isRealGroup)){left.classes[0]="mord";}var right=getOutermostNode(nonSpaces[_i],"right");if(right.classes[0]==="mbin"&&isBinRightCanceller(nonSpaces[_i+1],isRealGroup)){right.classes[0]="mord";}}var groups=[];var j=0;for(var _i2=0;_i2<rawGroups.length;_i2++){groups.push(rawGroups[_i2]);// For any group that is not a space, get the next non-space.  Then
// lookup what implicit space should be placed between those atoms and
// add it to groups.
if(rawGroups[_i2].classes[0]!=="mspace"&&j<nonSpaces.length-1){// if current non-space node is left dummy span, add a glue before
// first real non-space node
if(j===0){groups.pop();_i2--;}// Get the type of the current non-space node.  If it's a document
// fragment, get the type of the rightmost node in the fragment.
var _left=getTypeOfDomTree(nonSpaces[j],"right");// Get the type of the next non-space node.  If it's a document
// fragment, get the type of the leftmost node in the fragment.
var _right=getTypeOfDomTree(nonSpaces[j+1],"left");// We use buildExpression inside of sizingGroup, but it returns a
// document fragment of elements.  sizingGroup sets `isRealGroup`
// to false to avoid processing spans multiple times.
if(_left&&_right&&isRealGroup){var space=isLeftTight(nonSpaces[j+1])?__WEBPACK_IMPORTED_MODULE_9__spacingData__["b"/* tightSpacings */][_left][_right]:__WEBPACK_IMPORTED_MODULE_9__spacingData__["a"/* spacings */][_left][_right];if(space){var glueOptions=options;if(expression.length===1){if(expression[0].type==="sizing"){glueOptions=options.havingSize(expression[0].value.size);}else if(expression[0].type==="styling"){glueOptions=options.havingStyle(styleMap[expression[0].value.style]);}}groups.push(__WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].makeGlue(space,glueOptions));}}j++;}}// Process \\not commands within the group.
for(var _i3=0;_i3<groups.length;_i3++){if(groups[_i3].value==='\u0338'){groups[_i3].style.position="absolute";// TODO(kevinb) fix this for Safari by switching to a non-combining
// character for \not.
// This value was determined empirically.
// TODO(kevinb) figure out the real math for this value.
groups[_i3].style.paddingLeft="0.8em";}}return groups;};// Return the outermost node of a domTree.
var getOutermostNode=function getOutermostNode(node){var side=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"right";if(node instanceof __WEBPACK_IMPORTED_MODULE_5__domTree__["a"/* default */].documentFragment||node instanceof __WEBPACK_IMPORTED_MODULE_5__domTree__["a"/* default */].anchor){if(node.children.length){if(side==="right"){return getOutermostNode(node.children[node.children.length-1]);}else if(side==="left"){return getOutermostNode(node.children[0]);}}}return node;};// Return math atom class (mclass) of a domTree.
var getTypeOfDomTree=function getTypeOfDomTree(node){var side=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"right";if(!node){return null;}node=getOutermostNode(node,side);// This makes a lot of assumptions as to where the type of atom
// appears.  We should do a better job of enforcing this.
if(__WEBPACK_IMPORTED_MODULE_7__utils__["a"/* default */].contains(["mord","mop","mbin","mrel","mopen","mclose","mpunct","minner"],node.classes[0])){return node.classes[0];}return null;};// If `node` is an atom return whether it's been assigned the mtight class.
// If `node` is a document fragment, return the value of isLeftTight() for the
// leftmost node in the fragment.
// 'mtight' indicates that the node is script or scriptscript style.
var isLeftTight=function isLeftTight(node){node=getOutermostNode(node,"left");return __WEBPACK_IMPORTED_MODULE_7__utils__["a"/* default */].contains(node.classes,"mtight");};/**
 * Sometimes, groups perform special rules when they have superscripts or
 * subscripts attached to them. This function lets the `supsub` group know that
 * its inner element should handle the superscripts and subscripts instead of
 * handling them itself.
 */var shouldHandleSupSub=function shouldHandleSupSub(group,options){if(!group.value.base){return false;}else{var base=group.value.base;if(base.type==="op"){// Operators handle supsubs differently when they have limits
// (e.g. `\displaystyle\sum_2^3`)
return base.value.limits&&(options.style.size===__WEBPACK_IMPORTED_MODULE_3__Style__["a"/* default */].DISPLAY.size||base.value.alwaysHandleSupSub);}else if(base.type==="accent"){return __WEBPACK_IMPORTED_MODULE_7__utils__["a"/* default */].isCharacterBox(base.value.base);}else if(base.type==="horizBrace"){var isSup=group.value.sub?false:true;return isSup===base.value.isOver;}else{return null;}}};var makeNullDelimiter=function makeNullDelimiter(options,classes){var moreClasses=["nulldelimiter"].concat(options.baseSizingClasses());return makeSpan(classes.concat(moreClasses));};/**
 * This is a map of group types to the function used to handle that type.
 * Simpler types come at the beginning, while complicated types come afterwards.
 */var groupTypes={};groupTypes.mathord=function(group,options){return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].makeOrd(group,options,"mathord");};groupTypes.textord=function(group,options){return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].makeOrd(group,options,"textord");};groupTypes.bin=function(group,options){return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].mathsym(group.value,group.mode,options,["mbin"]);};groupTypes.rel=function(group,options){return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].mathsym(group.value,group.mode,options,["mrel"]);};groupTypes.open=function(group,options){return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].mathsym(group.value,group.mode,options,["mopen"]);};groupTypes.close=function(group,options){return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].mathsym(group.value,group.mode,options,["mclose"]);};groupTypes.inner=function(group,options){return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].mathsym(group.value,group.mode,options,["minner"]);};groupTypes.punct=function(group,options){return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].mathsym(group.value,group.mode,options,["mpunct"]);};groupTypes.ordgroup=function(group,options){return makeSpan(["mord"],buildExpression(group.value,options,true),options);};groupTypes.supsub=function(group,options){// Superscript and subscripts are handled in the TeXbook on page
// 445-446, rules 18(a-f).
// Here is where we defer to the inner group if it should handle
// superscripts and subscripts itself.
if(shouldHandleSupSub(group,options)){return groupTypes[group.value.base.type](group,options);}var base=buildGroup(group.value.base,options);var supm=void 0;var subm=void 0;var metrics=options.fontMetrics();var newOptions=void 0;// Rule 18a
var supShift=0;var subShift=0;if(group.value.sup){newOptions=options.havingStyle(options.style.sup());supm=buildGroup(group.value.sup,newOptions,options);if(!__WEBPACK_IMPORTED_MODULE_7__utils__["a"/* default */].isCharacterBox(group.value.base)){supShift=base.height-newOptions.fontMetrics().supDrop*newOptions.sizeMultiplier/options.sizeMultiplier;}}if(group.value.sub){newOptions=options.havingStyle(options.style.sub());subm=buildGroup(group.value.sub,newOptions,options);if(!__WEBPACK_IMPORTED_MODULE_7__utils__["a"/* default */].isCharacterBox(group.value.base)){subShift=base.depth+newOptions.fontMetrics().subDrop*newOptions.sizeMultiplier/options.sizeMultiplier;}}// Rule 18c
var minSupShift=void 0;if(options.style===__WEBPACK_IMPORTED_MODULE_3__Style__["a"/* default */].DISPLAY){minSupShift=metrics.sup1;}else if(options.style.cramped){minSupShift=metrics.sup3;}else{minSupShift=metrics.sup2;}// scriptspace is a font-size-independent size, so scale it
// appropriately
var multiplier=options.sizeMultiplier;var scriptspace=0.5/metrics.ptPerEm/multiplier+"em";var supsub=void 0;if(!group.value.sup){// Rule 18b
subShift=Math.max(subShift,metrics.sub1,subm.height-0.8*metrics.xHeight);var vlistElem=[{type:"elem",elem:subm,marginRight:scriptspace}];// Subscripts shouldn't be shifted by the base's italic correction.
// Account for that by shifting the subscript back the appropriate
// amount. Note we only do this when the base is a single symbol.
if(base instanceof __WEBPACK_IMPORTED_MODULE_5__domTree__["a"/* default */].symbolNode){vlistElem[0].marginLeft=-base.italic+"em";}supsub=__WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].makeVList({positionType:"shift",positionData:subShift,children:vlistElem},options);}else if(!group.value.sub){// Rule 18c, d
supShift=Math.max(supShift,minSupShift,supm.depth+0.25*metrics.xHeight);supsub=__WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].makeVList({positionType:"shift",positionData:-supShift,children:[{type:"elem",elem:supm,marginRight:scriptspace}]},options);}else{supShift=Math.max(supShift,minSupShift,supm.depth+0.25*metrics.xHeight);subShift=Math.max(subShift,metrics.sub2);var ruleWidth=metrics.defaultRuleThickness;// Rule 18e
if(supShift-supm.depth-(subm.height-subShift)<4*ruleWidth){subShift=4*ruleWidth-(supShift-supm.depth)+subm.height;var psi=0.8*metrics.xHeight-(supShift-supm.depth);if(psi>0){supShift+=psi;subShift-=psi;}}var _vlistElem=[{type:"elem",elem:subm,shift:subShift,marginRight:scriptspace},{type:"elem",elem:supm,shift:-supShift,marginRight:scriptspace}];// See comment above about subscripts not being shifted
if(base instanceof __WEBPACK_IMPORTED_MODULE_5__domTree__["a"/* default */].symbolNode){_vlistElem[0].marginLeft=-base.italic+"em";}supsub=__WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].makeVList({positionType:"individualShift",children:_vlistElem},options);}// We ensure to wrap the supsub vlist in a span.msupsub to reset text-align
var mclass=getTypeOfDomTree(base)||"mord";return makeSpan([mclass],[base,makeSpan(["msupsub"],[supsub])],options);};groupTypes.spacing=function(group,options){if(group.value==="\\ "||group.value==="\\space"||group.value===" "||group.value==="~"){// Spaces are generated by adding an actual space. Each of these
// things has an entry in the symbols table, so these will be turned
// into appropriate outputs.
if(group.mode==="text"){return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].makeOrd(group,options,"textord");}else{return makeSpan(["mspace"],[__WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].mathsym(group.value,group.mode,options)],options);}}else{// Other kinds of spaces are of arbitrary width. We use CSS to
// generate these.
return makeSpan(["mspace",__WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].spacingFunctions[group.value].className],[],options);}};groupTypes.horizBrace=function(group,options){var style=options.style;var hasSupSub=group.type==="supsub";var supSubGroup=void 0;var newOptions=void 0;if(hasSupSub){// Ref: LaTeX source2e: }}}}\limits}
// i.e. LaTeX treats the brace similar to an op and passes it
// with \limits, so we need to assign supsub style.
if(group.value.sup){newOptions=options.havingStyle(style.sup());supSubGroup=buildGroup(group.value.sup,newOptions,options);}else{newOptions=options.havingStyle(style.sub());supSubGroup=buildGroup(group.value.sub,newOptions,options);}group=group.value.base;}// Build the base group
var body=buildGroup(group.value.base,options.havingBaseStyle(__WEBPACK_IMPORTED_MODULE_3__Style__["a"/* default */].DISPLAY));// Create the stretchy element
var braceBody=__WEBPACK_IMPORTED_MODULE_8__stretchy__["a"/* default */].svgSpan(group,options);// Generate the vlist, with the appropriate kerns               ┏━━━━━━━━┓
// This first vlist contains the subject matter and the brace:   equation
var vlist=void 0;if(group.value.isOver){vlist=__WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:body},{type:"kern",size:0.1},{type:"elem",elem:braceBody}]},options);vlist.children[0].children[0].children[1].classes.push("svg-align");}else{vlist=__WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].makeVList({positionType:"bottom",positionData:body.depth+0.1+braceBody.height,children:[{type:"elem",elem:braceBody},{type:"kern",size:0.1},{type:"elem",elem:body}]},options);vlist.children[0].children[0].children[0].classes.push("svg-align");}if(hasSupSub){// In order to write the supsub, wrap the first vlist in another vlist:
// They can't all go in the same vlist, because the note might be wider
// than the equation. We want the equation to control the brace width.
//      note          long note           long note
//   ┏━━━━━━━━┓   or    ┏━━━┓     not    ┏━━━━━━━━━┓
//    equation           eqn                 eqn
var vSpan=makeSpan(["mord",group.value.isOver?"mover":"munder"],[vlist],options);if(group.value.isOver){vlist=__WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:vSpan},{type:"kern",size:0.2},{type:"elem",elem:supSubGroup}]},options);}else{vlist=__WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].makeVList({positionType:"bottom",positionData:vSpan.depth+0.2+supSubGroup.height,children:[{type:"elem",elem:supSubGroup},{type:"kern",size:0.2},{type:"elem",elem:vSpan}]},options);}}return makeSpan(["mord",group.value.isOver?"mover":"munder"],[vlist],options);};groupTypes.xArrow=function(group,options){var style=options.style;// Build the argument groups in the appropriate style.
// Ref: amsmath.dtx:   \hbox{$\scriptstyle\mkern#3mu{#6}\mkern#4mu$}%
var newOptions=options.havingStyle(style.sup());var upperGroup=buildGroup(group.value.body,newOptions,options);upperGroup.classes.push("x-arrow-pad");var lowerGroup=void 0;if(group.value.below){// Build the lower group
newOptions=options.havingStyle(style.sub());lowerGroup=buildGroup(group.value.below,newOptions,options);lowerGroup.classes.push("x-arrow-pad");}var arrowBody=__WEBPACK_IMPORTED_MODULE_8__stretchy__["a"/* default */].svgSpan(group,options);// Re shift: Note that stretchy.svgSpan returned arrowBody.depth = 0.
// The point we want on the math axis is at 0.5 * arrowBody.height.
var arrowShift=-options.fontMetrics().axisHeight+0.5*arrowBody.height;// 2 mu kern. Ref: amsmath.dtx: #7\if0#2\else\mkern#2mu\fi
var upperShift=-options.fontMetrics().axisHeight-0.5*arrowBody.height-0.111;if(group.value.label==="\\xleftequilibrium"){upperShift-=upperGroup.depth;}// Generate the vlist
var vlist=void 0;if(group.value.below){var lowerShift=-options.fontMetrics().axisHeight+lowerGroup.height+0.5*arrowBody.height+0.111;vlist=__WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].makeVList({positionType:"individualShift",children:[{type:"elem",elem:upperGroup,shift:upperShift},{type:"elem",elem:arrowBody,shift:arrowShift},{type:"elem",elem:lowerGroup,shift:lowerShift}]},options);}else{vlist=__WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].makeVList({positionType:"individualShift",children:[{type:"elem",elem:upperGroup,shift:upperShift},{type:"elem",elem:arrowBody,shift:arrowShift}]},options);}vlist.children[0].children[0].children[1].classes.push("svg-align");return makeSpan(["mrel","x-arrow"],[vlist],options);};groupTypes.mclass=function(group,options){var elements=buildExpression(group.value.value,options,true);return makeSpan([group.value.mclass],elements,options);};groupTypes.raisebox=function(group,options){var body=groupTypes.sizing({value:{value:[{type:"text",value:{body:group.value.value,font:"mathrm"// simulate \textrm
}}],size:6// simulate \normalsize
}},options);var dy=Object(__WEBPACK_IMPORTED_MODULE_6__units__["a"/* calculateSize */])(group.value.dy.value,options);return __WEBPACK_IMPORTED_MODULE_4__buildCommon__["a"/* default */].makeVList({positionType:"shift",positionData:-dy,children:[{type:"elem",elem:body}]},options);};/**
 * buildGroup is the function that takes a group and calls the correct groupType
 * function for it. It also handles the interaction of size and style changes
 * between parents and children.
 */var buildGroup=function buildGroup(group,options,baseOptions){if(!group){return makeSpan();}if(groupTypes[group.type]){// Call the groupTypes function
var groupNode=groupTypes[group.type](group,options);// If the size changed between the parent and the current group, account
// for that size difference.
if(baseOptions&&options.size!==baseOptions.size){groupNode=makeSpan(options.sizingClasses(baseOptions),[groupNode],options);var multiplier=options.sizeMultiplier/baseOptions.sizeMultiplier;groupNode.height*=multiplier;groupNode.depth*=multiplier;}return groupNode;}else{throw new __WEBPACK_IMPORTED_MODULE_2__ParseError__["a"/* default */]("Got group of unknown type: '"+group.type+"'");}};/**
 * Take an entire parse tree, and build it into an appropriate set of HTML
 * nodes.
 */function buildHTML(tree,options){// buildExpression is destructive, so we need to make a clone
// of the incoming tree so that it isn't accidentally changed
tree=JSON.parse(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(tree));// Build the expression contained in the tree
var expression=buildExpression(tree,options,true);var body=makeSpan(["base"],expression,options);// Add struts, which ensure that the top of the HTML element falls at the
// height of the expression, and the bottom of the HTML element falls at the
// depth of the expression.
var topStrut=makeSpan(["strut"]);var bottomStrut=makeSpan(["strut","bottom"]);topStrut.style.height=body.height+"em";bottomStrut.style.height=body.height+body.depth+"em";// We'd like to use `vertical-align: top` but in IE 9 this lowers the
// baseline of the box to the bottom of this strut (instead staying in the
// normal place) so we use an absolute value for vertical-align instead
bottomStrut.style.verticalAlign=-body.depth+"em";// Wrap the struts and body together
var htmlNode=makeSpan(["katex-html"],[topStrut,bottomStrut,body]);htmlNode.setAttribute("aria-hidden","true");return htmlNode;}/***/},/* 5 *//***/function(module,__webpack_exports__,__webpack_require__){var nativeIndexOf=Array.prototype.indexOf;var indexOf=function indexOf(list,elem){if(list==null){return-1;}if(nativeIndexOf&&list.indexOf===nativeIndexOf){return list.indexOf(elem);}var l=list.length;for(var i=0;i<l;i++){if(list[i]===elem){return i;}}return-1;};/**
 * Return whether an element is contained in a list
 */var contains=function contains(list,elem){return indexOf(list,elem)!==-1;};/**
 * Provide a default value if a setting is undefined
 * NOTE: Couldn't use `T` as the output type due to facebook/flow#5022.
 */var deflt=function deflt(setting,defaultIfUndefined){return setting===undefined?defaultIfUndefined:setting;};// hyphenate and escape adapted from Facebook's React under Apache 2 license
var uppercase=/([A-Z])/g;var hyphenate=function hyphenate(str){return str.replace(uppercase,"-$1").toLowerCase();};var ESCAPE_LOOKUP={"&":"&amp;",">":"&gt;","<":"&lt;","\"":"&quot;","'":"&#x27;"};var ESCAPE_REGEX=/[&><"']/g;/**
 * Escapes text to prevent scripting attacks.
 */function escape(text){return String(text).replace(ESCAPE_REGEX,function(match){return ESCAPE_LOOKUP[match];});}/**
 * A function to set the text content of a DOM element in all supported
 * browsers. Note that we don't define this if there is no document.
 */var setTextContent=void 0;if(typeof document!=="undefined"){var testNode=document.createElement("span");if("textContent"in testNode){setTextContent=function setTextContent(node,text){node.textContent=text;};}else{setTextContent=function setTextContent(node,text){node.innerText=text;};}}/**
 * A function to clear a node.
 */function clearNode(node){setTextContent(node,"");}/**
 * Sometimes we want to pull out the innermost element of a group. In most
 * cases, this will just be the group itself, but when ordgroups and colors have
 * a single element, we want to pull that out.
 */var getBaseElem=function getBaseElem(group){if(!group){return false;}else if(group.type==="ordgroup"){if(group.value.length===1){return getBaseElem(group.value[0]);}else{return group;}}else if(group.type==="color"){if(group.value.value.length===1){return getBaseElem(group.value.value[0]);}else{return group;}}else if(group.type==="font"){return getBaseElem(group.value.body);}else{return group;}};/**
 * TeXbook algorithms often reference "character boxes", which are simply groups
 * with a single character in them. To decide if something is a character box,
 * we find its innermost group, and see if it is a single character.
 */var isCharacterBox=function isCharacterBox(group){var baseElem=getBaseElem(group);// These are all they types of groups which hold single characters
return baseElem.type==="mathord"||baseElem.type==="textord"||baseElem.type==="bin"||baseElem.type==="rel"||baseElem.type==="inner"||baseElem.type==="open"||baseElem.type==="close"||baseElem.type==="punct";};/* harmony default export */__webpack_exports__["a"]={contains:contains,deflt:deflt,escape:escape,hyphenate:hyphenate,indexOf:indexOf,setTextContent:setTextContent,clearNode:clearNode,getBaseElem:getBaseElem,isCharacterBox:isCharacterBox};/***/},/* 6 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__ParseNode__=__webpack_require__(14);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__Token__=__webpack_require__(27);/**
 * This is the ParseError class, which is the main error thrown by KaTeX
 * functions when something has gone wrong. This is used to distinguish internal
 * errors from errors in the expression that the user provided.
 *
 * If possible, a caller should provide a Token or ParseNode with information
 * about where in the source string the problem occurred.
 */var ParseError=// Error position based on passed-in Token or ParseNode.
function ParseError(message,// The error message
token)// An object providing position information
{__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this,ParseError);var error="KaTeX parse error: "+message;var start=void 0;var loc=token&&token.loc;if(loc&&loc.start<=loc.end){// If we have the input and a position, make the error a bit fancier
// Get the input
var input=loc.lexer.input;// Prepend some information
start=loc.start;var end=loc.end;if(start===input.length){error+=" at end of input: ";}else{error+=" at position "+(start+1)+": ";}// Underline token in question using combining underscores
var underlined=input.slice(start,end).replace(/[^]/g,'$&\u0332');// Extract some context from the input and add it to the error
var left=void 0;if(start>15){left="…"+input.slice(start-15,start);}else{left=input.slice(0,start);}var right=void 0;if(end+15<input.length){right=input.slice(end,end+15)+"…";}else{right=input.slice(end);}error+=left+underlined+right;}// Some hackery to make ParseError a prototype of Error
// See http://stackoverflow.com/a/8460753
var self=new Error(error);self.name="ParseError";// $FlowFixMe
self.__proto__=ParseError.prototype;// $FlowFixMe
self.position=start;return self;};// $FlowFixMe More hackery
ParseError.prototype.__proto__=Error.prototype;/* harmony default export */__webpack_exports__["a"]=ParseError;/***/},/* 7 *//***/function(module,exports,__webpack_require__){exports.__esModule=true;exports.default=function(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}};/***/},/* 8 *//***/function(module,exports){var core=module.exports={version:'2.4.0'};if(typeof __e=='number')__e=core;// eslint-disable-line no-undef
/***/},/* 9 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__=__webpack_require__(10);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__);/**
 * This file contains information and classes for the various kinds of styles
 * used in TeX. It provides a generic `Style` class, which holds information
 * about a specific style. It then provides instances of all the different kinds
 * of styles possible, and provides functions to move between them and get
 * information about them.
 *//**
 * The main style class. Contains a unique id for the style, a size (which is
 * the same for cramped and uncramped version of a style), and a cramped flag.
 */var Style=function(){function Style(id,size,cramped){__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this,Style);this.id=id;this.size=size;this.cramped=cramped;}/**
     * Get the style of a superscript given a base in the current style.
     */__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default()(Style,[{key:"sup",value:function sup(){return styles[_sup[this.id]];}/**
         * Get the style of a subscript given a base in the current style.
         */},{key:"sub",value:function sub(){return styles[_sub[this.id]];}/**
         * Get the style of a fraction numerator given the fraction in the current
         * style.
         */},{key:"fracNum",value:function fracNum(){return styles[_fracNum[this.id]];}/**
         * Get the style of a fraction denominator given the fraction in the current
         * style.
         */},{key:"fracDen",value:function fracDen(){return styles[_fracDen[this.id]];}/**
         * Get the cramped version of a style (in particular, cramping a cramped style
         * doesn't change the style).
         */},{key:"cramp",value:function cramp(){return styles[_cramp[this.id]];}/**
         * Get a text or display version of this style.
         */},{key:"text",value:function text(){return styles[_text[this.id]];}/**
         * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
         */},{key:"isTight",value:function isTight(){return this.size>=2;}}]);return Style;}();// Export an interface for type checking, but don't expose the implementation.
// This way, no more styles can be generated.
// IDs of the different styles
var D=0;var Dc=1;var T=2;var Tc=3;var S=4;var Sc=5;var SS=6;var SSc=7;// Instances of the different styles
var styles=[new Style(D,0,false),new Style(Dc,0,true),new Style(T,1,false),new Style(Tc,1,true),new Style(S,2,false),new Style(Sc,2,true),new Style(SS,3,false),new Style(SSc,3,true)];// Lookup tables for switching from one style to another
var _sup=[S,Sc,S,Sc,SS,SSc,SS,SSc];var _sub=[Sc,Sc,Sc,Sc,SSc,SSc,SSc,SSc];var _fracNum=[T,Tc,S,Sc,SS,SSc,SS,SSc];var _fracDen=[Tc,Tc,Sc,Sc,SSc,SSc,SSc,SSc];var _cramp=[Dc,Dc,Tc,Tc,Sc,Sc,SSc,SSc];var _text=[D,Dc,T,Tc,T,Tc,T,Tc];// We only export some of the styles.
/* harmony default export */__webpack_exports__["a"]={DISPLAY:styles[D],TEXT:styles[T],SCRIPT:styles[S],SCRIPTSCRIPT:styles[SS]};/***/},/* 10 *//***/function(module,exports,__webpack_require__){exports.__esModule=true;var _defineProperty=__webpack_require__(73);var _defineProperty2=_interopRequireDefault(_defineProperty);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;(0, _defineProperty2.default)(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();/***/},/* 11 *//***/function(module,exports,__webpack_require__){var store=__webpack_require__(52)('wks'),uid=__webpack_require__(32),_Symbol=__webpack_require__(16).Symbol,USE_SYMBOL=typeof _Symbol=='function';var $exports=module.exports=function(name){return store[name]||(store[name]=USE_SYMBOL&&_Symbol[name]||(USE_SYMBOL?_Symbol:uid)('Symbol.'+name));};$exports.store=store;/***/},/* 12 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__=__webpack_require__(18);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign__=__webpack_require__(105);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass__=__webpack_require__(10);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__unicodeScripts__=__webpack_require__(42);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__utils__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__svgGeometry__=__webpack_require__(111);/**
 * These objects store the data about the DOM nodes we create, as well as some
 * extra data. They can then be transformed into real DOM nodes with the
 * `toNode` function or HTML markup using `toMarkup`. They are useful for both
 * storing extra properties on the nodes, as well as providing a way to easily
 * work with the DOM.
 *
 * Similar functions for working with MathML nodes exist in mathMLTree.js.
 *//**
 * Create an HTML className based on a list of classes. In addition to joining
 * with spaces, we also remove null or empty classes.
 */var createClass$$1=function createClass$$1(classes){classes=classes.slice();for(var i=classes.length-1;i>=0;i--){if(!classes[i]){classes.splice(i,1);}}return classes.join(" ");};// To ensure that all nodes have compatible signatures for these methods.
/**
 * All `DomChildNode`s MUST have `height`, `depth`, and `maxFontSize` numeric
 * fields.
 *
 * `DomChildNode` is not defined as an interface since `documentFragment` also
 * has these fields but should not be considered a `DomChildNode`.
 *//**
 * This node represents a span node, with a className, a list of children, and
 * an inline style. It also contains information about its height, depth, and
 * maxFontSize.
 */var span=function(){function span(classes,children,options,style){__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default()(this,span);this.classes=classes||[];this.children=children||[];this.height=0;this.depth=0;this.maxFontSize=0;this.style=__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign___default()({},style);this.attributes={};if(options){if(options.style.isTight()){this.classes.push("mtight");}var color=options.getColor();if(color){this.style.color=color;}}}/**
     * Sets an arbitrary attribute on the span. Warning: use this wisely. Not all
     * browsers support attributes the same, and having too many custom attributes
     * is probably bad.
     */__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default()(span,[{key:"setAttribute",value:function setAttribute(attribute,value){this.attributes[attribute]=value;}},{key:"tryCombine",value:function tryCombine(sibling){return false;}/**
         * Convert the span into an HTML node
         */},{key:"toNode",value:function toNode(){var span=document.createElement("span");// Apply the class
span.className=createClass$$1(this.classes);// Apply inline styles
for(var style in this.style){if(Object.prototype.hasOwnProperty.call(this.style,style)){// $FlowFixMe Flow doesn't seem to understand span.style's type.
span.style[style]=this.style[style];}}// Apply attributes
for(var attr in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,attr)){span.setAttribute(attr,this.attributes[attr]);}}// Append the children, also as HTML nodes
for(var i=0;i<this.children.length;i++){span.appendChild(this.children[i].toNode());}return span;}/**
         * Convert the span into an HTML markup string
         */},{key:"toMarkup",value:function toMarkup(){var markup="<span";// Add the class
if(this.classes.length){markup+=" class=\"";markup+=__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].escape(createClass$$1(this.classes));markup+="\"";}var styles="";// Add the styles, after hyphenation
for(var style in this.style){if(this.style.hasOwnProperty(style)){styles+=__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].hyphenate(style)+":"+this.style[style]+";";}}if(styles){markup+=" style=\""+__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].escape(styles)+"\"";}// Add the attributes
for(var attr in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,attr)){markup+=" "+attr+"=\"";markup+=__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].escape(this.attributes[attr]);markup+="\"";}}markup+=">";// Add the markup of the children, also as markup
for(var i=0;i<this.children.length;i++){markup+=this.children[i].toMarkup();}markup+="</span>";return markup;}}]);return span;}();/**
 * This node represents an anchor (<a>) element with a hyperlink, a list of classes,
 * a list of children, and an inline style. It also contains information about its
 * height, depth, and maxFontSize.
 */var anchor=function(){function anchor(href,classes,children,options){__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default()(this,anchor);this.href=href;this.classes=classes;this.children=children;this.height=0;this.depth=0;this.maxFontSize=0;this.style={};this.attributes={};if(options.style.isTight()){this.classes.push("mtight");}var color=options.getColor();if(color){this.style.color=color;}}/**
     * Sets an arbitrary attribute on the anchor. Warning: use this wisely. Not all
     * browsers support attributes the same, and having too many custom attributes
     * is probably bad.
     */__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default()(anchor,[{key:"setAttribute",value:function setAttribute(attribute,value){this.attributes[attribute]=value;}},{key:"tryCombine",value:function tryCombine(sibling){return false;}/**
         * Convert the anchor into an HTML node
         */},{key:"toNode",value:function toNode(){var a=document.createElement("a");// Apply the href
a.setAttribute('href',this.href);// Apply the class
if(this.classes.length){a.className=createClass$$1(this.classes);}// Apply inline styles
for(var style in this.style){if(Object.prototype.hasOwnProperty.call(this.style,style)){// $FlowFixMe Flow doesn't seem to understand a.style's type.
a.style[style]=this.style[style];}}// Apply attributes
for(var attr in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,attr)){a.setAttribute(attr,this.attributes[attr]);}}// Append the children, also as HTML nodes
for(var i=0;i<this.children.length;i++){a.appendChild(this.children[i].toNode());}return a;}/**
         * Convert the a into an HTML markup string
         */},{key:"toMarkup",value:function toMarkup(){var markup="<a";// Add the href
markup+="href=\""+(markup+=__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].escape(this.href))+"\"";// Add the class
if(this.classes.length){markup+=" class=\""+__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].escape(createClass$$1(this.classes))+"\"";}var styles="";// Add the styles, after hyphenation
for(var style in this.style){if(this.style.hasOwnProperty(style)){styles+=__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].hyphenate(style)+":"+this.style[style]+";";}}if(styles){markup+=" style=\""+__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].escape(styles)+"\"";}// Add the attributes
for(var attr in this.attributes){if(attr!=="href"&&Object.prototype.hasOwnProperty.call(this.attributes,attr)){markup+=" "+attr+"=\""+__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].escape(this.attributes[attr])+"\"";}}markup+=">";// Add the markup of the children, also as markup
var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(this.children),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var child=_step.value;markup+=child.toMarkup();}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}markup+="</a>";return markup;}}]);return anchor;}();/**
 * This node represents a document fragment, which contains elements, but when
 * placed into the DOM doesn't have any representation itself. Thus, it only
 * contains children and doesn't have any HTML properties. It also keeps track
 * of a height, depth, and maxFontSize.
 */var documentFragment=function(){function documentFragment(children){__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default()(this,documentFragment);this.children=children||[];this.height=0;this.depth=0;this.maxFontSize=0;}/**
     * Convert the fragment into a node
     */__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default()(documentFragment,[{key:"toNode",value:function toNode(){// Create a fragment
var frag=document.createDocumentFragment();// Append the children
for(var i=0;i<this.children.length;i++){frag.appendChild(this.children[i].toNode());}return frag;}/**
         * Convert the fragment into HTML markup
         */},{key:"toMarkup",value:function toMarkup(){var markup="";// Simply concatenate the markup for the children together
for(var i=0;i<this.children.length;i++){markup+=this.children[i].toMarkup();}return markup;}}]);return documentFragment;}();var iCombinations={'î':'\u0131\u0302','ï':'\u0131\u0308','í':'\u0131\u0301',// 'ī': '\u0131\u0304', // enable when we add Extended Latin
'ì':'\u0131\u0300'};/**
 * A symbol node contains information about a single symbol. It either renders
 * to a single text node, or a span with a single text node in it, depending on
 * whether it has CSS classes, styles, or needs italic correction.
 */var symbolNode=function(){function symbolNode(value,height,depth,italic,skew,width,classes,style){__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default()(this,symbolNode);this.value=value;this.height=height||0;this.depth=depth||0;this.italic=italic||0;this.skew=skew||0;this.width=width||0;this.classes=classes||[];this.style=__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign___default()({},style);this.maxFontSize=0;// Mark text from non-Latin scripts with specific classes so that we
// can specify which fonts to use.  This allows us to render these
// characters with a serif font in situations where the browser would
// either default to a sans serif or render a placeholder character.
// We use CSS class names like cjk_fallback, hangul_fallback and
// brahmic_fallback. See ./unicodeScripts.js for the set of possible
// script names
var script=Object(__WEBPACK_IMPORTED_MODULE_4__unicodeScripts__["a"/* scriptFromCodepoint */])(this.value.charCodeAt(0));if(script){this.classes.push(script+"_fallback");}if(/[îïíì]/.test(this.value)){// add ī when we add Extended Latin
this.value=iCombinations[this.value];}}__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default()(symbolNode,[{key:"tryCombine",value:function tryCombine(sibling){if(!sibling||!(sibling instanceof symbolNode)||this.italic>0||createClass$$1(this.classes)!==createClass$$1(sibling.classes)||this.skew!==sibling.skew||this.maxFontSize!==sibling.maxFontSize){return false;}for(var style in this.style){if(this.style.hasOwnProperty(style)&&this.style[style]!==sibling.style[style]){return false;}}for(var _style in sibling.style){if(sibling.style.hasOwnProperty(_style)&&this.style[_style]!==sibling.style[_style]){return false;}}this.value+=sibling.value;this.height=Math.max(this.height,sibling.height);this.depth=Math.max(this.depth,sibling.depth);this.italic=sibling.italic;return true;}/**
         * Creates a text node or span from a symbol node. Note that a span is only
         * created if it is needed.
         */},{key:"toNode",value:function toNode(){var node=document.createTextNode(this.value);var span=null;if(this.italic>0){span=document.createElement("span");span.style.marginRight=this.italic+"em";}if(this.classes.length>0){span=span||document.createElement("span");span.className=createClass$$1(this.classes);}for(var style in this.style){if(this.style.hasOwnProperty(style)){span=span||document.createElement("span");// $FlowFixMe Flow doesn't seem to understand span.style's type.
span.style[style]=this.style[style];}}if(span){span.appendChild(node);return span;}else{return node;}}/**
         * Creates markup for a symbol node.
         */},{key:"toMarkup",value:function toMarkup(){// TODO(alpert): More duplication than I'd like from
// span.prototype.toMarkup and symbolNode.prototype.toNode...
var needsSpan=false;var markup="<span";if(this.classes.length){needsSpan=true;markup+=" class=\"";markup+=__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].escape(createClass$$1(this.classes));markup+="\"";}var styles="";if(this.italic>0){styles+="margin-right:"+this.italic+"em;";}for(var style in this.style){if(this.style.hasOwnProperty(style)){styles+=__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].hyphenate(style)+":"+this.style[style]+";";}}if(styles){needsSpan=true;markup+=" style=\""+__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].escape(styles)+"\"";}var escaped=__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].escape(this.value);if(needsSpan){markup+=">";markup+=escaped;markup+="</span>";return markup;}else{return escaped;}}}]);return symbolNode;}();/**
 * SVG nodes are used to render stretchy wide elements.
 */var svgNode=function(){function svgNode(children,attributes){__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default()(this,svgNode);this.children=children||[];this.attributes=attributes||{};this.height=0;this.depth=0;this.maxFontSize=0;}// Required for all `DomChildNode`s. Are always 0 for svgNode.
__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default()(svgNode,[{key:"toNode",value:function toNode(){var svgNS="http://www.w3.org/2000/svg";var node=document.createElementNS(svgNS,"svg");// Apply attributes
for(var attr in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,attr)){node.setAttribute(attr,this.attributes[attr]);}}for(var i=0;i<this.children.length;i++){node.appendChild(this.children[i].toNode());}return node;}},{key:"toMarkup",value:function toMarkup(){var markup="<svg";// Apply attributes
for(var attr in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,attr)){markup+=" "+attr+"='"+this.attributes[attr]+"'";}}markup+=">";for(var i=0;i<this.children.length;i++){markup+=this.children[i].toMarkup();}markup+="</svg>";return markup;}}]);return svgNode;}();var pathNode=function(){function pathNode(pathName,alternate){__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default()(this,pathNode);this.pathName=pathName;this.alternate=alternate;// Used only for tall \sqrt
}__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default()(pathNode,[{key:"toNode",value:function toNode(){var svgNS="http://www.w3.org/2000/svg";var node=document.createElementNS(svgNS,"path");if(this.alternate){node.setAttribute("d",this.alternate);}else{node.setAttribute("d",__WEBPACK_IMPORTED_MODULE_6__svgGeometry__["a"/* default */].path[this.pathName]);}return node;}},{key:"toMarkup",value:function toMarkup(){if(this.alternate){return"<path d='"+this.alternate+"'/>";}else{return"<path d='"+__WEBPACK_IMPORTED_MODULE_6__svgGeometry__["a"/* default */].path[this.pathName]+"'/>";}}}]);return pathNode;}();var lineNode=function(){function lineNode(attributes){__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_classCallCheck___default()(this,lineNode);this.attributes=attributes||{};}__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_createClass___default()(lineNode,[{key:"toNode",value:function toNode(){var svgNS="http://www.w3.org/2000/svg";var node=document.createElementNS(svgNS,"line");// Apply attributes
for(var attr in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,attr)){node.setAttribute(attr,this.attributes[attr]);}}return node;}},{key:"toMarkup",value:function toMarkup(){var markup="<line";for(var attr in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,attr)){markup+=" "+attr+"='"+this.attributes[attr]+"'";}}markup+="/>";return markup;}}]);return lineNode;}();/* harmony default export */__webpack_exports__["a"]={span:span,anchor:anchor,documentFragment:documentFragment,symbolNode:symbolNode,svgNode:svgNode,pathNode:pathNode,lineNode:lineNode};/***/},/* 13 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray__=__webpack_require__(57);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__domTree__=__webpack_require__(12);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__utils__=__webpack_require__(5);/**
 * This file provides support to buildMathML.js and buildHTML.js
 * for stretchy wide elements rendered from SVG files
 * and other CSS trickery.
 */var stretchyCodePoint={widehat:"^",widetilde:"~",utilde:"~",overleftarrow:'\u2190',underleftarrow:'\u2190',xleftarrow:'\u2190',overrightarrow:'\u2192',underrightarrow:'\u2192',xrightarrow:'\u2192',underbrace:'\u23B5',overbrace:'\u23DE',overleftrightarrow:'\u2194',underleftrightarrow:'\u2194',xleftrightarrow:'\u2194',Overrightarrow:'\u21D2',xRightarrow:'\u21D2',overleftharpoon:'\u21BC',xleftharpoonup:'\u21BC',overrightharpoon:'\u21C0',xrightharpoonup:'\u21C0',xLeftarrow:'\u21D0',xLeftrightarrow:'\u21D4',xhookleftarrow:'\u21A9',xhookrightarrow:'\u21AA',xmapsto:'\u21A6',xrightharpoondown:'\u21C1',xleftharpoondown:'\u21BD',xrightleftharpoons:'\u21CC',xleftrightharpoons:'\u21CB',xtwoheadleftarrow:'\u219E',xtwoheadrightarrow:'\u21A0',xlongequal:"=",xtofrom:'\u21C4',xrightleftarrows:'\u21C4',xrightequilibrium:'\u21CC',// Not a perfect match.
xleftequilibrium:'\u21CB'// None better available.
};var mathMLnode=function mathMLnode(label){var node=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mo",[new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].TextNode(stretchyCodePoint[label.substr(1)])]);node.setAttribute("stretchy","true");return node;};// Many of the KaTeX SVG images have been adapted from glyphs in KaTeX fonts.
// Copyright (c) 2009-2010, Design Science, Inc. (<www.mathjax.org>)
// Copyright (c) 2014-2017 Khan Academy (<www.khanacademy.org>)
// Licensed under the SIL Open Font License, Version 1.1.
// See \nhttp://scripts.sil.org/OFL
// Very Long SVGs
//    Many of the KaTeX stretchy wide elements use a long SVG image and an
//    overflow: hidden tactic to achieve a stretchy image while avoiding
//    distortion of arrowheads or brace corners.
//    The SVG typically contains a very long (400 em) arrow.
//    The SVG is in a container span that has overflow: hidden, so the span
//    acts like a window that exposes only part of the  SVG.
//    The SVG always has a longer, thinner aspect ratio than the container span.
//    After the SVG fills 100% of the height of the container span,
//    there is a long arrow shaft left over. That left-over shaft is not shown.
//    Instead, it is sliced off because the span's CSS has overflow: hidden.
//    Thus, the reader sees an arrow that matches the subject matter width
//    without distortion.
//    Some functions, such as \cancel, need to vary their aspect ratio. These
//    functions do not get the overflow SVG treatment.
// Second Brush Stroke
//    Low resolution monitors struggle to display images in fine detail.
//    So browsers apply anti-aliasing. A long straight arrow shaft therefore
//    will sometimes appear as if it has a blurred edge.
//    To mitigate this, these SVG files contain a second "brush-stroke" on the
//    arrow shafts. That is, a second long thin rectangular SVG path has been
//    written directly on top of each arrow shaft. This reinforcement causes
//    some of the screen pixels to display as black instead of the anti-aliased
//    gray pixel that a  single path would generate. So we get arrow shafts
//    whose edges appear to be sharper.
// In the katexImagesData object just below, the dimensions all
// correspond to path geometry inside the relevant SVG.
// For example, \overrightarrow uses the same arrowhead as glyph U+2192
// from the KaTeX Main font. The scaling factor is 1000.
// That is, inside the font, that arrowhead is 522 units tall, which
// corresponds to 0.522 em inside the document.
var katexImagesData={//   path(s), minWidth, height, align
overrightarrow:[["rightarrow"],0.888,522,"xMaxYMin"],overleftarrow:[["leftarrow"],0.888,522,"xMinYMin"],underrightarrow:[["rightarrow"],0.888,522,"xMaxYMin"],underleftarrow:[["leftarrow"],0.888,522,"xMinYMin"],xrightarrow:[["rightarrow"],1.469,522,"xMaxYMin"],xleftarrow:[["leftarrow"],1.469,522,"xMinYMin"],Overrightarrow:[["doublerightarrow"],0.888,560,"xMaxYMin"],xRightarrow:[["doublerightarrow"],1.526,560,"xMaxYMin"],xLeftarrow:[["doubleleftarrow"],1.526,560,"xMinYMin"],overleftharpoon:[["leftharpoon"],0.888,522,"xMinYMin"],xleftharpoonup:[["leftharpoon"],0.888,522,"xMinYMin"],xleftharpoondown:[["leftharpoondown"],0.888,522,"xMinYMin"],overrightharpoon:[["rightharpoon"],0.888,522,"xMaxYMin"],xrightharpoonup:[["rightharpoon"],0.888,522,"xMaxYMin"],xrightharpoondown:[["rightharpoondown"],0.888,522,"xMaxYMin"],xlongequal:[["longequal"],0.888,334,"xMinYMin"],xtwoheadleftarrow:[["twoheadleftarrow"],0.888,334,"xMinYMin"],xtwoheadrightarrow:[["twoheadrightarrow"],0.888,334,"xMaxYMin"],overleftrightarrow:[["leftarrow","rightarrow"],0.888,522],overbrace:[["leftbrace","midbrace","rightbrace"],1.6,548],underbrace:[["leftbraceunder","midbraceunder","rightbraceunder"],1.6,548],underleftrightarrow:[["leftarrow","rightarrow"],0.888,522],xleftrightarrow:[["leftarrow","rightarrow"],1.75,522],xLeftrightarrow:[["doubleleftarrow","doublerightarrow"],1.75,560],xrightleftharpoons:[["leftharpoondownplus","rightharpoonplus"],1.75,716],xleftrightharpoons:[["leftharpoonplus","rightharpoondownplus"],1.75,716],xhookleftarrow:[["leftarrow","righthook"],1.08,522],xhookrightarrow:[["lefthook","rightarrow"],1.08,522],overlinesegment:[["leftlinesegment","rightlinesegment"],0.888,522],underlinesegment:[["leftlinesegment","rightlinesegment"],0.888,522],overgroup:[["leftgroup","rightgroup"],0.888,342],undergroup:[["leftgroupunder","rightgroupunder"],0.888,342],xmapsto:[["leftmapsto","rightarrow"],1.5,522],xtofrom:[["leftToFrom","rightToFrom"],1.75,528],// The next three arrows are from the mhchem package.
// In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
// document as \xrightarrow or \xrightleftharpoons. Those have
// min-length = 1.75em, so we set min-length on these next three to match.
xrightleftarrows:[["baraboveleftarrow","rightarrowabovebar"],1.75,667],xrightequilibrium:[["baraboveshortleftharpoon","rightharpoonaboveshortbar"],1.75,716],xleftequilibrium:[["shortbaraboveleftharpoon","shortrightharpoonabovebar"],1.75,716]};var groupLength=function groupLength(arg){if(arg.type==="ordgroup"){return arg.value.length;}else{return 1;}};var svgSpan=function svgSpan(group,options){// Create a span with inline SVG for the element.
function buildSvgSpan_(){var viewBoxWidth=400000;// default
var label=group.value.label.substr(1);if(__WEBPACK_IMPORTED_MODULE_4__utils__["a"/* default */].contains(["widehat","widetilde","utilde"],label)){// There are four SVG images available for each function.
// Choose a taller image when there are more characters.
var numChars=groupLength(group.value.base);var viewBoxHeight=void 0;var pathName=void 0;var _height=void 0;if(numChars>5){viewBoxHeight=label==="widehat"?420:312;viewBoxWidth=label==="widehat"?2364:2340;// Next get the span height, in 1000 ems
_height=label==="widehat"?0.42:0.34;pathName=(label==="widehat"?"widehat":"tilde")+"4";}else{var imgIndex=[1,1,2,2,3,3][numChars];if(label==="widehat"){viewBoxWidth=[0,1062,2364,2364,2364][imgIndex];viewBoxHeight=[0,239,300,360,420][imgIndex];_height=[0,0.24,0.3,0.3,0.36,0.42][imgIndex];pathName="widehat"+imgIndex;}else{viewBoxWidth=[0,600,1033,2339,2340][imgIndex];viewBoxHeight=[0,260,286,306,312][imgIndex];_height=[0,0.26,0.286,0.3,0.306,0.34][imgIndex];pathName="tilde"+imgIndex;}}var path=new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"/* default */].pathNode(pathName);var svgNode=new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"/* default */].svgNode([path],{"width":"100%","height":_height+"em","viewBox":"0 0 "+viewBoxWidth+" "+viewBoxHeight,"preserveAspectRatio":"none"});return{span:__WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"/* default */].makeSpan([],[svgNode],options),minWidth:0,height:_height};}else{var spans=[];var _katexImagesData$labe=__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray___default()(katexImagesData[label],4),paths=_katexImagesData$labe[0],_minWidth=_katexImagesData$labe[1],_viewBoxHeight=_katexImagesData$labe[2],align1=_katexImagesData$labe[3];var _height2=_viewBoxHeight/1000;var numSvgChildren=paths.length;var widthClasses=void 0;var aligns=void 0;if(numSvgChildren===1){widthClasses=["hide-tail"];aligns=[align1];}else if(numSvgChildren===2){widthClasses=["halfarrow-left","halfarrow-right"];aligns=["xMinYMin","xMaxYMin"];}else if(numSvgChildren===3){widthClasses=["brace-left","brace-center","brace-right"];aligns=["xMinYMin","xMidYMin","xMaxYMin"];}else{throw new Error("Correct katexImagesData or update code here to support\n                    "+numSvgChildren+" children.");}for(var i=0;i<numSvgChildren;i++){var _path=new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"/* default */].pathNode(paths[i]);var _svgNode=new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"/* default */].svgNode([_path],{"width":"400em","height":_height2+"em","viewBox":"0 0 "+viewBoxWidth+" "+_viewBoxHeight,"preserveAspectRatio":aligns[i]+" slice"});var _span=__WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"/* default */].makeSpan([widthClasses[i]],[_svgNode],options);if(numSvgChildren===1){return{span:_span,minWidth:_minWidth,height:_height2};}else{_span.style.height=_height2+"em";spans.push(_span);}}return{span:__WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"/* default */].makeSpan(["stretchy"],spans,options),minWidth:_minWidth,height:_height2};}}// buildSvgSpan_()
var _buildSvgSpan_=buildSvgSpan_(),span=_buildSvgSpan_.span,minWidth=_buildSvgSpan_.minWidth,height=_buildSvgSpan_.height;// Note that we are returning span.depth = 0.
// Any adjustments relative to the baseline must be done in buildHTML.
span.height=height;span.style.height=height+"em";if(minWidth>0){span.style.minWidth=minWidth+"em";}return span;};var encloseSpan=function encloseSpan(inner,label,pad,options){// Return an image span for \cancel, \bcancel, \xcancel, or \fbox
var img=void 0;var totalHeight=inner.height+inner.depth+2*pad;if(/fbox|color/.test(label)){img=__WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"/* default */].makeSpan(["stretchy",label],[],options);if(label==="fbox"){var color=options.color&&options.getColor();if(color){img.style.borderColor=color;}}}else{// \cancel, \bcancel, or \xcancel
// Since \cancel's SVG is inline and it omits the viewBox attribute,
// its stroke-width will not vary with span area.
var lines=[];if(/^[bx]cancel$/.test(label)){lines.push(new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"/* default */].lineNode({"x1":"0","y1":"0","x2":"100%","y2":"100%","stroke-width":"0.046em"}));}if(/^x?cancel$/.test(label)){lines.push(new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"/* default */].lineNode({"x1":"0","y1":"100%","x2":"100%","y2":"0","stroke-width":"0.046em"}));}var svgNode=new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"/* default */].svgNode(lines,{"width":"100%","height":totalHeight+"em"});img=__WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"/* default */].makeSpan([],[svgNode],options);}img.height=totalHeight;img.style.height=totalHeight+"em";return img;};var ruleSpan=function ruleSpan(className,lineThickness,options){// Get a span with an SVG path that fills the middle fifth of the span.
// We're using an extra wide span so Chrome won't round it down to zero.
var path=void 0;var svgNode=void 0;var parentClass="stretchy";// default
if(className==="vertical-separator"){path=new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"/* default */].pathNode("vertSeparator");svgNode=new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"/* default */].svgNode([path],{"width":"0.25em",// contains a path that is 0.05 ems wide.
"height":"400em","viewBox":"0 0 250 400000","preserveAspectRatio":"xMinYMin slice"});parentClass="vertical-separator";}else{// The next two lines are the only place in KaTeX where SVG paths are
// put into a viewBox that is not always exactly a 1000:1 scale to the
// document em size. Instead, the path is a horizontal line set to
// take up the middle fifth of the viewBox and span. If the context is
// normalsize/textstyle then the line will be 0.04em and the usual
// 1000:1 ratio holds. But if the context is scriptstyle, then
// lineThickness > 0.04em and we have a ratio somewhat different than
// 1000:1.
path=new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"/* default */].pathNode("stdHorizRule");svgNode=new __WEBPACK_IMPORTED_MODULE_1__domTree__["a"/* default */].svgNode([path],{"width":"400em","height":5*lineThickness+"em","viewBox":"0 0 400000 200","preserveAspectRatio":"xMinYMin slice"});}return __WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"/* default */].makeSpan([parentClass],[svgNode],options);};/* harmony default export */__webpack_exports__["a"]={encloseSpan:encloseSpan,mathMLnode:mathMLnode,ruleSpan:ruleSpan,svgSpan:svgSpan};/***/},/* 14 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__SourceLocation__=__webpack_require__(31);/**
 * The resulting parse tree nodes of the parse tree.
 *
 * It is possible to provide position information, so that a `ParseNode` can
 * fulfill a role similar to a `Token` in error reporting.
 * For details on the corresponding properties see `Token` constructor.
 * Providing such information can lead to better error reporting.
 */var ParseNode=function ParseNode(type,// type of node, like e.g. "ordgroup"
value,// type-specific representation of the node
mode,// parse mode in action for this node, "math" or "text"
first,// first token or node of the input for
last)// last token or node of the input for this
// node, will default to firstToken if unset
{__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this,ParseNode);this.type=type;this.value=value;this.mode=mode;this.loc=__WEBPACK_IMPORTED_MODULE_1__SourceLocation__["a"/* default */].range(first,last);};/* harmony default export */__webpack_exports__["a"]=ParseNode;/***/},/* 15 *//***/function(module,exports,__webpack_require__){var anObject=__webpack_require__(22),IE8_DOM_DEFINE=__webpack_require__(70),toPrimitive=__webpack_require__(71),dP=Object.defineProperty;exports.f=__webpack_require__(23)?Object.defineProperty:function defineProperty$$1(O,P,Attributes){anObject(O);P=toPrimitive(P,true);anObject(Attributes);if(IE8_DOM_DEFINE)try{return dP(O,P,Attributes);}catch(e){/* empty */}if('get'in Attributes||'set'in Attributes)throw TypeError('Accessors not supported!');if('value'in Attributes)O[P]=Attributes.value;return O;};/***/},/* 16 *//***/function(module,exports){// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global=module.exports=typeof window!='undefined'&&window.Math==Math?window:typeof self!='undefined'&&self.Math==Math?self:Function('return this')();if(typeof __g=='number')__g=global;// eslint-disable-line no-undef
/***/},/* 17 *//***/function(module,exports){module.exports={};/***/},/* 18 *//***/function(module,exports,__webpack_require__){module.exports={"default":__webpack_require__(103),__esModule:true};/***/},/* 19 *//***/function(module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,"b",function(){return validUnit;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return calculateSize;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__ParseError__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__Options__=__webpack_require__(43);/**
 * This file does conversion between units.  In particular, it provides
 * calculateSize to convert other units into ems.
 */// This table gives the number of TeX pts in one of each *absolute* TeX unit.
// Thus, multiplying a length by this number converts the length from units
// into pts.  Dividing the result by ptPerEm gives the number of ems
// *assuming* a font size of ptPerEm (normal size, normal style).
var ptPerUnit={// https://en.wikibooks.org/wiki/LaTeX/Lengths and
// https://tex.stackexchange.com/a/8263
"pt":1,// TeX point
"mm":7227/2540,// millimeter
"cm":7227/254,// centimeter
"in":72.27,// inch
"bp":803/800,// big (PostScript) points
"pc":12,// pica
"dd":1238/1157,// didot
"cc":14856/1157,// cicero (12 didot)
"nd":685/642,// new didot
"nc":1370/107,// new cicero (12 new didot)
"sp":1/65536,// scaled point (TeX's internal smallest unit)
// https://tex.stackexchange.com/a/41371
"px":803/800// \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX
};// Dictionary of relative units, for fast validity testing.
var relativeUnit={"ex":true,"em":true,"mu":true};/**
 * Determine whether the specified unit (either a string defining the unit
 * or a "size" parse node containing a unit field) is valid.
 */var validUnit=function validUnit(unit){if(typeof unit!=="string"){unit=unit.unit;}return unit in ptPerUnit||unit in relativeUnit||unit==="ex";};/*
 * Convert a "size" parse node (with numeric "number" and string "unit" fields,
 * as parsed by functions.js argType "size") into a CSS em value for the
 * current style/scale.  `options` gives the current options.
 */var calculateSize=function calculateSize(sizeValue,options){var scale=void 0;if(sizeValue.unit in ptPerUnit){// Absolute units
scale=ptPerUnit[sizeValue.unit]// Convert unit to pt
/options.fontMetrics().ptPerEm// Convert pt to CSS em
/options.sizeMultiplier;// Unscale to make absolute units
}else if(sizeValue.unit==="mu"){// `mu` units scale with scriptstyle/scriptscriptstyle.
scale=options.fontMetrics().cssEmPerMu;}else{// Other relative units always refer to the *textstyle* font
// in the current size.
var unitOptions=void 0;if(options.style.isTight()){// isTight() means current style is script/scriptscript.
unitOptions=options.havingStyle(options.style.text());}else{unitOptions=options;}// TODO: In TeX these units are relative to the quad of the current
// *text* font, e.g. cmr10. KaTeX instead uses values from the
// comparably-sized *Computer Modern symbol* font. At 10pt, these
// match. At 7pt and 5pt, they differ: cmr7=1.138894, cmsy7=1.170641;
// cmr5=1.361133, cmsy5=1.472241. Consider $\scriptsize a\kern1emb$.
// TeX \showlists shows a kern of 1.13889 * fontsize;
// KaTeX shows a kern of 1.171 * fontsize.
if(sizeValue.unit==="ex"){scale=unitOptions.fontMetrics().xHeight;}else if(sizeValue.unit==="em"){scale=unitOptions.fontMetrics().quad;}else{throw new __WEBPACK_IMPORTED_MODULE_0__ParseError__["a"/* default */]("Invalid unit: '"+sizeValue.unit+"'");}if(unitOptions!==options){scale*=unitOptions.sizeMultiplier/options.sizeMultiplier;}}return Math.min(sizeValue.number*scale,options.maxSize);};/***/},/* 20 *//***/function(module,exports){module.exports=function(it){return(typeof it==='undefined'?'undefined':_typeof(it))==='object'?it!==null:typeof it==='function';};/***/},/* 21 *//***/function(module,exports){var hasOwnProperty={}.hasOwnProperty;module.exports=function(it,key){return hasOwnProperty.call(it,key);};/***/},/* 22 *//***/function(module,exports,__webpack_require__){var isObject=__webpack_require__(20);module.exports=function(it){if(!isObject(it))throw TypeError(it+' is not an object!');return it;};/***/},/* 23 *//***/function(module,exports,__webpack_require__){// Thank's IE8 for his funny defineProperty
module.exports=!__webpack_require__(24)(function(){return Object.defineProperty({},'a',{get:function get$$1(){return 7;}}).a!=7;});/***/},/* 24 *//***/function(module,exports){module.exports=function(exec){try{return!!exec();}catch(e){return true;}};/***/},/* 25 *//***/function(module,exports,__webpack_require__){var global=__webpack_require__(16),core=__webpack_require__(8),ctx=__webpack_require__(47),hide=__webpack_require__(26),PROTOTYPE='prototype';var $export=function $export(type,name,source){var IS_FORCED=type&$export.F,IS_GLOBAL=type&$export.G,IS_STATIC=type&$export.S,IS_PROTO=type&$export.P,IS_BIND=type&$export.B,IS_WRAP=type&$export.W,exports=IS_GLOBAL?core:core[name]||(core[name]={}),expProto=exports[PROTOTYPE],target=IS_GLOBAL?global:IS_STATIC?global[name]:(global[name]||{})[PROTOTYPE],key,own,out;if(IS_GLOBAL)source=name;for(key in source){// contains in native
own=!IS_FORCED&&target&&target[key]!==undefined;if(own&&key in exports)continue;// export native or passed
out=own?target[key]:source[key];// prevent global pollution for namespaces
exports[key]=IS_GLOBAL&&typeof target[key]!='function'?source[key]// bind timers to global for call from export context
:IS_BIND&&own?ctx(out,global)// wrap global constructors for prevent change them in library
:IS_WRAP&&target[key]==out?function(C){var F=function F(a,b,c){if(this instanceof C){switch(arguments.length){case 0:return new C();case 1:return new C(a);case 2:return new C(a,b);}return new C(a,b,c);}return C.apply(this,arguments);};F[PROTOTYPE]=C[PROTOTYPE];return F;// make static versions for prototype methods
}(out):IS_PROTO&&typeof out=='function'?ctx(Function.call,out):out;// export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
if(IS_PROTO){(exports.virtual||(exports.virtual={}))[key]=out;// export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
if(type&$export.R&&expProto&&!expProto[key])hide(expProto,key,out);}}};// type bitmap
$export.F=1;// forced
$export.G=2;// global
$export.S=4;// static
$export.P=8;// proto
$export.B=16;// bind
$export.W=32;// wrap
$export.U=64;// safe
$export.R=128;// real proto method for `library` 
module.exports=$export;/***/},/* 26 *//***/function(module,exports,__webpack_require__){var dP=__webpack_require__(15),createDesc=__webpack_require__(33);module.exports=__webpack_require__(23)?function(object,key,value){return dP.f(object,key,createDesc(1,value));}:function(object,key,value){object[key]=value;return object;};/***/},/* 27 *//***/function(module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,"a",function(){return Token;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__=__webpack_require__(10);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__SourceLocation__=__webpack_require__(31);/**
 * Interface required to break circular dependency between Token, Lexer, and
 * ParseError.
 *//**
 * The resulting token returned from `lex`.
 *
 * It consists of the token text plus some position information.
 * The position information is essentially a range in an input string,
 * but instead of referencing the bare input string, we refer to the lexer.
 * That way it is possible to attach extra metadata to the input string,
 * like for example a file name or similar.
 *
 * The position information is optional, so it is OK to construct synthetic
 * tokens if appropriate. Not providing available position information may
 * lead to degraded error reporting, though.
 */var Token=function(){function Token(text,// the text of this token
loc){__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this,Token);this.text=text;this.loc=loc;}/**
     * Given a pair of tokens (this and endToken), compute a `Token` encompassing
     * the whole input range enclosed by these two.
     */__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default()(Token,[{key:"range",value:function range(endToken,// last token of the range, inclusive
text)// the text of the newly constructed token
{return new Token(text,__WEBPACK_IMPORTED_MODULE_2__SourceLocation__["a"/* default */].range(this,endToken));}}]);return Token;}();/***/},/* 28 *//***/function(module,__webpack_exports__,__webpack_require__){var symbols={"math":{},"text":{}};/* harmony default export */__webpack_exports__["a"]=symbols;/** `acceptUnicodeChar = true` is only applicable if `replace` is set. */function defineSymbol(mode,font,group,replace,name,acceptUnicodeChar){symbols[mode][name]={font:font,group:group,replace:replace};if(acceptUnicodeChar&&replace){symbols[mode][replace]=symbols[mode][name];}}// Some abbreviations for commonly used strings.
// This helps minify the code, and also spotting typos using jshint.
// modes:
var math="math";var text="text";// fonts:
var main="main";var ams="ams";// groups:
var accent="accent";var bin="bin";var close="close";var inner="inner";var mathord="mathord";var op="op";var open="open";var punct="punct";var rel="rel";var spacing="spacing";var textord="textord";// Now comes the symbol table
// Relation Symbols
defineSymbol(math,main,rel,'\u2261',"\\equiv",true);defineSymbol(math,main,rel,'\u227A',"\\prec",true);defineSymbol(math,main,rel,'\u227B',"\\succ",true);defineSymbol(math,main,rel,'\u223C',"\\sim",true);defineSymbol(math,main,rel,'\u22A5',"\\perp");defineSymbol(math,main,rel,'\u2AAF',"\\preceq",true);defineSymbol(math,main,rel,'\u2AB0',"\\succeq",true);defineSymbol(math,main,rel,'\u2243',"\\simeq",true);defineSymbol(math,main,rel,'\u2223',"\\mid",true);defineSymbol(math,main,rel,'\u226A',"\\ll");defineSymbol(math,main,rel,'\u226B',"\\gg",true);defineSymbol(math,main,rel,'\u224D',"\\asymp",true);defineSymbol(math,main,rel,'\u2225',"\\parallel");defineSymbol(math,main,rel,'\u22C8',"\\bowtie",true);defineSymbol(math,main,rel,'\u2323',"\\smile",true);defineSymbol(math,main,rel,'\u2291',"\\sqsubseteq",true);defineSymbol(math,main,rel,'\u2292',"\\sqsupseteq",true);defineSymbol(math,main,rel,'\u2250',"\\doteq",true);defineSymbol(math,main,rel,'\u2322',"\\frown",true);defineSymbol(math,main,rel,'\u220B',"\\ni",true);defineSymbol(math,main,rel,'\u221D',"\\propto",true);defineSymbol(math,main,rel,'\u22A2',"\\vdash",true);defineSymbol(math,main,rel,'\u22A3',"\\dashv",true);defineSymbol(math,main,rel,'\u220B',"\\owns");// Punctuation
defineSymbol(math,main,punct,".","\\ldotp");defineSymbol(math,main,punct,'\u22C5',"\\cdotp");// Misc Symbols
defineSymbol(math,main,textord,"#","\\#");defineSymbol(text,main,textord,"#","\\#");defineSymbol(math,main,textord,"&","\\&");defineSymbol(text,main,textord,"&","\\&");defineSymbol(math,main,textord,'\u2135',"\\aleph",true);defineSymbol(math,main,textord,'\u2200',"\\forall",true);defineSymbol(math,main,textord,'\u210F',"\\hbar");defineSymbol(math,main,textord,'\u2203',"\\exists",true);defineSymbol(math,main,textord,'\u2207',"\\nabla",true);defineSymbol(math,main,textord,'\u266D',"\\flat",true);defineSymbol(math,main,textord,'\u2113',"\\ell",true);defineSymbol(math,main,textord,'\u266E',"\\natural",true);defineSymbol(math,main,textord,'\u2663',"\\clubsuit",true);defineSymbol(math,main,textord,'\u2118',"\\wp",true);defineSymbol(math,main,textord,'\u266F',"\\sharp",true);defineSymbol(math,main,textord,'\u2662',"\\diamondsuit",true);defineSymbol(math,main,textord,'\u211C',"\\Re",true);defineSymbol(math,main,textord,'\u2661',"\\heartsuit",true);defineSymbol(math,main,textord,'\u2111',"\\Im",true);defineSymbol(math,main,textord,'\u2660',"\\spadesuit",true);defineSymbol(text,main,textord,"\xA7","\\S",true);defineSymbol(text,main,textord,"\xB6","\\P",true);// Math and Text
defineSymbol(math,main,textord,'\u2020',"\\dag");defineSymbol(text,main,textord,'\u2020',"\\dag");defineSymbol(text,main,textord,'\u2020',"\\textdagger");defineSymbol(math,main,textord,'\u2021',"\\ddag");defineSymbol(text,main,textord,'\u2021',"\\ddag");defineSymbol(text,main,textord,'\u2020',"\\textdaggerdbl");// Large Delimiters
defineSymbol(math,main,close,'\u23B1',"\\rmoustache");defineSymbol(math,main,open,'\u23B0',"\\lmoustache");defineSymbol(math,main,close,'\u27EF',"\\rgroup");defineSymbol(math,main,open,'\u27EE',"\\lgroup");// Binary Operators
defineSymbol(math,main,bin,'\u2213',"\\mp",true);defineSymbol(math,main,bin,'\u2296',"\\ominus",true);defineSymbol(math,main,bin,'\u228E','\\uplus',true);defineSymbol(math,main,bin,'\u2293',"\\sqcap",true);defineSymbol(math,main,bin,'\u2217',"\\ast");defineSymbol(math,main,bin,'\u2294',"\\sqcup",true);defineSymbol(math,main,bin,'\u25EF',"\\bigcirc");defineSymbol(math,main,bin,'\u2219',"\\bullet");defineSymbol(math,main,bin,'\u2021',"\\ddagger");defineSymbol(math,main,bin,'\u2240',"\\wr",true);defineSymbol(math,main,bin,'\u2A3F',"\\amalg");defineSymbol(math,main,bin,"&","\\And");// from amsmath
// Arrow Symbols
defineSymbol(math,main,rel,'\u27F5',"\\longleftarrow",true);defineSymbol(math,main,rel,'\u21D0',"\\Leftarrow",true);defineSymbol(math,main,rel,'\u27F8',"\\Longleftarrow",true);defineSymbol(math,main,rel,'\u27F6',"\\longrightarrow",true);defineSymbol(math,main,rel,'\u21D2',"\\Rightarrow",true);defineSymbol(math,main,rel,'\u27F9',"\\Longrightarrow",true);defineSymbol(math,main,rel,'\u2194',"\\leftrightarrow",true);defineSymbol(math,main,rel,'\u27F7',"\\longleftrightarrow",true);defineSymbol(math,main,rel,'\u21D4',"\\Leftrightarrow",true);defineSymbol(math,main,rel,'\u27FA',"\\Longleftrightarrow",true);defineSymbol(math,main,rel,'\u21A6',"\\mapsto",true);defineSymbol(math,main,rel,'\u27FC',"\\longmapsto",true);defineSymbol(math,main,rel,'\u2197',"\\nearrow",true);defineSymbol(math,main,rel,'\u21A9',"\\hookleftarrow",true);defineSymbol(math,main,rel,'\u21AA',"\\hookrightarrow",true);defineSymbol(math,main,rel,'\u2198',"\\searrow",true);defineSymbol(math,main,rel,'\u21BC',"\\leftharpoonup",true);defineSymbol(math,main,rel,'\u21C0',"\\rightharpoonup",true);defineSymbol(math,main,rel,'\u2199',"\\swarrow",true);defineSymbol(math,main,rel,'\u21BD',"\\leftharpoondown",true);defineSymbol(math,main,rel,'\u21C1',"\\rightharpoondown",true);defineSymbol(math,main,rel,'\u2196',"\\nwarrow",true);defineSymbol(math,main,rel,'\u21CC',"\\rightleftharpoons",true);// AMS Negated Binary Relations
defineSymbol(math,ams,rel,'\u226E',"\\nless",true);defineSymbol(math,ams,rel,'\uE010',"\\nleqslant");defineSymbol(math,ams,rel,'\uE011',"\\nleqq");defineSymbol(math,ams,rel,'\u2A87',"\\lneq",true);defineSymbol(math,ams,rel,'\u2268',"\\lneqq",true);defineSymbol(math,ams,rel,'\uE00C',"\\lvertneqq");defineSymbol(math,ams,rel,'\u22E6',"\\lnsim",true);defineSymbol(math,ams,rel,'\u2A89',"\\lnapprox",true);defineSymbol(math,ams,rel,'\u2280',"\\nprec",true);// unicode-math maps \u22e0 to \npreccurlyeq. We'll use the AMS synonym.
defineSymbol(math,ams,rel,'\u22E0',"\\npreceq",true);defineSymbol(math,ams,rel,'\u22E8',"\\precnsim",true);defineSymbol(math,ams,rel,'\u2AB9',"\\precnapprox",true);defineSymbol(math,ams,rel,'\u2241',"\\nsim",true);defineSymbol(math,ams,rel,'\uE006',"\\nshortmid");defineSymbol(math,ams,rel,'\u2224',"\\nmid",true);defineSymbol(math,ams,rel,'\u22AC',"\\nvdash",true);defineSymbol(math,ams,rel,'\u22AD',"\\nvDash",true);defineSymbol(math,ams,rel,'\u22EA',"\\ntriangleleft");defineSymbol(math,ams,rel,'\u22EC',"\\ntrianglelefteq",true);defineSymbol(math,ams,rel,'\u228A',"\\subsetneq",true);defineSymbol(math,ams,rel,'\uE01A',"\\varsubsetneq");defineSymbol(math,ams,rel,'\u2ACB',"\\subsetneqq",true);defineSymbol(math,ams,rel,'\uE017',"\\varsubsetneqq");defineSymbol(math,ams,rel,'\u226F',"\\ngtr",true);defineSymbol(math,ams,rel,'\uE00F',"\\ngeqslant");defineSymbol(math,ams,rel,'\uE00E',"\\ngeqq");defineSymbol(math,ams,rel,'\u2A88',"\\gneq",true);defineSymbol(math,ams,rel,'\u2269',"\\gneqq",true);defineSymbol(math,ams,rel,'\uE00D',"\\gvertneqq");defineSymbol(math,ams,rel,'\u22E7',"\\gnsim",true);defineSymbol(math,ams,rel,'\u2A8A',"\\gnapprox",true);defineSymbol(math,ams,rel,'\u2281',"\\nsucc",true);// unicode-math maps \u22e1 to \nsucccurlyeq. We'll use the AMS synonym.
defineSymbol(math,ams,rel,'\u22E1',"\\nsucceq",true);defineSymbol(math,ams,rel,'\u22E9',"\\succnsim",true);defineSymbol(math,ams,rel,'\u2ABA',"\\succnapprox",true);// unicode-math maps \u2246 to \simneqq. We'll use the AMS synonym.
defineSymbol(math,ams,rel,'\u2246',"\\ncong",true);defineSymbol(math,ams,rel,'\uE007',"\\nshortparallel");defineSymbol(math,ams,rel,'\u2226',"\\nparallel",true);defineSymbol(math,ams,rel,'\u22AF',"\\nVDash",true);defineSymbol(math,ams,rel,'\u22EB',"\\ntriangleright");defineSymbol(math,ams,rel,'\u22ED',"\\ntrianglerighteq",true);defineSymbol(math,ams,rel,'\uE018',"\\nsupseteqq");defineSymbol(math,ams,rel,'\u228B',"\\supsetneq",true);defineSymbol(math,ams,rel,'\uE01B',"\\varsupsetneq");defineSymbol(math,ams,rel,'\u2ACC',"\\supsetneqq",true);defineSymbol(math,ams,rel,'\uE019',"\\varsupsetneqq");defineSymbol(math,ams,rel,'\u22AE',"\\nVdash",true);defineSymbol(math,ams,rel,'\u2AB5',"\\precneqq",true);defineSymbol(math,ams,rel,'\u2AB6',"\\succneqq",true);defineSymbol(math,ams,rel,'\uE016',"\\nsubseteqq");defineSymbol(math,ams,bin,'\u22B4','\\unlhd');defineSymbol(math,ams,bin,'\u22B5','\\unrhd');// AMS Negated Arrows
defineSymbol(math,ams,rel,'\u219A',"\\nleftarrow",true);defineSymbol(math,ams,rel,'\u219B',"\\nrightarrow",true);defineSymbol(math,ams,rel,'\u21CD',"\\nLeftarrow",true);defineSymbol(math,ams,rel,'\u21CF',"\\nRightarrow",true);defineSymbol(math,ams,rel,'\u21AE',"\\nleftrightarrow",true);defineSymbol(math,ams,rel,'\u21CE',"\\nLeftrightarrow",true);// AMS Misc
defineSymbol(math,ams,rel,'\u25B3',"\\vartriangle");defineSymbol(math,ams,textord,'\u210F',"\\hslash");defineSymbol(math,ams,textord,'\u25BD',"\\triangledown");defineSymbol(math,ams,textord,'\u25CA',"\\lozenge");defineSymbol(math,ams,textord,'\u24C8',"\\circledS");defineSymbol(math,ams,textord,"\xAE","\\circledR");defineSymbol(text,ams,textord,"\xAE","\\circledR");defineSymbol(math,ams,textord,'\u2221',"\\measuredangle",true);defineSymbol(math,ams,textord,'\u2204',"\\nexists");defineSymbol(math,ams,textord,'\u2127',"\\mho");defineSymbol(math,ams,textord,'\u2132',"\\Finv",true);defineSymbol(math,ams,textord,'\u2141',"\\Game",true);defineSymbol(math,ams,textord,"k","\\Bbbk");defineSymbol(math,ams,textord,'\u2035',"\\backprime");defineSymbol(math,ams,textord,'\u25B2',"\\blacktriangle");defineSymbol(math,ams,textord,'\u25BC',"\\blacktriangledown");defineSymbol(math,ams,textord,'\u25A0',"\\blacksquare");defineSymbol(math,ams,textord,'\u29EB',"\\blacklozenge");defineSymbol(math,ams,textord,'\u2605',"\\bigstar");defineSymbol(math,ams,textord,'\u2222',"\\sphericalangle",true);defineSymbol(math,ams,textord,'\u2201',"\\complement",true);// unicode-math maps U+F0 (ð) to \matheth. We map to AMS function \eth
defineSymbol(math,ams,textord,"\xF0","\\eth",true);defineSymbol(math,ams,textord,'\u2571',"\\diagup");defineSymbol(math,ams,textord,'\u2572',"\\diagdown");defineSymbol(math,ams,textord,'\u25A1',"\\square");defineSymbol(math,ams,textord,'\u25A1',"\\Box");defineSymbol(math,ams,textord,'\u25CA',"\\Diamond");// unicode-math maps U+A5 to \mathyen. We map to AMS function \yen
defineSymbol(math,ams,textord,"\xA5","\\yen",true);defineSymbol(math,ams,textord,'\u2713',"\\checkmark",true);defineSymbol(text,ams,textord,'\u2713',"\\checkmark");// AMS Hebrew
defineSymbol(math,ams,textord,'\u2136',"\\beth",true);defineSymbol(math,ams,textord,'\u2138',"\\daleth",true);defineSymbol(math,ams,textord,'\u2137',"\\gimel",true);// AMS Greek
defineSymbol(math,ams,textord,'\u03DD',"\\digamma");defineSymbol(math,ams,textord,'\u03F0',"\\varkappa");// AMS Delimiters
defineSymbol(math,ams,open,'\u250C','\\ulcorner');defineSymbol(math,ams,close,'\u2510','\\urcorner');defineSymbol(math,ams,open,'\u2514',"\\llcorner");defineSymbol(math,ams,close,'\u2518',"\\lrcorner");// AMS Binary Relations
defineSymbol(math,ams,rel,'\u2266',"\\leqq",true);defineSymbol(math,ams,rel,'\u2A7D',"\\leqslant");defineSymbol(math,ams,rel,'\u2A95',"\\eqslantless",true);defineSymbol(math,ams,rel,'\u2272',"\\lesssim");defineSymbol(math,ams,rel,'\u2A85',"\\lessapprox");defineSymbol(math,ams,rel,'\u224A',"\\approxeq",true);defineSymbol(math,ams,bin,'\u22D6',"\\lessdot");defineSymbol(math,ams,rel,'\u22D8',"\\lll");defineSymbol(math,ams,rel,'\u2276',"\\lessgtr");defineSymbol(math,ams,rel,'\u22DA',"\\lesseqgtr");defineSymbol(math,ams,rel,'\u2A8B',"\\lesseqqgtr");defineSymbol(math,ams,rel,'\u2251',"\\doteqdot");defineSymbol(math,ams,rel,'\u2253',"\\risingdotseq",true);defineSymbol(math,ams,rel,'\u2252',"\\fallingdotseq",true);defineSymbol(math,ams,rel,'\u223D',"\\backsim",true);defineSymbol(math,ams,rel,'\u22CD',"\\backsimeq",true);defineSymbol(math,ams,rel,'\u2AC5',"\\subseteqq",true);defineSymbol(math,ams,rel,'\u22D0',"\\Subset",true);defineSymbol(math,ams,rel,'\u228F',"\\sqsubset",true);defineSymbol(math,ams,rel,'\u227C',"\\preccurlyeq",true);defineSymbol(math,ams,rel,'\u22DE',"\\curlyeqprec",true);defineSymbol(math,ams,rel,'\u227E',"\\precsim",true);defineSymbol(math,ams,rel,'\u2AB7',"\\precapprox",true);defineSymbol(math,ams,rel,'\u22B2',"\\vartriangleleft");defineSymbol(math,ams,rel,'\u22B4',"\\trianglelefteq");defineSymbol(math,ams,rel,'\u22A8',"\\vDash");defineSymbol(math,ams,rel,'\u22AA',"\\Vvdash",true);defineSymbol(math,ams,rel,'\u2323',"\\smallsmile");defineSymbol(math,ams,rel,'\u2322',"\\smallfrown");defineSymbol(math,ams,rel,'\u224F',"\\bumpeq",true);defineSymbol(math,ams,rel,'\u224E',"\\Bumpeq",true);defineSymbol(math,ams,rel,'\u2267',"\\geqq",true);defineSymbol(math,ams,rel,'\u2A7E',"\\geqslant",true);defineSymbol(math,ams,rel,'\u2A96',"\\eqslantgtr",true);defineSymbol(math,ams,rel,'\u2273',"\\gtrsim",true);defineSymbol(math,ams,rel,'\u2A86',"\\gtrapprox",true);defineSymbol(math,ams,bin,'\u22D7',"\\gtrdot");defineSymbol(math,ams,rel,'\u22D9',"\\ggg",true);defineSymbol(math,ams,rel,'\u2277',"\\gtrless",true);defineSymbol(math,ams,rel,'\u22DB',"\\gtreqless",true);defineSymbol(math,ams,rel,'\u2A8C',"\\gtreqqless",true);defineSymbol(math,ams,rel,'\u2256',"\\eqcirc",true);defineSymbol(math,ams,rel,'\u2257',"\\circeq",true);defineSymbol(math,ams,rel,'\u225C',"\\triangleq",true);defineSymbol(math,ams,rel,'\u223C',"\\thicksim");defineSymbol(math,ams,rel,'\u2248',"\\thickapprox");defineSymbol(math,ams,rel,'\u2AC6',"\\supseteqq",true);defineSymbol(math,ams,rel,'\u22D1',"\\Supset",true);defineSymbol(math,ams,rel,'\u2290',"\\sqsupset",true);defineSymbol(math,ams,rel,'\u227D',"\\succcurlyeq",true);defineSymbol(math,ams,rel,'\u22DF',"\\curlyeqsucc",true);defineSymbol(math,ams,rel,'\u227F',"\\succsim",true);defineSymbol(math,ams,rel,'\u2AB8',"\\succapprox",true);defineSymbol(math,ams,rel,'\u22B3',"\\vartriangleright");defineSymbol(math,ams,rel,'\u22B5',"\\trianglerighteq");defineSymbol(math,ams,rel,'\u22A9',"\\Vdash",true);defineSymbol(math,ams,rel,'\u2223',"\\shortmid");defineSymbol(math,ams,rel,'\u2225',"\\shortparallel");defineSymbol(math,ams,rel,'\u226C',"\\between",true);defineSymbol(math,ams,rel,'\u22D4',"\\pitchfork",true);defineSymbol(math,ams,rel,'\u221D',"\\varpropto");defineSymbol(math,ams,rel,'\u25C0',"\\blacktriangleleft");// unicode-math says that \therefore is a mathord atom.
// We kept the amssymb atom type, which is rel.
defineSymbol(math,ams,rel,'\u2234',"\\therefore",true);defineSymbol(math,ams,rel,'\u220D',"\\backepsilon");defineSymbol(math,ams,rel,'\u25B6',"\\blacktriangleright");// unicode-math says that \because is a mathord atom.
// We kept the amssymb atom type, which is rel.
defineSymbol(math,ams,rel,'\u2235',"\\because",true);defineSymbol(math,ams,rel,'\u22D8',"\\llless");defineSymbol(math,ams,rel,'\u22D9',"\\gggtr");defineSymbol(math,ams,bin,'\u22B2',"\\lhd");defineSymbol(math,ams,bin,'\u22B3',"\\rhd");defineSymbol(math,ams,rel,'\u2242',"\\eqsim",true);defineSymbol(math,main,rel,'\u22C8',"\\Join");defineSymbol(math,ams,rel,'\u2251',"\\Doteq",true);// AMS Binary Operators
defineSymbol(math,ams,bin,'\u2214',"\\dotplus",true);defineSymbol(math,ams,bin,'\u2216',"\\smallsetminus");defineSymbol(math,ams,bin,'\u22D2',"\\Cap",true);defineSymbol(math,ams,bin,'\u22D3',"\\Cup",true);defineSymbol(math,ams,bin,'\u2A5E',"\\doublebarwedge",true);defineSymbol(math,ams,bin,'\u229F',"\\boxminus",true);defineSymbol(math,ams,bin,'\u229E',"\\boxplus",true);defineSymbol(math,ams,bin,'\u22C7',"\\divideontimes",true);defineSymbol(math,ams,bin,'\u22C9',"\\ltimes",true);defineSymbol(math,ams,bin,'\u22CA',"\\rtimes",true);defineSymbol(math,ams,bin,'\u22CB',"\\leftthreetimes",true);defineSymbol(math,ams,bin,'\u22CC',"\\rightthreetimes",true);defineSymbol(math,ams,bin,'\u22CF',"\\curlywedge",true);defineSymbol(math,ams,bin,'\u22CE',"\\curlyvee",true);defineSymbol(math,ams,bin,'\u229D',"\\circleddash",true);defineSymbol(math,ams,bin,'\u229B',"\\circledast",true);defineSymbol(math,ams,bin,'\u22C5',"\\centerdot");defineSymbol(math,ams,bin,'\u22BA',"\\intercal",true);defineSymbol(math,ams,bin,'\u22D2',"\\doublecap");defineSymbol(math,ams,bin,'\u22D3',"\\doublecup");defineSymbol(math,ams,bin,'\u22A0',"\\boxtimes",true);// AMS Arrows
// Note: unicode-math maps \u21e2 to their own function \rightdasharrow.
// We'll map it to AMS function \dashrightarrow. It produces the same atom.
defineSymbol(math,ams,rel,'\u21E2',"\\dashrightarrow",true);// unicode-math maps \u21e0 to \leftdasharrow. We'll use the AMS synonym.
defineSymbol(math,ams,rel,'\u21E0',"\\dashleftarrow",true);defineSymbol(math,ams,rel,'\u21C7',"\\leftleftarrows",true);defineSymbol(math,ams,rel,'\u21C6',"\\leftrightarrows",true);defineSymbol(math,ams,rel,'\u21DA',"\\Lleftarrow",true);defineSymbol(math,ams,rel,'\u219E',"\\twoheadleftarrow",true);defineSymbol(math,ams,rel,'\u21A2',"\\leftarrowtail",true);defineSymbol(math,ams,rel,'\u21AB',"\\looparrowleft",true);defineSymbol(math,ams,rel,'\u21CB',"\\leftrightharpoons",true);defineSymbol(math,ams,rel,'\u21B6',"\\curvearrowleft",true);// unicode-math maps \u21ba to \acwopencirclearrow. We'll use the AMS synonym.
defineSymbol(math,ams,rel,'\u21BA',"\\circlearrowleft",true);defineSymbol(math,ams,rel,'\u21B0',"\\Lsh",true);defineSymbol(math,ams,rel,'\u21C8','\\upuparrows',true);defineSymbol(math,ams,rel,'\u21BF','\\upharpoonleft',true);defineSymbol(math,ams,rel,'\u21C3',"\\downharpoonleft",true);defineSymbol(math,ams,rel,'\u22B8',"\\multimap",true);defineSymbol(math,ams,rel,'\u21AD',"\\leftrightsquigarrow",true);defineSymbol(math,ams,rel,'\u21C9',"\\rightrightarrows",true);defineSymbol(math,ams,rel,'\u21C4',"\\rightleftarrows",true);defineSymbol(math,ams,rel,'\u21A0',"\\twoheadrightarrow",true);defineSymbol(math,ams,rel,'\u21A3',"\\rightarrowtail",true);defineSymbol(math,ams,rel,'\u21AC',"\\looparrowright",true);defineSymbol(math,ams,rel,'\u21B7',"\\curvearrowright",true);// unicode-math maps \u21bb to \cwopencirclearrow. We'll use the AMS synonym.
defineSymbol(math,ams,rel,'\u21BB',"\\circlearrowright",true);defineSymbol(math,ams,rel,'\u21B1',"\\Rsh",true);defineSymbol(math,ams,rel,'\u21CA',"\\downdownarrows",true);defineSymbol(math,ams,rel,'\u21BE','\\upharpoonright',true);defineSymbol(math,ams,rel,'\u21C2',"\\downharpoonright",true);defineSymbol(math,ams,rel,'\u21DD',"\\rightsquigarrow",true);defineSymbol(math,ams,rel,'\u21DD',"\\leadsto");defineSymbol(math,ams,rel,'\u21DB',"\\Rrightarrow",true);defineSymbol(math,ams,rel,'\u21BE',"\\restriction");defineSymbol(math,main,textord,'\u2018',"`");defineSymbol(math,main,textord,"$","\\$");defineSymbol(text,main,textord,"$","\\$");defineSymbol(text,main,textord,"$","\\textdollar");defineSymbol(math,main,textord,"%","\\%");defineSymbol(text,main,textord,"%","\\%");defineSymbol(math,main,textord,"_","\\_");defineSymbol(text,main,textord,"_","\\_");defineSymbol(text,main,textord,"_","\\textunderscore");defineSymbol(math,main,textord,'\u2220',"\\angle",true);defineSymbol(math,main,textord,'\u221E',"\\infty",true);defineSymbol(math,main,textord,'\u2032',"\\prime");defineSymbol(math,main,textord,'\u25B3',"\\triangle");defineSymbol(math,main,textord,'\u0393',"\\Gamma",true);defineSymbol(math,main,textord,'\u0394',"\\Delta",true);defineSymbol(math,main,textord,'\u0398',"\\Theta",true);defineSymbol(math,main,textord,'\u039B',"\\Lambda",true);defineSymbol(math,main,textord,'\u039E',"\\Xi",true);defineSymbol(math,main,textord,'\u03A0',"\\Pi",true);defineSymbol(math,main,textord,'\u03A3',"\\Sigma",true);defineSymbol(math,main,textord,'\u03A5','\\Upsilon',true);defineSymbol(math,main,textord,'\u03A6',"\\Phi",true);defineSymbol(math,main,textord,'\u03A8',"\\Psi",true);defineSymbol(math,main,textord,'\u03A9',"\\Omega",true);defineSymbol(math,main,textord,"\xAC","\\neg");defineSymbol(math,main,textord,"\xAC","\\lnot");defineSymbol(math,main,textord,'\u22A4',"\\top");defineSymbol(math,main,textord,'\u22A5',"\\bot");defineSymbol(math,main,textord,'\u2205',"\\emptyset");defineSymbol(math,ams,textord,'\u2205',"\\varnothing");defineSymbol(math,main,mathord,'\u03B1',"\\alpha",true);defineSymbol(math,main,mathord,'\u03B2',"\\beta",true);defineSymbol(math,main,mathord,'\u03B3',"\\gamma",true);defineSymbol(math,main,mathord,'\u03B4',"\\delta",true);defineSymbol(math,main,mathord,'\u03F5',"\\epsilon",true);defineSymbol(math,main,mathord,'\u03B6',"\\zeta",true);defineSymbol(math,main,mathord,'\u03B7',"\\eta",true);defineSymbol(math,main,mathord,'\u03B8',"\\theta",true);defineSymbol(math,main,mathord,'\u03B9',"\\iota",true);defineSymbol(math,main,mathord,'\u03BA',"\\kappa",true);defineSymbol(math,main,mathord,'\u03BB',"\\lambda",true);defineSymbol(math,main,mathord,'\u03BC',"\\mu",true);defineSymbol(math,main,mathord,'\u03BD',"\\nu",true);defineSymbol(math,main,mathord,'\u03BE',"\\xi",true);defineSymbol(math,main,mathord,'\u03BF',"\\omicron",true);defineSymbol(math,main,mathord,'\u03C0',"\\pi",true);defineSymbol(math,main,mathord,'\u03C1',"\\rho",true);defineSymbol(math,main,mathord,'\u03C3',"\\sigma",true);defineSymbol(math,main,mathord,'\u03C4',"\\tau",true);defineSymbol(math,main,mathord,'\u03C5','\\upsilon',true);defineSymbol(math,main,mathord,'\u03D5',"\\phi",true);defineSymbol(math,main,mathord,'\u03C7',"\\chi",true);defineSymbol(math,main,mathord,'\u03C8',"\\psi",true);defineSymbol(math,main,mathord,'\u03C9',"\\omega",true);defineSymbol(math,main,mathord,'\u03B5',"\\varepsilon",true);defineSymbol(math,main,mathord,'\u03D1',"\\vartheta",true);defineSymbol(math,main,mathord,'\u03D6',"\\varpi",true);defineSymbol(math,main,mathord,'\u03F1',"\\varrho",true);defineSymbol(math,main,mathord,'\u03C2',"\\varsigma",true);defineSymbol(math,main,mathord,'\u03C6',"\\varphi",true);defineSymbol(math,main,bin,'\u2217',"*");defineSymbol(math,main,bin,"+","+");defineSymbol(math,main,bin,'\u2212',"-");defineSymbol(math,main,bin,'\u22C5',"\\cdot",true);defineSymbol(math,main,bin,'\u2218',"\\circ");defineSymbol(math,main,bin,"\xF7","\\div",true);defineSymbol(math,main,bin,"\xB1","\\pm",true);defineSymbol(math,main,bin,"\xD7","\\times",true);defineSymbol(math,main,bin,'\u2229',"\\cap",true);defineSymbol(math,main,bin,'\u222A',"\\cup",true);defineSymbol(math,main,bin,'\u2216',"\\setminus");defineSymbol(math,main,bin,'\u2227',"\\land");defineSymbol(math,main,bin,'\u2228',"\\lor");defineSymbol(math,main,bin,'\u2227',"\\wedge",true);defineSymbol(math,main,bin,'\u2228',"\\vee",true);defineSymbol(math,main,textord,'\u221A',"\\surd");defineSymbol(math,main,open,"(","(");defineSymbol(math,main,open,"[","[");defineSymbol(math,main,open,'\u27E8',"\\langle",true);defineSymbol(math,main,open,'\u2223',"\\lvert");defineSymbol(math,main,open,'\u2225',"\\lVert");defineSymbol(math,main,close,")",")");defineSymbol(math,main,close,"]","]");defineSymbol(math,main,close,"?","?");defineSymbol(math,main,close,"!","!");defineSymbol(math,main,close,'\u27E9',"\\rangle",true);defineSymbol(math,main,close,'\u2223',"\\rvert");defineSymbol(math,main,close,'\u2225',"\\rVert");defineSymbol(math,main,rel,"=","=");defineSymbol(math,main,rel,"<","<");defineSymbol(math,main,rel,">",">");defineSymbol(math,main,rel,":",":");defineSymbol(math,main,rel,'\u2248',"\\approx",true);defineSymbol(math,main,rel,'\u2245',"\\cong",true);defineSymbol(math,main,rel,'\u2265',"\\ge");defineSymbol(math,main,rel,'\u2265',"\\geq",true);defineSymbol(math,main,rel,'\u2190',"\\gets");defineSymbol(math,main,rel,">","\\gt");defineSymbol(math,main,rel,'\u2208',"\\in",true);defineSymbol(math,main,rel,'\u2209',"\\notin",true);defineSymbol(math,main,rel,'\u0338',"\\not");defineSymbol(math,main,rel,'\u2282',"\\subset",true);defineSymbol(math,main,rel,'\u2283',"\\supset",true);defineSymbol(math,main,rel,'\u2286',"\\subseteq",true);defineSymbol(math,main,rel,'\u2287',"\\supseteq",true);defineSymbol(math,ams,rel,'\u2288',"\\nsubseteq",true);defineSymbol(math,ams,rel,'\u2289',"\\nsupseteq",true);defineSymbol(math,main,rel,'\u22A8',"\\models");defineSymbol(math,main,rel,'\u2190',"\\leftarrow",true);defineSymbol(math,main,rel,'\u2264',"\\le");defineSymbol(math,main,rel,'\u2264',"\\leq",true);defineSymbol(math,main,rel,"<","\\lt");defineSymbol(math,main,rel,'\u2260',"\\ne",true);defineSymbol(math,main,rel,'\u2260',"\\neq");defineSymbol(math,main,rel,'\u2192',"\\rightarrow",true);defineSymbol(math,main,rel,'\u2192',"\\to");defineSymbol(math,ams,rel,'\u2271',"\\ngeq",true);defineSymbol(math,ams,rel,'\u2270',"\\nleq",true);defineSymbol(math,main,spacing,null,"\\!");defineSymbol(math,main,spacing,"\xA0","\\ ");defineSymbol(math,main,spacing,"\xA0","~");defineSymbol(math,main,spacing,null,"\\,");defineSymbol(math,main,spacing,null,"\\:");defineSymbol(math,main,spacing,null,"\\;");defineSymbol(math,main,spacing,null,"\\enspace");defineSymbol(math,main,spacing,null,"\\qquad");defineSymbol(math,main,spacing,null,"\\quad");defineSymbol(math,main,spacing,"\xA0","\\space");// Ref: LaTeX Source 2e: \DeclareRobustCommand{\nobreakspace}{%
defineSymbol(math,main,spacing,"\xA0","\\nobreakspace");defineSymbol(text,main,spacing,null,"\\!");defineSymbol(text,main,spacing,"\xA0","\\ ");defineSymbol(text,main,spacing,"\xA0","~");defineSymbol(text,main,spacing,null,"\\,");defineSymbol(text,main,spacing,null,"\\:");defineSymbol(text,main,spacing,null,"\\;");defineSymbol(text,main,spacing,null,"\\enspace");defineSymbol(text,main,spacing,null,"\\qquad");defineSymbol(text,main,spacing,null,"\\quad");defineSymbol(text,main,spacing,"\xA0","\\space");defineSymbol(text,main,spacing,"\xA0","\\nobreakspace");defineSymbol(math,main,punct,",",",");defineSymbol(math,main,punct,";",";");defineSymbol(math,main,punct,":","\\colon");defineSymbol(math,ams,bin,'\u22BC',"\\barwedge",true);defineSymbol(math,ams,bin,'\u22BB',"\\veebar",true);defineSymbol(math,main,bin,'\u2299',"\\odot",true);defineSymbol(math,main,bin,'\u2295',"\\oplus",true);defineSymbol(math,main,bin,'\u2297',"\\otimes",true);defineSymbol(math,main,textord,'\u2202',"\\partial",true);defineSymbol(math,main,bin,'\u2298',"\\oslash",true);defineSymbol(math,ams,bin,'\u229A',"\\circledcirc",true);defineSymbol(math,ams,bin,'\u22A1',"\\boxdot",true);defineSymbol(math,main,bin,'\u25B3',"\\bigtriangleup");defineSymbol(math,main,bin,'\u25BD',"\\bigtriangledown");defineSymbol(math,main,bin,'\u2020',"\\dagger");defineSymbol(math,main,bin,'\u22C4',"\\diamond");defineSymbol(math,main,bin,'\u22C6',"\\star");defineSymbol(math,main,bin,'\u25C3',"\\triangleleft");defineSymbol(math,main,bin,'\u25B9',"\\triangleright");defineSymbol(math,main,open,"{","\\{");defineSymbol(text,main,textord,"{","\\{");defineSymbol(text,main,textord,"{","\\textbraceleft");defineSymbol(math,main,close,"}","\\}");defineSymbol(text,main,textord,"}","\\}");defineSymbol(text,main,textord,"}","\\textbraceright");defineSymbol(math,main,open,"{","\\lbrace");defineSymbol(math,main,close,"}","\\rbrace");defineSymbol(math,main,open,"[","\\lbrack");defineSymbol(math,main,close,"]","\\rbrack");defineSymbol(text,main,textord,"<","\\textless");// in T1 fontenc
defineSymbol(text,main,textord,">","\\textgreater");// in T1 fontenc
defineSymbol(math,main,open,'\u230A',"\\lfloor");defineSymbol(math,main,close,'\u230B',"\\rfloor");defineSymbol(math,main,open,'\u2308',"\\lceil");defineSymbol(math,main,close,'\u2309',"\\rceil");defineSymbol(math,main,textord,"\\","\\backslash");defineSymbol(math,main,textord,'\u2223',"|");defineSymbol(math,main,textord,'\u2223',"\\vert");defineSymbol(text,main,textord,"|","\\textbar");// in T1 fontenc
defineSymbol(math,main,textord,'\u2225',"\\|");defineSymbol(math,main,textord,'\u2225',"\\Vert");defineSymbol(text,main,textord,'\u2225',"\\textbardbl");defineSymbol(math,main,rel,'\u2191','\\uparrow',true);defineSymbol(math,main,rel,'\u21D1','\\Uparrow',true);defineSymbol(math,main,rel,'\u2193',"\\downarrow",true);defineSymbol(math,main,rel,'\u21D3',"\\Downarrow",true);defineSymbol(math,main,rel,'\u2195','\\updownarrow',true);defineSymbol(math,main,rel,'\u21D5','\\Updownarrow',true);defineSymbol(math,main,op,'\u2210',"\\coprod");defineSymbol(math,main,op,'\u22C1',"\\bigvee");defineSymbol(math,main,op,'\u22C0',"\\bigwedge");defineSymbol(math,main,op,'\u2A04',"\\biguplus");defineSymbol(math,main,op,'\u22C2',"\\bigcap");defineSymbol(math,main,op,'\u22C3',"\\bigcup");defineSymbol(math,main,op,'\u222B',"\\int");defineSymbol(math,main,op,'\u222B',"\\intop");defineSymbol(math,main,op,'\u222C',"\\iint");defineSymbol(math,main,op,'\u222D',"\\iiint");defineSymbol(math,main,op,'\u220F',"\\prod");defineSymbol(math,main,op,'\u2211',"\\sum");defineSymbol(math,main,op,'\u2A02',"\\bigotimes");defineSymbol(math,main,op,'\u2A01',"\\bigoplus");defineSymbol(math,main,op,'\u2A00',"\\bigodot");defineSymbol(math,main,op,'\u222E',"\\oint");defineSymbol(math,main,op,'\u2A06',"\\bigsqcup");defineSymbol(math,main,op,'\u222B',"\\smallint");defineSymbol(text,main,inner,'\u2026',"\\textellipsis");defineSymbol(math,main,inner,'\u2026',"\\mathellipsis");defineSymbol(text,main,inner,'\u2026',"\\ldots",true);defineSymbol(math,main,inner,'\u2026',"\\ldots",true);defineSymbol(math,main,inner,'\u22EF',"\\@cdots",true);defineSymbol(math,main,inner,'\u22F1',"\\ddots",true);defineSymbol(math,main,textord,'\u22EE',"\\vdots",true);defineSymbol(math,main,accent,'\u02CA',"\\acute");defineSymbol(math,main,accent,'\u02CB',"\\grave");defineSymbol(math,main,accent,"\xA8","\\ddot");defineSymbol(math,main,accent,"~","\\tilde");defineSymbol(math,main,accent,'\u02C9',"\\bar");defineSymbol(math,main,accent,'\u02D8',"\\breve");defineSymbol(math,main,accent,'\u02C7',"\\check");defineSymbol(math,main,accent,"^","\\hat");defineSymbol(math,main,accent,'\u20D7',"\\vec");defineSymbol(math,main,accent,'\u02D9',"\\dot");defineSymbol(math,main,accent,'\u02DA',"\\mathring");defineSymbol(math,main,mathord,'\u0131',"\\imath",true);defineSymbol(math,main,mathord,'\u0237',"\\jmath",true);defineSymbol(text,main,textord,'\u0131',"\\i",true);defineSymbol(text,main,textord,'\u0237',"\\j",true);defineSymbol(text,main,textord,"\xDF","\\ss",true);defineSymbol(text,main,textord,"\xE6","\\ae",true);defineSymbol(text,main,textord,"\xE6","\\ae",true);defineSymbol(text,main,textord,'\u0153',"\\oe",true);defineSymbol(text,main,textord,"\xF8","\\o",true);defineSymbol(text,main,textord,"\xC6","\\AE",true);defineSymbol(text,main,textord,'\u0152',"\\OE",true);defineSymbol(text,main,textord,"\xD8","\\O",true);defineSymbol(text,main,accent,'\u02CA',"\\'");// acute
defineSymbol(text,main,accent,'\u02CB',"\\`");// grave
defineSymbol(text,main,accent,'\u02C6',"\\^");// circumflex
defineSymbol(text,main,accent,'\u02DC',"\\~");// tilde
defineSymbol(text,main,accent,'\u02C9',"\\=");// macron
defineSymbol(text,main,accent,'\u02D8','\\u');// breve
defineSymbol(text,main,accent,'\u02D9',"\\.");// dot above
defineSymbol(text,main,accent,'\u02DA',"\\r");// ring above
defineSymbol(text,main,accent,'\u02C7',"\\v");// caron
defineSymbol(text,main,accent,"\xA8",'\\"');// diaresis
defineSymbol(text,main,accent,'\u02DD',"\\H");// double acute
defineSymbol(text,main,textord,'\u2013',"--");defineSymbol(text,main,textord,'\u2013',"\\textendash");defineSymbol(text,main,textord,'\u2014',"---");defineSymbol(text,main,textord,'\u2014',"\\textemdash");defineSymbol(text,main,textord,'\u2018',"`");defineSymbol(text,main,textord,'\u2018',"\\textquoteleft");defineSymbol(text,main,textord,'\u2019',"'");defineSymbol(text,main,textord,'\u2019',"\\textquoteright");defineSymbol(text,main,textord,'\u201C',"``");defineSymbol(text,main,textord,'\u201C',"\\textquotedblleft");defineSymbol(text,main,textord,'\u201D',"''");defineSymbol(text,main,textord,'\u201D',"\\textquotedblright");defineSymbol(math,main,textord,"\xB0","\\degree");defineSymbol(text,main,textord,"\xB0","\\degree");// TODO: In LaTeX, \pounds can generate a different character in text and math
// mode, but among our fonts, only Main-Italic defines this character "163".
defineSymbol(math,main,mathord,"\xA3","\\pounds");defineSymbol(math,main,mathord,"\xA3","\\mathsterling",true);defineSymbol(text,main,mathord,"\xA3","\\pounds");defineSymbol(text,main,mathord,"\xA3","\\textsterling",true);defineSymbol(math,ams,textord,'\u2720',"\\maltese");defineSymbol(text,ams,textord,'\u2720',"\\maltese");defineSymbol(text,main,spacing,"\xA0","\\ ");defineSymbol(text,main,spacing,"\xA0"," ");defineSymbol(text,main,spacing,"\xA0","~");// There are lots of symbols which are the same, so we add them in afterwards.
// All of these are textords in math mode
var mathTextSymbols="0123456789/@.\"";for(var i=0;i<mathTextSymbols.length;i++){var ch=mathTextSymbols.charAt(i);defineSymbol(math,main,textord,ch,ch);}// All of these are textords in text mode
var textSymbols="0123456789!@*()-=+[]<>|\";:?/.,";for(var _i=0;_i<textSymbols.length;_i++){var _ch=textSymbols.charAt(_i);defineSymbol(text,main,textord,_ch,_ch);}// All of these are textords in text mode, and mathords in math mode
var letters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";for(var _i2=0;_i2<letters.length;_i2++){var _ch2=letters.charAt(_i2);defineSymbol(math,main,mathord,_ch2,_ch2);defineSymbol(text,main,textord,_ch2,_ch2);}// We add these Latin-1 letters as symbols for backwards-compatibility,
// but they are not actually in the font, nor are they supported by the
// Unicode accent mechanism, so they fall back to Times font and look ugly.
// TODO(edemaine): Fix this.
var extraLatin="ÇÐÞçþ";for(var _i3=0;_i3<extraLatin.length;_i3++){var _ch3=extraLatin.charAt(_i3);defineSymbol(math,main,mathord,_ch3,_ch3);defineSymbol(text,main,textord,_ch3,_ch3);}defineSymbol(text,main,textord,"ð","ð");// Unicode versions of existing characters
defineSymbol(text,main,textord,'\u2013',"–");defineSymbol(text,main,textord,'\u2014',"—");defineSymbol(text,main,textord,'\u2018',"‘");defineSymbol(text,main,textord,'\u2019',"’");defineSymbol(text,main,textord,'\u201C',"“");defineSymbol(text,main,textord,'\u201D',"”");/***/},/* 29 *//***/function(module,exports,__webpack_require__){// 7.1.13 ToObject(argument)
var defined=__webpack_require__(38);module.exports=function(it){return Object(defined(it));};/***/},/* 30 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__unicodeScripts__=__webpack_require__(42);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__submodules_katex_fonts_fontMetricsData__=__webpack_require__(59);/**
 * This file contains metrics regarding fonts and individual symbols. The sigma
 * and xi variables, as well as the metricMap map contain data extracted from
 * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
 * `metrics` variable and the getCharacterMetrics function.
 */// In TeX, there are actually three sets of dimensions, one for each of
// textstyle (size index 5 and higher: >=9pt), scriptstyle (size index 3 and 4:
// 7-8pt), and scriptscriptstyle (size index 1 and 2: 5-6pt).  These are
// provided in the the arrays below, in that order.
//
// The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respsectively.
// This was determined by running the following script:
//
//     latex -interaction=nonstopmode \
//     '\documentclass{article}\usepackage{amsmath}\begin{document}' \
//     '$a$ \expandafter\show\the\textfont2' \
//     '\expandafter\show\the\scriptfont2' \
//     '\expandafter\show\the\scriptscriptfont2' \
//     '\stop'
//
// The metrics themselves were retreived using the following commands:
//
//     tftopl cmsy10
//     tftopl cmsy7
//     tftopl cmsy5
//
// The output of each of these commands is quite lengthy.  The only part we
// care about is the FONTDIMEN section. Each value is measured in EMs.
var sigmasAndXis={slant:[0.250,0.250,0.250],// sigma1
space:[0.000,0.000,0.000],// sigma2
stretch:[0.000,0.000,0.000],// sigma3
shrink:[0.000,0.000,0.000],// sigma4
xHeight:[0.431,0.431,0.431],// sigma5
quad:[1.000,1.171,1.472],// sigma6
extraSpace:[0.000,0.000,0.000],// sigma7
num1:[0.677,0.732,0.925],// sigma8
num2:[0.394,0.384,0.387],// sigma9
num3:[0.444,0.471,0.504],// sigma10
denom1:[0.686,0.752,1.025],// sigma11
denom2:[0.345,0.344,0.532],// sigma12
sup1:[0.413,0.503,0.504],// sigma13
sup2:[0.363,0.431,0.404],// sigma14
sup3:[0.289,0.286,0.294],// sigma15
sub1:[0.150,0.143,0.200],// sigma16
sub2:[0.247,0.286,0.400],// sigma17
supDrop:[0.386,0.353,0.494],// sigma18
subDrop:[0.050,0.071,0.100],// sigma19
delim1:[2.390,1.700,1.980],// sigma20
delim2:[1.010,1.157,1.420],// sigma21
axisHeight:[0.250,0.250,0.250],// sigma22
// These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
// they correspond to the font parameters of the extension fonts (family 3).
// See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
// match cmex7, we'd use cmex7.tfm values for script and scriptscript
// values.
defaultRuleThickness:[0.04,0.049,0.049],// xi8; cmex7: 0.049
bigOpSpacing1:[0.111,0.111,0.111],// xi9
bigOpSpacing2:[0.166,0.166,0.166],// xi10
bigOpSpacing3:[0.2,0.2,0.2],// xi11
bigOpSpacing4:[0.6,0.611,0.611],// xi12; cmex7: 0.611
bigOpSpacing5:[0.1,0.143,0.143],// xi13; cmex7: 0.143
// The \sqrt rule width is taken from the height of the surd character.
// Since we use the same font at all sizes, this thickness doesn't scale.
sqrtRuleThickness:[0.04,0.04,0.04],// This value determines how large a pt is, for metrics which are defined
// in terms of pts.
// This value is also used in katex.less; if you change it make sure the
// values match.
ptPerEm:[10.0,10.0,10.0],// The space between adjacent `|` columns in an array definition. From
// `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
doubleRuleSep:[0.2,0.2,0.2]};// This map contains a mapping from font name and character code to character
// metrics, including height, depth, italic correction, and skew (kern from the
// character to the corresponding \skewchar)
// This map is generated via `make metrics`. It should not be changed manually.
// These are very rough approximations.  We default to Times New Roman which
// should have Latin-1 and Cyrillic characters, but may not depending on the
// operating system.  The metrics do not account for extra height from the
// accents.  In the case of Cyrillic characters which have both ascenders and
// descenders we prefer approximations with ascenders, primarily to prevent
// the fraction bar or root line from intersecting the glyph.
// TODO(kevinb) allow union of multiple glyph metrics for better accuracy.
var extraCharacterMap={// Latin-1
'Å':'A','Ç':'C','Ð':'D','Þ':'o','å':'a','ç':'c','ð':'d','þ':'o',// Cyrillic
'А':'A','Б':'B','В':'B','Г':'F','Д':'A','Е':'E','Ж':'K','З':'3','И':'N','Й':'N','К':'K','Л':'N','М':'M','Н':'H','О':'O','П':'N','Р':'P','С':'C','Т':'T','У':'y','Ф':'O','Х':'X','Ц':'U','Ч':'h','Ш':'W','Щ':'W','Ъ':'B','Ы':'X','Ь':'B','Э':'3','Ю':'X','Я':'R','а':'a','б':'b','в':'a','г':'r','д':'y','е':'e','ж':'m','з':'e','и':'n','й':'n','к':'n','л':'n','м':'m','н':'n','о':'o','п':'n','р':'p','с':'c','т':'o','у':'y','ф':'b','х':'x','ц':'n','ч':'n','ш':'w','щ':'w','ъ':'a','ы':'m','ь':'a','э':'e','ю':'m','я':'r'};/**
 * This function is a convenience function for looking up information in the
 * metricMap table. It takes a character as a string, and a font.
 *
 * Note: the `width` property may be undefined if fontMetricsData.js wasn't
 * built using `Make extended_metrics`.
 */var getCharacterMetrics=function getCharacterMetrics(character,font,mode){if(!__WEBPACK_IMPORTED_MODULE_1__submodules_katex_fonts_fontMetricsData__["a"/* default */][font]){throw new Error("Font metrics not found for font: "+font+".");}var ch=character.charCodeAt(0);if(character[0]in extraCharacterMap){ch=extraCharacterMap[character[0]].charCodeAt(0);}var metrics=__WEBPACK_IMPORTED_MODULE_1__submodules_katex_fonts_fontMetricsData__["a"/* default */][font][ch];if(!metrics&&mode==='text'){// We don't typically have font metrics for Asian scripts.
// But since we support them in text mode, we need to return
// some sort of metrics.
// So if the character is in a script we support but we
// don't have metrics for it, just use the metrics for
// the Latin capital letter M. This is close enough because
// we (currently) only care about the height of the glpyh
// not its width.
if(Object(__WEBPACK_IMPORTED_MODULE_0__unicodeScripts__["b"/* supportedCodepoint */])(ch)){metrics=__WEBPACK_IMPORTED_MODULE_1__submodules_katex_fonts_fontMetricsData__["a"/* default */][font][77];// 77 is the charcode for 'M'
}}if(metrics){return{depth:metrics[0],height:metrics[1],italic:metrics[2],skew:metrics[3],width:metrics[4]};}};var fontMetricsBySizeIndex={};/**
 * Get the font metrics for a given size.
 */var getFontMetrics=function getFontMetrics(size){var sizeIndex=void 0;if(size>=5){sizeIndex=0;}else if(size>=3){sizeIndex=1;}else{sizeIndex=2;}if(!fontMetricsBySizeIndex[sizeIndex]){var metrics=fontMetricsBySizeIndex[sizeIndex]={cssEmPerMu:sigmasAndXis.quad[sizeIndex]/18};for(var key in sigmasAndXis){if(sigmasAndXis.hasOwnProperty(key)){metrics[key]=sigmasAndXis[key][sizeIndex];}}}return fontMetricsBySizeIndex[sizeIndex];};/* harmony default export */__webpack_exports__["a"]={getFontMetrics:getFontMetrics,getCharacterMetrics:getCharacterMetrics};/***/},/* 31 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_freeze__=__webpack_require__(66);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_freeze___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_freeze__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass__=__webpack_require__(10);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass__);/**
 * Lexing or parsing positional information for error reporting.
 * This object is immutable.
 */var SourceLocation=function(){// End offset, zero-based exclusive.
// Lexer holding the input string.
function SourceLocation(lexer,start,end){__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default()(this,SourceLocation);this.lexer=lexer;this.start=start;this.end=end;__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_freeze___default()(this);// Immutable to allow sharing in range().
}/**
     * Merges two `SourceLocation`s from location providers, given they are
     * provided in order of appearance.
     * - Returns the first one's location if only the first is provided.
     * - Returns a merged range of the first and the last if both are provided
     *   and their lexers match.
     * - Otherwise, returns null.
     */// Start offset, zero-based inclusive.
__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default()(SourceLocation,null,[{key:"range",value:function range(first,second){if(!second){return first&&first.loc;}else if(!first||!first.loc||!second.loc||first.loc.lexer!==second.loc.lexer){return null;}else{return new SourceLocation(first.loc.lexer,first.loc.start,second.loc.end);}}}]);return SourceLocation;}();/* harmony default export */__webpack_exports__["a"]=SourceLocation;/***/},/* 32 *//***/function(module,exports){var id=0,px=Math.random();module.exports=function(key){return'Symbol('.concat(key===undefined?'':key,')_',(++id+px).toString(36));};/***/},/* 33 *//***/function(module,exports){module.exports=function(bitmap,value){return{enumerable:!(bitmap&1),configurable:!(bitmap&2),writable:!(bitmap&4),value:value};};/***/},/* 34 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__utils__=__webpack_require__(5);/**
 * This is a module for storing settings passed into KaTeX. It correctly handles
 * default settings.
 *//**
 * The main Settings object
 *
 * The current options stored are:
 *  - displayMode: Whether the expression should be typeset as inline math
 *                 (false, the default), meaning that the math starts in
 *                 \textstyle and is placed in an inline-block); or as display
 *                 math (true), meaning that the math starts in \displaystyle
 *                 and is placed in a block with vertical margin.
 */var Settings=function Settings(options){__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this,Settings);// allow null options
options=options||{};this.displayMode=__WEBPACK_IMPORTED_MODULE_1__utils__["a"/* default */].deflt(options.displayMode,false);this.throwOnError=__WEBPACK_IMPORTED_MODULE_1__utils__["a"/* default */].deflt(options.throwOnError,true);this.errorColor=__WEBPACK_IMPORTED_MODULE_1__utils__["a"/* default */].deflt(options.errorColor,"#cc0000");this.macros=options.macros||{};this.colorIsTextColor=__WEBPACK_IMPORTED_MODULE_1__utils__["a"/* default */].deflt(options.colorIsTextColor,false);this.maxSize=Math.max(0,__WEBPACK_IMPORTED_MODULE_1__utils__["a"/* default */].deflt(options.maxSize,Infinity));};/* harmony default export */__webpack_exports__["a"]=Settings;/***/},/* 35 *//***/function(module,exports,__webpack_require__){exports.__esModule=true;var _from=__webpack_require__(79);var _from2=_interopRequireDefault(_from);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default=function(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return(0, _from2.default)(arr);}};/***/},/* 36 *//***/function(module,exports,__webpack_require__){var $at=__webpack_require__(81)(true);// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(48)(String,'String',function(iterated){this._t=String(iterated);// target
this._i=0;// next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
},function(){var O=this._t,index=this._i,point;if(index>=O.length)return{value:undefined,done:true};point=$at(O,index);this._i+=point.length;return{value:point,done:false};});/***/},/* 37 *//***/function(module,exports){// 7.1.4 ToInteger
var ceil=Math.ceil,floor=Math.floor;module.exports=function(it){return isNaN(it=+it)?0:(it>0?floor:ceil)(it);};/***/},/* 38 *//***/function(module,exports){// 7.2.1 RequireObjectCoercible(argument)
module.exports=function(it){if(it==undefined)throw TypeError("Can't call method on  "+it);return it;};/***/},/* 39 *//***/function(module,exports,__webpack_require__){// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys=__webpack_require__(87),enumBugKeys=__webpack_require__(53);module.exports=Object.keys||function keys(O){return $keys(O,enumBugKeys);};/***/},/* 40 *//***/function(module,exports,__webpack_require__){// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject=__webpack_require__(49),defined=__webpack_require__(38);module.exports=function(it){return IObject(defined(it));};/***/},/* 41 *//***/function(module,exports,__webpack_require__){var shared=__webpack_require__(52)('keys'),uid=__webpack_require__(32);module.exports=function(key){return shared[key]||(shared[key]=uid(key));};/***/},/* 42 *//***/function(module,__webpack_exports__,__webpack_require__){__webpack_exports__["a"]=scriptFromCodepoint;/* harmony export (immutable) */__webpack_exports__["b"]=supportedCodepoint;/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__=__webpack_require__(35);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator__=__webpack_require__(18);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator__);/**
 * Unicode block data for the families of scripts we support in \text{}.
 * Scripts only need to appear here if they do not have font metrics.
 */var scriptData=[{// Latin characters beyond the Latin-1 characters we have metrics for.
// Needed for Czech, Hungarian and Turkish text, for example.
name:'latin',blocks:[[0x0100,0x024f],// Latin Extended-A and Latin Extended-B
[0x0300,0x036f]]},{// The Cyrillic script used by Russian and related languages.
// A Cyrillic subset used to be supported as explicitly defined
// symbols in symbols.js
name:'cyrillic',blocks:[[0x0400,0x04ff]]},{// The Brahmic scripts of South and Southeast Asia
// Devanagari (0900–097F)
// Bengali (0980–09FF)
// Gurmukhi (0A00–0A7F)
// Gujarati (0A80–0AFF)
// Oriya (0B00–0B7F)
// Tamil (0B80–0BFF)
// Telugu (0C00–0C7F)
// Kannada (0C80–0CFF)
// Malayalam (0D00–0D7F)
// Sinhala (0D80–0DFF)
// Thai (0E00–0E7F)
// Lao (0E80–0EFF)
// Tibetan (0F00–0FFF)
// Myanmar (1000–109F)
name:'brahmic',blocks:[[0x0900,0x109F]]},{name:'georgian',blocks:[[0x10A0,0x10ff]]},{// Chinese and Japanese.
// The "k" in cjk is for Korean, but we've separated Korean out
name:"cjk",blocks:[[0x3000,0x30FF],// CJK symbols and punctuation, Hiragana, Katakana
[0x4E00,0x9FAF],// CJK ideograms
[0xFF00,0xFF60]]},{// Korean
name:'hangul',blocks:[[0xAC00,0xD7AF]]}];/**
 * Given a codepoint, return the name of the script or script family
 * it is from, or null if it is not part of a known block
 *//*
 * This file defines the Unicode scripts and script families that we
 * support. To add new scripts or families, just add a new entry to the
 * scriptData array below. Adding scripts to the scriptData array allows
 * characters from that script to appear in \text{} environments.
 *//**
 * Each script or script family has a name and an array of blocks.
 * Each block is an array of two numbers which specify the start and
 * end points (inclusive) of a block of Unicode codepoints.
 */function scriptFromCodepoint(codepoint){var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(scriptData),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var script=_step.value;var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_get_iterator___default()(script.blocks),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var block=_step2.value;if(codepoint>=block[0]&&codepoint<=block[1]){return script.name;}}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}return null;}/**
 * A flattened version of all the supported blocks in a single array.
 * This is an optimization to make supportedCodepoint() fast.
 */var allBlocks=[];scriptData.forEach(function(s){return s.blocks.forEach(function(b){return allBlocks.push.apply(allBlocks,__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default()(b));});});/**
 * Given a codepoint, return true if it falls within one of the
 * scripts or script families defined above and false otherwise.
 *
 * Micro benchmarks shows that this is faster than
 * /[\u3000-\u30FF\u4E00-\u9FAF\uFF00-\uFF60\uAC00-\uD7AF\u0900-\u109F]/.test()
 * in Firefox, Chrome and Node.
 */function supportedCodepoint(codepoint){for(var i=0;i<allBlocks.length;i+=2){if(codepoint>=allBlocks[i]&&codepoint<=allBlocks[i+1]){return true;}}return false;}/***/},/* 43 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__=__webpack_require__(10);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__fontMetrics__=__webpack_require__(30);/**
 * This file contains information about the options that the Parser carries
 * around with it while parsing. Data is held in an `Options` object, and when
 * recursing, a new `Options` object can be created with the `.with*` and
 * `.reset` functions.
 */var sizeStyleMap=[// Each element contains [textsize, scriptsize, scriptscriptsize].
// The size mappings are taken from TeX with \normalsize=10pt.
[1,1,1],// size1: [5, 5, 5]              \tiny
[2,1,1],// size2: [6, 5, 5]
[3,1,1],// size3: [7, 5, 5]              \scriptsize
[4,2,1],// size4: [8, 6, 5]              \footnotesize
[5,2,1],// size5: [9, 6, 5]              \small
[6,3,1],// size6: [10, 7, 5]             \normalsize
[7,4,2],// size7: [12, 8, 6]             \large
[8,6,3],// size8: [14.4, 10, 7]          \Large
[9,7,6],// size9: [17.28, 12, 10]        \LARGE
[10,8,7],// size10: [20.74, 14.4, 12]     \huge
[11,10,9]];var sizeMultipliers=[// fontMetrics.js:getFontMetrics also uses size indexes, so if
// you change size indexes, change that function.
0.5,0.6,0.7,0.8,0.9,1.0,1.2,1.44,1.728,2.074,2.488];var sizeAtStyle=function sizeAtStyle(size,style){return style.size<2?size:sizeStyleMap[size-1][style.size-1];};/**
 * This is the main options class. It contains the current style, size, color,
 * and font.
 *
 * Options objects should not be modified. To create a new Options with
 * different properties, call a `.having*` method.
 */var Options=function(){function Options(data){__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this,Options);this.style=data.style;this.color=data.color;this.size=data.size||Options.BASESIZE;this.textSize=data.textSize||this.size;this.phantom=!!data.phantom;this.fontFamily=data.fontFamily;this.fontWeight=data.fontWeight||'';this.fontShape=data.fontShape||'';this.sizeMultiplier=sizeMultipliers[this.size-1];this.maxSize=data.maxSize;this._fontMetrics=undefined;}/**
     * Returns a new options object with the same properties as "this".  Properties
     * from "extension" will be copied to the new options object.
     *//**
     * The base size index.
     */__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default()(Options,[{key:"extend",value:function extend(extension){var data={style:this.style,size:this.size,textSize:this.textSize,color:this.color,phantom:this.phantom,fontFamily:this.fontFamily,fontWeight:this.fontWeight,fontShape:this.fontShape,maxSize:this.maxSize};for(var key in extension){if(extension.hasOwnProperty(key)){data[key]=extension[key];}}return new Options(data);}/**
         * Return an options object with the given style. If `this.style === style`,
         * returns `this`.
         */},{key:"havingStyle",value:function havingStyle(style){if(this.style===style){return this;}else{return this.extend({style:style,size:sizeAtStyle(this.textSize,style)});}}/**
         * Return an options object with a cramped version of the current style. If
         * the current style is cramped, returns `this`.
         */},{key:"havingCrampedStyle",value:function havingCrampedStyle(){return this.havingStyle(this.style.cramp());}/**
         * Return an options object with the given size and in at least `\textstyle`.
         * Returns `this` if appropriate.
         */},{key:"havingSize",value:function havingSize(size){if(this.size===size&&this.textSize===size){return this;}else{return this.extend({style:this.style.text(),size:size,textSize:size,sizeMultiplier:sizeMultipliers[size-1]});}}/**
         * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
         * changes to at least `\textstyle`.
         */},{key:"havingBaseStyle",value:function havingBaseStyle(style){style=style||this.style.text();var wantSize=sizeAtStyle(Options.BASESIZE,style);if(this.size===wantSize&&this.textSize===Options.BASESIZE&&this.style===style){return this;}else{return this.extend({style:style,size:wantSize});}}/**
         * Create a new options object with the given color.
         */},{key:"withColor",value:function withColor(color){return this.extend({color:color});}/**
         * Create a new options object with "phantom" set to true.
         */},{key:"withPhantom",value:function withPhantom(){return this.extend({phantom:true});}/**
         * Create a new options objects with the give font.
         */},{key:"withFontFamily",value:function withFontFamily(fontFamily){return this.extend({fontFamily:fontFamily||this.fontFamily});}/**
         * Creates a new options object with the given font weight
         */},{key:"withFontWeight",value:function withFontWeight(fontWeight){return this.extend({fontWeight:fontWeight});}/**
         * Creates a new options object with the given font weight
         */},{key:"withFontShape",value:function withFontShape(fontShape){return this.extend({fontShape:fontShape});}/**
         * Return the CSS sizing classes required to switch from enclosing options
         * `oldOptions` to `this`. Returns an array of classes.
         */},{key:"sizingClasses",value:function sizingClasses(oldOptions){if(oldOptions.size!==this.size){return["sizing","reset-size"+oldOptions.size,"size"+this.size];}else{return[];}}/**
         * Return the CSS sizing classes required to switch to the base size. Like
         * `this.havingSize(BASESIZE).sizingClasses(this)`.
         */},{key:"baseSizingClasses",value:function baseSizingClasses(){if(this.size!==Options.BASESIZE){return["sizing","reset-size"+this.size,"size"+Options.BASESIZE];}else{return[];}}/**
         * Return the font metrics for this size.
         */},{key:"fontMetrics",value:function fontMetrics(){if(!this._fontMetrics){this._fontMetrics=__WEBPACK_IMPORTED_MODULE_2__fontMetrics__["a"/* default */].getFontMetrics(this.size);}return this._fontMetrics;}/**
         * A map of color names to CSS colors.
         * TODO(emily): Remove this when we have real macros
         */},{key:"getColor",/**
         * Gets the CSS color of the current options object, accounting for the
         * `colorMap`.
         */value:function getColor(){if(this.phantom){return"transparent";}else if(this.color!=null&&Options.colorMap.hasOwnProperty(this.color)){return Options.colorMap[this.color];}else{return this.color;}}}]);return Options;}();Options.BASESIZE=6;Options.colorMap={"katex-blue":"#6495ed","katex-orange":"#ffa500","katex-pink":"#ff00af","katex-red":"#df0030","katex-green":"#28ae7b","katex-gray":"gray","katex-purple":"#9d38bd","katex-blueA":"#ccfaff","katex-blueB":"#80f6ff","katex-blueC":"#63d9ea","katex-blueD":"#11accd","katex-blueE":"#0c7f99","katex-tealA":"#94fff5","katex-tealB":"#26edd5","katex-tealC":"#01d1c1","katex-tealD":"#01a995","katex-tealE":"#208170","katex-greenA":"#b6ffb0","katex-greenB":"#8af281","katex-greenC":"#74cf70","katex-greenD":"#1fab54","katex-greenE":"#0d923f","katex-goldA":"#ffd0a9","katex-goldB":"#ffbb71","katex-goldC":"#ff9c39","katex-goldD":"#e07d10","katex-goldE":"#a75a05","katex-redA":"#fca9a9","katex-redB":"#ff8482","katex-redC":"#f9685d","katex-redD":"#e84d39","katex-redE":"#bc2612","katex-maroonA":"#ffbde0","katex-maroonB":"#ff92c6","katex-maroonC":"#ed5fa6","katex-maroonD":"#ca337c","katex-maroonE":"#9e034e","katex-purpleA":"#ddd7ff","katex-purpleB":"#c6b9fc","katex-purpleC":"#aa87ff","katex-purpleD":"#7854ab","katex-purpleE":"#543b78","katex-mintA":"#f5f9e8","katex-mintB":"#edf2df","katex-mintC":"#e0e5cc","katex-grayA":"#f6f7f7","katex-grayB":"#f0f1f2","katex-grayC":"#e3e5e6","katex-grayD":"#d6d8da","katex-grayE":"#babec2","katex-grayF":"#888d93","katex-grayG":"#626569","katex-grayH":"#3b3e40","katex-grayI":"#21242c","katex-kaBlue":"#314453","katex-kaGreen":"#71B307"};/* harmony default export */__webpack_exports__["a"]=Options;/***/},/* 44 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__ParseError__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__Style__=__webpack_require__(9);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__domTree__=__webpack_require__(12);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__fontMetrics__=__webpack_require__(30);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__symbols__=__webpack_require__(28);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__utils__=__webpack_require__(5);/**
 * This file deals with creating delimiters of various sizes. The TeXbook
 * discusses these routines on page 441-442, in the "Another subroutine sets box
 * x to a specified variable delimiter" paragraph.
 *
 * There are three main routines here. `makeSmallDelim` makes a delimiter in the
 * normal font, but in either text, script, or scriptscript style.
 * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
 * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
 * smaller pieces that are stacked on top of one another.
 *
 * The functions take a parameter `center`, which determines if the delimiter
 * should be centered around the axis.
 *
 * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
 * one of the given sizes. This is used for things like `\bigl`.
 * `customSizedDelim` makes a delimiter with a given total height+depth. It is
 * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
 * delimiter which surrounds an expression of a given height an depth. It is
 * used in `\left` and `\right`.
 *//**
 * Get the metrics for a given symbol and font, after transformation (i.e.
 * after following replacement from symbols.js)
 */var getMetrics=function getMetrics(symbol,font,mode){if(__WEBPACK_IMPORTED_MODULE_5__symbols__["a"/* default */].math[symbol]&&__WEBPACK_IMPORTED_MODULE_5__symbols__["a"/* default */].math[symbol].replace){return __WEBPACK_IMPORTED_MODULE_4__fontMetrics__["a"/* default */].getCharacterMetrics(__WEBPACK_IMPORTED_MODULE_5__symbols__["a"/* default */].math[symbol].replace,font,mode);}else{return __WEBPACK_IMPORTED_MODULE_4__fontMetrics__["a"/* default */].getCharacterMetrics(symbol,font,mode);}};/**
 * Puts a delimiter span in a given style, and adds appropriate height, depth,
 * and maxFontSizes.
 */var styleWrap=function styleWrap(delim,toStyle,options,classes){var newOptions=options.havingBaseStyle(toStyle);var span=__WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"/* default */].makeSpan((classes||[]).concat(newOptions.sizingClasses(options)),[delim],options);span.delimSizeMultiplier=newOptions.sizeMultiplier/options.sizeMultiplier;span.height*=span.delimSizeMultiplier;span.depth*=span.delimSizeMultiplier;span.maxFontSize=newOptions.sizeMultiplier;return span;};var centerSpan=function centerSpan(span,options,style){var newOptions=options.havingBaseStyle(style);var shift=(1-options.sizeMultiplier/newOptions.sizeMultiplier)*options.fontMetrics().axisHeight;span.classes.push("delimcenter");span.style.top=shift+"em";span.height-=shift;span.depth+=shift;};/**
 * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
 * font, but is restyled to either be in textstyle, scriptstyle, or
 * scriptscriptstyle.
 */var makeSmallDelim=function makeSmallDelim(delim,style,center,options,mode,classes){var text=__WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"/* default */].makeSymbol(delim,"Main-Regular",mode,options);var span=styleWrap(text,style,options,classes);if(center){centerSpan(span,options,style);}return span;};/**
 * Builds a symbol in the given font size (note size is an integer)
 */var mathrmSize=function mathrmSize(value,size,mode,options){return __WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"/* default */].makeSymbol(value,"Size"+size+"-Regular",mode,options);};/**
 * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
 * Size3, or Size4 fonts. It is always rendered in textstyle.
 */var makeLargeDelim=function makeLargeDelim(delim,size,center,options,mode,classes){var inner=mathrmSize(delim,size,mode,options);var span=styleWrap(__WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"/* default */].makeSpan(["delimsizing","size"+size],[inner],options),__WEBPACK_IMPORTED_MODULE_1__Style__["a"/* default */].TEXT,options,classes);if(center){centerSpan(span,options,__WEBPACK_IMPORTED_MODULE_1__Style__["a"/* default */].TEXT);}return span;};/**
 * Make an inner span with the given offset and in the given font. This is used
 * in `makeStackedDelim` to make the stacking pieces for the delimiter.
 */var makeInner=function makeInner(symbol,font,mode){var sizeClass=void 0;// Apply the correct CSS class to choose the right font.
if(font==="Size1-Regular"){sizeClass="delim-size1";}else if(font==="Size4-Regular"){sizeClass="delim-size4";}var inner=__WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"/* default */].makeSpan(["delimsizinginner",sizeClass],[__WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"/* default */].makeSpan([],[__WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"/* default */].makeSymbol(symbol,font,mode)])]);// Since this will be passed into `makeVList` in the end, wrap the element
// in the appropriate tag that VList uses.
return{type:"elem",elem:inner};};/**
 * Make a stacked delimiter out of a given delimiter, with the total height at
 * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
 */var makeStackedDelim=function makeStackedDelim(delim,heightTotal,center,options,mode,classes){// There are four parts, the top, an optional middle, a repeated part, and a
// bottom.
var top=void 0;var middle=void 0;var repeat=void 0;var bottom=void 0;top=repeat=bottom=delim;middle=null;// Also keep track of what font the delimiters are in
var font="Size1-Regular";// We set the parts and font based on the symbol. Note that we use
// '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
// repeats of the arrows
if(delim==='\\uparrow'){repeat=bottom='\u23D0';}else if(delim==='\\Uparrow'){repeat=bottom='\u2016';}else if(delim==="\\downarrow"){top=repeat='\u23D0';}else if(delim==="\\Downarrow"){top=repeat='\u2016';}else if(delim==='\\updownarrow'){top='\\uparrow';repeat='\u23D0';bottom="\\downarrow";}else if(delim==='\\Updownarrow'){top='\\Uparrow';repeat='\u2016';bottom="\\Downarrow";}else if(delim==="["||delim==="\\lbrack"){top='\u23A1';repeat='\u23A2';bottom='\u23A3';font="Size4-Regular";}else if(delim==="]"||delim==="\\rbrack"){top='\u23A4';repeat='\u23A5';bottom='\u23A6';font="Size4-Regular";}else if(delim==="\\lfloor"){repeat=top='\u23A2';bottom='\u23A3';font="Size4-Regular";}else if(delim==="\\lceil"){top='\u23A1';repeat=bottom='\u23A2';font="Size4-Regular";}else if(delim==="\\rfloor"){repeat=top='\u23A5';bottom='\u23A6';font="Size4-Regular";}else if(delim==="\\rceil"){top='\u23A4';repeat=bottom='\u23A5';font="Size4-Regular";}else if(delim==="("){top='\u239B';repeat='\u239C';bottom='\u239D';font="Size4-Regular";}else if(delim===")"){top='\u239E';repeat='\u239F';bottom='\u23A0';font="Size4-Regular";}else if(delim==="\\{"||delim==="\\lbrace"){top='\u23A7';middle='\u23A8';bottom='\u23A9';repeat='\u23AA';font="Size4-Regular";}else if(delim==="\\}"||delim==="\\rbrace"){top='\u23AB';middle='\u23AC';bottom='\u23AD';repeat='\u23AA';font="Size4-Regular";}else if(delim==="\\lgroup"){top='\u23A7';bottom='\u23A9';repeat='\u23AA';font="Size4-Regular";}else if(delim==="\\rgroup"){top='\u23AB';bottom='\u23AD';repeat='\u23AA';font="Size4-Regular";}else if(delim==="\\lmoustache"){top='\u23A7';bottom='\u23AD';repeat='\u23AA';font="Size4-Regular";}else if(delim==="\\rmoustache"){top='\u23AB';bottom='\u23A9';repeat='\u23AA';font="Size4-Regular";}// Get the metrics of the four sections
var topMetrics=getMetrics(top,font,mode);var topHeightTotal=topMetrics.height+topMetrics.depth;var repeatMetrics=getMetrics(repeat,font,mode);var repeatHeightTotal=repeatMetrics.height+repeatMetrics.depth;var bottomMetrics=getMetrics(bottom,font,mode);var bottomHeightTotal=bottomMetrics.height+bottomMetrics.depth;var middleHeightTotal=0;var middleFactor=1;if(middle!==null){var middleMetrics=getMetrics(middle,font,mode);middleHeightTotal=middleMetrics.height+middleMetrics.depth;middleFactor=2;// repeat symmetrically above and below middle
}// Calcuate the minimal height that the delimiter can have.
// It is at least the size of the top, bottom, and optional middle combined.
var minHeight=topHeightTotal+bottomHeightTotal+middleHeightTotal;// Compute the number of copies of the repeat symbol we will need
var repeatCount=Math.ceil((heightTotal-minHeight)/(middleFactor*repeatHeightTotal));// Compute the total height of the delimiter including all the symbols
var realHeightTotal=minHeight+repeatCount*middleFactor*repeatHeightTotal;// The center of the delimiter is placed at the center of the axis. Note
// that in this context, "center" means that the delimiter should be
// centered around the axis in the current style, while normally it is
// centered around the axis in textstyle.
var axisHeight=options.fontMetrics().axisHeight;if(center){axisHeight*=options.sizeMultiplier;}// Calculate the depth
var depth=realHeightTotal/2-axisHeight;// Now, we start building the pieces that will go into the vlist
// Keep a list of the inner pieces
var inners=[];// Add the bottom symbol
inners.push(makeInner(bottom,font,mode));if(middle===null){// Add that many symbols
for(var i=0;i<repeatCount;i++){inners.push(makeInner(repeat,font,mode));}}else{// When there is a middle bit, we need the middle part and two repeated
// sections
for(var _i=0;_i<repeatCount;_i++){inners.push(makeInner(repeat,font,mode));}inners.push(makeInner(middle,font,mode));for(var _i2=0;_i2<repeatCount;_i2++){inners.push(makeInner(repeat,font,mode));}}// Add the top symbol
inners.push(makeInner(top,font,mode));// Finally, build the vlist
var newOptions=options.havingBaseStyle(__WEBPACK_IMPORTED_MODULE_1__Style__["a"/* default */].TEXT);var inner=__WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"/* default */].makeVList({positionType:"bottom",positionData:depth,children:inners},newOptions);return styleWrap(__WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"/* default */].makeSpan(["delimsizing","mult"],[inner],newOptions),__WEBPACK_IMPORTED_MODULE_1__Style__["a"/* default */].TEXT,options,classes);};// All surds have 0.08em padding above the viniculum inside the SVG.
// That keeps browser span height rounding error from pinching the line.
var vbPad=80;// padding above the surd, measured inside the viewBox.
var emPad=0.08;// padding, in ems, measured in the document.
var sqrtSvg=function sqrtSvg(sqrtName,height,viewBoxHeight,options){var alternate=void 0;if(sqrtName==="sqrtTall"){// sqrtTall is from glyph U23B7 in the font KaTeX_Size4-Regular
// One path edge has a variable length. It runs from the viniculumn
// to a point near (14 units) the bottom of the surd. The viniculum
// is 40 units thick. So the length of the line in question is:
var vertSegment=viewBoxHeight-54-vbPad;alternate="M702 "+vbPad+"H400000v40H742v"+vertSegment+"l-4 4-4 4c-.667.7\n-2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1h-12l-28-84c-16.667-52-96.667\n-294.333-240-727l-212 -643 -85 170c-4-3.333-8.333-7.667-13 -13l-13-13l77-155\n 77-156c66 199.333 139 419.667 219 661 l218 661zM702 "+vbPad+"H400000v40H742z";}var pathNode=new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"/* default */].pathNode(sqrtName,alternate);var svg=new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"/* default */].svgNode([pathNode],{// Note: 1000:1 ratio of viewBox to document em width.
"width":"400em","height":height+"em","viewBox":"0 0 400000 "+viewBoxHeight,"preserveAspectRatio":"xMinYMin slice"});return __WEBPACK_IMPORTED_MODULE_3__buildCommon__["a"/* default */].makeSpan(["hide-tail"],[svg],options);};/**
 * Make a sqrt image of the given height,
 */var makeSqrtImage=function makeSqrtImage(height,options){var delim=traverseSequence("\\surd",height,stackLargeDelimiterSequence,options);// Create a span containing an SVG image of a sqrt symbol.
var span=void 0;var sizeMultiplier=options.sizeMultiplier;// default
var spanHeight=0;var texHeight=0;var viewBoxHeight=0;// We create viewBoxes with 80 units of "padding" above each surd.
// Then browser rounding error on the parent span height will not
// encroach on the ink of the viniculum. But that padding is not
// included in the TeX-like `height` used for calculation of
// vertical alignment. So texHeight = span.height < span.style.height.
if(delim.type==="small"){// Get an SVG that is derived from glyph U+221A in font KaTeX-Main.
viewBoxHeight=1000+vbPad;// 1000 unit glyph height.
var newOptions=options.havingBaseStyle(delim.style);sizeMultiplier=newOptions.sizeMultiplier/options.sizeMultiplier;spanHeight=(1.0+emPad)*sizeMultiplier;texHeight=1.00*sizeMultiplier;span=sqrtSvg("sqrtMain",spanHeight,viewBoxHeight,options);span.style.minWidth="0.853em";span.advanceWidth=0.833*sizeMultiplier;// from the font.
}else if(delim.type==="large"){// These SVGs come from fonts: KaTeX_Size1, _Size2, etc.
viewBoxHeight=(1000+vbPad)*sizeToMaxHeight[delim.size];texHeight=sizeToMaxHeight[delim.size]/sizeMultiplier;spanHeight=(sizeToMaxHeight[delim.size]+emPad)/sizeMultiplier;span=sqrtSvg("sqrtSize"+delim.size,spanHeight,viewBoxHeight,options);span.style.minWidth="1.02em";span.advanceWidth=1.0/sizeMultiplier;// from the font
}else{// Tall sqrt. In TeX, this would be stacked using multiple glyphs.
// We'll use a single SVG to accomplish the same thing.
spanHeight=height/sizeMultiplier+emPad;texHeight=height/sizeMultiplier;viewBoxHeight=Math.floor(1000*height)+vbPad;span=sqrtSvg("sqrtTall",spanHeight,viewBoxHeight,options);span.style.minWidth="0.742em";span.advanceWidth=1.056/sizeMultiplier;}span.height=texHeight;span.style.height=spanHeight+"em";return{span:span,// Calculate the actual line width.
// This actually should depend on the chosen font -- e.g. \boldmath
// should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
// have thicker rules.
ruleWidth:options.fontMetrics().sqrtRuleThickness*sizeMultiplier};};// There are three kinds of delimiters, delimiters that stack when they become
// too large
var stackLargeDelimiters=["(",")","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","\\lceil","\\rceil","\\surd"];// delimiters that always stack
var stackAlwaysDelimiters=['\\uparrow',"\\downarrow",'\\updownarrow','\\Uparrow',"\\Downarrow",'\\Updownarrow',"|","\\|","\\vert","\\Vert","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","\\lmoustache","\\rmoustache"];// and delimiters that never stack
var stackNeverDelimiters=["<",">","\\langle","\\rangle","/","\\backslash","\\lt","\\gt"];// Metrics of the different sizes. Found by looking at TeX's output of
// $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
// Used to create stacked delimiters of appropriate sizes in makeSizedDelim.
var sizeToMaxHeight=[0,1.2,1.8,2.4,3.0];/**
 * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
 */var makeSizedDelim=function makeSizedDelim(delim,size,options,mode,classes){// < and > turn into \langle and \rangle in delimiters
if(delim==="<"||delim==="\\lt"||delim==='\u27E8'){delim="\\langle";}else if(delim===">"||delim==="\\gt"||delim==='\u27E9'){delim="\\rangle";}// Sized delimiters are never centered.
if(__WEBPACK_IMPORTED_MODULE_6__utils__["a"/* default */].contains(stackLargeDelimiters,delim)||__WEBPACK_IMPORTED_MODULE_6__utils__["a"/* default */].contains(stackNeverDelimiters,delim)){return makeLargeDelim(delim,size,false,options,mode,classes);}else if(__WEBPACK_IMPORTED_MODULE_6__utils__["a"/* default */].contains(stackAlwaysDelimiters,delim)){return makeStackedDelim(delim,sizeToMaxHeight[size],false,options,mode,classes);}else{throw new __WEBPACK_IMPORTED_MODULE_0__ParseError__["a"/* default */]("Illegal delimiter: '"+delim+"'");}};/**
 * There are three different sequences of delimiter sizes that the delimiters
 * follow depending on the kind of delimiter. This is used when creating custom
 * sized delimiters to decide whether to create a small, large, or stacked
 * delimiter.
 *
 * In real TeX, these sequences aren't explicitly defined, but are instead
 * defined inside the font metrics. Since there are only three sequences that
 * are possible for the delimiters that TeX defines, it is easier to just encode
 * them explicitly here.
 */// Delimiters that never stack try small delimiters and large delimiters only
var stackNeverDelimiterSequence=[{type:"small",style:__WEBPACK_IMPORTED_MODULE_1__Style__["a"/* default */].SCRIPTSCRIPT},{type:"small",style:__WEBPACK_IMPORTED_MODULE_1__Style__["a"/* default */].SCRIPT},{type:"small",style:__WEBPACK_IMPORTED_MODULE_1__Style__["a"/* default */].TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4}];// Delimiters that always stack try the small delimiters first, then stack
var stackAlwaysDelimiterSequence=[{type:"small",style:__WEBPACK_IMPORTED_MODULE_1__Style__["a"/* default */].SCRIPTSCRIPT},{type:"small",style:__WEBPACK_IMPORTED_MODULE_1__Style__["a"/* default */].SCRIPT},{type:"small",style:__WEBPACK_IMPORTED_MODULE_1__Style__["a"/* default */].TEXT},{type:"stack"}];// Delimiters that stack when large try the small and then large delimiters, and
// stack afterwards
var stackLargeDelimiterSequence=[{type:"small",style:__WEBPACK_IMPORTED_MODULE_1__Style__["a"/* default */].SCRIPTSCRIPT},{type:"small",style:__WEBPACK_IMPORTED_MODULE_1__Style__["a"/* default */].SCRIPT},{type:"small",style:__WEBPACK_IMPORTED_MODULE_1__Style__["a"/* default */].TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4},{type:"stack"}];/**
 * Get the font used in a delimiter based on what kind of delimiter it is.
 */var delimTypeToFont=function delimTypeToFont(type){if(type.type==="small"){return"Main-Regular";}else if(type.type==="large"){return"Size"+type.size+"-Regular";}else if(type.type==="stack"){return"Size4-Regular";}};/**
 * Traverse a sequence of types of delimiters to decide what kind of delimiter
 * should be used to create a delimiter of the given height+depth.
 */var traverseSequence=function traverseSequence(delim,height,sequence,options){// Here, we choose the index we should start at in the sequences. In smaller
// sizes (which correspond to larger numbers in style.size) we start earlier
// in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
// at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
var start=Math.min(2,3-options.style.size);for(var i=start;i<sequence.length;i++){if(sequence[i].type==="stack"){// This is always the last delimiter, so we just break the loop now.
break;}var metrics=getMetrics(delim,delimTypeToFont(sequence[i]),"math");var heightDepth=metrics.height+metrics.depth;// Small delimiters are scaled down versions of the same font, so we
// account for the style change size.
if(sequence[i].type==="small"){var newOptions=options.havingBaseStyle(sequence[i].style);heightDepth*=newOptions.sizeMultiplier;}// Check if the delimiter at this size works for the given height.
if(heightDepth>height){return sequence[i];}}// If we reached the end of the sequence, return the last sequence element.
return sequence[sequence.length-1];};/**
 * Make a delimiter of a given height+depth, with optional centering. Here, we
 * traverse the sequences, and create a delimiter that the sequence tells us to.
 */var makeCustomSizedDelim=function makeCustomSizedDelim(delim,height,center,options,mode,classes){if(delim==="<"||delim==="\\lt"||delim==='\u27E8'){delim="\\langle";}else if(delim===">"||delim==="\\gt"||delim==='\u27E9'){delim="\\rangle";}// Decide what sequence to use
var sequence=void 0;if(__WEBPACK_IMPORTED_MODULE_6__utils__["a"/* default */].contains(stackNeverDelimiters,delim)){sequence=stackNeverDelimiterSequence;}else if(__WEBPACK_IMPORTED_MODULE_6__utils__["a"/* default */].contains(stackLargeDelimiters,delim)){sequence=stackLargeDelimiterSequence;}else{sequence=stackAlwaysDelimiterSequence;}// Look through the sequence
var delimType=traverseSequence(delim,height,sequence,options);// Get the delimiter from font glyphs.
// Depending on the sequence element we decided on, call the
// appropriate function.
if(delimType.type==="small"){return makeSmallDelim(delim,delimType.style,center,options,mode,classes);}else if(delimType.type==="large"){return makeLargeDelim(delim,delimType.size,center,options,mode,classes);}else/* if (delimType.type === "stack") */{return makeStackedDelim(delim,height,center,options,mode,classes);}};/**
 * Make a delimiter for use with `\left` and `\right`, given a height and depth
 * of an expression that the delimiters surround.
 */var makeLeftRightDelim=function makeLeftRightDelim(delim,height,depth,options,mode,classes){// We always center \left/\right delimiters, so the axis is always shifted
var axisHeight=options.fontMetrics().axisHeight*options.sizeMultiplier;// Taken from TeX source, tex.web, function make_left_right
var delimiterFactor=901;var delimiterExtend=5.0/options.fontMetrics().ptPerEm;var maxDistFromAxis=Math.max(height-axisHeight,depth+axisHeight);var totalHeight=Math.max(// In real TeX, calculations are done using integral values which are
// 65536 per pt, or 655360 per em. So, the division here truncates in
// TeX but doesn't here, producing different results. If we wanted to
// exactly match TeX's calculation, we could do
//   Math.floor(655360 * maxDistFromAxis / 500) *
//    delimiterFactor / 655360
// (To see the difference, compare
//    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
// in TeX and KaTeX)
maxDistFromAxis/500*delimiterFactor,2*maxDistFromAxis-delimiterExtend);// Finally, we defer to `makeCustomSizedDelim` with our calculated total
// height
return makeCustomSizedDelim(delim,totalHeight,true,options,mode,classes);};/* harmony default export */__webpack_exports__["a"]={sqrtImage:makeSqrtImage,sizedDelim:makeSizedDelim,customSizedDelim:makeCustomSizedDelim,leftRightDelim:makeLeftRightDelim};/***/},/* 45 *//***/function(module,exports,__webpack_require__){var isObject=__webpack_require__(20),document=__webpack_require__(16).document// in old IE typeof document.createElement is 'object'
,is=isObject(document)&&isObject(document.createElement);module.exports=function(it){return is?document.createElement(it):{};};/***/},/* 46 *//***/function(module,exports,__webpack_require__){// most Object methods by ES6 should accept primitives
var $export=__webpack_require__(25),core=__webpack_require__(8),fails=__webpack_require__(24);module.exports=function(KEY,exec){var fn=(core.Object||{})[KEY]||Object[KEY],exp={};exp[KEY]=exec(fn);$export($export.S+$export.F*fails(function(){fn(1);}),'Object',exp);};/***/},/* 47 *//***/function(module,exports,__webpack_require__){// optional / simple context binding
var aFunction=__webpack_require__(72);module.exports=function(fn,that,length){aFunction(fn);if(that===undefined)return fn;switch(length){case 1:return function(a){return fn.call(that,a);};case 2:return function(a,b){return fn.call(that,a,b);};case 3:return function(a,b,c){return fn.call(that,a,b,c);};}return function()/* ...args */{return fn.apply(that,arguments);};};/***/},/* 48 *//***/function(module,exports,__webpack_require__){var LIBRARY=__webpack_require__(82),$export=__webpack_require__(25),redefine=__webpack_require__(83),hide=__webpack_require__(26),has=__webpack_require__(21),Iterators=__webpack_require__(17),$iterCreate=__webpack_require__(84),setToStringTag=__webpack_require__(54),getPrototypeOf=__webpack_require__(91),ITERATOR=__webpack_require__(11)('iterator'),BUGGY=!([].keys&&'next'in[].keys())// Safari has buggy iterators w/o `next`
,FF_ITERATOR='@@iterator',KEYS='keys',VALUES='values';var returnThis=function returnThis(){return this;};module.exports=function(Base,NAME,Constructor,next,DEFAULT,IS_SET,FORCED){$iterCreate(Constructor,NAME,next);var getMethod=function getMethod(kind){if(!BUGGY&&kind in proto)return proto[kind];switch(kind){case KEYS:return function keys(){return new Constructor(this,kind);};case VALUES:return function values(){return new Constructor(this,kind);};}return function entries(){return new Constructor(this,kind);};};var TAG=NAME+' Iterator',DEF_VALUES=DEFAULT==VALUES,VALUES_BUG=false,proto=Base.prototype,$native=proto[ITERATOR]||proto[FF_ITERATOR]||DEFAULT&&proto[DEFAULT],$default=$native||getMethod(DEFAULT),$entries=DEFAULT?!DEF_VALUES?$default:getMethod('entries'):undefined,$anyNative=NAME=='Array'?proto.entries||$native:$native,methods,key,IteratorPrototype;// Fix native
if($anyNative){IteratorPrototype=getPrototypeOf($anyNative.call(new Base()));if(IteratorPrototype!==Object.prototype){// Set @@toStringTag to native iterators
setToStringTag(IteratorPrototype,TAG,true);// fix for some old engines
if(!LIBRARY&&!has(IteratorPrototype,ITERATOR))hide(IteratorPrototype,ITERATOR,returnThis);}}// fix Array#{values, @@iterator}.name in V8 / FF
if(DEF_VALUES&&$native&&$native.name!==VALUES){VALUES_BUG=true;$default=function values(){return $native.call(this);};}// Define iterator
if((!LIBRARY||FORCED)&&(BUGGY||VALUES_BUG||!proto[ITERATOR])){hide(proto,ITERATOR,$default);}// Plug for library
Iterators[NAME]=$default;Iterators[TAG]=returnThis;if(DEFAULT){methods={values:DEF_VALUES?$default:getMethod(VALUES),keys:IS_SET?$default:getMethod(KEYS),entries:$entries};if(FORCED)for(key in methods){if(!(key in proto))redefine(proto,key,methods[key]);}else $export($export.P+$export.F*(BUGGY||VALUES_BUG),NAME,methods);}return methods;};/***/},/* 49 *//***/function(module,exports,__webpack_require__){// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof=__webpack_require__(50);module.exports=Object('z').propertyIsEnumerable(0)?Object:function(it){return cof(it)=='String'?it.split(''):Object(it);};/***/},/* 50 *//***/function(module,exports){var toString={}.toString;module.exports=function(it){return toString.call(it).slice(8,-1);};/***/},/* 51 *//***/function(module,exports,__webpack_require__){// 7.1.15 ToLength
var toInteger=__webpack_require__(37),min=Math.min;module.exports=function(it){return it>0?min(toInteger(it),0x1fffffffffffff):0;// pow(2, 53) - 1 == 9007199254740991
};/***/},/* 52 *//***/function(module,exports,__webpack_require__){var global=__webpack_require__(16),SHARED='__core-js_shared__',store=global[SHARED]||(global[SHARED]={});module.exports=function(key){return store[key]||(store[key]={});};/***/},/* 53 *//***/function(module,exports){// IE 8- don't enum bug keys
module.exports='constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');/***/},/* 54 *//***/function(module,exports,__webpack_require__){var def=__webpack_require__(15).f,has=__webpack_require__(21),TAG=__webpack_require__(11)('toStringTag');module.exports=function(it,tag,stat){if(it&&!has(it=stat?it:it.prototype,TAG))def(it,TAG,{configurable:true,value:tag});};/***/},/* 55 *//***/function(module,exports,__webpack_require__){var classof=__webpack_require__(56),ITERATOR=__webpack_require__(11)('iterator'),Iterators=__webpack_require__(17);module.exports=__webpack_require__(8).getIteratorMethod=function(it){if(it!=undefined)return it[ITERATOR]||it['@@iterator']||Iterators[classof(it)];};/***/},/* 56 *//***/function(module,exports,__webpack_require__){// getting tag from 19.1.3.6 Object.prototype.toString()
var cof=__webpack_require__(50),TAG=__webpack_require__(11)('toStringTag')// ES3 wrong here
,ARG=cof(function(){return arguments;}())=='Arguments';// fallback for IE11 Script Access Denied error
var tryGet=function tryGet(it,key){try{return it[key];}catch(e){/* empty */}};module.exports=function(it){var O,T,B;return it===undefined?'Undefined':it===null?'Null'// @@toStringTag case
:typeof(T=tryGet(O=Object(it),TAG))=='string'?T// builtinTag case
:ARG?cof(O)// ES3 arguments fallback
:(B=cof(O))=='Object'&&typeof O.callee=='function'?'Arguments':B;};/***/},/* 57 *//***/function(module,exports,__webpack_require__){exports.__esModule=true;var _isIterable2=__webpack_require__(97);var _isIterable3=_interopRequireDefault(_isIterable2);var _getIterator2=__webpack_require__(18);var _getIterator3=_interopRequireDefault(_getIterator2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=(0, _getIterator3.default)(arr),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if((0, _isIterable3.default)(Object(arr))){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();/***/},/* 58 *//***/function(module,exports,__webpack_require__){__webpack_require__(99);var global=__webpack_require__(16),hide=__webpack_require__(26),Iterators=__webpack_require__(17),TO_STRING_TAG=__webpack_require__(11)('toStringTag');for(var collections=['NodeList','DOMTokenList','MediaList','StyleSheetList','CSSRuleList'],i=0;i<5;i++){var NAME=collections[i],Collection=global[NAME],proto=Collection&&Collection.prototype;if(proto&&!proto[TO_STRING_TAG])hide(proto,TO_STRING_TAG,NAME);Iterators[NAME]=Iterators.Array;}/***/},/* 59 *//***/function(module,__webpack_exports__,__webpack_require__){__webpack_exports__["a"]={"AMS-Regular":{"65":[0,0.68889,0,0,0.72222],"66":[0,0.68889,0,0,0.66667],"67":[0,0.68889,0,0,0.72222],"68":[0,0.68889,0,0,0.72222],"69":[0,0.68889,0,0,0.66667],"70":[0,0.68889,0,0,0.61111],"71":[0,0.68889,0,0,0.77778],"72":[0,0.68889,0,0,0.77778],"73":[0,0.68889,0,0,0.38889],"74":[0.16667,0.68889,0,0,0.5],"75":[0,0.68889,0,0,0.77778],"76":[0,0.68889,0,0,0.66667],"77":[0,0.68889,0,0,0.94445],"78":[0,0.68889,0,0,0.72222],"79":[0.16667,0.68889,0,0,0.77778],"80":[0,0.68889,0,0,0.61111],"81":[0.16667,0.68889,0,0,0.77778],"82":[0,0.68889,0,0,0.72222],"83":[0,0.68889,0,0,0.55556],"84":[0,0.68889,0,0,0.66667],"85":[0,0.68889,0,0,0.72222],"86":[0,0.68889,0,0,0.72222],"87":[0,0.68889,0,0,1.0],"88":[0,0.68889,0,0,0.72222],"89":[0,0.68889,0,0,0.72222],"90":[0,0.68889,0,0,0.66667],"107":[0,0.68889,0,0,0.55556],"165":[0,0.675,0.025,0,0.75],"174":[0.15559,0.69224,0,0,0.94666],"240":[0,0.68889,0,0,0.55556],"295":[0,0.68889,0,0,0.54028],"710":[0,0.825,0,0,2.33334],"732":[0,0.9,0,0,2.33334],"770":[0,0.825,0,0,2.33334],"771":[0,0.9,0,0,2.33334],"989":[0.08167,0.58167,0,0,0.77778],"1008":[0,0.43056,0.04028,0,0.66667],"8245":[0,0.54986,0,0,0.275],"8463":[0,0.68889,0,0,0.54028],"8487":[0,0.68889,0,0,0.72222],"8498":[0,0.68889,0,0,0.55556],"8502":[0,0.68889,0,0,0.66667],"8503":[0,0.68889,0,0,0.44445],"8504":[0,0.68889,0,0,0.66667],"8513":[0,0.68889,0,0,0.63889],"8592":[-0.03598,0.46402,0,0,0.5],"8594":[-0.03598,0.46402,0,0,0.5],"8602":[-0.13313,0.36687,0,0,1.0],"8603":[-0.13313,0.36687,0,0,1.0],"8606":[0.01354,0.52239,0,0,1.0],"8608":[0.01354,0.52239,0,0,1.0],"8610":[0.01354,0.52239,0,0,1.11111],"8611":[0.01354,0.52239,0,0,1.11111],"8619":[0,0.54986,0,0,1.0],"8620":[0,0.54986,0,0,1.0],"8621":[-0.13313,0.37788,0,0,1.38889],"8622":[-0.13313,0.36687,0,0,1.0],"8624":[0,0.69224,0,0,0.5],"8625":[0,0.69224,0,0,0.5],"8630":[0,0.43056,0,0,1.0],"8631":[0,0.43056,0,0,1.0],"8634":[0.08198,0.58198,0,0,0.77778],"8635":[0.08198,0.58198,0,0,0.77778],"8638":[0.19444,0.69224,0,0,0.41667],"8639":[0.19444,0.69224,0,0,0.41667],"8642":[0.19444,0.69224,0,0,0.41667],"8643":[0.19444,0.69224,0,0,0.41667],"8644":[0.1808,0.675,0,0,1.0],"8646":[0.1808,0.675,0,0,1.0],"8647":[0.1808,0.675,0,0,1.0],"8648":[0.19444,0.69224,0,0,0.83334],"8649":[0.1808,0.675,0,0,1.0],"8650":[0.19444,0.69224,0,0,0.83334],"8651":[0.01354,0.52239,0,0,1.0],"8652":[0.01354,0.52239,0,0,1.0],"8653":[-0.13313,0.36687,0,0,1.0],"8654":[-0.13313,0.36687,0,0,1.0],"8655":[-0.13313,0.36687,0,0,1.0],"8666":[0.13667,0.63667,0,0,1.0],"8667":[0.13667,0.63667,0,0,1.0],"8669":[-0.13313,0.37788,0,0,1.0],"8672":[-0.064,0.437,0,0,1187],"8674":[-0.064,0.437,0,0,1167],"8705":[0,0.825,0,0,0.5],"8708":[0,0.68889,0,0,0.55556],"8709":[0.08167,0.58167,0,0,0.77778],"8717":[0,0.43056,0,0,0.42917],"8722":[-0.03598,0.46402,0,0,0.5],"8724":[0.08198,0.69224,0,0,0.77778],"8726":[0.08167,0.58167,0,0,0.77778],"8733":[0,0.69224,0,0,0.77778],"8736":[0,0.69224,0,0,0.72222],"8737":[0,0.69224,0,0,0.72222],"8738":[0.03517,0.52239,0,0,0.72222],"8739":[0.08167,0.58167,0,0,0.22222],"8740":[0.25142,0.74111,0,0,0.27778],"8741":[0.08167,0.58167,0,0,0.38889],"8742":[0.25142,0.74111,0,0,0.5],"8756":[0,0.69224,0,0,0.66667],"8757":[0,0.69224,0,0,0.66667],"8764":[-0.13313,0.36687,0,0,0.77778],"8765":[-0.13313,0.37788,0,0,0.77778],"8769":[-0.13313,0.36687,0,0,0.77778],"8770":[-0.03625,0.46375,0,0,0.77778],"8774":[0.30274,0.79383,0,0,0.77778],"8776":[-0.01688,0.48312,0,0,0.77778],"8778":[0.08167,0.58167,0,0,0.77778],"8782":[0.06062,0.54986,0,0,0.77778],"8783":[0.06062,0.54986,0,0,0.77778],"8785":[0.08198,0.58198,0,0,0.77778],"8786":[0.08198,0.58198,0,0,0.77778],"8787":[0.08198,0.58198,0,0,0.77778],"8790":[0,0.69224,0,0,0.77778],"8791":[0.22958,0.72958,0,0,0.77778],"8796":[0.08198,0.91667,0,0,0.77778],"8806":[0.25583,0.75583,0,0,0.77778],"8807":[0.25583,0.75583,0,0,0.77778],"8808":[0.25142,0.75726,0,0,0.77778],"8809":[0.25142,0.75726,0,0,0.77778],"8812":[0.25583,0.75583,0,0,0.5],"8814":[0.20576,0.70576,0,0,0.77778],"8815":[0.20576,0.70576,0,0,0.77778],"8816":[0.30274,0.79383,0,0,0.77778],"8817":[0.30274,0.79383,0,0,0.77778],"8818":[0.22958,0.72958,0,0,0.77778],"8819":[0.22958,0.72958,0,0,0.77778],"8822":[0.1808,0.675,0,0,0.77778],"8823":[0.1808,0.675,0,0,0.77778],"8828":[0.13667,0.63667,0,0,0.77778],"8829":[0.13667,0.63667,0,0,0.77778],"8830":[0.22958,0.72958,0,0,0.77778],"8831":[0.22958,0.72958,0,0,0.77778],"8832":[0.20576,0.70576,0,0,0.77778],"8833":[0.20576,0.70576,0,0,0.77778],"8840":[0.30274,0.79383,0,0,0.77778],"8841":[0.30274,0.79383,0,0,0.77778],"8842":[0.13597,0.63597,0,0,0.77778],"8843":[0.13597,0.63597,0,0,0.77778],"8847":[0.03517,0.54986,0,0,0.77778],"8848":[0.03517,0.54986,0,0,0.77778],"8858":[0.08198,0.58198,0,0,0.77778],"8859":[0.08198,0.58198,0,0,0.77778],"8861":[0.08198,0.58198,0,0,0.77778],"8862":[0,0.675,0,0,0.77778],"8863":[0,0.675,0,0,0.77778],"8864":[0,0.675,0,0,0.77778],"8865":[0,0.675,0,0,0.77778],"8872":[0,0.69224,0,0,0.61111],"8873":[0,0.69224,0,0,0.72222],"8874":[0,0.69224,0,0,0.88889],"8876":[0,0.68889,0,0,0.61111],"8877":[0,0.68889,0,0,0.61111],"8878":[0,0.68889,0,0,0.72222],"8879":[0,0.68889,0,0,0.72222],"8882":[0.03517,0.54986,0,0,0.77778],"8883":[0.03517,0.54986,0,0,0.77778],"8884":[0.13667,0.63667,0,0,0.77778],"8885":[0.13667,0.63667,0,0,0.77778],"8888":[0,0.54986,0,0,1.11111],"8890":[0.19444,0.43056,0,0,0.55556],"8891":[0.19444,0.69224,0,0,0.61111],"8892":[0.19444,0.69224,0,0,0.61111],"8901":[0,0.54986,0,0,0.27778],"8903":[0.08167,0.58167,0,0,0.77778],"8905":[0.08167,0.58167,0,0,0.77778],"8906":[0.08167,0.58167,0,0,0.77778],"8907":[0,0.69224,0,0,0.77778],"8908":[0,0.69224,0,0,0.77778],"8909":[-0.03598,0.46402,0,0,0.77778],"8910":[0,0.54986,0,0,0.76042],"8911":[0,0.54986,0,0,0.76042],"8912":[0.03517,0.54986,0,0,0.77778],"8913":[0.03517,0.54986,0,0,0.77778],"8914":[0,0.54986,0,0,0.66667],"8915":[0,0.54986,0,0,0.66667],"8916":[0,0.69224,0,0,0.66667],"8918":[0.0391,0.5391,0,0,0.77778],"8919":[0.0391,0.5391,0,0,0.77778],"8920":[0.03517,0.54986,0,0,1.33334],"8921":[0.03517,0.54986,0,0,1.33334],"8922":[0.38569,0.88569,0,0,0.77778],"8923":[0.38569,0.88569,0,0,0.77778],"8926":[0.13667,0.63667,0,0,0.77778],"8927":[0.13667,0.63667,0,0,0.77778],"8928":[0.30274,0.79383,0,0,0.77778],"8929":[0.30274,0.79383,0,0,0.77778],"8934":[0.23222,0.74111,0,0,0.77778],"8935":[0.23222,0.74111,0,0,0.77778],"8936":[0.23222,0.74111,0,0,0.77778],"8937":[0.23222,0.74111,0,0,0.77778],"8938":[0.20576,0.70576,0,0,0.77778],"8939":[0.20576,0.70576,0,0,0.77778],"8940":[0.30274,0.79383,0,0,0.77778],"8941":[0.30274,0.79383,0,0,0.77778],"8994":[0.19444,0.69224,0,0,0.77778],"8995":[0.19444,0.69224,0,0,0.77778],"9416":[0.15559,0.69224,0,0,0.90222],"9484":[0,0.69224,0,0,0.5],"9488":[0,0.69224,0,0,0.5],"9492":[0,0.37788,0,0,0.5],"9496":[0,0.37788,0,0,0.5],"9585":[0.19444,0.68889,0,0,0.88889],"9586":[0.19444,0.74111,0,0,0.88889],"9632":[0,0.675,0,0,0.77778],"9633":[0,0.675,0,0,0.77778],"9650":[0,0.54986,0,0,0.72222],"9651":[0,0.54986,0,0,0.72222],"9654":[0.03517,0.54986,0,0,0.77778],"9660":[0,0.54986,0,0,0.72222],"9661":[0,0.54986,0,0,0.72222],"9664":[0.03517,0.54986,0,0,0.77778],"9674":[0.11111,0.69224,0,0,0.66667],"9733":[0.19444,0.69224,0,0,0.94445],"10003":[0,0.69224,0,0,0.83334],"10016":[0,0.69224,0,0,0.83334],"10731":[0.11111,0.69224,0,0,0.66667],"10846":[0.19444,0.75583,0,0,0.61111],"10877":[0.13667,0.63667,0,0,0.77778],"10878":[0.13667,0.63667,0,0,0.77778],"10885":[0.25583,0.75583,0,0,0.77778],"10886":[0.25583,0.75583,0,0,0.77778],"10887":[0.13597,0.63597,0,0,0.77778],"10888":[0.13597,0.63597,0,0,0.77778],"10889":[0.26167,0.75726,0,0,0.77778],"10890":[0.26167,0.75726,0,0,0.77778],"10891":[0.48256,0.98256,0,0,0.77778],"10892":[0.48256,0.98256,0,0,0.77778],"10901":[0.13667,0.63667,0,0,0.77778],"10902":[0.13667,0.63667,0,0,0.77778],"10933":[0.25142,0.75726,0,0,0.77778],"10934":[0.25142,0.75726,0,0,0.77778],"10935":[0.26167,0.75726,0,0,0.77778],"10936":[0.26167,0.75726,0,0,0.77778],"10937":[0.26167,0.75726,0,0,0.77778],"10938":[0.26167,0.75726,0,0,0.77778],"10949":[0.25583,0.75583,0,0,0.77778],"10950":[0.25583,0.75583,0,0,0.77778],"10955":[0.28481,0.79383,0,0,0.77778],"10956":[0.28481,0.79383,0,0,0.77778],"57350":[0.08167,0.58167,0,0,0.22222],"57351":[0.08167,0.58167,0,0,0.38889],"57352":[0.08167,0.58167,0,0,0.77778],"57353":[0,0.43056,0.04028,0,0.66667],"57356":[0.25142,0.75726,0,0,0.77778],"57357":[0.25142,0.75726,0,0,0.77778],"57358":[0.41951,0.91951,0,0,0.77778],"57359":[0.30274,0.79383,0,0,0.77778],"57360":[0.30274,0.79383,0,0,0.77778],"57361":[0.41951,0.91951,0,0,0.77778],"57366":[0.25142,0.75726,0,0,0.77778],"57367":[0.25142,0.75726,0,0,0.77778],"57368":[0.25142,0.75726,0,0,0.77778],"57369":[0.25142,0.75726,0,0,0.77778],"57370":[0.13597,0.63597,0,0,0.77778],"57371":[0.13597,0.63597,0,0,0.77778]},"Caligraphic-Regular":{"48":[0,0.43056,0,0,0.5],"49":[0,0.43056,0,0,0.5],"50":[0,0.43056,0,0,0.5],"51":[0.19444,0.43056,0,0,0.5],"52":[0.19444,0.43056,0,0,0.5],"53":[0.19444,0.43056,0,0,0.5],"54":[0,0.64444,0,0,0.5],"55":[0.19444,0.43056,0,0,0.5],"56":[0,0.64444,0,0,0.5],"57":[0.19444,0.43056,0,0,0.5],"65":[0,0.68333,0,0.19445,0.79847],"66":[0,0.68333,0.03041,0.13889,0.65681],"67":[0,0.68333,0.05834,0.13889,0.52653],"68":[0,0.68333,0.02778,0.08334,0.77139],"69":[0,0.68333,0.08944,0.11111,0.52778],"70":[0,0.68333,0.09931,0.11111,0.71875],"71":[0.09722,0.68333,0.0593,0.11111,0.59487],"72":[0,0.68333,0.00965,0.11111,0.84452],"73":[0,0.68333,0.07382,0,0.54452],"74":[0.09722,0.68333,0.18472,0.16667,0.67778],"75":[0,0.68333,0.01445,0.05556,0.76195],"76":[0,0.68333,0,0.13889,0.68972],"77":[0,0.68333,0,0.13889,1.2009],"78":[0,0.68333,0.14736,0.08334,0.82049],"79":[0,0.68333,0.02778,0.11111,0.79611],"80":[0,0.68333,0.08222,0.08334,0.69556],"81":[0.09722,0.68333,0,0.11111,0.81667],"82":[0,0.68333,0,0.08334,0.8475],"83":[0,0.68333,0.075,0.13889,0.60556],"84":[0,0.68333,0.25417,0,0.54464],"85":[0,0.68333,0.09931,0.08334,0.62583],"86":[0,0.68333,0.08222,0,0.61278],"87":[0,0.68333,0.08222,0.08334,0.98778],"88":[0,0.68333,0.14643,0.13889,0.7133],"89":[0.09722,0.68333,0.08222,0.08334,0.66834],"90":[0,0.68333,0.07944,0.13889,0.72473]},"Fraktur-Regular":{"33":[0,0.69141,0,0,0.29574],"34":[0,0.69141,0,0,0.21471],"38":[0,0.69141,0,0,0.73786],"39":[0,0.69141,0,0,0.21201],"40":[0.24982,0.74947,0,0,0.38865],"41":[0.24982,0.74947,0,0,0.38865],"42":[0,0.62119,0,0,0.27764],"43":[0.08319,0.58283,0,0,0.75623],"44":[0,0.10803,0,0,0.27764],"45":[0.08319,0.58283,0,0,0.75623],"46":[0,0.10803,0,0,0.27764],"47":[0.24982,0.74947,0,0,0.50181],"48":[0,0.47534,0,0,0.50181],"49":[0,0.47534,0,0,0.50181],"50":[0,0.47534,0,0,0.50181],"51":[0.18906,0.47534,0,0,0.50181],"52":[0.18906,0.47534,0,0,0.50181],"53":[0.18906,0.47534,0,0,0.50181],"54":[0,0.69141,0,0,0.50181],"55":[0.18906,0.47534,0,0,0.50181],"56":[0,0.69141,0,0,0.50181],"57":[0.18906,0.47534,0,0,0.50181],"58":[0,0.47534,0,0,0.21606],"59":[0.12604,0.47534,0,0,0.21606],"61":[-0.13099,0.36866,0,0,0.75623],"63":[0,0.69141,0,0,0.36245],"65":[0,0.69141,0,0,0.7176],"66":[0,0.69141,0,0,0.88397],"67":[0,0.69141,0,0,0.61254],"68":[0,0.69141,0,0,0.83158],"69":[0,0.69141,0,0,0.66278],"70":[0.12604,0.69141,0,0,0.61119],"71":[0,0.69141,0,0,0.78539],"72":[0.06302,0.69141,0,0,0.7203],"73":[0,0.69141,0,0,0.55448],"74":[0.12604,0.69141,0,0,0.55231],"75":[0,0.69141,0,0,0.66845],"76":[0,0.69141,0,0,0.66602],"77":[0,0.69141,0,0,1.04953],"78":[0,0.69141,0,0,0.83212],"79":[0,0.69141,0,0,0.82699],"80":[0.18906,0.69141,0,0,0.82753],"81":[0.03781,0.69141,0,0,0.82699],"82":[0,0.69141,0,0,0.82807],"83":[0,0.69141,0,0,0.82861],"84":[0,0.69141,0,0,0.66899],"85":[0,0.69141,0,0,0.64576],"86":[0,0.69141,0,0,0.83131],"87":[0,0.69141,0,0,1.04602],"88":[0,0.69141,0,0,0.71922],"89":[0.18906,0.69141,0,0,0.83293],"90":[0.12604,0.69141,0,0,0.60201],"91":[0.24982,0.74947,0,0,0.27764],"93":[0.24982,0.74947,0,0,0.27764],"94":[0,0.69141,0,0,0.49965],"97":[0,0.47534,0,0,0.50046],"98":[0,0.69141,0,0,0.51315],"99":[0,0.47534,0,0,0.38946],"100":[0,0.62119,0,0,0.49857],"101":[0,0.47534,0,0,0.40053],"102":[0.18906,0.69141,0,0,0.32626],"103":[0.18906,0.47534,0,0,0.5037],"104":[0.18906,0.69141,0,0,0.52126],"105":[0,0.69141,0,0,0.27899],"106":[0,0.69141,0,0,0.28088],"107":[0,0.69141,0,0,0.38946],"108":[0,0.69141,0,0,0.27953],"109":[0,0.47534,0,0,0.76676],"110":[0,0.47534,0,0,0.52666],"111":[0,0.47534,0,0,0.48885],"112":[0.18906,0.52396,0,0,0.50046],"113":[0.18906,0.47534,0,0,0.48912],"114":[0,0.47534,0,0,0.38919],"115":[0,0.47534,0,0,0.44266],"116":[0,0.62119,0,0,0.33301],"117":[0,0.47534,0,0,0.5172],"118":[0,0.52396,0,0,0.5118],"119":[0,0.52396,0,0,0.77351],"120":[0.18906,0.47534,0,0,0.38865],"121":[0.18906,0.47534,0,0,0.49884],"122":[0.18906,0.47534,0,0,0.39054],"8216":[0,0.69141,0,0,0.21471],"8217":[0,0.69141,0,0,0.21471],"58112":[0,0.62119,0,0,0.49749],"58113":[0,0.62119,0,0,0.4983],"58114":[0.18906,0.69141,0,0,0.33328],"58115":[0.18906,0.69141,0,0,0.32923],"58116":[0.18906,0.47534,0,0,0.50343],"58117":[0,0.69141,0,0,0.33301],"58118":[0,0.62119,0,0,0.33409],"58119":[0,0.47534,0,0,0.50073]},"Main-Bold":{"33":[0,0.69444,0,0,0.35],"34":[0,0.69444,0,0,0.60278],"35":[0.19444,0.69444,0,0,0.95833],"36":[0.05556,0.75,0,0,0.575],"37":[0.05556,0.75,0,0,0.95833],"38":[0,0.69444,0,0,0.89444],"39":[0,0.69444,0,0,0.31944],"40":[0.25,0.75,0,0,0.44722],"41":[0.25,0.75,0,0,0.44722],"42":[0,0.75,0,0,0.575],"43":[0.13333,0.63333,0,0,0.89444],"44":[0.19444,0.15556,0,0,0.31944],"45":[0,0.44444,0,0,0.38333],"46":[0,0.15556,0,0,0.31944],"47":[0.25,0.75,0,0,0.575],"48":[0,0.64444,0,0,0.575],"49":[0,0.64444,0,0,0.575],"50":[0,0.64444,0,0,0.575],"51":[0,0.64444,0,0,0.575],"52":[0,0.64444,0,0,0.575],"53":[0,0.64444,0,0,0.575],"54":[0,0.64444,0,0,0.575],"55":[0,0.64444,0,0,0.575],"56":[0,0.64444,0,0,0.575],"57":[0,0.64444,0,0,0.575],"58":[0,0.44444,0,0,0.31944],"59":[0.19444,0.44444,0,0,0.31944],"60":[0.08556,0.58556,0,0,0.89444],"61":[-0.10889,0.39111,0,0,0.89444],"62":[0.08556,0.58556,0,0,0.89444],"63":[0,0.69444,0,0,0.54305],"64":[0,0.69444,0,0,0.89444],"65":[0,0.68611,0,0,0.86944],"66":[0,0.68611,0,0,0.81805],"67":[0,0.68611,0,0,0.83055],"68":[0,0.68611,0,0,0.88194],"69":[0,0.68611,0,0,0.75555],"70":[0,0.68611,0,0,0.72361],"71":[0,0.68611,0,0,0.90416],"72":[0,0.68611,0,0,0.9],"73":[0,0.68611,0,0,0.43611],"74":[0,0.68611,0,0,0.59444],"75":[0,0.68611,0,0,0.90138],"76":[0,0.68611,0,0,0.69166],"77":[0,0.68611,0,0,1.09166],"78":[0,0.68611,0,0,0.9],"79":[0,0.68611,0,0,0.86388],"80":[0,0.68611,0,0,0.78611],"81":[0.19444,0.68611,0,0,0.86388],"82":[0,0.68611,0,0,0.8625],"83":[0,0.68611,0,0,0.63889],"84":[0,0.68611,0,0,0.8],"85":[0,0.68611,0,0,0.88472],"86":[0,0.68611,0.01597,0,0.86944],"87":[0,0.68611,0.01597,0,1.18888],"88":[0,0.68611,0,0,0.86944],"89":[0,0.68611,0.02875,0,0.86944],"90":[0,0.68611,0,0,0.70277],"91":[0.25,0.75,0,0,0.31944],"92":[0.25,0.75,0,0,0.575],"93":[0.25,0.75,0,0,0.31944],"94":[0,0.69444,0,0,0.575],"95":[0.31,0.13444,0.03194,0,0.575],"97":[0,0.44444,0,0,0.55902],"98":[0,0.69444,0,0,0.63889],"99":[0,0.44444,0,0,0.51111],"100":[0,0.69444,0,0,0.63889],"101":[0,0.44444,0,0,0.52708],"102":[0,0.69444,0.10903,0,0.35139],"103":[0.19444,0.44444,0.01597,0,0.575],"104":[0,0.69444,0,0,0.63889],"105":[0,0.69444,0,0,0.31944],"106":[0.19444,0.69444,0,0,0.35139],"107":[0,0.69444,0,0,0.60694],"108":[0,0.69444,0,0,0.31944],"109":[0,0.44444,0,0,0.95833],"110":[0,0.44444,0,0,0.63889],"111":[0,0.44444,0,0,0.575],"112":[0.19444,0.44444,0,0,0.63889],"113":[0.19444,0.44444,0,0,0.60694],"114":[0,0.44444,0,0,0.47361],"115":[0,0.44444,0,0,0.45361],"116":[0,0.63492,0,0,0.44722],"117":[0,0.44444,0,0,0.63889],"118":[0,0.44444,0.01597,0,0.60694],"119":[0,0.44444,0.01597,0,0.83055],"120":[0,0.44444,0,0,0.60694],"121":[0.19444,0.44444,0.01597,0,0.60694],"122":[0,0.44444,0,0,0.51111],"123":[0.25,0.75,0,0,0.575],"124":[0.25,0.75,0,0,0.31944],"125":[0.25,0.75,0,0,0.575],"126":[0.35,0.34444,0,0,0.575],"168":[0,0.69444,0,0,0.575],"172":[0,0.44444,0,0,0.76666],"176":[0,0.69444,0,0,0.86944],"177":[0.13333,0.63333,0,0,0.89444],"198":[0,0.68611,0,0,1.04166],"215":[0.13333,0.63333,0,0,0.89444],"216":[0.04861,0.73472,0,0,0.89444],"223":[0,0.69444,0,0,0.59722],"230":[0,0.44444,0,0,0.83055],"247":[0.13333,0.63333,0,0,0.89444],"248":[0.09722,0.54167,0,0,0.575],"305":[0,0.44444,0,0,0.31944],"338":[0,0.68611,0,0,1.16944],"339":[0,0.44444,0,0,0.89444],"567":[0.19444,0.44444,0,0,0.35139],"710":[0,0.69444,0,0,0.575],"711":[0,0.63194,0,0,0.575],"713":[0,0.59611,0,0,0.575],"714":[0,0.69444,0,0,0.575],"715":[0,0.69444,0,0,0.575],"728":[0,0.69444,0,0,0.575],"729":[0,0.69444,0,0,0.31944],"730":[0,0.69444,0,0,0.86944],"732":[0,0.69444,0,0,0.575],"733":[0,0.69444,0,0,0.575],"824":[0.19444,0.69444,0,0,0],"915":[0,0.68611,0,0,0.69166],"916":[0,0.68611,0,0,0.95833],"920":[0,0.68611,0,0,0.89444],"923":[0,0.68611,0,0,0.80555],"926":[0,0.68611,0,0,0.76666],"928":[0,0.68611,0,0,0.9],"931":[0,0.68611,0,0,0.83055],"933":[0,0.68611,0,0,0.89444],"934":[0,0.68611,0,0,0.83055],"936":[0,0.68611,0,0,0.89444],"937":[0,0.68611,0,0,0.83055],"8211":[0,0.44444,0.03194,0,0.575],"8212":[0,0.44444,0.03194,0,1.14999],"8216":[0,0.69444,0,0,0.31944],"8217":[0,0.69444,0,0,0.31944],"8220":[0,0.69444,0,0,0.60278],"8221":[0,0.69444,0,0,0.60278],"8224":[0.19444,0.69444,0,0,0.51111],"8225":[0.19444,0.69444,0,0,0.51111],"8242":[0,0.55556,0,0,0.34444],"8407":[0,0.72444,0.15486,0,0.575],"8463":[0,0.69444,0,0,0.66759],"8465":[0,0.69444,0,0,0.83055],"8467":[0,0.69444,0,0,0.47361],"8472":[0.19444,0.44444,0,0,0.74027],"8476":[0,0.69444,0,0,0.83055],"8501":[0,0.69444,0,0,0.70277],"8592":[-0.10889,0.39111,0,0,1.14999],"8593":[0.19444,0.69444,0,0,0.575],"8594":[-0.10889,0.39111,0,0,1.14999],"8595":[0.19444,0.69444,0,0,0.575],"8596":[-0.10889,0.39111,0,0,1.14999],"8597":[0.25,0.75,0,0,0.575],"8598":[0.19444,0.69444,0,0,1.14999],"8599":[0.19444,0.69444,0,0,1.14999],"8600":[0.19444,0.69444,0,0,1.14999],"8601":[0.19444,0.69444,0,0,1.14999],"8636":[-0.10889,0.39111,0,0,1.14999],"8637":[-0.10889,0.39111,0,0,1.14999],"8640":[-0.10889,0.39111,0,0,1.14999],"8641":[-0.10889,0.39111,0,0,1.14999],"8656":[-0.10889,0.39111,0,0,1.14999],"8657":[0.19444,0.69444,0,0,0.70277],"8658":[-0.10889,0.39111,0,0,1.14999],"8659":[0.19444,0.69444,0,0,0.70277],"8660":[-0.10889,0.39111,0,0,1.14999],"8661":[0.25,0.75,0,0,0.70277],"8704":[0,0.69444,0,0,0.63889],"8706":[0,0.69444,0.06389,0,0.62847],"8707":[0,0.69444,0,0,0.63889],"8709":[0.05556,0.75,0,0,0.575],"8711":[0,0.68611,0,0,0.95833],"8712":[0.08556,0.58556,0,0,0.76666],"8715":[0.08556,0.58556,0,0,0.76666],"8722":[0.13333,0.63333,0,0,0.89444],"8723":[0.13333,0.63333,0,0,0.89444],"8725":[0.25,0.75,0,0,0.575],"8726":[0.25,0.75,0,0,0.575],"8727":[-0.02778,0.47222,0,0,0.575],"8728":[-0.02639,0.47361,0,0,0.575],"8729":[-0.02639,0.47361,0,0,0.575],"8730":[0.18,0.82,0,0,0.95833],"8733":[0,0.44444,0,0,0.89444],"8734":[0,0.44444,0,0,1.14999],"8736":[0,0.69224,0,0,0.72222],"8739":[0.25,0.75,0,0,0.31944],"8741":[0.25,0.75,0,0,0.575],"8743":[0,0.55556,0,0,0.76666],"8744":[0,0.55556,0,0,0.76666],"8745":[0,0.55556,0,0,0.76666],"8746":[0,0.55556,0,0,0.76666],"8747":[0.19444,0.69444,0.12778,0,0.56875],"8764":[-0.10889,0.39111,0,0,0.89444],"8768":[0.19444,0.69444,0,0,0.31944],"8771":[0.00222,0.50222,0,0,0.89444],"8776":[0.02444,0.52444,0,0,0.89444],"8781":[0.00222,0.50222,0,0,0.89444],"8801":[0.00222,0.50222,0,0,0.89444],"8804":[0.19667,0.69667,0,0,0.89444],"8805":[0.19667,0.69667,0,0,0.89444],"8810":[0.08556,0.58556,0,0,1.14999],"8811":[0.08556,0.58556,0,0,1.14999],"8826":[0.08556,0.58556,0,0,0.89444],"8827":[0.08556,0.58556,0,0,0.89444],"8834":[0.08556,0.58556,0,0,0.89444],"8835":[0.08556,0.58556,0,0,0.89444],"8838":[0.19667,0.69667,0,0,0.89444],"8839":[0.19667,0.69667,0,0,0.89444],"8846":[0,0.55556,0,0,0.76666],"8849":[0.19667,0.69667,0,0,0.89444],"8850":[0.19667,0.69667,0,0,0.89444],"8851":[0,0.55556,0,0,0.76666],"8852":[0,0.55556,0,0,0.76666],"8853":[0.13333,0.63333,0,0,0.89444],"8854":[0.13333,0.63333,0,0,0.89444],"8855":[0.13333,0.63333,0,0,0.89444],"8856":[0.13333,0.63333,0,0,0.89444],"8857":[0.13333,0.63333,0,0,0.89444],"8866":[0,0.69444,0,0,0.70277],"8867":[0,0.69444,0,0,0.70277],"8868":[0,0.69444,0,0,0.89444],"8869":[0,0.69444,0,0,0.89444],"8900":[-0.02639,0.47361,0,0,0.575],"8901":[-0.02639,0.47361,0,0,0.31944],"8902":[-0.02778,0.47222,0,0,0.575],"8968":[0.25,0.75,0,0,0.51111],"8969":[0.25,0.75,0,0,0.51111],"8970":[0.25,0.75,0,0,0.51111],"8971":[0.25,0.75,0,0,0.51111],"8994":[-0.13889,0.36111,0,0,1.14999],"8995":[-0.13889,0.36111,0,0,1.14999],"9651":[0.19444,0.69444,0,0,1.02222],"9657":[-0.02778,0.47222,0,0,0.575],"9661":[0.19444,0.69444,0,0,1.02222],"9667":[-0.02778,0.47222,0,0,0.575],"9711":[0.19444,0.69444,0,0,1.14999],"9824":[0.12963,0.69444,0,0,0.89444],"9825":[0.12963,0.69444,0,0,0.89444],"9826":[0.12963,0.69444,0,0,0.89444],"9827":[0.12963,0.69444,0,0,0.89444],"9837":[0,0.75,0,0,0.44722],"9838":[0.19444,0.69444,0,0,0.44722],"9839":[0.19444,0.69444,0,0,0.44722],"10216":[0.25,0.75,0,0,0.44722],"10217":[0.25,0.75,0,0,0.44722],"10815":[0,0.68611,0,0,0.9],"10927":[0.19667,0.69667,0,0,0.89444],"10928":[0.19667,0.69667,0,0,0.89444]},"Main-BoldItalic":{"33":[0,0.69444,0.11417,0,0.38611],"34":[0,0.69444,0.07939,0,0.62055],"35":[0.19444,0.69444,0.06833,0,0.94444],"37":[0.05556,0.75,0.12861,0,0.94444],"38":[0,0.69444,0.08528,0,0.88555],"39":[0,0.69444,0.12945,0,0.35555],"40":[0.25,0.75,0.15806,0,0.47333],"41":[0.25,0.75,0.03306,0,0.47333],"42":[0,0.75,0.14333,0,0.59111],"43":[0.10333,0.60333,0.03306,0,0.88555],"44":[0.19444,0.14722,0,0,0.35555],"45":[0,0.44444,0.02611,0,0.41444],"46":[0,0.14722,0,0,0.35555],"47":[0.25,0.75,0.15806,0,0.59111],"48":[0,0.64444,0.13167,0,0.59111],"49":[0,0.64444,0.13167,0,0.59111],"50":[0,0.64444,0.13167,0,0.59111],"51":[0,0.64444,0.13167,0,0.59111],"52":[0.19444,0.64444,0.13167,0,0.59111],"53":[0,0.64444,0.13167,0,0.59111],"54":[0,0.64444,0.13167,0,0.59111],"55":[0.19444,0.64444,0.13167,0,0.59111],"56":[0,0.64444,0.13167,0,0.59111],"57":[0,0.64444,0.13167,0,0.59111],"58":[0,0.44444,0.06695,0,0.35555],"59":[0.19444,0.44444,0.06695,0,0.35555],"61":[-0.10889,0.39111,0.06833,0,0.88555],"63":[0,0.69444,0.11472,0,0.59111],"64":[0,0.69444,0.09208,0,0.88555],"65":[0,0.68611,0,0,0.86555],"66":[0,0.68611,0.0992,0,0.81666],"67":[0,0.68611,0.14208,0,0.82666],"68":[0,0.68611,0.09062,0,0.87555],"69":[0,0.68611,0.11431,0,0.75666],"70":[0,0.68611,0.12903,0,0.72722],"71":[0,0.68611,0.07347,0,0.89527],"72":[0,0.68611,0.17208,0,0.8961],"73":[0,0.68611,0.15681,0,0.47166],"74":[0,0.68611,0.145,0,0.61055],"75":[0,0.68611,0.14208,0,0.89499],"76":[0,0.68611,0,0,0.69777],"77":[0,0.68611,0.17208,0,1.07277],"78":[0,0.68611,0.17208,0,0.8961],"79":[0,0.68611,0.09062,0,0.85499],"80":[0,0.68611,0.0992,0,0.78721],"81":[0.19444,0.68611,0.09062,0,0.85499],"82":[0,0.68611,0.02559,0,0.85944],"83":[0,0.68611,0.11264,0,0.64999],"84":[0,0.68611,0.12903,0,0.7961],"85":[0,0.68611,0.17208,0,0.88083],"86":[0,0.68611,0.18625,0,0.86555],"87":[0,0.68611,0.18625,0,1.15999],"88":[0,0.68611,0.15681,0,0.86555],"89":[0,0.68611,0.19803,0,0.86555],"90":[0,0.68611,0.14208,0,0.70888],"91":[0.25,0.75,0.1875,0,0.35611],"93":[0.25,0.75,0.09972,0,0.35611],"94":[0,0.69444,0.06709,0,0.59111],"95":[0.31,0.13444,0.09811,0,0.59111],"97":[0,0.44444,0.09426,0,0.59111],"98":[0,0.69444,0.07861,0,0.53222],"99":[0,0.44444,0.05222,0,0.53222],"100":[0,0.69444,0.10861,0,0.59111],"101":[0,0.44444,0.085,0,0.53222],"102":[0.19444,0.69444,0.21778,0,0.4],"103":[0.19444,0.44444,0.105,0,0.53222],"104":[0,0.69444,0.09426,0,0.59111],"105":[0,0.69326,0.11387,0,0.35555],"106":[0.19444,0.69326,0.1672,0,0.35555],"107":[0,0.69444,0.11111,0,0.53222],"108":[0,0.69444,0.10861,0,0.29666],"109":[0,0.44444,0.09426,0,0.94444],"110":[0,0.44444,0.09426,0,0.64999],"111":[0,0.44444,0.07861,0,0.59111],"112":[0.19444,0.44444,0.07861,0,0.59111],"113":[0.19444,0.44444,0.105,0,0.53222],"114":[0,0.44444,0.11111,0,0.50167],"115":[0,0.44444,0.08167,0,0.48694],"116":[0,0.63492,0.09639,0,0.385],"117":[0,0.44444,0.09426,0,0.62055],"118":[0,0.44444,0.11111,0,0.53222],"119":[0,0.44444,0.11111,0,0.76777],"120":[0,0.44444,0.12583,0,0.56055],"121":[0.19444,0.44444,0.105,0,0.56166],"122":[0,0.44444,0.13889,0,0.49055],"126":[0.35,0.34444,0.11472,0,0.59111],"163":[0,0.69444,0,0,0.86853],"168":[0,0.69444,0.11473,0,0.59111],"176":[0,0.69444,0,0,0.94888],"198":[0,0.68611,0.11431,0,1.02277],"216":[0.04861,0.73472,0.09062,0,0.88555],"223":[0.19444,0.69444,0.09736,0,0.665],"230":[0,0.44444,0.085,0,0.82666],"248":[0.09722,0.54167,0.09458,0,0.59111],"305":[0,0.44444,0.09426,0,0.35555],"338":[0,0.68611,0.11431,0,1.14054],"339":[0,0.44444,0.085,0,0.82666],"567":[0.19444,0.44444,0.04611,0,0.385],"710":[0,0.69444,0.06709,0,0.59111],"711":[0,0.63194,0.08271,0,0.59111],"713":[0,0.59444,0.10444,0,0.59111],"714":[0,0.69444,0.08528,0,0.59111],"715":[0,0.69444,0,0,0.59111],"728":[0,0.69444,0.10333,0,0.59111],"729":[0,0.69444,0.12945,0,0.35555],"730":[0,0.69444,0,0,0.94888],"732":[0,0.69444,0.11472,0,0.59111],"733":[0,0.69444,0.11472,0,0.59111],"915":[0,0.68611,0.12903,0,0.69777],"916":[0,0.68611,0,0,0.94444],"920":[0,0.68611,0.09062,0,0.88555],"923":[0,0.68611,0,0,0.80666],"926":[0,0.68611,0.15092,0,0.76777],"928":[0,0.68611,0.17208,0,0.8961],"931":[0,0.68611,0.11431,0,0.82666],"933":[0,0.68611,0.10778,0,0.88555],"934":[0,0.68611,0.05632,0,0.82666],"936":[0,0.68611,0.10778,0,0.88555],"937":[0,0.68611,0.0992,0,0.82666],"8211":[0,0.44444,0.09811,0,0.59111],"8212":[0,0.44444,0.09811,0,1.18221],"8216":[0,0.69444,0.12945,0,0.35555],"8217":[0,0.69444,0.12945,0,0.35555],"8220":[0,0.69444,0.16772,0,0.62055],"8221":[0,0.69444,0.07939,0,0.62055]},"Main-Italic":{"33":[0,0.69444,0.12417,0,0.30667],"34":[0,0.69444,0.06961,0,0.51444],"35":[0.19444,0.69444,0.06616,0,0.81777],"37":[0.05556,0.75,0.13639,0,0.81777],"38":[0,0.69444,0.09694,0,0.76666],"39":[0,0.69444,0.12417,0,0.30667],"40":[0.25,0.75,0.16194,0,0.40889],"41":[0.25,0.75,0.03694,0,0.40889],"42":[0,0.75,0.14917,0,0.51111],"43":[0.05667,0.56167,0.03694,0,0.76666],"44":[0.19444,0.10556,0,0,0.30667],"45":[0,0.43056,0.02826,0,0.35778],"46":[0,0.10556,0,0,0.30667],"47":[0.25,0.75,0.16194,0,0.51111],"48":[0,0.64444,0.13556,0,0.51111],"49":[0,0.64444,0.13556,0,0.51111],"50":[0,0.64444,0.13556,0,0.51111],"51":[0,0.64444,0.13556,0,0.51111],"52":[0.19444,0.64444,0.13556,0,0.51111],"53":[0,0.64444,0.13556,0,0.51111],"54":[0,0.64444,0.13556,0,0.51111],"55":[0.19444,0.64444,0.13556,0,0.51111],"56":[0,0.64444,0.13556,0,0.51111],"57":[0,0.64444,0.13556,0,0.51111],"58":[0,0.43056,0.0582,0,0.30667],"59":[0.19444,0.43056,0.0582,0,0.30667],"61":[-0.13313,0.36687,0.06616,0,0.76666],"63":[0,0.69444,0.1225,0,0.51111],"64":[0,0.69444,0.09597,0,0.76666],"65":[0,0.68333,0,0,0.74333],"66":[0,0.68333,0.10257,0,0.70389],"67":[0,0.68333,0.14528,0,0.71555],"68":[0,0.68333,0.09403,0,0.755],"69":[0,0.68333,0.12028,0,0.67833],"70":[0,0.68333,0.13305,0,0.65277],"71":[0,0.68333,0.08722,0,0.77361],"72":[0,0.68333,0.16389,0,0.74333],"73":[0,0.68333,0.15806,0,0.38555],"74":[0,0.68333,0.14028,0,0.525],"75":[0,0.68333,0.14528,0,0.76888],"76":[0,0.68333,0,0,0.62722],"77":[0,0.68333,0.16389,0,0.89666],"78":[0,0.68333,0.16389,0,0.74333],"79":[0,0.68333,0.09403,0,0.76666],"80":[0,0.68333,0.10257,0,0.67833],"81":[0.19444,0.68333,0.09403,0,0.76666],"82":[0,0.68333,0.03868,0,0.72944],"83":[0,0.68333,0.11972,0,0.56222],"84":[0,0.68333,0.13305,0,0.71555],"85":[0,0.68333,0.16389,0,0.74333],"86":[0,0.68333,0.18361,0,0.74333],"87":[0,0.68333,0.18361,0,0.99888],"88":[0,0.68333,0.15806,0,0.74333],"89":[0,0.68333,0.19383,0,0.74333],"90":[0,0.68333,0.14528,0,0.61333],"91":[0.25,0.75,0.1875,0,0.30667],"93":[0.25,0.75,0.10528,0,0.30667],"94":[0,0.69444,0.06646,0,0.51111],"95":[0.31,0.12056,0.09208,0,0.51111],"97":[0,0.43056,0.07671,0,0.51111],"98":[0,0.69444,0.06312,0,0.46],"99":[0,0.43056,0.05653,0,0.46],"100":[0,0.69444,0.10333,0,0.51111],"101":[0,0.43056,0.07514,0,0.46],"102":[0.19444,0.69444,0.21194,0,0.30667],"103":[0.19444,0.43056,0.08847,0,0.46],"104":[0,0.69444,0.07671,0,0.51111],"105":[0,0.65536,0.1019,0,0.30667],"106":[0.19444,0.65536,0.14467,0,0.30667],"107":[0,0.69444,0.10764,0,0.46],"108":[0,0.69444,0.10333,0,0.25555],"109":[0,0.43056,0.07671,0,0.81777],"110":[0,0.43056,0.07671,0,0.56222],"111":[0,0.43056,0.06312,0,0.51111],"112":[0.19444,0.43056,0.06312,0,0.51111],"113":[0.19444,0.43056,0.08847,0,0.46],"114":[0,0.43056,0.10764,0,0.42166],"115":[0,0.43056,0.08208,0,0.40889],"116":[0,0.61508,0.09486,0,0.33222],"117":[0,0.43056,0.07671,0,0.53666],"118":[0,0.43056,0.10764,0,0.46],"119":[0,0.43056,0.10764,0,0.66444],"120":[0,0.43056,0.12042,0,0.46389],"121":[0.19444,0.43056,0.08847,0,0.48555],"122":[0,0.43056,0.12292,0,0.40889],"126":[0.35,0.31786,0.11585,0,0.51111],"163":[0,0.69444,0,0,0.76909],"168":[0,0.66786,0.10474,0,0.51111],"176":[0,0.69444,0,0,0.83129],"198":[0,0.68333,0.12028,0,0.88277],"216":[0.04861,0.73194,0.09403,0,0.76666],"223":[0.19444,0.69444,0.10514,0,0.53666],"230":[0,0.43056,0.07514,0,0.71555],"248":[0.09722,0.52778,0.09194,0,0.51111],"305":[0,0.43056,0,0.02778,0.32246],"338":[0,0.68333,0.12028,0,0.98499],"339":[0,0.43056,0.07514,0,0.71555],"567":[0.19444,0.43056,0,0.08334,0.38403],"710":[0,0.69444,0.06646,0,0.51111],"711":[0,0.62847,0.08295,0,0.51111],"713":[0,0.56167,0.10333,0,0.51111],"714":[0,0.69444,0.09694,0,0.51111],"715":[0,0.69444,0,0,0.51111],"728":[0,0.69444,0.10806,0,0.51111],"729":[0,0.66786,0.11752,0,0.30667],"730":[0,0.69444,0,0,0.83129],"732":[0,0.66786,0.11585,0,0.51111],"733":[0,0.69444,0.1225,0,0.51111],"915":[0,0.68333,0.13305,0,0.62722],"916":[0,0.68333,0,0,0.81777],"920":[0,0.68333,0.09403,0,0.76666],"923":[0,0.68333,0,0,0.69222],"926":[0,0.68333,0.15294,0,0.66444],"928":[0,0.68333,0.16389,0,0.74333],"931":[0,0.68333,0.12028,0,0.71555],"933":[0,0.68333,0.11111,0,0.76666],"934":[0,0.68333,0.05986,0,0.71555],"936":[0,0.68333,0.11111,0,0.76666],"937":[0,0.68333,0.10257,0,0.71555],"8211":[0,0.43056,0.09208,0,0.51111],"8212":[0,0.43056,0.09208,0,1.02222],"8216":[0,0.69444,0.12417,0,0.30667],"8217":[0,0.69444,0.12417,0,0.30667],"8220":[0,0.69444,0.1685,0,0.51444],"8221":[0,0.69444,0.06961,0,0.51444],"8463":[0,0.68889,0,0,0.54028]},"Main-Regular":{"32":[0,0,0,0,0],"33":[0,0.69444,0,0,0.27778],"34":[0,0.69444,0,0,0.5],"35":[0.19444,0.69444,0,0,0.83334],"36":[0.05556,0.75,0,0,0.5],"37":[0.05556,0.75,0,0,0.83334],"38":[0,0.69444,0,0,0.77778],"39":[0,0.69444,0,0,0.27778],"40":[0.25,0.75,0,0,0.38889],"41":[0.25,0.75,0,0,0.38889],"42":[0,0.75,0,0,0.5],"43":[0.08333,0.58333,0,0,0.77778],"44":[0.19444,0.10556,0,0,0.27778],"45":[0,0.43056,0,0,0.33333],"46":[0,0.10556,0,0,0.27778],"47":[0.25,0.75,0,0,0.5],"48":[0,0.64444,0,0,0.5],"49":[0,0.64444,0,0,0.5],"50":[0,0.64444,0,0,0.5],"51":[0,0.64444,0,0,0.5],"52":[0,0.64444,0,0,0.5],"53":[0,0.64444,0,0,0.5],"54":[0,0.64444,0,0,0.5],"55":[0,0.64444,0,0,0.5],"56":[0,0.64444,0,0,0.5],"57":[0,0.64444,0,0,0.5],"58":[0,0.43056,0,0,0.27778],"59":[0.19444,0.43056,0,0,0.27778],"60":[0.0391,0.5391,0,0,0.77778],"61":[-0.13313,0.36687,0,0,0.77778],"62":[0.0391,0.5391,0,0,0.77778],"63":[0,0.69444,0,0,0.47222],"64":[0,0.69444,0,0,0.77778],"65":[0,0.68333,0,0,0.75],"66":[0,0.68333,0,0,0.70834],"67":[0,0.68333,0,0,0.72222],"68":[0,0.68333,0,0,0.76389],"69":[0,0.68333,0,0,0.68056],"70":[0,0.68333,0,0,0.65278],"71":[0,0.68333,0,0,0.78472],"72":[0,0.68333,0,0,0.75],"73":[0,0.68333,0,0,0.36111],"74":[0,0.68333,0,0,0.51389],"75":[0,0.68333,0,0,0.77778],"76":[0,0.68333,0,0,0.625],"77":[0,0.68333,0,0,0.91667],"78":[0,0.68333,0,0,0.75],"79":[0,0.68333,0,0,0.77778],"80":[0,0.68333,0,0,0.68056],"81":[0.19444,0.68333,0,0,0.77778],"82":[0,0.68333,0,0,0.73611],"83":[0,0.68333,0,0,0.55556],"84":[0,0.68333,0,0,0.72222],"85":[0,0.68333,0,0,0.75],"86":[0,0.68333,0.01389,0,0.75],"87":[0,0.68333,0.01389,0,1.02778],"88":[0,0.68333,0,0,0.75],"89":[0,0.68333,0.025,0,0.75],"90":[0,0.68333,0,0,0.61111],"91":[0.25,0.75,0,0,0.27778],"92":[0.25,0.75,0,0,0.5],"93":[0.25,0.75,0,0,0.27778],"94":[0,0.69444,0,0,0.5],"95":[0.31,0.12056,0.02778,0,0.5],"97":[0,0.43056,0,0,0.5],"98":[0,0.69444,0,0,0.55556],"99":[0,0.43056,0,0,0.44445],"100":[0,0.69444,0,0,0.55556],"101":[0,0.43056,0,0,0.44445],"102":[0,0.69444,0.07778,0,0.30556],"103":[0.19444,0.43056,0.01389,0,0.5],"104":[0,0.69444,0,0,0.55556],"105":[0,0.66786,0,0,0.27778],"106":[0.19444,0.66786,0,0,0.30556],"107":[0,0.69444,0,0,0.52778],"108":[0,0.69444,0,0,0.27778],"109":[0,0.43056,0,0,0.83334],"110":[0,0.43056,0,0,0.55556],"111":[0,0.43056,0,0,0.5],"112":[0.19444,0.43056,0,0,0.55556],"113":[0.19444,0.43056,0,0,0.52778],"114":[0,0.43056,0,0,0.39167],"115":[0,0.43056,0,0,0.39445],"116":[0,0.61508,0,0,0.38889],"117":[0,0.43056,0,0,0.55556],"118":[0,0.43056,0.01389,0,0.52778],"119":[0,0.43056,0.01389,0,0.72222],"120":[0,0.43056,0,0,0.52778],"121":[0.19444,0.43056,0.01389,0,0.52778],"122":[0,0.43056,0,0,0.44445],"123":[0.25,0.75,0,0,0.5],"124":[0.25,0.75,0,0,0.27778],"125":[0.25,0.75,0,0,0.5],"126":[0.35,0.31786,0,0,0.5],"160":[0,0,0,0,0],"168":[0,0.66786,0,0,0.5],"172":[0,0.43056,0,0,0.66667],"176":[0,0.69444,0,0,0.75],"177":[0.08333,0.58333,0,0,0.77778],"198":[0,0.68333,0,0,0.90278],"215":[0.08333,0.58333,0,0,0.77778],"216":[0.04861,0.73194,0,0,0.77778],"223":[0,0.69444,0,0,0.5],"230":[0,0.43056,0,0,0.72222],"247":[0.08333,0.58333,0,0,0.77778],"248":[0.09722,0.52778,0,0,0.5],"305":[0,0.43056,0,0,0.27778],"338":[0,0.68333,0,0,1.01389],"339":[0,0.43056,0,0,0.77778],"567":[0.19444,0.43056,0,0,0.30556],"710":[0,0.69444,0,0,0.5],"711":[0,0.62847,0,0,0.5],"713":[0,0.56778,0,0,0.5],"714":[0,0.69444,0,0,0.5],"715":[0,0.69444,0,0,0.5],"728":[0,0.69444,0,0,0.5],"729":[0,0.66786,0,0,0.27778],"730":[0,0.69444,0,0,0.75],"732":[0,0.66786,0,0,0.5],"733":[0,0.69444,0,0,0.5],"824":[0.19444,0.69444,0,0,0],"915":[0,0.68333,0,0,0.625],"916":[0,0.68333,0,0,0.83334],"920":[0,0.68333,0,0,0.77778],"923":[0,0.68333,0,0,0.69445],"926":[0,0.68333,0,0,0.66667],"928":[0,0.68333,0,0,0.75],"931":[0,0.68333,0,0,0.72222],"933":[0,0.68333,0,0,0.77778],"934":[0,0.68333,0,0,0.72222],"936":[0,0.68333,0,0,0.77778],"937":[0,0.68333,0,0,0.72222],"8211":[0,0.43056,0.02778,0,0.5],"8212":[0,0.43056,0.02778,0,1.0],"8216":[0,0.69444,0,0,0.27778],"8217":[0,0.69444,0,0,0.27778],"8220":[0,0.69444,0,0,0.5],"8221":[0,0.69444,0,0,0.5],"8224":[0.19444,0.69444,0,0,0.44445],"8225":[0.19444,0.69444,0,0,0.44445],"8230":[0,0.12,0,0,1015],"8242":[0,0.55556,0,0,0.275],"8407":[0,0.71444,0.15382,0,0.5],"8463":[0,0.68889,0,0,0.54028],"8465":[0,0.69444,0,0,0.72222],"8467":[0,0.69444,0,0.11111,0.41667],"8472":[0.19444,0.43056,0,0.11111,0.63646],"8476":[0,0.69444,0,0,0.72222],"8501":[0,0.69444,0,0,0.61111],"8592":[-0.13313,0.36687,0,0,1.0],"8593":[0.19444,0.69444,0,0,0.5],"8594":[-0.13313,0.36687,0,0,1.0],"8595":[0.19444,0.69444,0,0,0.5],"8596":[-0.13313,0.36687,0,0,1.0],"8597":[0.25,0.75,0,0,0.5],"8598":[0.19444,0.69444,0,0,1.0],"8599":[0.19444,0.69444,0,0,1.0],"8600":[0.19444,0.69444,0,0,1.0],"8601":[0.19444,0.69444,0,0,1.0],"8614":[0.011,0.511,0,0,889],"8617":[0.011,0.511,0,0,1015],"8618":[0.011,0.511,0,0,1015],"8636":[-0.13313,0.36687,0,0,1.0],"8637":[-0.13313,0.36687,0,0,1.0],"8640":[-0.13313,0.36687,0,0,1.0],"8641":[-0.13313,0.36687,0,0,1.0],"8652":[0.011,0.671,0,0,889],"8656":[-0.13313,0.36687,0,0,1.0],"8657":[0.19444,0.69444,0,0,0.61111],"8658":[-0.13313,0.36687,0,0,1.0],"8659":[0.19444,0.69444,0,0,0.61111],"8660":[-0.13313,0.36687,0,0,1.0],"8661":[0.25,0.75,0,0,0.61111],"8704":[0,0.69444,0,0,0.55556],"8706":[0,0.69444,0.05556,0.08334,0.5309],"8707":[0,0.69444,0,0,0.55556],"8709":[0.05556,0.75,0,0,0.5],"8711":[0,0.68333,0,0,0.83334],"8712":[0.0391,0.5391,0,0,0.66667],"8715":[0.0391,0.5391,0,0,0.66667],"8722":[0.08333,0.58333,0,0,0.77778],"8723":[0.08333,0.58333,0,0,0.77778],"8725":[0.25,0.75,0,0,0.5],"8726":[0.25,0.75,0,0,0.5],"8727":[-0.03472,0.46528,0,0,0.5],"8728":[-0.05555,0.44445,0,0,0.5],"8729":[-0.05555,0.44445,0,0,0.5],"8730":[0.2,0.8,0,0,0.83334],"8733":[0,0.43056,0,0,0.77778],"8734":[0,0.43056,0,0,1.0],"8736":[0,0.69224,0,0,0.72222],"8739":[0.25,0.75,0,0,0.27778],"8741":[0.25,0.75,0,0,0.5],"8743":[0,0.55556,0,0,0.66667],"8744":[0,0.55556,0,0,0.66667],"8745":[0,0.55556,0,0,0.66667],"8746":[0,0.55556,0,0,0.66667],"8747":[0.19444,0.69444,0.11111,0,0.41667],"8764":[-0.13313,0.36687,0,0,0.77778],"8768":[0.19444,0.69444,0,0,0.27778],"8771":[-0.03625,0.46375,0,0,0.77778],"8773":[-0.022,0.589,0,0,667],"8776":[-0.01688,0.48312,0,0,0.77778],"8781":[-0.03625,0.46375,0,0,0.77778],"8784":[-0.133,0.67,0,0,666],"8800":[0.215,0.716,0,0,666],"8801":[-0.03625,0.46375,0,0,0.77778],"8804":[0.13597,0.63597,0,0,0.77778],"8805":[0.13597,0.63597,0,0,0.77778],"8810":[0.0391,0.5391,0,0,1.0],"8811":[0.0391,0.5391,0,0,1.0],"8826":[0.0391,0.5391,0,0,0.77778],"8827":[0.0391,0.5391,0,0,0.77778],"8834":[0.0391,0.5391,0,0,0.77778],"8835":[0.0391,0.5391,0,0,0.77778],"8838":[0.13597,0.63597,0,0,0.77778],"8839":[0.13597,0.63597,0,0,0.77778],"8846":[0,0.55556,0,0,0.66667],"8849":[0.13597,0.63597,0,0,0.77778],"8850":[0.13597,0.63597,0,0,0.77778],"8851":[0,0.55556,0,0,0.66667],"8852":[0,0.55556,0,0,0.66667],"8853":[0.08333,0.58333,0,0,0.77778],"8854":[0.08333,0.58333,0,0,0.77778],"8855":[0.08333,0.58333,0,0,0.77778],"8856":[0.08333,0.58333,0,0,0.77778],"8857":[0.08333,0.58333,0,0,0.77778],"8866":[0,0.69444,0,0,0.61111],"8867":[0,0.69444,0,0,0.61111],"8868":[0,0.69444,0,0,0.77778],"8869":[0,0.69444,0,0,0.77778],"8872":[0.249,0.75,0,0,692],"8900":[-0.05555,0.44445,0,0,0.5],"8901":[-0.05555,0.44445,0,0,0.27778],"8902":[-0.03472,0.46528,0,0,0.5],"8904":[0.005,0.505,0,0,847],"8942":[0.03,0.9,0,0,121],"8943":[-0.19,0.31,0,0,1015],"8945":[-0.1,0.82,0,0,1015],"8968":[0.25,0.75,0,0,0.44445],"8969":[0.25,0.75,0,0,0.44445],"8970":[0.25,0.75,0,0,0.44445],"8971":[0.25,0.75,0,0,0.44445],"8994":[-0.14236,0.35764,0,0,1.0],"8995":[-0.14236,0.35764,0,0,1.0],"9136":[0.244,0.744,0,0,301],"9137":[0.244,0.744,0,0,301],"9651":[0.19444,0.69444,0,0,0.88889],"9657":[-0.03472,0.46528,0,0,0.5],"9661":[0.19444,0.69444,0,0,0.88889],"9667":[-0.03472,0.46528,0,0,0.5],"9711":[0.19444,0.69444,0,0,1.0],"9824":[0.12963,0.69444,0,0,0.77778],"9825":[0.12963,0.69444,0,0,0.77778],"9826":[0.12963,0.69444,0,0,0.77778],"9827":[0.12963,0.69444,0,0,0.77778],"9837":[0,0.75,0,0,0.38889],"9838":[0.19444,0.69444,0,0,0.38889],"9839":[0.19444,0.69444,0,0,0.38889],"10216":[0.25,0.75,0,0,0.38889],"10217":[0.25,0.75,0,0,0.38889],"10222":[0.244,0.744,0,0,184],"10223":[0.244,0.744,0,0,184],"10229":[0.011,0.511,0,0,1470],"10230":[0.011,0.511,0,0,1469],"10231":[0.011,0.511,0,0,1748],"10232":[0.024,0.525,0,0,1497],"10233":[0.024,0.525,0,0,1526],"10234":[0.024,0.525,0,0,1746],"10236":[0.011,0.511,0,0,1498],"10815":[0,0.68333,0,0,0.75],"10927":[0.13597,0.63597,0,0,0.77778],"10928":[0.13597,0.63597,0,0,0.77778]},"Math-BoldItalic":{"47":[0.19444,0.69444,0,0,0],"65":[0,0.68611,0,0,0.86944],"66":[0,0.68611,0.04835,0,0.8664],"67":[0,0.68611,0.06979,0,0.81694],"68":[0,0.68611,0.03194,0,0.93812],"69":[0,0.68611,0.05451,0,0.81007],"70":[0,0.68611,0.15972,0,0.68889],"71":[0,0.68611,0,0,0.88673],"72":[0,0.68611,0.08229,0,0.98229],"73":[0,0.68611,0.07778,0,0.51111],"74":[0,0.68611,0.10069,0,0.63125],"75":[0,0.68611,0.06979,0,0.97118],"76":[0,0.68611,0,0,0.75555],"77":[0,0.68611,0.11424,0,1.14201],"78":[0,0.68611,0.11424,0,0.95034],"79":[0,0.68611,0.03194,0,0.83666],"80":[0,0.68611,0.15972,0,0.72309],"81":[0.19444,0.68611,0,0,0.86861],"82":[0,0.68611,0.00421,0,0.87235],"83":[0,0.68611,0.05382,0,0.69271],"84":[0,0.68611,0.15972,0,0.63663],"85":[0,0.68611,0.11424,0,0.80027],"86":[0,0.68611,0.25555,0,0.67778],"87":[0,0.68611,0.15972,0,1.09305],"88":[0,0.68611,0.07778,0,0.94722],"89":[0,0.68611,0.25555,0,0.67458],"90":[0,0.68611,0.06979,0,0.77257],"97":[0,0.44444,0,0,0.63287],"98":[0,0.69444,0,0,0.52083],"99":[0,0.44444,0,0,0.51342],"100":[0,0.69444,0,0,0.60972],"101":[0,0.44444,0,0,0.55361],"102":[0.19444,0.69444,0.11042,0,0.56806],"103":[0.19444,0.44444,0.03704,0,0.5449],"104":[0,0.69444,0,0,0.66759],"105":[0,0.69326,0,0,0.4048],"106":[0.19444,0.69326,0.0622,0,0.47083],"107":[0,0.69444,0.01852,0,0.6037],"108":[0,0.69444,0.0088,0,0.34815],"109":[0,0.44444,0,0,1.0324],"110":[0,0.44444,0,0,0.71296],"111":[0,0.44444,0,0,0.58472],"112":[0.19444,0.44444,0,0,0.60092],"113":[0.19444,0.44444,0.03704,0,0.54213],"114":[0,0.44444,0.03194,0,0.5287],"115":[0,0.44444,0,0,0.53125],"116":[0,0.63492,0,0,0.41528],"117":[0,0.44444,0,0,0.68102],"118":[0,0.44444,0.03704,0,0.56666],"119":[0,0.44444,0.02778,0,0.83148],"120":[0,0.44444,0,0,0.65903],"121":[0.19444,0.44444,0.03704,0,0.59028],"122":[0,0.44444,0.04213,0,0.55509],"915":[0,0.68611,0.15972,0,0.65694],"916":[0,0.68611,0,0,0.95833],"920":[0,0.68611,0.03194,0,0.86722],"923":[0,0.68611,0,0,0.80555],"926":[0,0.68611,0.07458,0,0.84125],"928":[0,0.68611,0.08229,0,0.98229],"931":[0,0.68611,0.05451,0,0.88507],"933":[0,0.68611,0.15972,0,0.67083],"934":[0,0.68611,0,0,0.76666],"936":[0,0.68611,0.11653,0,0.71402],"937":[0,0.68611,0.04835,0,0.8789],"945":[0,0.44444,0,0,0.76064],"946":[0.19444,0.69444,0.03403,0,0.65972],"947":[0.19444,0.44444,0.06389,0,0.59003],"948":[0,0.69444,0.03819,0,0.52222],"949":[0,0.44444,0,0,0.52882],"950":[0.19444,0.69444,0.06215,0,0.50833],"951":[0.19444,0.44444,0.03704,0,0.6],"952":[0,0.69444,0.03194,0,0.5618],"953":[0,0.44444,0,0,0.41204],"954":[0,0.44444,0,0,0.66759],"955":[0,0.69444,0,0,0.67083],"956":[0.19444,0.44444,0,0,0.70787],"957":[0,0.44444,0.06898,0,0.57685],"958":[0.19444,0.69444,0.03021,0,0.50833],"959":[0,0.44444,0,0,0.58472],"960":[0,0.44444,0.03704,0,0.68241],"961":[0.19444,0.44444,0,0,0.6118],"962":[0.09722,0.44444,0.07917,0,0.42361],"963":[0,0.44444,0.03704,0,0.68588],"964":[0,0.44444,0.13472,0,0.52083],"965":[0,0.44444,0.03704,0,0.63055],"966":[0.19444,0.44444,0,0,0.74722],"967":[0.19444,0.44444,0,0,0.71805],"968":[0.19444,0.69444,0.03704,0,0.75833],"969":[0,0.44444,0.03704,0,0.71782],"977":[0,0.69444,0,0,0.69155],"981":[0.19444,0.69444,0,0,0.7125],"982":[0,0.44444,0.03194,0,0.975],"1009":[0.19444,0.44444,0,0,0.6118],"1013":[0,0.44444,0,0,0.48333]},"Math-Italic":{"47":[0.19444,0.69444,0,0,0],"65":[0,0.68333,0,0.13889,0.75],"66":[0,0.68333,0.05017,0.08334,0.75851],"67":[0,0.68333,0.07153,0.08334,0.71472],"68":[0,0.68333,0.02778,0.05556,0.82792],"69":[0,0.68333,0.05764,0.08334,0.7382],"70":[0,0.68333,0.13889,0.08334,0.64306],"71":[0,0.68333,0,0.08334,0.78625],"72":[0,0.68333,0.08125,0.05556,0.83125],"73":[0,0.68333,0.07847,0.11111,0.43958],"74":[0,0.68333,0.09618,0.16667,0.55451],"75":[0,0.68333,0.07153,0.05556,0.84931],"76":[0,0.68333,0,0.02778,0.68056],"77":[0,0.68333,0.10903,0.08334,0.97014],"78":[0,0.68333,0.10903,0.08334,0.80347],"79":[0,0.68333,0.02778,0.08334,0.76278],"80":[0,0.68333,0.13889,0.08334,0.64201],"81":[0.19444,0.68333,0,0.08334,0.79056],"82":[0,0.68333,0.00773,0.08334,0.75929],"83":[0,0.68333,0.05764,0.08334,0.6132],"84":[0,0.68333,0.13889,0.08334,0.58438],"85":[0,0.68333,0.10903,0.02778,0.68278],"86":[0,0.68333,0.22222,0,0.58333],"87":[0,0.68333,0.13889,0,0.94445],"88":[0,0.68333,0.07847,0.08334,0.82847],"89":[0,0.68333,0.22222,0,0.58056],"90":[0,0.68333,0.07153,0.08334,0.68264],"97":[0,0.43056,0,0,0.52859],"98":[0,0.69444,0,0,0.42917],"99":[0,0.43056,0,0.05556,0.43276],"100":[0,0.69444,0,0.16667,0.52049],"101":[0,0.43056,0,0.05556,0.46563],"102":[0.19444,0.69444,0.10764,0.16667,0.48959],"103":[0.19444,0.43056,0.03588,0.02778,0.47697],"104":[0,0.69444,0,0,0.57616],"105":[0,0.65952,0,0,0.34451],"106":[0.19444,0.65952,0.05724,0,0.41181],"107":[0,0.69444,0.03148,0,0.5206],"108":[0,0.69444,0.01968,0.08334,0.29838],"109":[0,0.43056,0,0,0.87801],"110":[0,0.43056,0,0,0.60023],"111":[0,0.43056,0,0.05556,0.48472],"112":[0.19444,0.43056,0,0.08334,0.50313],"113":[0.19444,0.43056,0.03588,0.08334,0.44641],"114":[0,0.43056,0.02778,0.05556,0.45116],"115":[0,0.43056,0,0.05556,0.46875],"116":[0,0.61508,0,0.08334,0.36111],"117":[0,0.43056,0,0.02778,0.57246],"118":[0,0.43056,0.03588,0.02778,0.48472],"119":[0,0.43056,0.02691,0.08334,0.71592],"120":[0,0.43056,0,0.02778,0.57153],"121":[0.19444,0.43056,0.03588,0.05556,0.49028],"122":[0,0.43056,0.04398,0.05556,0.46505],"915":[0,0.68333,0.13889,0.08334,0.61528],"916":[0,0.68333,0,0.16667,0.83334],"920":[0,0.68333,0.02778,0.08334,0.76278],"923":[0,0.68333,0,0.16667,0.69445],"926":[0,0.68333,0.07569,0.08334,0.74236],"928":[0,0.68333,0.08125,0.05556,0.83125],"931":[0,0.68333,0.05764,0.08334,0.77986],"933":[0,0.68333,0.13889,0.05556,0.58333],"934":[0,0.68333,0,0.08334,0.66667],"936":[0,0.68333,0.11,0.05556,0.61222],"937":[0,0.68333,0.05017,0.08334,0.7724],"945":[0,0.43056,0.0037,0.02778,0.6397],"946":[0.19444,0.69444,0.05278,0.08334,0.56563],"947":[0.19444,0.43056,0.05556,0,0.51773],"948":[0,0.69444,0.03785,0.05556,0.44444],"949":[0,0.43056,0,0.08334,0.46632],"950":[0.19444,0.69444,0.07378,0.08334,0.4375],"951":[0.19444,0.43056,0.03588,0.05556,0.49653],"952":[0,0.69444,0.02778,0.08334,0.46944],"953":[0,0.43056,0,0.05556,0.35394],"954":[0,0.43056,0,0,0.57616],"955":[0,0.69444,0,0,0.58334],"956":[0.19444,0.43056,0,0.02778,0.60255],"957":[0,0.43056,0.06366,0.02778,0.49398],"958":[0.19444,0.69444,0.04601,0.11111,0.4375],"959":[0,0.43056,0,0.05556,0.48472],"960":[0,0.43056,0.03588,0,0.57003],"961":[0.19444,0.43056,0,0.08334,0.51702],"962":[0.09722,0.43056,0.07986,0.08334,0.36285],"963":[0,0.43056,0.03588,0,0.57141],"964":[0,0.43056,0.1132,0.02778,0.43715],"965":[0,0.43056,0.03588,0.02778,0.54028],"966":[0.19444,0.43056,0,0.08334,0.65417],"967":[0.19444,0.43056,0,0.05556,0.62569],"968":[0.19444,0.69444,0.03588,0.11111,0.65139],"969":[0,0.43056,0.03588,0,0.62245],"977":[0,0.69444,0,0.08334,0.59144],"981":[0.19444,0.69444,0,0.08334,0.59583],"982":[0,0.43056,0.02778,0,0.82813],"1009":[0.19444,0.43056,0,0.08334,0.51702],"1013":[0,0.43056,0,0.05556,0.4059]},"Math-Regular":{"65":[0,0.68333,0,0.13889,0.75],"66":[0,0.68333,0.05017,0.08334,0.75851],"67":[0,0.68333,0.07153,0.08334,0.71472],"68":[0,0.68333,0.02778,0.05556,0.82792],"69":[0,0.68333,0.05764,0.08334,0.7382],"70":[0,0.68333,0.13889,0.08334,0.64306],"71":[0,0.68333,0,0.08334,0.78625],"72":[0,0.68333,0.08125,0.05556,0.83125],"73":[0,0.68333,0.07847,0.11111,0.43958],"74":[0,0.68333,0.09618,0.16667,0.55451],"75":[0,0.68333,0.07153,0.05556,0.84931],"76":[0,0.68333,0,0.02778,0.68056],"77":[0,0.68333,0.10903,0.08334,0.97014],"78":[0,0.68333,0.10903,0.08334,0.80347],"79":[0,0.68333,0.02778,0.08334,0.76278],"80":[0,0.68333,0.13889,0.08334,0.64201],"81":[0.19444,0.68333,0,0.08334,0.79056],"82":[0,0.68333,0.00773,0.08334,0.75929],"83":[0,0.68333,0.05764,0.08334,0.6132],"84":[0,0.68333,0.13889,0.08334,0.58438],"85":[0,0.68333,0.10903,0.02778,0.68278],"86":[0,0.68333,0.22222,0,0.58333],"87":[0,0.68333,0.13889,0,0.94445],"88":[0,0.68333,0.07847,0.08334,0.82847],"89":[0,0.68333,0.22222,0,0.58056],"90":[0,0.68333,0.07153,0.08334,0.68264],"97":[0,0.43056,0,0,0.52859],"98":[0,0.69444,0,0,0.42917],"99":[0,0.43056,0,0.05556,0.43276],"100":[0,0.69444,0,0.16667,0.52049],"101":[0,0.43056,0,0.05556,0.46563],"102":[0.19444,0.69444,0.10764,0.16667,0.48959],"103":[0.19444,0.43056,0.03588,0.02778,0.47697],"104":[0,0.69444,0,0,0.57616],"105":[0,0.65952,0,0,0.34451],"106":[0.19444,0.65952,0.05724,0,0.41181],"107":[0,0.69444,0.03148,0,0.5206],"108":[0,0.69444,0.01968,0.08334,0.29838],"109":[0,0.43056,0,0,0.87801],"110":[0,0.43056,0,0,0.60023],"111":[0,0.43056,0,0.05556,0.48472],"112":[0.19444,0.43056,0,0.08334,0.50313],"113":[0.19444,0.43056,0.03588,0.08334,0.44641],"114":[0,0.43056,0.02778,0.05556,0.45116],"115":[0,0.43056,0,0.05556,0.46875],"116":[0,0.61508,0,0.08334,0.36111],"117":[0,0.43056,0,0.02778,0.57246],"118":[0,0.43056,0.03588,0.02778,0.48472],"119":[0,0.43056,0.02691,0.08334,0.71592],"120":[0,0.43056,0,0.02778,0.57153],"121":[0.19444,0.43056,0.03588,0.05556,0.49028],"122":[0,0.43056,0.04398,0.05556,0.46505],"915":[0,0.68333,0.13889,0.08334,0.61528],"916":[0,0.68333,0,0.16667,0.83334],"920":[0,0.68333,0.02778,0.08334,0.76278],"923":[0,0.68333,0,0.16667,0.69445],"926":[0,0.68333,0.07569,0.08334,0.74236],"928":[0,0.68333,0.08125,0.05556,0.83125],"931":[0,0.68333,0.05764,0.08334,0.77986],"933":[0,0.68333,0.13889,0.05556,0.58333],"934":[0,0.68333,0,0.08334,0.66667],"936":[0,0.68333,0.11,0.05556,0.61222],"937":[0,0.68333,0.05017,0.08334,0.7724],"945":[0,0.43056,0.0037,0.02778,0.6397],"946":[0.19444,0.69444,0.05278,0.08334,0.56563],"947":[0.19444,0.43056,0.05556,0,0.51773],"948":[0,0.69444,0.03785,0.05556,0.44444],"949":[0,0.43056,0,0.08334,0.46632],"950":[0.19444,0.69444,0.07378,0.08334,0.4375],"951":[0.19444,0.43056,0.03588,0.05556,0.49653],"952":[0,0.69444,0.02778,0.08334,0.46944],"953":[0,0.43056,0,0.05556,0.35394],"954":[0,0.43056,0,0,0.57616],"955":[0,0.69444,0,0,0.58334],"956":[0.19444,0.43056,0,0.02778,0.60255],"957":[0,0.43056,0.06366,0.02778,0.49398],"958":[0.19444,0.69444,0.04601,0.11111,0.4375],"959":[0,0.43056,0,0.05556,0.48472],"960":[0,0.43056,0.03588,0,0.57003],"961":[0.19444,0.43056,0,0.08334,0.51702],"962":[0.09722,0.43056,0.07986,0.08334,0.36285],"963":[0,0.43056,0.03588,0,0.57141],"964":[0,0.43056,0.1132,0.02778,0.43715],"965":[0,0.43056,0.03588,0.02778,0.54028],"966":[0.19444,0.43056,0,0.08334,0.65417],"967":[0.19444,0.43056,0,0.05556,0.62569],"968":[0.19444,0.69444,0.03588,0.11111,0.65139],"969":[0,0.43056,0.03588,0,0.62245],"977":[0,0.69444,0,0.08334,0.59144],"981":[0.19444,0.69444,0,0.08334,0.59583],"982":[0,0.43056,0.02778,0,0.82813],"1009":[0.19444,0.43056,0,0.08334,0.51702],"1013":[0,0.43056,0,0.05556,0.4059]},"SansSerif-Bold":{"33":[0,0.69444,0,0,0.36667],"34":[0,0.69444,0,0,0.55834],"35":[0.19444,0.69444,0,0,0.91667],"36":[0.05556,0.75,0,0,0.55],"37":[0.05556,0.75,0,0,1.02912],"38":[0,0.69444,0,0,0.83056],"39":[0,0.69444,0,0,0.30556],"40":[0.25,0.75,0,0,0.42778],"41":[0.25,0.75,0,0,0.42778],"42":[0,0.75,0,0,0.55],"43":[0.11667,0.61667,0,0,0.85556],"44":[0.10556,0.13056,0,0,0.30556],"45":[0,0.45833,0,0,0.36667],"46":[0,0.13056,0,0,0.30556],"47":[0.25,0.75,0,0,0.55],"48":[0,0.69444,0,0,0.55],"49":[0,0.69444,0,0,0.55],"50":[0,0.69444,0,0,0.55],"51":[0,0.69444,0,0,0.55],"52":[0,0.69444,0,0,0.55],"53":[0,0.69444,0,0,0.55],"54":[0,0.69444,0,0,0.55],"55":[0,0.69444,0,0,0.55],"56":[0,0.69444,0,0,0.55],"57":[0,0.69444,0,0,0.55],"58":[0,0.45833,0,0,0.30556],"59":[0.10556,0.45833,0,0,0.30556],"61":[-0.09375,0.40625,0,0,0.85556],"63":[0,0.69444,0,0,0.51945],"64":[0,0.69444,0,0,0.73334],"65":[0,0.69444,0,0,0.73334],"66":[0,0.69444,0,0,0.73334],"67":[0,0.69444,0,0,0.70278],"68":[0,0.69444,0,0,0.79445],"69":[0,0.69444,0,0,0.64167],"70":[0,0.69444,0,0,0.61111],"71":[0,0.69444,0,0,0.73334],"72":[0,0.69444,0,0,0.79445],"73":[0,0.69444,0,0,0.33056],"74":[0,0.69444,0,0,0.51945],"75":[0,0.69444,0,0,0.76389],"76":[0,0.69444,0,0,0.58056],"77":[0,0.69444,0,0,0.97778],"78":[0,0.69444,0,0,0.79445],"79":[0,0.69444,0,0,0.79445],"80":[0,0.69444,0,0,0.70278],"81":[0.10556,0.69444,0,0,0.79445],"82":[0,0.69444,0,0,0.70278],"83":[0,0.69444,0,0,0.61111],"84":[0,0.69444,0,0,0.73334],"85":[0,0.69444,0,0,0.76389],"86":[0,0.69444,0.01528,0,0.73334],"87":[0,0.69444,0.01528,0,1.03889],"88":[0,0.69444,0,0,0.73334],"89":[0,0.69444,0.0275,0,0.73334],"90":[0,0.69444,0,0,0.67223],"91":[0.25,0.75,0,0,0.34306],"93":[0.25,0.75,0,0,0.34306],"94":[0,0.69444,0,0,0.55],"95":[0.35,0.10833,0.03056,0,0.55],"97":[0,0.45833,0,0,0.525],"98":[0,0.69444,0,0,0.56111],"99":[0,0.45833,0,0,0.48889],"100":[0,0.69444,0,0,0.56111],"101":[0,0.45833,0,0,0.51111],"102":[0,0.69444,0.07639,0,0.33611],"103":[0.19444,0.45833,0.01528,0,0.55],"104":[0,0.69444,0,0,0.56111],"105":[0,0.69444,0,0,0.25556],"106":[0.19444,0.69444,0,0,0.28611],"107":[0,0.69444,0,0,0.53056],"108":[0,0.69444,0,0,0.25556],"109":[0,0.45833,0,0,0.86667],"110":[0,0.45833,0,0,0.56111],"111":[0,0.45833,0,0,0.55],"112":[0.19444,0.45833,0,0,0.56111],"113":[0.19444,0.45833,0,0,0.56111],"114":[0,0.45833,0.01528,0,0.37222],"115":[0,0.45833,0,0,0.42167],"116":[0,0.58929,0,0,0.40417],"117":[0,0.45833,0,0,0.56111],"118":[0,0.45833,0.01528,0,0.5],"119":[0,0.45833,0.01528,0,0.74445],"120":[0,0.45833,0,0,0.5],"121":[0.19444,0.45833,0.01528,0,0.5],"122":[0,0.45833,0,0,0.47639],"126":[0.35,0.34444,0,0,0.55],"168":[0,0.69444,0,0,0.55],"176":[0,0.69444,0,0,0.73334],"180":[0,0.69444,0,0,0.55],"305":[0,0.45833,0,0,0.25556],"567":[0.19444,0.45833,0,0,0.28611],"710":[0,0.69444,0,0,0.55],"711":[0,0.63542,0,0,0.55],"713":[0,0.63778,0,0,0.55],"728":[0,0.69444,0,0,0.55],"729":[0,0.69444,0,0,0.30556],"730":[0,0.69444,0,0,0.73334],"732":[0,0.69444,0,0,0.55],"733":[0,0.69444,0,0,0.55],"915":[0,0.69444,0,0,0.58056],"916":[0,0.69444,0,0,0.91667],"920":[0,0.69444,0,0,0.85556],"923":[0,0.69444,0,0,0.67223],"926":[0,0.69444,0,0,0.73334],"928":[0,0.69444,0,0,0.79445],"931":[0,0.69444,0,0,0.79445],"933":[0,0.69444,0,0,0.85556],"934":[0,0.69444,0,0,0.79445],"936":[0,0.69444,0,0,0.85556],"937":[0,0.69444,0,0,0.79445],"8211":[0,0.45833,0.03056,0,0.55],"8212":[0,0.45833,0.03056,0,1.10001],"8216":[0,0.69444,0,0,0.30556],"8217":[0,0.69444,0,0,0.30556],"8220":[0,0.69444,0,0,0.55834],"8221":[0,0.69444,0,0,0.55834]},"SansSerif-Italic":{"33":[0,0.69444,0.05733,0,0.31945],"34":[0,0.69444,0.00316,0,0.5],"35":[0.19444,0.69444,0.05087,0,0.83334],"36":[0.05556,0.75,0.11156,0,0.5],"37":[0.05556,0.75,0.03126,0,0.83334],"38":[0,0.69444,0.03058,0,0.75834],"39":[0,0.69444,0.07816,0,0.27778],"40":[0.25,0.75,0.13164,0,0.38889],"41":[0.25,0.75,0.02536,0,0.38889],"42":[0,0.75,0.11775,0,0.5],"43":[0.08333,0.58333,0.02536,0,0.77778],"44":[0.125,0.08333,0,0,0.27778],"45":[0,0.44444,0.01946,0,0.33333],"46":[0,0.08333,0,0,0.27778],"47":[0.25,0.75,0.13164,0,0.5],"48":[0,0.65556,0.11156,0,0.5],"49":[0,0.65556,0.11156,0,0.5],"50":[0,0.65556,0.11156,0,0.5],"51":[0,0.65556,0.11156,0,0.5],"52":[0,0.65556,0.11156,0,0.5],"53":[0,0.65556,0.11156,0,0.5],"54":[0,0.65556,0.11156,0,0.5],"55":[0,0.65556,0.11156,0,0.5],"56":[0,0.65556,0.11156,0,0.5],"57":[0,0.65556,0.11156,0,0.5],"58":[0,0.44444,0.02502,0,0.27778],"59":[0.125,0.44444,0.02502,0,0.27778],"61":[-0.13,0.37,0.05087,0,0.77778],"63":[0,0.69444,0.11809,0,0.47222],"64":[0,0.69444,0.07555,0,0.66667],"65":[0,0.69444,0,0,0.66667],"66":[0,0.69444,0.08293,0,0.66667],"67":[0,0.69444,0.11983,0,0.63889],"68":[0,0.69444,0.07555,0,0.72223],"69":[0,0.69444,0.11983,0,0.59722],"70":[0,0.69444,0.13372,0,0.56945],"71":[0,0.69444,0.11983,0,0.66667],"72":[0,0.69444,0.08094,0,0.70834],"73":[0,0.69444,0.13372,0,0.27778],"74":[0,0.69444,0.08094,0,0.47222],"75":[0,0.69444,0.11983,0,0.69445],"76":[0,0.69444,0,0,0.54167],"77":[0,0.69444,0.08094,0,0.875],"78":[0,0.69444,0.08094,0,0.70834],"79":[0,0.69444,0.07555,0,0.73611],"80":[0,0.69444,0.08293,0,0.63889],"81":[0.125,0.69444,0.07555,0,0.73611],"82":[0,0.69444,0.08293,0,0.64584],"83":[0,0.69444,0.09205,0,0.55556],"84":[0,0.69444,0.13372,0,0.68056],"85":[0,0.69444,0.08094,0,0.6875],"86":[0,0.69444,0.1615,0,0.66667],"87":[0,0.69444,0.1615,0,0.94445],"88":[0,0.69444,0.13372,0,0.66667],"89":[0,0.69444,0.17261,0,0.66667],"90":[0,0.69444,0.11983,0,0.61111],"91":[0.25,0.75,0.15942,0,0.28889],"93":[0.25,0.75,0.08719,0,0.28889],"94":[0,0.69444,0.0799,0,0.5],"95":[0.35,0.09444,0.08616,0,0.5],"97":[0,0.44444,0.00981,0,0.48056],"98":[0,0.69444,0.03057,0,0.51667],"99":[0,0.44444,0.08336,0,0.44445],"100":[0,0.69444,0.09483,0,0.51667],"101":[0,0.44444,0.06778,0,0.44445],"102":[0,0.69444,0.21705,0,0.30556],"103":[0.19444,0.44444,0.10836,0,0.5],"104":[0,0.69444,0.01778,0,0.51667],"105":[0,0.67937,0.09718,0,0.23889],"106":[0.19444,0.67937,0.09162,0,0.26667],"107":[0,0.69444,0.08336,0,0.48889],"108":[0,0.69444,0.09483,0,0.23889],"109":[0,0.44444,0.01778,0,0.79445],"110":[0,0.44444,0.01778,0,0.51667],"111":[0,0.44444,0.06613,0,0.5],"112":[0.19444,0.44444,0.0389,0,0.51667],"113":[0.19444,0.44444,0.04169,0,0.51667],"114":[0,0.44444,0.10836,0,0.34167],"115":[0,0.44444,0.0778,0,0.38333],"116":[0,0.57143,0.07225,0,0.36111],"117":[0,0.44444,0.04169,0,0.51667],"118":[0,0.44444,0.10836,0,0.46111],"119":[0,0.44444,0.10836,0,0.68334],"120":[0,0.44444,0.09169,0,0.46111],"121":[0.19444,0.44444,0.10836,0,0.46111],"122":[0,0.44444,0.08752,0,0.43472],"126":[0.35,0.32659,0.08826,0,0.5],"168":[0,0.67937,0.06385,0,0.5],"176":[0,0.69444,0,0,0.73752],"305":[0,0.44444,0.04169,0,0.23889],"567":[0.19444,0.44444,0.04169,0,0.26667],"710":[0,0.69444,0.0799,0,0.5],"711":[0,0.63194,0.08432,0,0.5],"713":[0,0.60889,0.08776,0,0.5],"714":[0,0.69444,0.09205,0,0.5],"715":[0,0.69444,0,0,0.5],"728":[0,0.69444,0.09483,0,0.5],"729":[0,0.67937,0.07774,0,0.27778],"730":[0,0.69444,0,0,0.73752],"732":[0,0.67659,0.08826,0,0.5],"733":[0,0.69444,0.09205,0,0.5],"915":[0,0.69444,0.13372,0,0.54167],"916":[0,0.69444,0,0,0.83334],"920":[0,0.69444,0.07555,0,0.77778],"923":[0,0.69444,0,0,0.61111],"926":[0,0.69444,0.12816,0,0.66667],"928":[0,0.69444,0.08094,0,0.70834],"931":[0,0.69444,0.11983,0,0.72222],"933":[0,0.69444,0.09031,0,0.77778],"934":[0,0.69444,0.04603,0,0.72222],"936":[0,0.69444,0.09031,0,0.77778],"937":[0,0.69444,0.08293,0,0.72222],"8211":[0,0.44444,0.08616,0,0.5],"8212":[0,0.44444,0.08616,0,1.0],"8216":[0,0.69444,0.07816,0,0.27778],"8217":[0,0.69444,0.07816,0,0.27778],"8220":[0,0.69444,0.14205,0,0.5],"8221":[0,0.69444,0.00316,0,0.5]},"SansSerif-Regular":{"33":[0,0.69444,0,0,0.31945],"34":[0,0.69444,0,0,0.5],"35":[0.19444,0.69444,0,0,0.83334],"36":[0.05556,0.75,0,0,0.5],"37":[0.05556,0.75,0,0,0.83334],"38":[0,0.69444,0,0,0.75834],"39":[0,0.69444,0,0,0.27778],"40":[0.25,0.75,0,0,0.38889],"41":[0.25,0.75,0,0,0.38889],"42":[0,0.75,0,0,0.5],"43":[0.08333,0.58333,0,0,0.77778],"44":[0.125,0.08333,0,0,0.27778],"45":[0,0.44444,0,0,0.33333],"46":[0,0.08333,0,0,0.27778],"47":[0.25,0.75,0,0,0.5],"48":[0,0.65556,0,0,0.5],"49":[0,0.65556,0,0,0.5],"50":[0,0.65556,0,0,0.5],"51":[0,0.65556,0,0,0.5],"52":[0,0.65556,0,0,0.5],"53":[0,0.65556,0,0,0.5],"54":[0,0.65556,0,0,0.5],"55":[0,0.65556,0,0,0.5],"56":[0,0.65556,0,0,0.5],"57":[0,0.65556,0,0,0.5],"58":[0,0.44444,0,0,0.27778],"59":[0.125,0.44444,0,0,0.27778],"61":[-0.13,0.37,0,0,0.77778],"63":[0,0.69444,0,0,0.47222],"64":[0,0.69444,0,0,0.66667],"65":[0,0.69444,0,0,0.66667],"66":[0,0.69444,0,0,0.66667],"67":[0,0.69444,0,0,0.63889],"68":[0,0.69444,0,0,0.72223],"69":[0,0.69444,0,0,0.59722],"70":[0,0.69444,0,0,0.56945],"71":[0,0.69444,0,0,0.66667],"72":[0,0.69444,0,0,0.70834],"73":[0,0.69444,0,0,0.27778],"74":[0,0.69444,0,0,0.47222],"75":[0,0.69444,0,0,0.69445],"76":[0,0.69444,0,0,0.54167],"77":[0,0.69444,0,0,0.875],"78":[0,0.69444,0,0,0.70834],"79":[0,0.69444,0,0,0.73611],"80":[0,0.69444,0,0,0.63889],"81":[0.125,0.69444,0,0,0.73611],"82":[0,0.69444,0,0,0.64584],"83":[0,0.69444,0,0,0.55556],"84":[0,0.69444,0,0,0.68056],"85":[0,0.69444,0,0,0.6875],"86":[0,0.69444,0.01389,0,0.66667],"87":[0,0.69444,0.01389,0,0.94445],"88":[0,0.69444,0,0,0.66667],"89":[0,0.69444,0.025,0,0.66667],"90":[0,0.69444,0,0,0.61111],"91":[0.25,0.75,0,0,0.28889],"93":[0.25,0.75,0,0,0.28889],"94":[0,0.69444,0,0,0.5],"95":[0.35,0.09444,0.02778,0,0.5],"97":[0,0.44444,0,0,0.48056],"98":[0,0.69444,0,0,0.51667],"99":[0,0.44444,0,0,0.44445],"100":[0,0.69444,0,0,0.51667],"101":[0,0.44444,0,0,0.44445],"102":[0,0.69444,0.06944,0,0.30556],"103":[0.19444,0.44444,0.01389,0,0.5],"104":[0,0.69444,0,0,0.51667],"105":[0,0.67937,0,0,0.23889],"106":[0.19444,0.67937,0,0,0.26667],"107":[0,0.69444,0,0,0.48889],"108":[0,0.69444,0,0,0.23889],"109":[0,0.44444,0,0,0.79445],"110":[0,0.44444,0,0,0.51667],"111":[0,0.44444,0,0,0.5],"112":[0.19444,0.44444,0,0,0.51667],"113":[0.19444,0.44444,0,0,0.51667],"114":[0,0.44444,0.01389,0,0.34167],"115":[0,0.44444,0,0,0.38333],"116":[0,0.57143,0,0,0.36111],"117":[0,0.44444,0,0,0.51667],"118":[0,0.44444,0.01389,0,0.46111],"119":[0,0.44444,0.01389,0,0.68334],"120":[0,0.44444,0,0,0.46111],"121":[0.19444,0.44444,0.01389,0,0.46111],"122":[0,0.44444,0,0,0.43472],"126":[0.35,0.32659,0,0,0.5],"176":[0,0.69444,0,0,0.66667],"305":[0,0.44444,0,0,0.23889],"567":[0.19444,0.44444,0,0,0.26667],"710":[0,0.69444,0,0,0.5],"711":[0,0.63194,0,0,0.5],"713":[0,0.60889,0,0,0.5],"714":[0,0.69444,0,0,0.5],"728":[0,0.69444,0,0,0.5],"729":[0,0.67937,0,0,0.27778],"730":[0,0.69444,0,0,0.66667],"733":[0,0.69444,0,0,0.5],"771":[0,0.67659,0,0,0.5],"776":[0,0.67937,0,0,0.5],"915":[0,0.69444,0,0,0.54167],"916":[0,0.69444,0,0,0.83334],"920":[0,0.69444,0,0,0.77778],"923":[0,0.69444,0,0,0.61111],"926":[0,0.69444,0,0,0.66667],"928":[0,0.69444,0,0,0.70834],"931":[0,0.69444,0,0,0.72222],"933":[0,0.69444,0,0,0.77778],"934":[0,0.69444,0,0,0.72222],"936":[0,0.69444,0,0,0.77778],"937":[0,0.69444,0,0,0.72222],"8211":[0,0.44444,0.02778,0,0.5],"8212":[0,0.44444,0.02778,0,1.0],"8216":[0,0.69444,0,0,0.27778],"8217":[0,0.69444,0,0,0.27778],"8220":[0,0.69444,0,0,0.5],"8221":[0,0.69444,0,0,0.5]},"Script-Regular":{"65":[0,0.7,0.22925,0,0.80253],"66":[0,0.7,0.04087,0,0.90757],"67":[0,0.7,0.1689,0,0.66619],"68":[0,0.7,0.09371,0,0.77443],"69":[0,0.7,0.18583,0,0.56162],"70":[0,0.7,0.13634,0,0.89544],"71":[0,0.7,0.17322,0,0.60961],"72":[0,0.7,0.29694,0,0.96919],"73":[0,0.7,0.19189,0,0.80907],"74":[0.27778,0.7,0.19189,0,1.05159],"75":[0,0.7,0.31259,0,0.91364],"76":[0,0.7,0.19189,0,0.87373],"77":[0,0.7,0.15981,0,1.08031],"78":[0,0.7,0.3525,0,0.9015],"79":[0,0.7,0.08078,0,0.73787],"80":[0,0.7,0.08078,0,1.01262],"81":[0,0.7,0.03305,0,0.88282],"82":[0,0.7,0.06259,0,0.85],"83":[0,0.7,0.19189,0,0.86767],"84":[0,0.7,0.29087,0,0.74697],"85":[0,0.7,0.25815,0,0.79996],"86":[0,0.7,0.27523,0,0.62204],"87":[0,0.7,0.27523,0,0.80532],"88":[0,0.7,0.26006,0,0.94445],"89":[0,0.7,0.2939,0,0.70961],"90":[0,0.7,0.24037,0,0.8212]},"Size1-Regular":{"40":[0.35001,0.85,0,0,0.45834],"41":[0.35001,0.85,0,0,0.45834],"47":[0.35001,0.85,0,0,0.57778],"91":[0.35001,0.85,0,0,0.41667],"92":[0.35001,0.85,0,0,0.57778],"93":[0.35001,0.85,0,0,0.41667],"123":[0.35001,0.85,0,0,0.58334],"125":[0.35001,0.85,0,0,0.58334],"710":[0,0.72222,0,0,0.55556],"732":[0,0.72222,0,0,0.55556],"770":[0,0.72222,0,0,0.55556],"771":[0,0.72222,0,0,0.55556],"8214":[-0.00099,0.601,0,0,0.77778],"8593":[1e-05,0.6,0,0,0.66667],"8595":[1e-05,0.6,0,0,0.66667],"8657":[1e-05,0.6,0,0,0.77778],"8659":[1e-05,0.6,0,0,0.77778],"8719":[0.25001,0.75,0,0,0.94445],"8720":[0.25001,0.75,0,0,0.94445],"8721":[0.25001,0.75,0,0,1.05556],"8730":[0.35001,0.85,0,0,1.0],"8739":[-0.00599,0.606,0,0,0.33333],"8741":[-0.00599,0.606,0,0,0.55556],"8747":[0.30612,0.805,0.19445,0,0.47222],"8748":[0.306,0.805,0.19445,0,0.47222],"8749":[0.306,0.805,0.19445,0,0.47222],"8750":[0.30612,0.805,0.19445,0,0.47222],"8896":[0.25001,0.75,0,0,0.83334],"8897":[0.25001,0.75,0,0,0.83334],"8898":[0.25001,0.75,0,0,0.83334],"8899":[0.25001,0.75,0,0,0.83334],"8968":[0.35001,0.85,0,0,0.47222],"8969":[0.35001,0.85,0,0,0.47222],"8970":[0.35001,0.85,0,0,0.47222],"8971":[0.35001,0.85,0,0,0.47222],"9168":[-0.00099,0.601,0,0,0.66667],"10216":[0.35001,0.85,0,0,0.47222],"10217":[0.35001,0.85,0,0,0.47222],"10752":[0.25001,0.75,0,0,1.11111],"10753":[0.25001,0.75,0,0,1.11111],"10754":[0.25001,0.75,0,0,1.11111],"10756":[0.25001,0.75,0,0,0.83334],"10758":[0.25001,0.75,0,0,0.83334]},"Size2-Regular":{"40":[0.65002,1.15,0,0,0.59722],"41":[0.65002,1.15,0,0,0.59722],"47":[0.65002,1.15,0,0,0.81111],"91":[0.65002,1.15,0,0,0.47222],"92":[0.65002,1.15,0,0,0.81111],"93":[0.65002,1.15,0,0,0.47222],"123":[0.65002,1.15,0,0,0.66667],"125":[0.65002,1.15,0,0,0.66667],"710":[0,0.75,0,0,1.0],"732":[0,0.75,0,0,1.0],"770":[0,0.75,0,0,1.0],"771":[0,0.75,0,0,1.0],"8719":[0.55001,1.05,0,0,1.27778],"8720":[0.55001,1.05,0,0,1.27778],"8721":[0.55001,1.05,0,0,1.44445],"8730":[0.65002,1.15,0,0,1.0],"8747":[0.86225,1.36,0.44445,0,0.55556],"8748":[0.862,1.36,0.44445,0,0.55556],"8749":[0.862,1.36,0.44445,0,0.55556],"8750":[0.86225,1.36,0.44445,0,0.55556],"8896":[0.55001,1.05,0,0,1.11111],"8897":[0.55001,1.05,0,0,1.11111],"8898":[0.55001,1.05,0,0,1.11111],"8899":[0.55001,1.05,0,0,1.11111],"8968":[0.65002,1.15,0,0,0.52778],"8969":[0.65002,1.15,0,0,0.52778],"8970":[0.65002,1.15,0,0,0.52778],"8971":[0.65002,1.15,0,0,0.52778],"10216":[0.65002,1.15,0,0,0.61111],"10217":[0.65002,1.15,0,0,0.61111],"10752":[0.55001,1.05,0,0,1.51112],"10753":[0.55001,1.05,0,0,1.51112],"10754":[0.55001,1.05,0,0,1.51112],"10756":[0.55001,1.05,0,0,1.11111],"10758":[0.55001,1.05,0,0,1.11111]},"Size3-Regular":{"40":[0.95003,1.45,0,0,0.73611],"41":[0.95003,1.45,0,0,0.73611],"47":[0.95003,1.45,0,0,1.04445],"91":[0.95003,1.45,0,0,0.52778],"92":[0.95003,1.45,0,0,1.04445],"93":[0.95003,1.45,0,0,0.52778],"123":[0.95003,1.45,0,0,0.75],"125":[0.95003,1.45,0,0,0.75],"710":[0,0.75,0,0,1.44445],"732":[0,0.75,0,0,1.44445],"770":[0,0.75,0,0,1.44445],"771":[0,0.75,0,0,1.44445],"8730":[0.95003,1.45,0,0,1.0],"8968":[0.95003,1.45,0,0,0.58334],"8969":[0.95003,1.45,0,0,0.58334],"8970":[0.95003,1.45,0,0,0.58334],"8971":[0.95003,1.45,0,0,0.58334],"10216":[0.95003,1.45,0,0,0.75],"10217":[0.95003,1.45,0,0,0.75]},"Size4-Regular":{"40":[1.25003,1.75,0,0,0.79167],"41":[1.25003,1.75,0,0,0.79167],"47":[1.25003,1.75,0,0,1.27778],"91":[1.25003,1.75,0,0,0.58334],"92":[1.25003,1.75,0,0,1.27778],"93":[1.25003,1.75,0,0,0.58334],"123":[1.25003,1.75,0,0,0.80556],"125":[1.25003,1.75,0,0,0.80556],"710":[0,0.825,0,0,1.8889],"732":[0,0.825,0,0,1.8889],"770":[0,0.825,0,0,1.8889],"771":[0,0.825,0,0,1.8889],"8730":[1.25003,1.75,0,0,1.0],"8968":[1.25003,1.75,0,0,0.63889],"8969":[1.25003,1.75,0,0,0.63889],"8970":[1.25003,1.75,0,0,0.63889],"8971":[1.25003,1.75,0,0,0.63889],"9115":[0.64502,1.155,0,0,0.875],"9116":[1e-05,0.6,0,0,0.875],"9117":[0.64502,1.155,0,0,0.875],"9118":[0.64502,1.155,0,0,0.875],"9119":[1e-05,0.6,0,0,0.875],"9120":[0.64502,1.155,0,0,0.875],"9121":[0.64502,1.155,0,0,0.66667],"9122":[-0.00099,0.601,0,0,0.66667],"9123":[0.64502,1.155,0,0,0.66667],"9124":[0.64502,1.155,0,0,0.66667],"9125":[-0.00099,0.601,0,0,0.66667],"9126":[0.64502,1.155,0,0,0.66667],"9127":[1e-05,0.9,0,0,0.88889],"9128":[0.65002,1.15,0,0,0.88889],"9129":[0.90001,0,0,0,0.88889],"9130":[0,0.3,0,0,0.88889],"9131":[1e-05,0.9,0,0,0.88889],"9132":[0.65002,1.15,0,0,0.88889],"9133":[0.90001,0,0,0,0.88889],"9143":[0.88502,0.915,0,0,1.05556],"10216":[1.25003,1.75,0,0,0.80556],"10217":[1.25003,1.75,0,0,0.80556],"57344":[-0.00499,0.605,0,0,1.05556],"57345":[-0.00499,0.605,0,0,1.05556],"57680":[0,0.12,0,0,0.45],"57681":[0,0.12,0,0,0.45],"57682":[0,0.12,0,0,0.45],"57683":[0,0.12,0,0,0.45]},"Typewriter-Regular":{"33":[0,0.61111,0,0,0.525],"34":[0,0.61111,0,0,0.525],"35":[0,0.61111,0,0,0.525],"36":[0.08333,0.69444,0,0,0.525],"37":[0.08333,0.69444,0,0,0.525],"38":[0,0.61111,0,0,0.525],"39":[0,0.61111,0,0,0.525],"40":[0.08333,0.69444,0,0,0.525],"41":[0.08333,0.69444,0,0,0.525],"42":[0,0.52083,0,0,0.525],"43":[-0.08056,0.53055,0,0,0.525],"44":[0.13889,0.125,0,0,0.525],"45":[-0.08056,0.53055,0,0,0.525],"46":[0,0.125,0,0,0.525],"47":[0.08333,0.69444,0,0,0.525],"48":[0,0.61111,0,0,0.525],"49":[0,0.61111,0,0,0.525],"50":[0,0.61111,0,0,0.525],"51":[0,0.61111,0,0,0.525],"52":[0,0.61111,0,0,0.525],"53":[0,0.61111,0,0,0.525],"54":[0,0.61111,0,0,0.525],"55":[0,0.61111,0,0,0.525],"56":[0,0.61111,0,0,0.525],"57":[0,0.61111,0,0,0.525],"58":[0,0.43056,0,0,0.525],"59":[0.13889,0.43056,0,0,0.525],"60":[-0.05556,0.55556,0,0,0.525],"61":[-0.19549,0.41562,0,0,0.525],"62":[-0.05556,0.55556,0,0,0.525],"63":[0,0.61111,0,0,0.525],"64":[0,0.61111,0,0,0.525],"65":[0,0.61111,0,0,0.525],"66":[0,0.61111,0,0,0.525],"67":[0,0.61111,0,0,0.525],"68":[0,0.61111,0,0,0.525],"69":[0,0.61111,0,0,0.525],"70":[0,0.61111,0,0,0.525],"71":[0,0.61111,0,0,0.525],"72":[0,0.61111,0,0,0.525],"73":[0,0.61111,0,0,0.525],"74":[0,0.61111,0,0,0.525],"75":[0,0.61111,0,0,0.525],"76":[0,0.61111,0,0,0.525],"77":[0,0.61111,0,0,0.525],"78":[0,0.61111,0,0,0.525],"79":[0,0.61111,0,0,0.525],"80":[0,0.61111,0,0,0.525],"81":[0.13889,0.61111,0,0,0.525],"82":[0,0.61111,0,0,0.525],"83":[0,0.61111,0,0,0.525],"84":[0,0.61111,0,0,0.525],"85":[0,0.61111,0,0,0.525],"86":[0,0.61111,0,0,0.525],"87":[0,0.61111,0,0,0.525],"88":[0,0.61111,0,0,0.525],"89":[0,0.61111,0,0,0.525],"90":[0,0.61111,0,0,0.525],"91":[0.08333,0.69444,0,0,0.525],"92":[0.08333,0.69444,0,0,0.525],"93":[0.08333,0.69444,0,0,0.525],"94":[0,0.61111,0,0,0.525],"95":[0.09514,0,0,0,0.525],"96":[0,0.61111,0,0,0.525],"97":[0,0.43056,0,0,0.525],"98":[0,0.61111,0,0,0.525],"99":[0,0.43056,0,0,0.525],"100":[0,0.61111,0,0,0.525],"101":[0,0.43056,0,0,0.525],"102":[0,0.61111,0,0,0.525],"103":[0.22222,0.43056,0,0,0.525],"104":[0,0.61111,0,0,0.525],"105":[0,0.61111,0,0,0.525],"106":[0.22222,0.61111,0,0,0.525],"107":[0,0.61111,0,0,0.525],"108":[0,0.61111,0,0,0.525],"109":[0,0.43056,0,0,0.525],"110":[0,0.43056,0,0,0.525],"111":[0,0.43056,0,0,0.525],"112":[0.22222,0.43056,0,0,0.525],"113":[0.22222,0.43056,0,0,0.525],"114":[0,0.43056,0,0,0.525],"115":[0,0.43056,0,0,0.525],"116":[0,0.55358,0,0,0.525],"117":[0,0.43056,0,0,0.525],"118":[0,0.43056,0,0,0.525],"119":[0,0.43056,0,0,0.525],"120":[0,0.43056,0,0,0.525],"121":[0.22222,0.43056,0,0,0.525],"122":[0,0.43056,0,0,0.525],"123":[0.08333,0.69444,0,0,0.525],"124":[0.08333,0.69444,0,0,0.525],"125":[0.08333,0.69444,0,0,0.525],"126":[0,0.61111,0,0,0.525],"127":[0,0.61111,0,0,0.525],"176":[0,0.61111,0,0,0.525],"305":[0,0.43056,0,0,0.525],"567":[0.22222,0.43056,0,0,0.525],"711":[0,0.56597,0,0,0.525],"713":[0,0.56555,0,0,0.525],"714":[0,0.61111,0,0,0.525],"715":[0,0.61111,0,0,0.525],"728":[0,0.61111,0,0,0.525],"730":[0,0.61111,0,0,0.525],"770":[0,0.61111,0,0,0.525],"771":[0,0.61111,0,0,0.525],"776":[0,0.61111,0,0,0.525],"915":[0,0.61111,0,0,0.525],"916":[0,0.61111,0,0,0.525],"920":[0,0.61111,0,0,0.525],"923":[0,0.61111,0,0,0.525],"926":[0,0.61111,0,0,0.525],"928":[0,0.61111,0,0,0.525],"931":[0,0.61111,0,0,0.525],"933":[0,0.61111,0,0,0.525],"934":[0,0.61111,0,0,0.525],"936":[0,0.61111,0,0,0.525],"937":[0,0.61111,0,0,0.525],"8216":[0,0.61111,0,0,0.525],"8217":[0,0.61111,0,0,0.525],"8242":[0,0.61111,0,0,0.525],"9251":[0.11111,0.21944,0,0,0.525]}};/***/},/* 60 *//***/function(module,__webpack_exports__,__webpack_require__){__webpack_exports__["a"]=sizingGroup;/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__utils__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__buildMathML__=__webpack_require__(2);function sizingGroup(value,options,baseOptions){var inner=__WEBPACK_IMPORTED_MODULE_4__buildHTML__["a"/* buildExpression */](value,options,false);var multiplier=options.sizeMultiplier/baseOptions.sizeMultiplier;// Add size-resetting classes to the inner list and set maxFontSize
// manually. Handle nested size changes.
for(var i=0;i<inner.length;i++){var pos=__WEBPACK_IMPORTED_MODULE_3__utils__["a"/* default */].indexOf(inner[i].classes,"sizing");if(pos<0){Array.prototype.push.apply(inner[i].classes,options.sizingClasses(baseOptions));}else if(inner[i].classes[pos+1]==="reset-size"+options.size){// This is a nested size change: e.g., inner[i] is the "b" in
// `\Huge a \small b`. Override the old size (the `reset-` class)
// but not the new size.
inner[i].classes[pos+1]="reset-size"+baseOptions.size;}inner[i].height*=multiplier;inner[i].depth*=multiplier;}return __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"/* default */].makeFragment(inner);}var sizeFuncs=["\\tiny","\\sixptsize","\\scriptsize","\\footnotesize","\\small","\\normalsize","\\large","\\Large","\\LARGE","\\huge","\\Huge"];Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"/* default */])({type:"sizing",names:sizeFuncs,props:{numArgs:0,allowedInText:true},handler:function handler(context,args){var breakOnTokenText=context.breakOnTokenText,funcName=context.funcName,parser=context.parser;parser.consumeSpaces();var body=parser.parseExpression(false,breakOnTokenText);return{type:"sizing",// Figure out what size to use based on the list of functions above
size:__WEBPACK_IMPORTED_MODULE_3__utils__["a"/* default */].indexOf(sizeFuncs,funcName)+1,value:body};},htmlBuilder:function htmlBuilder(group,options){// Handle sizing operators like \Huge. Real TeX doesn't actually allow
// these functions inside of math expressions, so we do some special
// handling.
var newOptions=options.havingSize(group.value.size);return sizingGroup(group.value.value,newOptions,options);},mathmlBuilder:function mathmlBuilder(group,options){var newOptions=options.havingSize(group.value.size);var inner=__WEBPACK_IMPORTED_MODULE_5__buildMathML__["a"/* buildExpression */](group.value.value,newOptions);var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mstyle",inner);// TODO(emily): This doesn't produce the correct size for nested size
// changes, because we don't keep state of what style we're currently
// in, so we can't reset the size to normal before changing it.  Now
// that we're passing an options parameter we should be able to fix
// this.
node.setAttribute("mathsize",newOptions.sizeMultiplier+"em");return node;}});/***/},/* 61 *//***/function(module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,"a",function(){return _environments;});/* harmony export (immutable) */__webpack_exports__["b"]=defineEnvironment;/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildMathML__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__Options__=__webpack_require__(43);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__ParseNode__=__webpack_require__(14);/**
 * The context contains the following properties:
 *  - mode: current parsing mode.
 *  - envName: the name of the environment, one of the listed names.
 *  - parser: the parser object.
 *//**
 *  - context: information and references provided by the parser
 *  - args: an array of arguments passed to \begin{name}
 *  - optArgs: an array of optional arguments passed to \begin{name}
 *//**
 *  - numArgs: (default 0) The number of arguments after the \begin{name} function.
 *  - argTypes: (optional) Just like for a function
 *  - allowedInText: (default false) Whether or not the environment is allowed
 *                   inside text mode (not enforced yet).
 *  - numOptionalArgs: (default 0) Just like for a function
 *//**
 * Final enviornment spec for use at parse time.
 * This is almost identical to `EnvDefSpec`, except it
 * 1. includes the function handler
 * 2. requires all arguments except argType
 * It is generated by `defineEnvironment()` below.
 *//**
 * All registered environments.
 * `environments.js` exports this same dictionary again and makes it public.
 * `Parser.js` requires this dictionary via `environments.js`.
 */var _environments={};function defineEnvironment(_ref){var type=_ref.type,names=_ref.names,props=_ref.props,handler=_ref.handler,htmlBuilder=_ref.htmlBuilder,mathmlBuilder=_ref.mathmlBuilder;// Set default values of environments
var data={numArgs:props.numArgs||0,greediness:1,allowedInText:false,numOptionalArgs:0,handler:handler};for(var i=0;i<names.length;++i){_environments[names[i]]=data;}if(htmlBuilder){__WEBPACK_IMPORTED_MODULE_0__buildHTML__["d"/* groupTypes */][type]=htmlBuilder;}if(mathmlBuilder){__WEBPACK_IMPORTED_MODULE_1__buildMathML__["d"/* groupTypes */][type]=mathmlBuilder;}}/***/},/* 62 *//***/function(module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,"a",function(){return combiningDiacriticalMarksEndRegex;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"b",function(){return controlWordRegex;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__=__webpack_require__(10);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_match_at__=__webpack_require__(145);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_match_at___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_match_at__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__ParseError__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__SourceLocation__=__webpack_require__(31);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__Token__=__webpack_require__(27);/**
 * The Lexer class handles tokenizing the input in various ways. Since our
 * parser expects us to be able to backtrack, the lexer allows lexing from any
 * given starting point.
 *
 * Its main exposed function is the `lex` function, which takes a position to
 * lex from and a type of token to lex. It defers to the appropriate `_innerLex`
 * function.
 *
 * The various `_innerLex` functions perform the actual lexing of different
 * kinds.
 *//* The following tokenRegex
 * - matches typical whitespace (but not NBSP etc.) using its first group
 * - matches comments (must have trailing newlines)
 * - does not match any control character \x00-\x1f except whitespace
 * - does not match a bare backslash
 * - matches any ASCII character except those just mentioned
 * - does not match the BMP private use area \uE000-\uF8FF
 * - does not match bare surrogate code units
 * - matches any BMP character except for those just described
 * - matches any valid Unicode surrogate pair
 * - matches a backslash followed by one or more letters
 * - matches a backslash followed by any BMP character, including newline
 * Just because the Lexer matches something doesn't mean it's valid input:
 * If there is no matching function or symbol definition, the Parser will
 * still reject the input.
 */var commentRegexString="%[^\n]*[\n]";var controlWordRegexString="\\\\[a-zA-Z@]+";var controlSymbolRegexString='\\\\[^\uD800-\uDFFF]';var combiningDiacriticalMarkString='[\u0300-\u036F]';var combiningDiacriticalMarksEndRegex=new RegExp(combiningDiacriticalMarkString+"+$");var tokenRegex=new RegExp("([ \r\n\t]+)|"+(// whitespace
"("+commentRegexString)+// comments
'|[!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]'+(// single codepoint
combiningDiacriticalMarkString+"*")+// ...plus accents
'|[\uD800-\uDBFF][\uDC00-\uDFFF]'+(// surrogate pair
combiningDiacriticalMarkString+"*")+// ...plus accents
"|\\\\verb\\*([^]).*?\\3"+// \verb*
"|\\\\verb([^*a-zA-Z]).*?\\4"+(// \verb unstarred
"|"+controlWordRegexString)+(// \macroName
"|"+controlSymbolRegexString)+// \\, \', etc.
")");// tokenRegex has no ^ marker, as required by matchAt.
// These regexs are for matching results from tokenRegex,
// so they do have ^ markers.
var controlWordRegex=new RegExp("^"+controlWordRegexString);var commentRegex=new RegExp("^"+commentRegexString);/** Main Lexer class */var Lexer=function(){function Lexer(input){__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this,Lexer);// Separate accents from characters
this.input=input;this.pos=0;}/**
     * This function lexes a single token.
     */__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default()(Lexer,[{key:"lex",value:function lex(){var input=this.input;var pos=this.pos;if(pos===input.length){return new __WEBPACK_IMPORTED_MODULE_5__Token__["a"/* Token */]("EOF",new __WEBPACK_IMPORTED_MODULE_4__SourceLocation__["a"/* default */](this,pos,pos));}var match=__WEBPACK_IMPORTED_MODULE_2_match_at___default()(tokenRegex,input,pos);if(match===null){throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"/* default */]("Unexpected character: '"+input[pos]+"'",new __WEBPACK_IMPORTED_MODULE_5__Token__["a"/* Token */](input[pos],new __WEBPACK_IMPORTED_MODULE_4__SourceLocation__["a"/* default */](this,pos,pos+1)));}var text=match[2]||" ";var start=this.pos;this.pos+=match[0].length;var end=this.pos;if(commentRegex.test(text)){return this.lex();}else{return new __WEBPACK_IMPORTED_MODULE_5__Token__["a"/* Token */](text,new __WEBPACK_IMPORTED_MODULE_4__SourceLocation__["a"/* default */](this,start,end));}}}]);return Lexer;}();/* harmony default export */__webpack_exports__["c"]=Lexer;/***/},/* 63 *//***/function(module,__webpack_exports__,__webpack_require__){Object.defineProperty(__webpack_exports__,"__esModule",{value:true});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__src_katex_less__=__webpack_require__(64);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__src_katex_less___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__src_katex_less__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__katex_js__=__webpack_require__(65);/**
 * This is the webpack entry point for KaTeX. As flow[1] and jest[2] doesn't support
 * CSS modules natively, a separate entry point is used and it is not flowtyped.
 *
 * [1] https://gist.github.com/lambdahands/d19e0da96285b749f0ef
 * [2] https://facebook.github.io/jest/docs/en/webpack.html
 *//* harmony default export */__webpack_exports__["default"]=__WEBPACK_IMPORTED_MODULE_1__katex_js__["a"/* default */];/***/},/* 64 *//***/function(module,exports){// removed by extract-text-webpack-plugin
/***/},/* 65 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__src_ParseError__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__src_Settings__=__webpack_require__(34);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__src_buildTree__=__webpack_require__(76);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__src_parseTree__=__webpack_require__(113);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__src_utils__=__webpack_require__(5);/* eslint no-console:0 *//**
 * This is the main entry point for KaTeX. Here, we expose functions for
 * rendering expressions either to DOM nodes or to markup strings.
 *
 * We also expose the ParseError class to check if errors thrown from KaTeX are
 * errors in the expression, or errors in javascript handling.
 *//**
 * Parse and build an expression, and place that expression in the DOM node
 * given.
 */var render=function render(expression,baseNode,options){__WEBPACK_IMPORTED_MODULE_4__src_utils__["a"/* default */].clearNode(baseNode);var node=renderToDomTree(expression,options).toNode();baseNode.appendChild(node);};// KaTeX's styles don't work properly in quirks mode. Print out an error, and
// disable rendering.
if(typeof document!=="undefined"){if(document.compatMode!=="CSS1Compat"){typeof console!=="undefined"&&console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your "+"website has a suitable doctype.");render=function render(){throw new __WEBPACK_IMPORTED_MODULE_0__src_ParseError__["a"/* default */]("KaTeX doesn't work in quirks mode.");};}}/**
 * Parse and build an expression, and return the markup for that.
 */var renderToString=function renderToString(expression,options){var markup=renderToDomTree(expression,options).toMarkup();return markup;};/**
 * Parse an expression and return the parse tree.
 */var generateParseTree=function generateParseTree(expression,options){var settings=new __WEBPACK_IMPORTED_MODULE_1__src_Settings__["a"/* default */](options);return Object(__WEBPACK_IMPORTED_MODULE_3__src_parseTree__["a"/* default */])(expression,settings);};/**
 * Generates and returns the katex build tree. This is used for advanced
 * use cases (like rendering to custom output).
 */var renderToDomTree=function renderToDomTree(expression,options){var settings=new __WEBPACK_IMPORTED_MODULE_1__src_Settings__["a"/* default */](options);var tree=Object(__WEBPACK_IMPORTED_MODULE_3__src_parseTree__["a"/* default */])(expression,settings);return Object(__WEBPACK_IMPORTED_MODULE_2__src_buildTree__["b"/* buildTree */])(tree,expression,settings);};/**
 * Generates and returns the katex build tree, with just HTML (no MathML).
 * This is used for advanced use cases (like rendering to custom output).
 */var renderToHTMLTree=function renderToHTMLTree(expression,options){var settings=new __WEBPACK_IMPORTED_MODULE_1__src_Settings__["a"/* default */](options);var tree=Object(__WEBPACK_IMPORTED_MODULE_3__src_parseTree__["a"/* default */])(expression,settings);return Object(__WEBPACK_IMPORTED_MODULE_2__src_buildTree__["a"/* buildHTMLTree */])(tree,expression,settings);};/* harmony default export */__webpack_exports__["a"]={/**
     * Renders the given LaTeX into an HTML+MathML combination, and adds
     * it as a child to the specified DOM node.
     */render:render,/**
     * Renders the given LaTeX into an HTML+MathML combination string,
     * for sending to the client.
     */renderToString:renderToString,/**
     * KaTeX error, usually during parsing.
     */ParseError:__WEBPACK_IMPORTED_MODULE_0__src_ParseError__["a"/* default */],/**
     * Parses the given LaTeX into KaTeX's internal parse tree structure,
     * without rendering to HTML or MathML.
     *
     * NOTE: This method is not currently recommended for public use.
     * The internal tree representation is unstable and is very likely
     * to change. Use at your own risk.
     */__parse:generateParseTree,/**
     * Renders the given LaTeX into an HTML+MathML internal DOM tree
     * representation, without flattening that representation to a string.
     *
     * NOTE: This method is not currently recommended for public use.
     * The internal tree representation is unstable and is very likely
     * to change. Use at your own risk.
     */__renderToDomTree:renderToDomTree,/**
     * Renders the given LaTeX into an HTML internal DOM tree representation,
     * without MathML and without flattening that representation to a string.
     *
     * NOTE: This method is not currently recommended for public use.
     * The internal tree representation is unstable and is very likely
     * to change. Use at your own risk.
     */__renderToHTMLTree:renderToHTMLTree};/***/},/* 66 *//***/function(module,exports,__webpack_require__){module.exports={"default":__webpack_require__(67),__esModule:true};/***/},/* 67 *//***/function(module,exports,__webpack_require__){__webpack_require__(68);module.exports=__webpack_require__(8).Object.freeze;/***/},/* 68 *//***/function(module,exports,__webpack_require__){// 19.1.2.5 Object.freeze(O)
var isObject=__webpack_require__(20),meta=__webpack_require__(69).onFreeze;__webpack_require__(46)('freeze',function($freeze){return function freeze(it){return $freeze&&isObject(it)?$freeze(meta(it)):it;};});/***/},/* 69 *//***/function(module,exports,__webpack_require__){var META=__webpack_require__(32)('meta'),isObject=__webpack_require__(20),has=__webpack_require__(21),setDesc=__webpack_require__(15).f,id=0;var isExtensible=Object.isExtensible||function(){return true;};var FREEZE=!__webpack_require__(24)(function(){return isExtensible(Object.preventExtensions({}));});var setMeta=function setMeta(it){setDesc(it,META,{value:{i:'O'+ ++id,// object ID
w:{}// weak collections IDs
}});};var fastKey=function fastKey(it,create){// return primitive with prefix
if(!isObject(it))return(typeof it==='undefined'?'undefined':_typeof(it))=='symbol'?it:(typeof it=='string'?'S':'P')+it;if(!has(it,META)){// can't set metadata to uncaught frozen object
if(!isExtensible(it))return'F';// not necessary to add metadata
if(!create)return'E';// add missing metadata
setMeta(it);// return object ID
}return it[META].i;};var getWeak=function getWeak(it,create){if(!has(it,META)){// can't set metadata to uncaught frozen object
if(!isExtensible(it))return true;// not necessary to add metadata
if(!create)return false;// add missing metadata
setMeta(it);// return hash weak collections IDs
}return it[META].w;};// add metadata on freeze-family methods calling
var onFreeze=function onFreeze(it){if(FREEZE&&meta.NEED&&isExtensible(it)&&!has(it,META))setMeta(it);return it;};var meta=module.exports={KEY:META,NEED:false,fastKey:fastKey,getWeak:getWeak,onFreeze:onFreeze};/***/},/* 70 *//***/function(module,exports,__webpack_require__){module.exports=!__webpack_require__(23)&&!__webpack_require__(24)(function(){return Object.defineProperty(__webpack_require__(45)('div'),'a',{get:function get$$1(){return 7;}}).a!=7;});/***/},/* 71 *//***/function(module,exports,__webpack_require__){// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject=__webpack_require__(20);// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports=function(it,S){if(!isObject(it))return it;var fn,val;if(S&&typeof(fn=it.toString)=='function'&&!isObject(val=fn.call(it)))return val;if(typeof(fn=it.valueOf)=='function'&&!isObject(val=fn.call(it)))return val;if(!S&&typeof(fn=it.toString)=='function'&&!isObject(val=fn.call(it)))return val;throw TypeError("Can't convert object to primitive value");};/***/},/* 72 *//***/function(module,exports){module.exports=function(it){if(typeof it!='function')throw TypeError(it+' is not a function!');return it;};/***/},/* 73 *//***/function(module,exports,__webpack_require__){module.exports={"default":__webpack_require__(74),__esModule:true};/***/},/* 74 *//***/function(module,exports,__webpack_require__){__webpack_require__(75);var $Object=__webpack_require__(8).Object;module.exports=function defineProperty$$1(it,key,desc){return $Object.defineProperty(it,key,desc);};/***/},/* 75 *//***/function(module,exports,__webpack_require__){var $export=__webpack_require__(25);// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S+$export.F*!__webpack_require__(23),'Object',{defineProperty:__webpack_require__(15).f});/***/},/* 76 *//***/function(module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,"b",function(){return buildTree;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"a",function(){return buildHTMLTree;});/* harmony import */var __WEBPACK_IMPORTED_MODULE_0__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildMathML__=__webpack_require__(2);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__Options__=__webpack_require__(43);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__Settings__=__webpack_require__(34);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__Style__=__webpack_require__(9);var optionsFromSettings=function optionsFromSettings(settings){return new __WEBPACK_IMPORTED_MODULE_3__Options__["a"/* default */]({style:settings.displayMode?__WEBPACK_IMPORTED_MODULE_5__Style__["a"/* default */].DISPLAY:__WEBPACK_IMPORTED_MODULE_5__Style__["a"/* default */].TEXT,maxSize:settings.maxSize});};var buildTree=function buildTree(tree,expression,settings){var options=optionsFromSettings(settings);// `buildHTML` sometimes messes with the parse tree (like turning bins ->
// ords), so we build the MathML version first.
var mathMLNode=Object(__WEBPACK_IMPORTED_MODULE_1__buildMathML__["c"/* default */])(tree,expression,options);var htmlNode=Object(__WEBPACK_IMPORTED_MODULE_0__buildHTML__["c"/* default */])(tree,options);var katexNode=__WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"/* default */].makeSpan(["katex"],[mathMLNode,htmlNode]);if(settings.displayMode){return __WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"/* default */].makeSpan(["katex-display"],[katexNode]);}else{return katexNode;}};var buildHTMLTree=function buildHTMLTree(tree,expression,settings){var options=optionsFromSettings(settings);var htmlNode=Object(__WEBPACK_IMPORTED_MODULE_0__buildHTML__["c"/* default */])(tree,options);var katexNode=__WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"/* default */].makeSpan(["katex"],[htmlNode]);if(settings.displayMode){return __WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"/* default */].makeSpan(["katex-display"],[katexNode]);}else{return katexNode;}};/* unused harmony default export *//***/},/* 77 *//***/function(module,exports,__webpack_require__){module.exports={"default":__webpack_require__(78),__esModule:true};/***/},/* 78 *//***/function(module,exports,__webpack_require__){var core=__webpack_require__(8),$JSON=core.JSON||(core.JSON={stringify:JSON.stringify});module.exports=function stringify(it){// eslint-disable-line no-unused-vars
return $JSON.stringify.apply($JSON,arguments);};/***/},/* 79 *//***/function(module,exports,__webpack_require__){module.exports={"default":__webpack_require__(80),__esModule:true};/***/},/* 80 *//***/function(module,exports,__webpack_require__){__webpack_require__(36);__webpack_require__(92);module.exports=__webpack_require__(8).Array.from;/***/},/* 81 *//***/function(module,exports,__webpack_require__){var toInteger=__webpack_require__(37),defined=__webpack_require__(38);// true  -> String#at
// false -> String#codePointAt
module.exports=function(TO_STRING){return function(that,pos){var s=String(defined(that)),i=toInteger(pos),l=s.length,a,b;if(i<0||i>=l)return TO_STRING?'':undefined;a=s.charCodeAt(i);return a<0xd800||a>0xdbff||i+1===l||(b=s.charCodeAt(i+1))<0xdc00||b>0xdfff?TO_STRING?s.charAt(i):a:TO_STRING?s.slice(i,i+2):(a-0xd800<<10)+(b-0xdc00)+0x10000;};};/***/},/* 82 *//***/function(module,exports){module.exports=true;/***/},/* 83 *//***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(26);/***/},/* 84 *//***/function(module,exports,__webpack_require__){var create=__webpack_require__(85),descriptor=__webpack_require__(33),setToStringTag=__webpack_require__(54),IteratorPrototype={};// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(26)(IteratorPrototype,__webpack_require__(11)('iterator'),function(){return this;});module.exports=function(Constructor,NAME,next){Constructor.prototype=create(IteratorPrototype,{next:descriptor(1,next)});setToStringTag(Constructor,NAME+' Iterator');};/***/},/* 85 *//***/function(module,exports,__webpack_require__){// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject=__webpack_require__(22),dPs=__webpack_require__(86),enumBugKeys=__webpack_require__(53),IE_PROTO=__webpack_require__(41)('IE_PROTO'),Empty=function Empty(){/* empty */},PROTOTYPE='prototype';// Create object with fake `null` prototype: use iframe Object with cleared prototype
var _createDict=function createDict(){// Thrash, waste and sodomy: IE GC bug
var iframe=__webpack_require__(45)('iframe'),i=enumBugKeys.length,lt='<',gt='>',iframeDocument;iframe.style.display='none';__webpack_require__(90).appendChild(iframe);iframe.src='javascript:';// eslint-disable-line no-script-url
// createDict = iframe.contentWindow.Object;
// html.removeChild(iframe);
iframeDocument=iframe.contentWindow.document;iframeDocument.open();iframeDocument.write(lt+'script'+gt+'document.F=Object'+lt+'/script'+gt);iframeDocument.close();_createDict=iframeDocument.F;while(i--){delete _createDict[PROTOTYPE][enumBugKeys[i]];}return _createDict();};module.exports=Object.create||function create(O,Properties){var result;if(O!==null){Empty[PROTOTYPE]=anObject(O);result=new Empty();Empty[PROTOTYPE]=null;// add "__proto__" for Object.getPrototypeOf polyfill
result[IE_PROTO]=O;}else result=_createDict();return Properties===undefined?result:dPs(result,Properties);};/***/},/* 86 *//***/function(module,exports,__webpack_require__){var dP=__webpack_require__(15),anObject=__webpack_require__(22),getKeys=__webpack_require__(39);module.exports=__webpack_require__(23)?Object.defineProperties:function defineProperties(O,Properties){anObject(O);var keys=getKeys(Properties),length=keys.length,i=0,P;while(length>i){dP.f(O,P=keys[i++],Properties[P]);}return O;};/***/},/* 87 *//***/function(module,exports,__webpack_require__){var has=__webpack_require__(21),toIObject=__webpack_require__(40),arrayIndexOf=__webpack_require__(88)(false),IE_PROTO=__webpack_require__(41)('IE_PROTO');module.exports=function(object,names){var O=toIObject(object),i=0,result=[],key;for(key in O){if(key!=IE_PROTO)has(O,key)&&result.push(key);}// Don't enum bug & hidden keys
while(names.length>i){if(has(O,key=names[i++])){~arrayIndexOf(result,key)||result.push(key);}}return result;};/***/},/* 88 *//***/function(module,exports,__webpack_require__){// false -> Array#indexOf
// true  -> Array#includes
var toIObject=__webpack_require__(40),toLength=__webpack_require__(51),toIndex=__webpack_require__(89);module.exports=function(IS_INCLUDES){return function($this,el,fromIndex){var O=toIObject($this),length=toLength(O.length),index=toIndex(fromIndex,length),value;// Array#includes uses SameValueZero equality algorithm
if(IS_INCLUDES&&el!=el)while(length>index){value=O[index++];if(value!=value)return true;// Array#toIndex ignores holes, Array#includes - not
}else for(;length>index;index++){if(IS_INCLUDES||index in O){if(O[index]===el)return IS_INCLUDES||index||0;}}return!IS_INCLUDES&&-1;};};/***/},/* 89 *//***/function(module,exports,__webpack_require__){var toInteger=__webpack_require__(37),max=Math.max,min=Math.min;module.exports=function(index,length){index=toInteger(index);return index<0?max(index+length,0):min(index,length);};/***/},/* 90 *//***/function(module,exports,__webpack_require__){module.exports=__webpack_require__(16).document&&document.documentElement;/***/},/* 91 *//***/function(module,exports,__webpack_require__){// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has=__webpack_require__(21),toObject=__webpack_require__(29),IE_PROTO=__webpack_require__(41)('IE_PROTO'),ObjectProto=Object.prototype;module.exports=Object.getPrototypeOf||function(O){O=toObject(O);if(has(O,IE_PROTO))return O[IE_PROTO];if(typeof O.constructor=='function'&&O instanceof O.constructor){return O.constructor.prototype;}return O instanceof Object?ObjectProto:null;};/***/},/* 92 *//***/function(module,exports,__webpack_require__){var ctx=__webpack_require__(47),$export=__webpack_require__(25),toObject=__webpack_require__(29),call=__webpack_require__(93),isArrayIter=__webpack_require__(94),toLength=__webpack_require__(51),createProperty=__webpack_require__(95),getIterFn=__webpack_require__(55);$export($export.S+$export.F*!__webpack_require__(96)(function(iter){}),'Array',{// 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
from:function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){var O=toObject(arrayLike),C=typeof this=='function'?this:Array,aLen=arguments.length,mapfn=aLen>1?arguments[1]:undefined,mapping=mapfn!==undefined,index=0,iterFn=getIterFn(O),length,result,step,iterator;if(mapping)mapfn=ctx(mapfn,aLen>2?arguments[2]:undefined,2);// if object isn't iterable or it's array with default iterator - use simple case
if(iterFn!=undefined&&!(C==Array&&isArrayIter(iterFn))){for(iterator=iterFn.call(O), result=new C();!(step=iterator.next()).done;index++){createProperty(result,index,mapping?call(iterator,mapfn,[step.value,index],true):step.value);}}else{length=toLength(O.length);for(result=new C(length);length>index;index++){createProperty(result,index,mapping?mapfn(O[index],index):O[index]);}}result.length=index;return result;}});/***/},/* 93 *//***/function(module,exports,__webpack_require__){// call something on iterator step with safe closing on error
var anObject=__webpack_require__(22);module.exports=function(iterator,fn,value,entries){try{return entries?fn(anObject(value)[0],value[1]):fn(value);// 7.4.6 IteratorClose(iterator, completion)
}catch(e){var ret=iterator['return'];if(ret!==undefined)anObject(ret.call(iterator));throw e;}};/***/},/* 94 *//***/function(module,exports,__webpack_require__){// check on default Array iterator
var Iterators=__webpack_require__(17),ITERATOR=__webpack_require__(11)('iterator'),ArrayProto=Array.prototype;module.exports=function(it){return it!==undefined&&(Iterators.Array===it||ArrayProto[ITERATOR]===it);};/***/},/* 95 *//***/function(module,exports,__webpack_require__){var $defineProperty=__webpack_require__(15),createDesc=__webpack_require__(33);module.exports=function(object,index,value){if(index in object)$defineProperty.f(object,index,createDesc(0,value));else object[index]=value;};/***/},/* 96 *//***/function(module,exports,__webpack_require__){var ITERATOR=__webpack_require__(11)('iterator'),SAFE_CLOSING=false;try{var riter=[7][ITERATOR]();riter['return']=function(){SAFE_CLOSING=true;};}catch(e){/* empty */}module.exports=function(exec,skipClosing){if(!skipClosing&&!SAFE_CLOSING)return false;var safe=false;try{var arr=[7],iter=arr[ITERATOR]();iter.next=function(){return{done:safe=true};};arr[ITERATOR]=function(){return iter;};exec(arr);}catch(e){/* empty */}return safe;};/***/},/* 97 *//***/function(module,exports,__webpack_require__){module.exports={"default":__webpack_require__(98),__esModule:true};/***/},/* 98 *//***/function(module,exports,__webpack_require__){__webpack_require__(58);__webpack_require__(36);module.exports=__webpack_require__(102);/***/},/* 99 *//***/function(module,exports,__webpack_require__){var addToUnscopables=__webpack_require__(100),step=__webpack_require__(101),Iterators=__webpack_require__(17),toIObject=__webpack_require__(40);// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports=__webpack_require__(48)(Array,'Array',function(iterated,kind){this._t=toIObject(iterated);// target
this._i=0;// next index
this._k=kind;// kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
},function(){var O=this._t,kind=this._k,index=this._i++;if(!O||index>=O.length){this._t=undefined;return step(1);}if(kind=='keys')return step(0,index);if(kind=='values')return step(0,O[index]);return step(0,[index,O[index]]);},'values');// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments=Iterators.Array;addToUnscopables('keys');addToUnscopables('values');addToUnscopables('entries');/***/},/* 100 *//***/function(module,exports){module.exports=function(){/* empty */};/***/},/* 101 *//***/function(module,exports){module.exports=function(done,value){return{value:value,done:!!done};};/***/},/* 102 *//***/function(module,exports,__webpack_require__){var classof=__webpack_require__(56),ITERATOR=__webpack_require__(11)('iterator'),Iterators=__webpack_require__(17);module.exports=__webpack_require__(8).isIterable=function(it){var O=Object(it);return O[ITERATOR]!==undefined||'@@iterator'in O||Iterators.hasOwnProperty(classof(O));};/***/},/* 103 *//***/function(module,exports,__webpack_require__){__webpack_require__(58);__webpack_require__(36);module.exports=__webpack_require__(104);/***/},/* 104 *//***/function(module,exports,__webpack_require__){var anObject=__webpack_require__(22),get$$1=__webpack_require__(55);module.exports=__webpack_require__(8).getIterator=function(it){var iterFn=get$$1(it);if(typeof iterFn!='function')throw TypeError(it+' is not iterable!');return anObject(iterFn.call(it));};/***/},/* 105 *//***/function(module,exports,__webpack_require__){module.exports={"default":__webpack_require__(106),__esModule:true};/***/},/* 106 *//***/function(module,exports,__webpack_require__){__webpack_require__(107);module.exports=__webpack_require__(8).Object.assign;/***/},/* 107 *//***/function(module,exports,__webpack_require__){// 19.1.3.1 Object.assign(target, source)
var $export=__webpack_require__(25);$export($export.S+$export.F,'Object',{assign:__webpack_require__(108)});/***/},/* 108 *//***/function(module,exports,__webpack_require__){var getKeys=__webpack_require__(39),gOPS=__webpack_require__(109),pIE=__webpack_require__(110),toObject=__webpack_require__(29),IObject=__webpack_require__(49),$assign=Object.assign;// should work with symbols and should have deterministic property order (V8 bug)
module.exports=!$assign||__webpack_require__(24)(function(){var A={},B={},S=Symbol(),K='abcdefghijklmnopqrst';A[S]=7;K.split('').forEach(function(k){B[k]=k;});return $assign({},A)[S]!=7||Object.keys($assign({},B)).join('')!=K;})?function assign(target,source){// eslint-disable-line no-unused-vars
var T=toObject(target),aLen=arguments.length,index=1,getSymbols=gOPS.f,isEnum=pIE.f;while(aLen>index){var S=IObject(arguments[index++]),keys=getSymbols?getKeys(S).concat(getSymbols(S)):getKeys(S),length=keys.length,j=0,key;while(length>j){if(isEnum.call(S,key=keys[j++]))T[key]=S[key];}}return T;}:$assign;/***/},/* 109 *//***/function(module,exports){exports.f=Object.getOwnPropertySymbols;/***/},/* 110 *//***/function(module,exports){exports.f={}.propertyIsEnumerable;/***/},/* 111 *//***/function(module,__webpack_exports__,__webpack_require__){var hLinePad=80;// padding above and below a std 0.04em horiz rule.
var vLinePad=100;// padding on either side of a std vert 0.05em rule.
var path={// stdHorizRule is used for frac-lines, underlines, and overlines.
// It is 0.04em thick if the line comes from normalsize/textstyle.
stdHorizRule:"M0 "+hLinePad+"H400000 v40H0z M0 "+hLinePad+"H400000 v40H0z",// vertSeparator is used in arrays. It is 0.05em wide in a 0.25em viewBox.
vertSeparator:"M"+vLinePad+" 0h50V400000h-50zM"+vLinePad+" 0h50V400000h-50z",// sqrtMain path geometry is from glyph U221A in the font KaTeX Main
// All surds have 80 units padding above the viniculumn.
sqrtMain:"M95,"+(622+hLinePad)+"c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,\n-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,\n-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,\n35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,\n-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467\ns-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422\ns-65,47,-65,47z M834 "+hLinePad+"H400000v40H845z",// size1 is from glyph U221A in the font KaTeX_Size1-Regular
sqrtSize1:"M263,"+(601+hLinePad)+"c0.7,0,18,39.7,52,119c34,79.3,68.167,\n158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067\nc4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,\n175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71\nc-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,\n-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26\ns76,-59,76,-59s76,-60,76,-60z M1001 "+hLinePad+"H40000v40H1012z",// size2 is from glyph U221A in the font KaTeX_Size2-Regular
// The 80 units padding is most obvious here. Note start node at M1001 80.
sqrtSize2:"M1001,"+hLinePad+"H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,\n572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,\n-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39\nc-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60\ns208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,\n-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10z\nM1001 "+hLinePad+"H400000v40H1013z",// size3 is from glyph U221A in the font KaTeX_Size3-Regular
sqrtSize3:"M424,"+(2398+hLinePad)+"c-1.3,-0.7,-38.5,-172,-111.5,-514c-73,\n-342,-109.8,-513.3,-110.5,-514c0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,\n25c-5.7,9.3,-9.8,16,-12.5,20s-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,\n-13s76,-122,76,-122s77,-121,77,-121s209,968,209,968c0,-2,84.7,-361.7,254,-1079\nc169.3,-717.3,254.7,-1077.7,256,-1081c4,-6.7,10,-10,18,-10H400000v40H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M1001 "+hLinePad+"H400000v40H1014z",// size4 is from glyph U221A in the font KaTeX_Size4-Regular
sqrtSize4:"M473,"+(2713+hLinePad)+"c339.3,-1799.3,509.3,-2700,510,-2702\nc3.3,-7.3,9.3,-11,18,-11H400000v40H1017.7s-90.5,478,-276.2,1466c-185.7,988,\n-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,\n-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200c0,-1.3,-5.3,8.7,-16,30c-10.7,\n21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26s76,-153,76,-153s77,-151,\n77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,606z\nM1001 "+hLinePad+"H400000v40H1017z",// The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
doubleleftarrow:"M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",// doublerightarrow is from glyph U+21D2 in font KaTeX Main
doublerightarrow:"M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",// leftarrow is from glyph U+2190 in font KaTeX Main
leftarrow:"M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",// overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
leftbrace:"M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",leftbraceunder:"M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",// overgroup is from the MnSymbol package (public domain)
leftgroup:"M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",leftgroupunder:"M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",// Harpoons are from glyph U+21BD in font KaTeX Main
leftharpoon:"M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",leftharpoonplus:"M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",leftharpoondown:"M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",leftharpoondownplus:"M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",// hook is from glyph U+21A9 in font KaTeX Main
lefthook:"M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",leftlinesegment:"M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",leftmapsto:"M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",// tofrom is from glyph U+21C4 in font KaTeX AMS Regular
leftToFrom:"M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",longequal:"M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",midbrace:"M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",midbraceunder:"M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",rightarrow:"M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",rightbrace:"M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",rightbraceunder:"M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",rightgroup:"M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",rightgroupunder:"M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",rightharpoon:"M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",rightharpoonplus:"M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",rightharpoondown:"M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",rightharpoondownplus:"M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",righthook:"M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",rightlinesegment:"M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",rightToFrom:"M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",// twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
twoheadleftarrow:"M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",twoheadrightarrow:"M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",// tilde1 is a modified version of a glyph from the MnSymbol package
tilde1:"M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",// ditto tilde2, tilde3, & tilde4
tilde2:"M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",tilde3:"M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",tilde4:"M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",// vec is from glyph U+20D7 in font KaTeX Main
vec:"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",// widehat1 is a modified version of a glyph from the MnSymbol package
widehat1:"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",// ditto widehat2, widehat3, & widehat4
widehat2:"M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widehat3:"M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widehat4:"M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",// baraboveleftarrow is from glyph U+21C4 in font KaTeX AMS Regular
baraboveleftarrow:"M1 500c30.67-18 59-41.833 85-71.5s45-61.17 57-94.5h23\nc15.33 0 23 .33 23 1 0 .67-5.33 12.67-16 36-16.67 34.67-39 67.33-67 98l-10 11\nh39904v40H96l9 10c27.33 30.67 50.67 65 70 103l14 33c0 .67-7.67 1-23 1h-22\nC116.67 596.33 69 540.67 1 500z M96 480 H400000 v40 H96z\nM1 147 H399905 v40  H1z M0 147 H399905 v40  H0z",// ditto rightarrowabovebar
rightarrowabovebar:"M400000 167c-70.67 42-118 97.67-142 167h-23c-15.33 0\n-23-.33-23-1 0-1.33 5.33-13.67 16-37 18-35.33 41.33-69 70-101l7-8h-39905\nv-40h39905c-389 0 0 0 0 0l-7-8c-28.67-32-52-65.67-70-101-10.67-23.33-16-35.67\n-16-37 0-.67 7.67-1 23-1h23c11.33 33.33 30 64.833 56 94.5s54.67 53.83 86 72.5z\nM0 147 H399905 v40  H0z M96 480 H400000 v40 H0z M96 480 H400000 v40 H0z",// The next eight paths support reaction arrows from the mhchem package.
// The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
// Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
baraboveshortleftharpoon:"M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",rightharpoonaboveshortbar:"M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",shortbaraboveleftharpoon:"M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",shortrightharpoonabovebar:"M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"};/* harmony default export */__webpack_exports__["a"]={path:path};/***/},/* 112 *//***/function(module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,"a",function(){return spacings;});/* harmony export (binding) */__webpack_require__.d(__webpack_exports__,"b",function(){return tightSpacings;});/**
 * Describes spaces between different classes of atoms.
 */var thinspace={number:3,unit:"mu"};var mediumspace={number:4,unit:"mu"};var thickspace={number:5,unit:"mu"};// Spacing relationships for display and text styles
var spacings={mord:{mop:thinspace,mbin:mediumspace,mrel:thickspace,minner:thinspace},mop:{mord:thinspace,mop:thinspace,mrel:thickspace,minner:thinspace},mbin:{mord:mediumspace,mop:mediumspace,mopen:mediumspace,minner:mediumspace},mrel:{mord:thickspace,mop:thickspace,mopen:thickspace,minner:thickspace},mopen:{},mclose:{mop:thinspace,mbin:mediumspace,mrel:thickspace,minner:thinspace},mpunct:{mord:thinspace,mop:thinspace,mrel:thickspace,mopen:thinspace,mclose:thinspace,mpunct:thinspace,minner:thinspace},minner:{mord:thinspace,mop:thinspace,mbin:mediumspace,mrel:thickspace,mopen:thinspace,mpunct:thinspace,minner:thinspace}};// Spacing relationships for script and scriptscript styles
var tightSpacings={mord:{mop:thinspace},mop:{mord:thinspace,mop:thinspace},mbin:{},mrel:{},mopen:{},mclose:{mop:thinspace},mpunct:{},minner:{mop:thinspace}};/***/},/* 113 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__Parser__=__webpack_require__(114);/**
 * Provides a single function for parsing an expression using a Parser
 * TODO(emily): Remove this
 *//**
 * Parses an expression using a Parser, then returns the parsed result.
 */var parseTree=function parseTree(toParse,settings){if(!(typeof toParse==='string'||toParse instanceof String)){throw new TypeError('KaTeX can only parse string typed expression');}var parser=new __WEBPACK_IMPORTED_MODULE_0__Parser__["a"/* default */](toParse,settings);return parser.parse();};/* harmony default export */__webpack_exports__["a"]=parseTree;/***/},/* 114 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__=__webpack_require__(10);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__functions__=__webpack_require__(115);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__environments__=__webpack_require__(142);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__MacroExpander__=__webpack_require__(144);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__symbols__=__webpack_require__(28);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__units__=__webpack_require__(19);/* harmony import */var __WEBPACK_IMPORTED_MODULE_7__unicodeScripts__=__webpack_require__(42);/* harmony import */var __WEBPACK_IMPORTED_MODULE_8__unicodeAccents__=__webpack_require__(148);/* harmony import */var __WEBPACK_IMPORTED_MODULE_8__unicodeAccents___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__unicodeAccents__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_9__unicodeSymbols__=__webpack_require__(149);/* harmony import */var __WEBPACK_IMPORTED_MODULE_10__ParseNode__=__webpack_require__(14);/* harmony import */var __WEBPACK_IMPORTED_MODULE_11__ParseError__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_12__Lexer_js__=__webpack_require__(62);/* harmony import */var __WEBPACK_IMPORTED_MODULE_13__Settings__=__webpack_require__(34);/* harmony import */var __WEBPACK_IMPORTED_MODULE_14__Token__=__webpack_require__(27);/* eslint no-constant-condition:0 *//* eslint no-console:0 *//**
 * This file contains the parser used to parse out a TeX expression from the
 * input. Since TeX isn't context-free, standard parsers don't work particularly
 * well.
 *
 * The strategy of this parser is as such:
 *
 * The main functions (the `.parse...` ones) take a position in the current
 * parse string to parse tokens from. The lexer (found in Lexer.js, stored at
 * this.lexer) also supports pulling out tokens at arbitrary places. When
 * individual tokens are needed at a position, the lexer is called to pull out a
 * token, which is then used.
 *
 * The parser has a property called "mode" indicating the mode that
 * the parser is currently in. Currently it has to be one of "math" or
 * "text", which denotes whether the current environment is a math-y
 * one or a text-y one (e.g. inside \text). Currently, this serves to
 * limit the functions which can be used in text mode.
 *
 * The main functions then return an object which contains the useful data that
 * was parsed at its given point, and a new position at the end of the parsed
 * data. The main functions can call each other and continue the parsing by
 * using the returned position as a new starting point.
 *
 * There are also extra `.handle...` functions, which pull out some reused
 * functionality into self-contained functions.
 *
 * The earlier functions return ParseNodes.
 * The later functions (which are called deeper in the parse) sometimes return
 * ParsedFuncOrArgOrDollar, which contain a ParseNode as well as some data about
 * whether the parsed object is a function which is missing some arguments, or a
 * standalone object which can be used as an argument to another function.
 */function newArgument(result,token){return{type:"arg",result:result,token:token};}function newFunction(token){return{type:"fn",result:token.text,token:token};}function newDollar(token){return{type:"$",result:"$",token:token};}function assertFuncOrArg(parsed){if(parsed.type==="$"){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Unexpected $",parsed.token);}return parsed;}var Parser=function(){function Parser(input,settings){__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default()(this,Parser);// Start in math mode
this.mode="math";// Create a new macro expander (gullet) and (indirectly via that) also a
// new lexer (mouth) for this parser (stomach, in the language of TeX)
this.gullet=new __WEBPACK_IMPORTED_MODULE_4__MacroExpander__["a"/* default */](input,settings.macros,this.mode);// Use old \color behavior (same as LaTeX's \textcolor) if requested.
// We do this after the macros object has been copied by MacroExpander.
if(settings.colorIsTextColor){this.gullet.macros["\\color"]="\\textcolor";}// Store the settings for use in parsing
this.settings=settings;// Count leftright depth (for \middle errors)
this.leftrightDepth=0;}/**
     * Checks a result to make sure it has the right type, and throws an
     * appropriate error otherwise.
     */__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_createClass___default()(Parser,[{key:"expect",value:function expect(text){var consume=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;if(this.nextToken.text!==text){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Expected '"+text+"', got '"+this.nextToken.text+"'",this.nextToken);}if(consume){this.consume();}}/**
         * Considers the current look ahead token as consumed,
         * and fetches the one after that as the new look ahead.
         */},{key:"consume",value:function consume(){this.nextToken=this.gullet.expandNextToken();}/**
         * Switches between "text" and "math" modes.
         */},{key:"switchMode",value:function switchMode(newMode){this.mode=newMode;this.gullet.switchMode(newMode);}/**
         * Main parsing function, which parses an entire input.
         */},{key:"parse",value:function parse(){// Try to parse the input
this.consume();var parse=this.parseInput();return parse;}/**
         * Parses an entire input tree.
         */},{key:"parseInput",value:function parseInput(){// Parse an expression
var expression=this.parseExpression(false);// If we succeeded, make sure there's an EOF at the end
this.expect("EOF",false);return expression;}},{key:"parseExpression",/**
         * Parses an "expression", which is a list of atoms.
         *
         * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
         *                 happens when functions have higher precendence han infix
         *                 nodes in implicit parses.
         *
         * `breakOnTokenText`: The text of the token that the expression should end
         *                     with, or `null` if something else should end the
         *                     expression.
         */value:function parseExpression(breakOnInfix,breakOnTokenText){var body=[];// Keep adding atoms to the body until we can't parse any more atoms (either
// we reached the end, a }, or a \right)
while(true){// Ignore spaces in math mode
if(this.mode==="math"){this.consumeSpaces();}var lex=this.nextToken;if(Parser.endOfExpression.indexOf(lex.text)!==-1){break;}if(breakOnTokenText&&lex.text===breakOnTokenText){break;}if(breakOnInfix&&__WEBPACK_IMPORTED_MODULE_2__functions__["a"/* default */][lex.text]&&__WEBPACK_IMPORTED_MODULE_2__functions__["a"/* default */][lex.text].infix){break;}var atom=this.parseAtom(breakOnTokenText);if(!atom){if(!this.settings.throwOnError&&lex.text[0]==="\\"){var errorNode=this.handleUnsupportedCmd();body.push(errorNode);continue;}break;}body.push(atom);}return this.handleInfixNodes(body);}/**
         * Rewrites infix operators such as \over with corresponding commands such
         * as \frac.
         *
         * There can only be one infix operator per group.  If there's more than one
         * then the expression is ambiguous.  This can be resolved by adding {}.
         */},{key:"handleInfixNodes",value:function handleInfixNodes(body){var overIndex=-1;var funcName=void 0;for(var i=0;i<body.length;i++){var node=body[i];if(node.type==="infix"){if(overIndex!==-1){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("only one infix operator per group",node.value.token);}overIndex=i;funcName=node.value.replaceWith;}}if(overIndex!==-1&&funcName){var numerNode=void 0;var denomNode=void 0;var numerBody=body.slice(0,overIndex);var denomBody=body.slice(overIndex+1);if(numerBody.length===1&&numerBody[0].type==="ordgroup"){numerNode=numerBody[0];}else{numerNode=new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("ordgroup",numerBody,this.mode);}if(denomBody.length===1&&denomBody[0].type==="ordgroup"){denomNode=denomBody[0];}else{denomNode=new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("ordgroup",denomBody,this.mode);}var value=this.callFunction(funcName,[numerNode,denomNode],[]);return[new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */](value.type,value,this.mode)];}else{return body;}}// The greediness of a superscript or subscript
},{key:"handleSupSubscript",/**
         * Handle a subscript or superscript with nice errors.
         */value:function handleSupSubscript(name){var symbolToken=this.nextToken;var symbol=symbolToken.text;this.consume();this.consumeSpaces();// ignore spaces before sup/subscript argument
var group=this.parseGroup();if(!group){if(!this.settings.throwOnError&&this.nextToken.text[0]==="\\"){return this.handleUnsupportedCmd();}else{throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Expected group after '"+symbol+"'",symbolToken);}}var arg=assertFuncOrArg(group);if(arg.type==="fn"){// ^ and _ have a greediness, so handle interactions with functions'
// greediness
var funcGreediness=__WEBPACK_IMPORTED_MODULE_2__functions__["a"/* default */][arg.result].greediness;if(funcGreediness>Parser.SUPSUB_GREEDINESS){return this.parseGivenFunction(group);}else{throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Got function '"+arg.result+"' with no arguments "+"as "+name,symbolToken);}}else{return arg.result;}}/**
         * Converts the textual input of an unsupported command into a text node
         * contained within a color node whose color is determined by errorColor
         */},{key:"handleUnsupportedCmd",value:function handleUnsupportedCmd(){var text=this.nextToken.text;var textordArray=[];for(var i=0;i<text.length;i++){textordArray.push(new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("textord",text[i],"text"));}var textNode=new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("text",{body:textordArray,type:"text"},this.mode);var colorNode=new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("color",{color:this.settings.errorColor,value:[textNode],type:"color"},this.mode);this.consume();return colorNode;}/**
         * Parses a group with optional super/subscripts.
         */},{key:"parseAtom",value:function parseAtom(breakOnTokenText){// The body of an atom is an implicit group, so that things like
// \left(x\right)^2 work correctly.
var base=this.parseImplicitGroup(breakOnTokenText);// In text mode, we don't have superscripts or subscripts
if(this.mode==="text"){return base;}// Note that base may be empty (i.e. null) at this point.
var superscript=void 0;var subscript=void 0;while(true){// Guaranteed in math mode, so eat any spaces first.
this.consumeSpaces();// Lex the first token
var lex=this.nextToken;if(lex.text==="\\limits"||lex.text==="\\nolimits"){// We got a limit control
if(!base||base.type!=="op"){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Limit controls must follow a math operator",lex);}else{var limits=lex.text==="\\limits";base.value.limits=limits;base.value.alwaysHandleSupSub=true;}this.consume();}else if(lex.text==="^"){// We got a superscript start
if(superscript){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Double superscript",lex);}superscript=this.handleSupSubscript("superscript");}else if(lex.text==="_"){// We got a subscript start
if(subscript){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Double subscript",lex);}subscript=this.handleSupSubscript("subscript");}else if(lex.text==="'"){// We got a prime
if(superscript){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Double superscript",lex);}var prime=new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("textord","\\prime",this.mode);// Many primes can be grouped together, so we handle this here
var primes=[prime];this.consume();// Keep lexing tokens until we get something that's not a prime
while(this.nextToken.text==="'"){// For each one, add another prime to the list
primes.push(prime);this.consume();}// If there's a superscript following the primes, combine that
// superscript in with the primes.
if(this.nextToken.text==="^"){primes.push(this.handleSupSubscript("superscript"));}// Put everything into an ordgroup as the superscript
superscript=new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("ordgroup",primes,this.mode);}else{// If it wasn't ^, _, or ', stop parsing super/subscripts
break;}}if(superscript||subscript){// If we got either a superscript or subscript, create a supsub
return new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("supsub",{base:base,sup:superscript,sub:subscript},this.mode);}else{// Otherwise return the original body
return base;}}/**
         * Parses an implicit group, which is a group that starts at the end of a
         * specified, and ends right before a higher explicit group ends, or at EOL. It
         * is used for functions that appear to affect the current style, like \Large or
         * \textrm, where instead of keeping a style we just pretend that there is an
         * implicit grouping after it until the end of the group. E.g.
         *   small text {\Large large text} small text again
         */},{key:"parseImplicitGroup",value:function parseImplicitGroup(breakOnTokenText){var start=this.parseSymbol();if(start==null){// If we didn't get anything we handle, fall back to parseFunction
return this.parseFunction();}else if(start.type==="arg"){// Defer to parseGivenFunction if it's not a function we handle
return this.parseGivenFunction(start);}var func=start.result;if(func==="$"){if(this.mode==="math"){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("$ within math mode");}var outerMode=this.mode;this.switchMode("math");// Expand next symbol now that we're in math mode.
this.consume();var body=this.parseExpression(false,"$");// We can't expand the next symbol after the $ until after
// switching modes back.  So don't consume within expect.
this.expect("$",false);this.switchMode(outerMode);this.consume();return new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("styling",{style:"text",value:body},"math");}else if(func==="\\begin"){// begin...end is similar to left...right
var begin=this.parseGivenFunction(start);var envName=begin.value.name;if(!__WEBPACK_IMPORTED_MODULE_3__environments__["a"/* default */].hasOwnProperty(envName)){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("No such environment: "+envName,begin.value.nameGroup);}// Build the environment object. Arguments and other information will
// be made available to the begin and end methods using properties.
var env=__WEBPACK_IMPORTED_MODULE_3__environments__["a"/* default */][envName];var _parseArguments=this.parseArguments("\\begin{"+envName+"}",env),args=_parseArguments.args,optArgs=_parseArguments.optArgs;var context={mode:this.mode,envName:envName,parser:this};var _result=env.handler(context,args,optArgs);this.expect("\\end",false);var endNameToken=this.nextToken;var end=this.parseFunction();if(!end){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("failed to parse function after \\end");}else if(end.value.name!==envName){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Mismatch: \\begin{"+envName+"} matched "+"by \\end{"+end.value.name+"}",endNameToken);}return _result;}else{// Defer to parseGivenFunction if it's not a function we handle
return this.parseGivenFunction(start,breakOnTokenText);}}/**
         * Parses an entire function, including its base and all of its arguments.
         * It also handles the case where the parsed node is not a function.
         */},{key:"parseFunction",value:function parseFunction(){var baseGroup=this.parseGroup();return baseGroup?this.parseGivenFunction(baseGroup):null;}/**
         * Same as parseFunction(), except that the base is provided, guaranteeing a
         * non-nullable result.
         */},{key:"parseGivenFunction",value:function parseGivenFunction(baseGroup,breakOnTokenText){baseGroup=assertFuncOrArg(baseGroup);if(baseGroup.type==="fn"){var func=baseGroup.result;var funcData=__WEBPACK_IMPORTED_MODULE_2__functions__["a"/* default */][func];if(this.mode==="text"&&!funcData.allowedInText){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Can't use function '"+func+"' in text mode",baseGroup.token);}else if(this.mode==="math"&&funcData.allowedInMath===false){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Can't use function '"+func+"' in math mode",baseGroup.token);}var _parseArguments2=this.parseArguments(func,funcData),args=_parseArguments2.args,optArgs=_parseArguments2.optArgs;var _token=baseGroup.token;var _result2=this.callFunction(func,args,optArgs,_token,breakOnTokenText);return new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */](_result2.type,_result2,this.mode);}else{return baseGroup.result;}}/**
         * Call a function handler with a suitable context and arguments.
         */},{key:"callFunction",value:function callFunction(name,args,optArgs,token,breakOnTokenText){var context={funcName:name,parser:this,token:token,breakOnTokenText:breakOnTokenText};var func=__WEBPACK_IMPORTED_MODULE_2__functions__["a"/* default */][name];if(func&&func.handler){return func.handler(context,args,optArgs);}else{throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("No function handler for "+name);}}/**
         * Parses the arguments of a function or environment
         */},{key:"parseArguments",value:function parseArguments(func,// Should look like "\name" or "\begin{name}".
funcData){var totalArgs=funcData.numArgs+funcData.numOptionalArgs;if(totalArgs===0){return{args:[],optArgs:[]};}var baseGreediness=funcData.greediness;var args=[];var optArgs=[];for(var i=0;i<totalArgs;i++){var argType=funcData.argTypes&&funcData.argTypes[i];var isOptional=i<funcData.numOptionalArgs;// Ignore spaces between arguments.  As the TeXbook says:
// "After you have said ‘\def\row#1#2{...}’, you are allowed to
//  put spaces between the arguments (e.g., ‘\row x n’), because
//  TeX doesn’t use single spaces as undelimited arguments."
if(i>0&&!isOptional){this.consumeSpaces();}// Also consume leading spaces in math mode, as parseSymbol
// won't know what to do with them.  This can only happen with
// macros, e.g. \frac\foo\foo where \foo expands to a space symbol.
// In LaTeX, the \foo's get treated as (blank) arguments).
// In KaTeX, for now, both spaces will get consumed.
// TODO(edemaine)
if(i===0&&!isOptional&&this.mode==="math"){this.consumeSpaces();}var nextToken=this.nextToken;var arg=argType?this.parseGroupOfType(argType,isOptional):this.parseGroup(isOptional);if(!arg){if(isOptional){optArgs.push(null);continue;}if(!this.settings.throwOnError&&this.nextToken.text[0]==="\\"){arg=newArgument(this.handleUnsupportedCmd(),nextToken);}else{throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Expected group after '"+func+"'",nextToken);}}var argNode=void 0;arg=assertFuncOrArg(arg);if(arg.type==="fn"){var argGreediness=__WEBPACK_IMPORTED_MODULE_2__functions__["a"/* default */][arg.result].greediness;if(argGreediness>baseGreediness){argNode=this.parseGivenFunction(arg);}else{throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Got function '"+arg.result+"' as "+"argument to '"+func+"'",nextToken);}}else{argNode=arg.result;}(isOptional?optArgs:args).push(argNode);}return{args:args,optArgs:optArgs};}/**
         * Parses a group when the mode is changing.
         */},{key:"parseGroupOfType",value:function parseGroupOfType(type,// Used to describe the mode in error messages.
optional){// Handle `original` argTypes
if(type==="original"){type=this.mode;}if(type==="color"){return this.parseColorGroup(optional);}if(type==="size"){return this.parseSizeGroup(optional);}if(type==="url"){return this.parseUrlGroup(optional);}// By the time we get here, type is one of "text" or "math".
// Specify this as mode to parseGroup.
return this.parseGroup(optional,type);}},{key:"consumeSpaces",value:function consumeSpaces(){while(this.nextToken.text===" "){this.consume();}}/**
         * Parses a group, essentially returning the string formed by the
         * brace-enclosed tokens plus some position information.
         */},{key:"parseStringGroup",value:function parseStringGroup(modeName,// Used to describe the mode in error messages.
optional){if(optional&&this.nextToken.text!=="["){return null;}var outerMode=this.mode;this.mode="text";this.expect(optional?"[":"{");var str="";var firstToken=this.nextToken;var lastToken=firstToken;while(this.nextToken.text!==(optional?"]":"}")){if(this.nextToken.text==="EOF"){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Unexpected end of input in "+modeName,firstToken.range(this.nextToken,str));}lastToken=this.nextToken;str+=lastToken.text;this.consume();}this.mode=outerMode;this.expect(optional?"]":"}");return firstToken.range(lastToken,str);}/**
         * Parses a group, essentially returning the string formed by the
         * brace-enclosed tokens plus some position information, possibly
         * with nested braces.
         */},{key:"parseStringGroupWithBalancedBraces",value:function parseStringGroupWithBalancedBraces(modeName,// Used to describe the mode in error messages.
optional){if(optional&&this.nextToken.text!=="["){return null;}var outerMode=this.mode;this.mode="text";this.expect(optional?"[":"{");var str="";var nest=0;var firstToken=this.nextToken;var lastToken=firstToken;while(nest>0||this.nextToken.text!==(optional?"]":"}")){if(this.nextToken.text==="EOF"){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Unexpected end of input in "+modeName,firstToken.range(this.nextToken,str));}lastToken=this.nextToken;str+=lastToken.text;if(lastToken.text==="{"){nest+=1;}else if(lastToken.text==="}"){if(nest<=0){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Unbalanced brace of input in "+modeName,firstToken.range(this.nextToken,str));}else{nest-=1;}}this.consume();}this.mode=outerMode;this.expect(optional?"]":"}");return firstToken.range(lastToken,str);}/**
         * Parses a regex-delimited group: the largest sequence of tokens
         * whose concatenated strings match `regex`. Returns the string
         * formed by the tokens plus some position information.
         */},{key:"parseRegexGroup",value:function parseRegexGroup(regex,modeName){var outerMode=this.mode;this.mode="text";var firstToken=this.nextToken;var lastToken=firstToken;var str="";while(this.nextToken.text!=="EOF"&&regex.test(str+this.nextToken.text)){lastToken=this.nextToken;str+=lastToken.text;this.consume();}if(str===""){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Invalid "+modeName+": '"+firstToken.text+"'",firstToken);}this.mode=outerMode;return firstToken.range(lastToken,str);}/**
         * Parses a color description.
         */},{key:"parseColorGroup",value:function parseColorGroup(optional){var res=this.parseStringGroup("color",optional);if(!res){return null;}var match=/^(#[a-f0-9]{3}|#[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);if(!match){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Invalid color: '"+res.text+"'",res);}return newArgument(new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("color",match[0],this.mode),res);}/**
         * Parses a url string.
         */},{key:"parseUrlGroup",value:function parseUrlGroup(optional){var res=this.parseStringGroupWithBalancedBraces("url",optional);if(!res){return null;}var raw=res.text;// hyperref package allows backslashes alone in href, but doesn't generate
// valid links in such cases; we interpret this as "undefiend" behaviour,
// and keep them as-is. Some browser will replace backslashes with
// forward slashes.
var url=raw.replace(/\\([#$%&~_^{}])/g,'$1');return newArgument(new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("url",url,this.mode),res);}/**
         * Parses a size specification, consisting of magnitude and unit.
         */},{key:"parseSizeGroup",value:function parseSizeGroup(optional){var res=void 0;if(!optional&&this.nextToken.text!=="{"){res=this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/,"size");}else{res=this.parseStringGroup("size",optional);}if(!res){return null;}var match=/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(res.text);if(!match){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Invalid size: '"+res.text+"'",res);}var data={number:+(match[1]+match[2]),// sign + magnitude, cast to number
unit:match[3]};if(!Object(__WEBPACK_IMPORTED_MODULE_6__units__["b"/* validUnit */])(data)){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Invalid unit: '"+data.unit+"'",res);}return newArgument(new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("size",data,this.mode),res);}/**
         * If `optional` is false or absent, this parses an ordinary group,
         * which is either a single nucleus (like "x") or an expression
         * in braces (like "{x+y}").
         * If `optional` is true, it parses either a bracket-delimited expression
         * (like "[x+y]") or returns null to indicate the absence of a
         * bracket-enclosed group.
         * If `mode` is present, switches to that mode while parsing the group,
         * and switches back after.
         */},{key:"parseGroup",value:function parseGroup(optional,mode){var outerMode=this.mode;var firstToken=this.nextToken;// Try to parse an open brace
if(this.nextToken.text===(optional?"[":"{")){// Switch to specified mode before we expand symbol after brace
if(mode){this.switchMode(mode);}// If we get a brace, parse an expression
this.consume();var expression=this.parseExpression(false,optional?"]":"}");var lastToken=this.nextToken;// Switch mode back before consuming symbol after close brace
if(mode){this.switchMode(outerMode);}// Make sure we get a close brace
this.expect(optional?"]":"}");if(mode==="text"){this.formLigatures(expression);}return newArgument(new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("ordgroup",expression,this.mode,firstToken,lastToken),firstToken.range(lastToken,firstToken.text));}else{// Otherwise, just return a nucleus, or nothing for an optional group
if(mode){this.switchMode(mode);}var _result3=optional?null:this.parseSymbol();if(mode){this.switchMode(outerMode);}return _result3;}}/**
         * Form ligature-like combinations of characters for text mode.
         * This includes inputs like "--", "---", "``" and "''".
         * The result will simply replace multiple textord nodes with a single
         * character in each value by a single textord node having multiple
         * characters in its value.  The representation is still ASCII source.
         * The group will be modified in place.
         */},{key:"formLigatures",value:function formLigatures(group){var n=group.length-1;for(var i=0;i<n;++i){var a=group[i];var v=a.value;if(v==="-"&&group[i+1].value==="-"){if(i+1<n&&group[i+2].value==="-"){group.splice(i,3,new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("textord","---","text",a,group[i+2]));n-=2;}else{group.splice(i,2,new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("textord","--","text",a,group[i+1]));n-=1;}}if((v==="'"||v==="`")&&group[i+1].value===v){group.splice(i,2,new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("textord",v+v,"text",a,group[i+1]));n-=1;}}}/**
         * Parse a single symbol out of the string. Here, we handle both the functions
         * we have defined, as well as the single character symbols
         */},{key:"parseSymbol",value:function parseSymbol(){var nucleus=this.nextToken;var text=nucleus.text;if(__WEBPACK_IMPORTED_MODULE_2__functions__["a"/* default */][text]){this.consume();// If there exists a function with this name, we return the function and
// say that it is a function.
return newFunction(nucleus);}else if(/^\\verb[^a-zA-Z]/.test(text)){this.consume();var arg=text.slice(5);var star=arg.charAt(0)==="*";if(star){arg=arg.slice(1);}// Lexer's tokenRegex is constructed to always have matching
// first/last characters.
if(arg.length<2||arg.charAt(0)!==arg.slice(-1)){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("\\verb assertion failed --\n                    please report what input caused this bug");}arg=arg.slice(1,-1);// remove first and last char
return newArgument(new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("verb",{body:arg,star:star},"text"),nucleus);}else if(text==="$"){return newDollar(nucleus);}// At this point, we should have a symbol, possibly with accents.
// First expand any accented base symbol according to unicodeSymbols.
if(__WEBPACK_IMPORTED_MODULE_9__unicodeSymbols__["a"/* default */].hasOwnProperty(text[0])&&!__WEBPACK_IMPORTED_MODULE_5__symbols__["a"/* default */][this.mode][text[0]]){text=__WEBPACK_IMPORTED_MODULE_9__unicodeSymbols__["a"/* default */][text[0]]+text.substr(1);}// Strip off any combining characters
var match=__WEBPACK_IMPORTED_MODULE_12__Lexer_js__["a"/* combiningDiacriticalMarksEndRegex */].exec(text);if(match){text=text.substring(0,match.index);if(text==='i'){text='\u0131';// dotless i, in math and text mode
}else if(text==='j'){text='\u0237';// dotless j, in math and text mode
}}// Recognize base symbol
var symbol=null;if(__WEBPACK_IMPORTED_MODULE_5__symbols__["a"/* default */][this.mode][text]){symbol=new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */](__WEBPACK_IMPORTED_MODULE_5__symbols__["a"/* default */][this.mode][text].group,text,this.mode,nucleus);}else if(this.mode==="text"&&Object(__WEBPACK_IMPORTED_MODULE_7__unicodeScripts__["b"/* supportedCodepoint */])(text.charCodeAt(0))){symbol=new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("textord",text,this.mode,nucleus);}else{return null;// EOF, ^, _, {, }, etc.
}this.consume();// Transform combining characters into accents
if(match){for(var i=0;i<match[0].length;i++){var accent=match[0][i];if(!__WEBPACK_IMPORTED_MODULE_8__unicodeAccents___default.a[accent]){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Unknown accent ' "+accent+"'",nucleus);}var command=__WEBPACK_IMPORTED_MODULE_8__unicodeAccents___default.a[accent][this.mode];if(!command){throw new __WEBPACK_IMPORTED_MODULE_11__ParseError__["a"/* default */]("Accent "+accent+" unsupported in "+this.mode+" mode",nucleus);}symbol=new __WEBPACK_IMPORTED_MODULE_10__ParseNode__["a"/* default */]("accent",{type:"accent",label:command,isStretchy:false,isShifty:true,base:symbol},this.mode,nucleus);}}return newArgument(symbol,nucleus);}}]);return Parser;}();Parser.endOfExpression=["}","\\end","\\right","&","\\\\","\\cr"];Parser.SUPSUB_GREEDINESS=1;/* harmony default export */__webpack_exports__["a"]=Parser;/***/},/* 115 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__ParseError__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__ParseNode__=__webpack_require__(14);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__functions_sqrt__=__webpack_require__(116);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__functions_color__=__webpack_require__(117);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__functions_text__=__webpack_require__(118);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__functions_enclose__=__webpack_require__(119);/* harmony import */var __WEBPACK_IMPORTED_MODULE_7__functions_overline__=__webpack_require__(120);/* harmony import */var __WEBPACK_IMPORTED_MODULE_8__functions_underline__=__webpack_require__(121);/* harmony import */var __WEBPACK_IMPORTED_MODULE_9__functions_rule__=__webpack_require__(122);/* harmony import */var __WEBPACK_IMPORTED_MODULE_10__functions_kern__=__webpack_require__(123);/* harmony import */var __WEBPACK_IMPORTED_MODULE_11__functions_phantom__=__webpack_require__(124);/* harmony import */var __WEBPACK_IMPORTED_MODULE_12__functions_mod__=__webpack_require__(125);/* harmony import */var __WEBPACK_IMPORTED_MODULE_13__functions_op__=__webpack_require__(126);/* harmony import */var __WEBPACK_IMPORTED_MODULE_14__functions_operatorname__=__webpack_require__(127);/* harmony import */var __WEBPACK_IMPORTED_MODULE_15__functions_genfrac__=__webpack_require__(128);/* harmony import */var __WEBPACK_IMPORTED_MODULE_16__functions_lap__=__webpack_require__(129);/* harmony import */var __WEBPACK_IMPORTED_MODULE_17__functions_smash__=__webpack_require__(130);/* harmony import */var __WEBPACK_IMPORTED_MODULE_18__functions_delimsizing__=__webpack_require__(131);/* harmony import */var __WEBPACK_IMPORTED_MODULE_19__functions_sizing__=__webpack_require__(60);/* harmony import */var __WEBPACK_IMPORTED_MODULE_20__functions_styling__=__webpack_require__(132);/* harmony import */var __WEBPACK_IMPORTED_MODULE_21__functions_font__=__webpack_require__(133);/* harmony import */var __WEBPACK_IMPORTED_MODULE_22__functions_accent__=__webpack_require__(137);/* harmony import */var __WEBPACK_IMPORTED_MODULE_23__functions_accentunder__=__webpack_require__(138);/* harmony import */var __WEBPACK_IMPORTED_MODULE_24__functions_verb__=__webpack_require__(139);/* harmony import */var __WEBPACK_IMPORTED_MODULE_25__functions_href__=__webpack_require__(140);/* harmony import */var __WEBPACK_IMPORTED_MODULE_26__functions_mathchoice__=__webpack_require__(141);/** Include this to ensure that all functions are defined. */// WARNING: New functions should be added to src/functions and imported here.
var functions=__WEBPACK_IMPORTED_MODULE_2__defineFunction__["a"/* _functions */];/* harmony default export */__webpack_exports__["a"]=functions;// Define a convenience function that mimcs the old semantics of defineFunction
// to support existing code so that we can migrate it a little bit at a time.
var defineFunction=function defineFunction(names,props,handler)// null only if handled in parser
{Object(__WEBPACK_IMPORTED_MODULE_2__defineFunction__["b"/* default */])({names:names,props:props,handler:handler});};// TODO(kevinb): have functions return an object and call defineFunction with
// that object in this file instead of relying on side-effects.
// Math class commands except \mathop
defineFunction(["\\mathord","\\mathbin","\\mathrel","\\mathopen","\\mathclose","\\mathpunct","\\mathinner"],{numArgs:1},function(context,args){var body=args[0];return{type:"mclass",mclass:"m"+context.funcName.substr(5),value:Object(__WEBPACK_IMPORTED_MODULE_2__defineFunction__["c"/* ordargument */])(body)};});// Build a relation by placing one symbol on top of another
defineFunction(["\\stackrel"],{numArgs:2},function(context,args){var top=args[0];var bottom=args[1];var bottomop=new __WEBPACK_IMPORTED_MODULE_1__ParseNode__["a"/* default */]("op",{type:"op",limits:true,alwaysHandleSupSub:true,symbol:false,value:Object(__WEBPACK_IMPORTED_MODULE_2__defineFunction__["c"/* ordargument */])(bottom)},bottom.mode);var supsub=new __WEBPACK_IMPORTED_MODULE_1__ParseNode__["a"/* default */]("supsub",{base:bottomop,sup:top,sub:null},top.mode);return{type:"mclass",mclass:"mrel",value:[supsub]};});var singleCharIntegrals={'\u222B':"\\int",'\u222C':"\\iint",'\u222D':"\\iiint",'\u222E':"\\oint"};// There are 2 flags for operators; whether they produce limits in
// displaystyle, and whether they are symbols and should grow in
// displaystyle. These four groups cover the four possible choices.
// No limits, not symbols
defineFunction(["\\arcsin","\\arccos","\\arctan","\\arctg","\\arcctg","\\arg","\\ch","\\cos","\\cosec","\\cosh","\\cot","\\cotg","\\coth","\\csc","\\ctg","\\cth","\\deg","\\dim","\\exp","\\hom","\\ker","\\lg","\\ln","\\log","\\sec","\\sin","\\sinh","\\sh","\\tan","\\tanh","\\tg","\\th"],{numArgs:0},function(context){return{type:"op",limits:false,symbol:false,body:context.funcName};});// Limits, not symbols
defineFunction(["\\det","\\gcd","\\inf","\\lim","\\max","\\min","\\Pr","\\sup"],{numArgs:0},function(context){return{type:"op",limits:true,symbol:false,body:context.funcName};});// No limits, symbols
defineFunction(["\\int","\\iint","\\iiint","\\oint",'\u222B','\u222C','\u222D','\u222E'],{numArgs:0},function(context){var fName=context.funcName;if(fName.length===1){fName=singleCharIntegrals[fName];}return{type:"op",limits:false,symbol:true,body:fName};});// Horizontal stretchy braces
defineFunction(["\\overbrace",'\\underbrace'],{numArgs:1},function(context,args){var base=args[0];return{type:"horizBrace",label:context.funcName,isOver:/^\\over/.test(context.funcName),base:base};});// Stretchy accents under the body
// Stretchy arrows with an optional argument
defineFunction(["\\xleftarrow","\\xrightarrow","\\xLeftarrow","\\xRightarrow","\\xleftrightarrow","\\xLeftrightarrow","\\xhookleftarrow","\\xhookrightarrow","\\xmapsto","\\xrightharpoondown","\\xrightharpoonup","\\xleftharpoondown","\\xleftharpoonup","\\xrightleftharpoons","\\xleftrightharpoons","\\xlongequal","\\xtwoheadrightarrow","\\xtwoheadleftarrow","\\xtofrom",// The next 3 functions are here to support the mhchem extension.
// Direct use of these functions is discouraged and may break someday.
"\\xrightleftarrows","\\xrightequilibrium","\\xleftequilibrium"],{numArgs:1,numOptionalArgs:1},function(context,args,optArgs){var below=optArgs[0];var body=args[0];return{type:"xArrow",// x for extensible
label:context.funcName,body:body,below:below};});// Infix generalized fractions
defineFunction(["\\over","\\choose","\\atop"],{numArgs:0,infix:true},function(context){var replaceWith=void 0;switch(context.funcName){case"\\over":replaceWith="\\frac";break;case"\\choose":replaceWith="\\binom";break;case"\\atop":replaceWith="\\\\atopfrac";break;default:throw new Error("Unrecognized infix genfrac command");}return{type:"infix",replaceWith:replaceWith,token:context.token};});// Row breaks for aligned data
defineFunction(["\\\\","\\cr"],{numArgs:0,numOptionalArgs:1,argTypes:["size"]},function(context,args,optArgs){var size=optArgs[0];return{type:"cr",size:size};});// Environment delimiters
defineFunction(["\\begin","\\end"],{numArgs:1,argTypes:["text"]},function(context,args){var nameGroup=args[0];if(nameGroup.type!=="ordgroup"){throw new __WEBPACK_IMPORTED_MODULE_0__ParseError__["a"/* default */]("Invalid environment name",nameGroup);}var name="";for(var i=0;i<nameGroup.value.length;++i){name+=nameGroup.value[i].value;}return{type:"environment",name:name,nameGroup:nameGroup};});// Box manipulation
defineFunction(["\\raisebox"],{numArgs:2,argTypes:["size","text"],allowedInText:true},function(context,args){var amount=args[0];var body=args[1];return{type:"raisebox",dy:amount,body:body,value:Object(__WEBPACK_IMPORTED_MODULE_2__defineFunction__["c"/* ordargument */])(body)};});// Hyperlinks
// MathChoice
/***/},/* 116 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__domTree__=__webpack_require__(12);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__delimiter__=__webpack_require__(44);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__Style__=__webpack_require__(9);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_7__buildMathML__=__webpack_require__(2);Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"sqrt",names:["\\sqrt"],props:{numArgs:1,numOptionalArgs:1},handler:function handler(context,args,optArgs){var index=optArgs[0];var body=args[0];return{type:"sqrt",body:body,index:index};},htmlBuilder:function htmlBuilder(group,options){// Square roots are handled in the TeXbook pg. 443, Rule 11.
// First, we do the same steps as in overline to build the inner group
// and line
var inner=__WEBPACK_IMPORTED_MODULE_6__buildHTML__["b"/* buildGroup */](group.value.body,options.havingCrampedStyle());if(inner.height===0){// Render a small surd.
inner.height=options.fontMetrics().xHeight;}// Some groups can return document fragments.  Handle those by wrapping
// them in a span.
if(inner instanceof __WEBPACK_IMPORTED_MODULE_2__domTree__["a"/* default */].documentFragment){inner=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan([],[inner],options);}// Calculate the minimum size for the \surd delimiter
var metrics=options.fontMetrics();var theta=metrics.defaultRuleThickness;var phi=theta;if(options.style.id<__WEBPACK_IMPORTED_MODULE_5__Style__["a"/* default */].TEXT.id){phi=options.fontMetrics().xHeight;}// Calculate the clearance between the body and line
var lineClearance=theta+phi/4;var minDelimiterHeight=(inner.height+inner.depth+lineClearance+theta)*options.sizeMultiplier;// Create a sqrt SVG of the required minimum size
var _delimiter$sqrtImage=__WEBPACK_IMPORTED_MODULE_4__delimiter__["a"/* default */].sqrtImage(minDelimiterHeight,options),img=_delimiter$sqrtImage.span,ruleWidth=_delimiter$sqrtImage.ruleWidth;var delimDepth=img.height-ruleWidth;// Adjust the clearance based on the delimiter size
if(delimDepth>inner.height+inner.depth+lineClearance){lineClearance=(lineClearance+delimDepth-inner.height-inner.depth)/2;}// Shift the sqrt image
var imgShift=img.height-inner.height-lineClearance-ruleWidth;inner.style.paddingLeft=img.advanceWidth+"em";// Overlay the image and the argument.
var body=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:inner,wrapperClasses:["svg-align"]},{type:"kern",size:-(inner.height+imgShift)},{type:"elem",elem:img},{type:"kern",size:ruleWidth}]},options);if(!group.value.index){return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mord","sqrt"],[body],options);}else{// Handle the optional root index
// The index is always in scriptscript style
var newOptions=options.havingStyle(__WEBPACK_IMPORTED_MODULE_5__Style__["a"/* default */].SCRIPTSCRIPT);var rootm=__WEBPACK_IMPORTED_MODULE_6__buildHTML__["b"/* buildGroup */](group.value.index,newOptions,options);// The amount the index is shifted by. This is taken from the TeX
// source, in the definition of `\r@@t`.
var toShift=0.6*(body.height-body.depth);// Build a VList with the superscript shifted up correctly
var rootVList=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"shift",positionData:-toShift,children:[{type:"elem",elem:rootm}]},options);// Add a class surrounding it so we can add on the appropriate
// kerning
var rootVListWrap=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["root"],[rootVList]);return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mord","sqrt"],[rootVListWrap,body],options);}},mathmlBuilder:function mathmlBuilder(group,options){var node=void 0;if(group.value.index){node=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mroot",[__WEBPACK_IMPORTED_MODULE_7__buildMathML__["b"/* buildGroup */](group.value.body,options),__WEBPACK_IMPORTED_MODULE_7__buildMathML__["b"/* buildGroup */](group.value.index,options)]);}else{node=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("msqrt",[__WEBPACK_IMPORTED_MODULE_7__buildMathML__["b"/* buildGroup */](group.value.body,options)]);}return node;}});/***/},/* 117 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__ParseError__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__buildMathML__=__webpack_require__(2);var htmlBuilder=function htmlBuilder(group,options){var elements=__WEBPACK_IMPORTED_MODULE_4__buildHTML__["a"/* buildExpression */](group.value.value,options.withColor(group.value.color),false);// \color isn't supposed to affect the type of the elements it contains.
// To accomplish this, we wrap the results in a fragment, so the inner
// elements will be able to directly interact with their neighbors. For
// example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`
return new __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeFragment(elements);};var mathmlBuilder=function mathmlBuilder(group,options){var inner=__WEBPACK_IMPORTED_MODULE_5__buildMathML__["a"/* buildExpression */](group.value.value,options);var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mstyle",inner);node.setAttribute("mathcolor",group.value.color);return node;};Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"color",names:["\\textcolor"],props:{numArgs:2,allowedInText:true,greediness:3,argTypes:["color","original"]},handler:function handler(context,args){var color=args[0];var body=args[1];return{type:"color",color:color.value,value:Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"/* ordargument */])(body)};},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});// TODO(kevinb): define these using macros
Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"color",names:["\\blue","\\orange","\\pink","\\red","\\green","\\gray","\\purple","\\blueA","\\blueB","\\blueC","\\blueD","\\blueE","\\tealA","\\tealB","\\tealC","\\tealD","\\tealE","\\greenA","\\greenB","\\greenC","\\greenD","\\greenE","\\goldA","\\goldB","\\goldC","\\goldD","\\goldE","\\redA","\\redB","\\redC","\\redD","\\redE","\\maroonA","\\maroonB","\\maroonC","\\maroonD","\\maroonE","\\purpleA","\\purpleB","\\purpleC","\\purpleD","\\purpleE","\\mintA","\\mintB","\\mintC","\\grayA","\\grayB","\\grayC","\\grayD","\\grayE","\\grayF","\\grayG","\\grayH","\\grayI","\\kaBlue","\\kaGreen"],props:{numArgs:1,allowedInText:true,greediness:3},handler:function handler(context,args){var body=args[0];return{type:"color",color:"katex-"+context.funcName.slice(1),value:Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"/* ordargument */])(body)};},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"color",names:["\\color"],props:{numArgs:1,allowedInText:true,greediness:3,argTypes:["color"]},handler:function handler(context,args){var parser=context.parser,breakOnTokenText=context.breakOnTokenText;var color=args[0];if(!color){throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"/* default */]("\\color not followed by color");}// If we see a styling function, parse out the implicit body
var body=parser.parseExpression(true,breakOnTokenText);return{type:"color",color:color.value,value:body};},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});/***/},/* 118 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__buildMathML__=__webpack_require__(2);// Non-mathy text, possibly in a font
var textFontFamilies={"\\text":undefined,"\\textrm":"textrm","\\textsf":"textsf","\\texttt":"texttt","\\textnormal":"textrm"};var textFontWeights={"\\textbf":"textbf"};var textFontShapes={"\\textit":"textit"};Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"text",names:[// Font families
"\\text","\\textrm","\\textsf","\\texttt","\\textnormal",// Font weights
"\\textbf",// Font Shapes
"\\textit"],props:{numArgs:1,argTypes:["text"],greediness:2,allowedInText:true},handler:function handler(context,args){var body=args[0];return{type:"text",body:Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"/* ordargument */])(body),font:context.funcName};},htmlBuilder:function htmlBuilder(group,options){var font=group.value.font;// Checks if the argument is a font family or a font style.
var newOptions=void 0;if(textFontFamilies[font]){newOptions=options.withFontFamily(textFontFamilies[font]);}else if(textFontWeights[font]){newOptions=options.withFontWeight(textFontWeights[font]);}else{newOptions=options.withFontShape(textFontShapes[font]);}var inner=__WEBPACK_IMPORTED_MODULE_3__buildHTML__["a"/* buildExpression */](group.value.body,newOptions,true);__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].tryCombineChars(inner);return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mord","text"],inner,newOptions);},mathmlBuilder:function mathmlBuilder(group,options){var body=group.value.body;// Convert each element of the body into MathML, and combine consecutive
// <mtext> outputs into a single <mtext> tag.  In this way, we don't
// nest non-text items (e.g., $nested-math$) within an <mtext>.
var inner=[];var currentText=null;for(var i=0;i<body.length;i++){var _group=__WEBPACK_IMPORTED_MODULE_4__buildMathML__["b"/* buildGroup */](body[i],options);if(_group.type==='mtext'&&currentText!=null){Array.prototype.push.apply(currentText.children,_group.children);}else{inner.push(_group);if(_group.type==='mtext'){currentText=_group;}}}// If there is a single tag in the end (presumably <mtext>),
// just return it.  Otherwise, wrap them in an <mrow>.
if(inner.length===1){return inner[0];}else{return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mrow",inner);}}});/***/},/* 119 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__utils__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__stretchy__=__webpack_require__(13);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__buildMathML__=__webpack_require__(2);var htmlBuilder=function htmlBuilder(group,options){// \cancel, \bcancel, \xcancel, \sout, \fbox, \colorbox, \fcolorbox
var inner=__WEBPACK_IMPORTED_MODULE_5__buildHTML__["b"/* buildGroup */](group.value.body,options);var label=group.value.label.substr(1);var scale=options.sizeMultiplier;var img=void 0;var imgShift=0;var isColorbox=/color/.test(label);if(label==="sout"){img=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["stretchy","sout"]);img.height=options.fontMetrics().defaultRuleThickness/scale;imgShift=-0.5*options.fontMetrics().xHeight;}else{// Add horizontal padding
inner.classes.push(/cancel/.test(label)?"cancel-pad":"boxpad");// Add vertical padding
var vertPad=0;// ref: LaTeX source2e: \fboxsep = 3pt;  \fboxrule = .4pt
// ref: cancel package: \advance\totalheight2\p@ % "+2"
if(/box/.test(label)){vertPad=label==="colorbox"?0.3:0.34;}else{vertPad=__WEBPACK_IMPORTED_MODULE_3__utils__["a"/* default */].isCharacterBox(group.value.body)?0.2:0;}img=__WEBPACK_IMPORTED_MODULE_4__stretchy__["a"/* default */].encloseSpan(inner,label,vertPad,options);imgShift=inner.depth+vertPad;if(isColorbox){img.style.backgroundColor=group.value.backgroundColor.value;if(label==="fcolorbox"){img.style.borderColor=group.value.borderColor.value;}}}var vlist=void 0;if(isColorbox){vlist=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"individualShift",children:[// Put the color background behind inner;
{type:"elem",elem:img,shift:imgShift},{type:"elem",elem:inner,shift:0}]},options);}else{vlist=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"individualShift",children:[// Write the \cancel stroke on top of inner.
{type:"elem",elem:inner,shift:0},{type:"elem",elem:img,shift:imgShift,wrapperClasses:/cancel/.test(label)?["svg-align"]:[]}]},options);}if(/cancel/.test(label)){// cancel does not create horiz space for its line extension.
// That is, not when adjacent to a mord.
return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mord","cancel-lap"],[vlist],options);}else{return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mord"],[vlist],options);}};var mathmlBuilder=function mathmlBuilder(group,options){var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("menclose",[__WEBPACK_IMPORTED_MODULE_6__buildMathML__["b"/* buildGroup */](group.value.body,options)]);switch(group.value.label){case"\\cancel":node.setAttribute("notation","updiagonalstrike");break;case"\\bcancel":node.setAttribute("notation","downdiagonalstrike");break;case"\\sout":node.setAttribute("notation","horizontalstrike");break;case"\\fbox":node.setAttribute("notation","box");break;case"\\colorbox":node.setAttribute("mathbackground",group.value.backgroundColor.value);break;case"\\fcolorbox":node.setAttribute("mathbackground",group.value.backgroundColor.value);// TODO(ron): I don't know any way to set the border color.
node.setAttribute("notation","box");break;default:// xcancel
node.setAttribute("notation","updiagonalstrike downdiagonalstrike");}return node;};Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"enclose",names:["\\colorbox"],props:{numArgs:2,allowedInText:true,greediness:3,argTypes:["color","text"]},handler:function handler(context,args,optArgs){var color=args[0];var body=args[1];return{type:"enclose",label:context.funcName,backgroundColor:color,body:body};},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"enclose",names:["\\fcolorbox"],props:{numArgs:3,allowedInText:true,greediness:3,argTypes:["color","color","text"]},handler:function handler(context,args,optArgs){var borderColor=args[0];var backgroundColor=args[1];var body=args[2];return{type:"enclose",label:context.funcName,backgroundColor:backgroundColor,borderColor:borderColor,body:body};},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"enclose",names:["\\cancel","\\bcancel","\\xcancel","\\sout","\\fbox"],props:{numArgs:1},handler:function handler(context,args,optArgs){var body=args[0];return{type:"enclose",label:context.funcName,body:body};},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});/***/},/* 120 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__buildMathML__=__webpack_require__(2);Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"overline",names:["\\overline"],props:{numArgs:1},handler:function handler(context,args){var body=args[0];return{type:"overline",body:body};},htmlBuilder:function htmlBuilder(group,options){// Overlines are handled in the TeXbook pg 443, Rule 9.
// Build the inner group in the cramped style.
var innerGroup=__WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"/* buildGroup */](group.value.body,options.havingCrampedStyle());// Create the line above the body
var line=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeLineSpan("overline-line",options);// Generate the vlist, with the appropriate kerns
var vlist=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:innerGroup},// The kern on the next line would ordinarily be 3 * line.height
// But we put the line into a span that is 5 lines tall, to
// overcome a Chrome rendering issue. The SVG has a space in
// the bottom that is 2 lines high. That and the 1-line-high
// kern sum up to the same distance as the old 3 line kern.
{type:"kern",size:line.height},{type:"elem",elem:line}]},options);return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mord","overline"],[vlist],options);},mathmlBuilder:function mathmlBuilder(group,options){var operator=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mo",[new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].TextNode('\u203E')]);operator.setAttribute("stretchy","true");var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mover",[__WEBPACK_IMPORTED_MODULE_4__buildMathML__["b"/* buildGroup */](group.value.body,options),operator]);node.setAttribute("accent","true");return node;}});/***/},/* 121 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__buildMathML__=__webpack_require__(2);Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"underline",names:['\\underline'],props:{numArgs:1,allowedInText:true},handler:function handler(context,args){var body=args[0];return{type:"underline",body:body};},htmlBuilder:function htmlBuilder(group,options){// Underlines are handled in the TeXbook pg 443, Rule 10.
// Build the inner group.
var innerGroup=__WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"/* buildGroup */](group.value.body,options);// Create the line to go below the body
var line=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeLineSpan("underline-line",options);// Generate the vlist, with the appropriate kerns
var vlist=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"top",positionData:innerGroup.height,children:[// The SVG image is 5x as tall as the line.
// The bottom 2/5 of the image is blank and acts like a kern.
// So we omit the kern that would otherwise go at the bottom.
{type:"elem",elem:line},{type:"kern",size:5*line.height},{type:"elem",elem:innerGroup}]},options);return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mord","underline"],[vlist],options);},mathmlBuilder:function mathmlBuilder(group,options){var operator=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mo",[new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].TextNode('\u203E')]);operator.setAttribute("stretchy","true");var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("munder",[__WEBPACK_IMPORTED_MODULE_4__buildMathML__["b"/* buildGroup */](group.value.body,options),operator]);node.setAttribute("accentunder","true");return node;}});/***/},/* 122 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__units__=__webpack_require__(19);Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"/* default */])({type:"rule",names:["\\rule"],props:{numArgs:2,numOptionalArgs:1,argTypes:["size","size","size"]},handler:function handler(context,args,optArgs){var shift=optArgs[0];var width=args[0];var height=args[1];return{type:"rule",shift:shift&&shift.value,width:width.value,height:height.value};},htmlBuilder:function htmlBuilder(group,options){// Make an empty span for the rule
var rule=__WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"/* default */].makeSpan(["mord","rule"],[],options);// Calculate the shift, width, and height of the rule, and account for units
var shift=0;if(group.value.shift){shift=Object(__WEBPACK_IMPORTED_MODULE_3__units__["a"/* calculateSize */])(group.value.shift,options);}var width=Object(__WEBPACK_IMPORTED_MODULE_3__units__["a"/* calculateSize */])(group.value.width,options);var height=Object(__WEBPACK_IMPORTED_MODULE_3__units__["a"/* calculateSize */])(group.value.height,options);// Style the rule to the right size
rule.style.borderRightWidth=width+"em";rule.style.borderTopWidth=height+"em";rule.style.bottom=shift+"em";// Record the height and width
rule.width=width;rule.height=height+shift;rule.depth=-shift;// Font size is the number large enough that the browser will
// reserve at least `absHeight` space above the baseline.
// The 1.125 factor was empirically determined
rule.maxFontSize=height*1.125*options.sizeMultiplier;return rule;},mathmlBuilder:function mathmlBuilder(group,options){// TODO(emily): Figure out if there's an actual way to draw black boxes
// in MathML.
var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mrow");return node;}});/***/},/* 123 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__units__=__webpack_require__(19);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__ParseError__=__webpack_require__(6);/* eslint no-console:0 */// Horizontal spacing commands
// TODO: \hskip and \mskip should support plus and minus in lengths
Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"kern",names:["\\kern","\\mkern","\\hskip","\\mskip"],props:{numArgs:1,argTypes:["size"],allowedInText:true},handler:function handler(context,args){var mathFunction=context.funcName[1]==='m';// \mkern, \mskip
var muUnit=args[0].value.unit==='mu';if(mathFunction){if(!muUnit){typeof console!=="undefined"&&console.warn("In LaTeX, "+context.funcName+" supports only mu units, "+("not "+args[0].value.unit+" units"));}if(context.parser.mode!=="math"){throw new __WEBPACK_IMPORTED_MODULE_4__ParseError__["a"/* default */]("Can't use function '"+context.funcName+"' in text mode");}}else{// !mathFunction
if(muUnit){typeof console!=="undefined"&&console.warn("In LaTeX, "+context.funcName+" does not support mu units");}}return{type:"kern",dimension:args[0].value};},htmlBuilder:function htmlBuilder(group,options){return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeGlue(group.value.dimension,options);},mathmlBuilder:function mathmlBuilder(group,options){var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mspace");var dimension=Object(__WEBPACK_IMPORTED_MODULE_3__units__["a"/* calculateSize */])(group.value.dimension,options);node.setAttribute("width",dimension+"em");return node;}});/***/},/* 124 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__buildMathML__=__webpack_require__(2);Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"phantom",names:["\\phantom"],props:{numArgs:1},handler:function handler(context,args){var body=args[0];return{type:"phantom",value:Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"/* ordargument */])(body)};},htmlBuilder:function htmlBuilder(group,options){var elements=__WEBPACK_IMPORTED_MODULE_3__buildHTML__["a"/* buildExpression */](group.value.value,options.withPhantom(),false);// \phantom isn't supposed to affect the elements it contains.
// See "color" for more details.
return new __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeFragment(elements);},mathmlBuilder:function mathmlBuilder(group,options){var inner=__WEBPACK_IMPORTED_MODULE_4__buildMathML__["a"/* buildExpression */](group.value.value,options);return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mphantom",inner);}});Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"hphantom",names:["\\hphantom"],props:{numArgs:1},handler:function handler(context,args){var body=args[0];return{type:"hphantom",value:Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"/* ordargument */])(body),body:body};},htmlBuilder:function htmlBuilder(group,options){var node=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan([],[__WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"/* buildGroup */](group.value.body,options.withPhantom())]);node.height=0;node.depth=0;if(node.children){for(var i=0;i<node.children.length;i++){node.children[i].height=0;node.children[i].depth=0;}}// See smash for comment re: use of makeVList
node=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:node}]},options);return node;},mathmlBuilder:function mathmlBuilder(group,options){var inner=__WEBPACK_IMPORTED_MODULE_4__buildMathML__["a"/* buildExpression */](group.value.value,options);var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mphantom",inner);node.setAttribute("height","0px");return node;}});Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"vphantom",names:["\\vphantom"],props:{numArgs:1},handler:function handler(context,args){var body=args[0];return{type:"vphantom",value:Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"/* ordargument */])(body),body:body};},htmlBuilder:function htmlBuilder(group,options){var inner=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["inner"],[__WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"/* buildGroup */](group.value.body,options.withPhantom())]);var fix=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["fix"],[]);return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mord","rlap"],[inner,fix],options);},mathmlBuilder:function mathmlBuilder(group,options){var inner=__WEBPACK_IMPORTED_MODULE_4__buildMathML__["a"/* buildExpression */](group.value.value,options);var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mphantom",inner);node.setAttribute("width","0px");return node;}});/***/},/* 125 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__Style__=__webpack_require__(9);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__buildMathML__=__webpack_require__(2);// \mod-type functions
var htmlModBuilder=function htmlModBuilder(group,options){var inner=[];if(group.value.modType==="bmod"){// “\nonscript\mskip-\medmuskip\mkern5mu”, where \medmuskip is
// 4mu plus 2mu minus 1mu, translates to 1mu space in
// display/textstyle and 5mu space in script/scriptscriptstyle.
if(!options.style.isTight()){inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mspace","muspace"],[],options));}else{inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mspace","thickspace"],[],options));}}else if(options.style.size===__WEBPACK_IMPORTED_MODULE_3__Style__["a"/* default */].DISPLAY.size){inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mspace","quad"],[],options));}else if(group.value.modType==="mod"){inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mspace","twelvemuspace"],[],options));}else{inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mspace","eightmuspace"],[],options));}if(group.value.modType==="pod"||group.value.modType==="pmod"){inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].mathsym("(",group.mode));}if(group.value.modType!=="pod"){var modInner=[__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].mathsym("m",group.mode),__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].mathsym("o",group.mode),__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].mathsym("d",group.mode)];if(group.value.modType==="bmod"){inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mbin"],modInner,options));// “\mkern5mu\nonscript\mskip-\medmuskip” as above
if(!options.style.isTight()){inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mspace","muspace"],[],options));}else{inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mspace","thickspace"],[],options));}}else{Array.prototype.push.apply(inner,modInner);inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mspace","sixmuspace"],[],options));}}if(group.value.value){Array.prototype.push.apply(inner,__WEBPACK_IMPORTED_MODULE_4__buildHTML__["a"/* buildExpression */](group.value.value,options,false));}if(group.value.modType==="pod"||group.value.modType==="pmod"){inner.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].mathsym(")",group.mode));}return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeFragment(inner);};var mmlModBuilder=function mmlModBuilder(group,options){var inner=[];if(group.value.modType==="pod"||group.value.modType==="pmod"){inner.push(new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mo",[__WEBPACK_IMPORTED_MODULE_5__buildMathML__["e"/* makeText */]("(",group.mode)]));}if(group.value.modType!=="pod"){inner.push(new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mo",[__WEBPACK_IMPORTED_MODULE_5__buildMathML__["e"/* makeText */]("mod",group.mode)]));}if(group.value.value){var space=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mspace");space.setAttribute("width","0.333333em");inner.push(space);inner=inner.concat(__WEBPACK_IMPORTED_MODULE_5__buildMathML__["a"/* buildExpression */](group.value.value,options));}if(group.value.modType==="pod"||group.value.modType==="pmod"){inner.push(new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mo",[__WEBPACK_IMPORTED_MODULE_5__buildMathML__["e"/* makeText */](")",group.mode)]));}return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mo",inner);};Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"mod",names:["\\bmod"],props:{numArgs:0},handler:function handler(context,args){return{type:"mod",modType:"bmod",value:null};},htmlBuilder:htmlModBuilder,mathmlBuilder:mmlModBuilder});// Note: calling defineFunction with a type that's already been defined only
// works because the same htmlBuilder and mathmlBuilder are being used.
Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"mod",names:["\\pod","\\pmod","\\mod"],props:{numArgs:1},handler:function handler(context,args){var body=args[0];return{type:"mod",modType:context.funcName.substr(1),value:Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"/* ordargument */])(body)};},htmlBuilder:htmlModBuilder,mathmlBuilder:mmlModBuilder});/***/},/* 126 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__domTree__=__webpack_require__(12);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__utils__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__Style__=__webpack_require__(9);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_7__buildMathML__=__webpack_require__(2);// Limits, symbols
var htmlBuilder=function htmlBuilder(group,options){// Operators are handled in the TeXbook pg. 443-444, rule 13(a).
var supGroup=void 0;var subGroup=void 0;var hasLimits=false;if(group.type==="supsub"){// If we have limits, supsub will pass us its group to handle. Pull
// out the superscript and subscript and set the group to the op in
// its base.
supGroup=group.value.sup;subGroup=group.value.sub;group=group.value.base;hasLimits=true;}var style=options.style;// Most operators have a large successor symbol, but these don't.
var noSuccessor=["\\smallint"];var large=false;if(style.size===__WEBPACK_IMPORTED_MODULE_5__Style__["a"/* default */].DISPLAY.size&&group.value.symbol&&!__WEBPACK_IMPORTED_MODULE_4__utils__["a"/* default */].contains(noSuccessor,group.value.body)){// Most symbol operators get larger in displaystyle (rule 13)
large=true;}var base=void 0;if(group.value.symbol){// If this is a symbol, create the symbol.
var fontName=large?"Size2-Regular":"Size1-Regular";base=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSymbol(group.value.body,fontName,"math",options,["mop","op-symbol",large?"large-op":"small-op"]);}else if(group.value.value){// If this is a list, compose that list.
var inner=__WEBPACK_IMPORTED_MODULE_6__buildHTML__["a"/* buildExpression */](group.value.value,options,true);if(inner.length===1&&inner[0]instanceof __WEBPACK_IMPORTED_MODULE_2__domTree__["a"/* default */].symbolNode){base=inner[0];base.classes[0]="mop";// replace old mclass
}else{base=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mop"],inner,options);}}else{// Otherwise, this is a text operator. Build the text from the
// operator's name.
// TODO(emily): Add a space in the middle of some of these
// operators, like \limsup
var output=[];for(var i=1;i<group.value.body.length;i++){output.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].mathsym(group.value.body[i],group.mode));}base=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mop"],output,options);}// If content of op is a single symbol, shift it vertically.
var baseShift=0;var slant=0;if(base instanceof __WEBPACK_IMPORTED_MODULE_2__domTree__["a"/* default */].symbolNode){// Shift the symbol so its center lies on the axis (rule 13). It
// appears that our fonts have the centers of the symbols already
// almost on the axis, so these numbers are very small. Note we
// don't actually apply this here, but instead it is used either in
// the vlist creation or separately when there are no limits.
baseShift=(base.height-base.depth)/2-options.fontMetrics().axisHeight;// The slant of the symbol is just its italic correction.
slant=base.italic;}if(hasLimits){// IE 8 clips \int if it is in a display: inline-block. We wrap it
// in a new span so it is an inline, and works.
base=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan([],[base]);var sub=void 0;var sup=void 0;// We manually have to handle the superscripts and subscripts. This,
// aside from the kern calculations, is copied from supsub.
if(supGroup){var elem=__WEBPACK_IMPORTED_MODULE_6__buildHTML__["b"/* buildGroup */](supGroup,options.havingStyle(style.sup()),options);sup={elem:elem,kern:Math.max(options.fontMetrics().bigOpSpacing1,options.fontMetrics().bigOpSpacing3-elem.depth)};}if(subGroup){var _elem=__WEBPACK_IMPORTED_MODULE_6__buildHTML__["b"/* buildGroup */](subGroup,options.havingStyle(style.sub()),options);sub={elem:_elem,kern:Math.max(options.fontMetrics().bigOpSpacing2,options.fontMetrics().bigOpSpacing4-_elem.height)};}// Build the final group as a vlist of the possible subscript, base,
// and possible superscript.
var finalGroup=void 0;if(sup&&sub){var bottom=options.fontMetrics().bigOpSpacing5+sub.elem.height+sub.elem.depth+sub.kern+base.depth+baseShift;finalGroup=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"bottom",positionData:bottom,children:[{type:"kern",size:options.fontMetrics().bigOpSpacing5},{type:"elem",elem:sub.elem,marginLeft:-slant+"em"},{type:"kern",size:sub.kern},{type:"elem",elem:base},{type:"kern",size:sup.kern},{type:"elem",elem:sup.elem,marginLeft:slant+"em"},{type:"kern",size:options.fontMetrics().bigOpSpacing5}]},options);}else if(sub){var top=base.height-baseShift;// Shift the limits by the slant of the symbol. Note
// that we are supposed to shift the limits by 1/2 of the slant,
// but since we are centering the limits adding a full slant of
// margin will shift by 1/2 that.
finalGroup=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"top",positionData:top,children:[{type:"kern",size:options.fontMetrics().bigOpSpacing5},{type:"elem",elem:sub.elem,marginLeft:-slant+"em"},{type:"kern",size:sub.kern},{type:"elem",elem:base}]},options);}else if(sup){var _bottom=base.depth+baseShift;finalGroup=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"bottom",positionData:_bottom,children:[{type:"elem",elem:base},{type:"kern",size:sup.kern},{type:"elem",elem:sup.elem,marginLeft:slant+"em"},{type:"kern",size:options.fontMetrics().bigOpSpacing5}]},options);}else{// This case probably shouldn't occur (this would mean the
// supsub was sending us a group with no superscript or
// subscript) but be safe.
return base;}return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mop","op-limits"],[finalGroup],options);}else{if(baseShift){base.style.position="relative";base.style.top=baseShift+"em";}return base;}};var mathmlBuilder=function mathmlBuilder(group,options){var node=void 0;// TODO(emily): handle big operators using the `largeop` attribute
if(group.value.symbol){// This is a symbol. Just add the symbol.
node=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mo",[__WEBPACK_IMPORTED_MODULE_7__buildMathML__["e"/* makeText */](group.value.body,group.mode)]);}else if(group.value.value){// This is an operator with children. Add them.
node=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mo",__WEBPACK_IMPORTED_MODULE_7__buildMathML__["a"/* buildExpression */](group.value.value,options));}else{// This is a text operator. Add all of the characters from the
// operator's name.
// TODO(emily): Add a space in the middle of some of these
// operators, like \limsup.
node=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mi",[new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].TextNode(group.value.body.slice(1))]);// Append an <mo>&ApplyFunction;</mo>.
// ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4
var operator=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mo",[__WEBPACK_IMPORTED_MODULE_7__buildMathML__["e"/* makeText */]('\u2061',"text")]);return new __WEBPACK_IMPORTED_MODULE_2__domTree__["a"/* default */].documentFragment([node,operator]);}return node;};var singleCharBigOps={'\u220F':"\\prod",'\u2210':"\\coprod",'\u2211':"\\sum",'\u22C0':"\\bigwedge",'\u22C1':"\\bigvee",'\u22C2':"\\bigcap",'\u22C3':"\\bigcap",'\u2A00':"\\bigodot",'\u2A01':"\\bigoplus",'\u2A02':"\\bigotimes",'\u2A04':"\\biguplus",'\u2A06':"\\bigsqcup"};Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"op",names:["\\coprod","\\bigvee","\\bigwedge","\\biguplus","\\bigcap","\\bigcup","\\intop","\\prod","\\sum","\\bigotimes","\\bigoplus","\\bigodot","\\bigsqcup","\\smallint",'\u220F','\u2210','\u2211','\u22C0','\u22C1','\u22C2','\u22C3','\u2A00','\u2A01','\u2A02','\u2A04','\u2A06'],props:{numArgs:0},handler:function handler(context,args){var fName=context.funcName;if(fName.length===1){fName=singleCharBigOps[fName];}return{type:"op",limits:true,symbol:true,body:fName};},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});// Note: calling defineFunction with a type that's already been defined only
// works because the same htmlBuilder and mathmlBuilder are being used.
Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"op",names:["\\mathop"],props:{numArgs:1},handler:function handler(context,args){var body=args[0];return{type:"op",limits:false,symbol:false,value:Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"/* ordargument */])(body)};},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});/***/},/* 127 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__=__webpack_require__(18);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__domTree__=__webpack_require__(12);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__buildMathML__=__webpack_require__(2);// \operatorname
// amsopn.dtx: \mathop{#1\kern\z@\operator@font#3}\newmcodes@
Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"/* default */])({type:"operatorname",names:["\\operatorname"],props:{numArgs:1},handler:function handler(context,args){var body=args[0];return{type:"operatorname",value:Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["c"/* ordargument */])(body)};},htmlBuilder:function htmlBuilder(group,options){var output=[];if(group.value.value.length>0){var letter="";var mode="";var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(group.value.value),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var child=_step.value;// In the amsopn package, \newmcodes@ changes four
// characters, *-/:’, from math operators back into text.
if("*-/:".indexOf(child.value)!==-1){child.type="textord";}}// Consolidate Greek letter function names into symbol characters.
}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}var temp=__WEBPACK_IMPORTED_MODULE_5__buildHTML__["a"/* buildExpression */](group.value.value,options.withFontFamily("mathrm"),true);// All we want from temp are the letters. With them, we'll
// create a text operator similar to \tan or \cos.
var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(temp),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var _child=_step2.value;if(_child instanceof __WEBPACK_IMPORTED_MODULE_4__domTree__["a"/* default */].symbolNode){letter=_child.value;// In the amsopn package, \newmcodes@ changes four
// characters, *-/:’, from math operators back into text.
// Given what is in temp, we have to address two of them.
letter=letter.replace(/\u2212/,"-");// minus => hyphen
letter=letter.replace(/\u2217/,"*");// Use math mode for Greek letters
mode=/[\u0391-\u03D7]/.test(letter)?"math":"text";output.push(__WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"/* default */].mathsym(letter,mode));}else{output.push(_child);}}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}}return __WEBPACK_IMPORTED_MODULE_2__buildCommon__["a"/* default */].makeSpan(["mop"],output,options);},mathmlBuilder:function mathmlBuilder(group,options){// The steps taken here are similar to the html version.
var output=[];if(group.value.value.length>0){var temp=__WEBPACK_IMPORTED_MODULE_6__buildMathML__["a"/* buildExpression */](group.value.value,options.withFontFamily("mathrm"));var word=temp.map(function(node){return node.toText();}).join("");word=word.replace(/\u2212/g,"-");word=word.replace(/\u2217/g,"*");output=[new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].TextNode(word)];}var identifier=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mi",output);identifier.setAttribute("mathvariant","normal");// \u2061 is the same as &ApplyFunction;
// ref: https://www.w3schools.com/charsets/ref_html_entities_a.asp
var operator=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mo",[__WEBPACK_IMPORTED_MODULE_6__buildMathML__["e"/* makeText */]('\u2061',"text")]);return new __WEBPACK_IMPORTED_MODULE_4__domTree__["a"/* default */].documentFragment([identifier,operator]);}});/***/},/* 128 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__delimiter__=__webpack_require__(44);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__Style__=__webpack_require__(9);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__buildMathML__=__webpack_require__(2);Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"genfrac",names:["\\dfrac","\\frac","\\tfrac","\\dbinom","\\binom","\\tbinom","\\\\atopfrac"],props:{numArgs:2,greediness:2},handler:function handler(context,args){var numer=args[0];var denom=args[1];var hasBarLine=void 0;var leftDelim=null;var rightDelim=null;var size="auto";switch(context.funcName){case"\\dfrac":case"\\frac":case"\\tfrac":hasBarLine=true;break;case"\\\\atopfrac":hasBarLine=false;break;case"\\dbinom":case"\\binom":case"\\tbinom":hasBarLine=false;leftDelim="(";rightDelim=")";break;default:throw new Error("Unrecognized genfrac command");}switch(context.funcName){case"\\dfrac":case"\\dbinom":size="display";break;case"\\tfrac":case"\\tbinom":size="text";break;}return{type:"genfrac",numer:numer,denom:denom,hasBarLine:hasBarLine,leftDelim:leftDelim,rightDelim:rightDelim,size:size};},htmlBuilder:function htmlBuilder(group,options){// Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).
// Figure out what style this fraction should be in based on the
// function used
var style=options.style;if(group.value.size==="display"){style=__WEBPACK_IMPORTED_MODULE_4__Style__["a"/* default */].DISPLAY;}else if(group.value.size==="text"){style=__WEBPACK_IMPORTED_MODULE_4__Style__["a"/* default */].TEXT;}var nstyle=style.fracNum();var dstyle=style.fracDen();var newOptions=void 0;newOptions=options.havingStyle(nstyle);var numerm=__WEBPACK_IMPORTED_MODULE_5__buildHTML__["b"/* buildGroup */](group.value.numer,newOptions,options);newOptions=options.havingStyle(dstyle);var denomm=__WEBPACK_IMPORTED_MODULE_5__buildHTML__["b"/* buildGroup */](group.value.denom,newOptions,options);var rule=void 0;var ruleWidth=void 0;var ruleSpacing=void 0;if(group.value.hasBarLine){rule=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeLineSpan("frac-line",options);ruleWidth=rule.height;ruleSpacing=rule.height;}else{rule=null;ruleWidth=0;ruleSpacing=options.fontMetrics().defaultRuleThickness;}// Rule 15b
var numShift=void 0;var clearance=void 0;var denomShift=void 0;if(style.size===__WEBPACK_IMPORTED_MODULE_4__Style__["a"/* default */].DISPLAY.size){numShift=options.fontMetrics().num1;if(ruleWidth>0){clearance=3*ruleSpacing;}else{clearance=7*ruleSpacing;}denomShift=options.fontMetrics().denom1;}else{if(ruleWidth>0){numShift=options.fontMetrics().num2;clearance=ruleSpacing;}else{numShift=options.fontMetrics().num3;clearance=3*ruleSpacing;}denomShift=options.fontMetrics().denom2;}var frac=void 0;if(!rule){// Rule 15c
var candidateClearance=numShift-numerm.depth-(denomm.height-denomShift);if(candidateClearance<clearance){numShift+=0.5*(clearance-candidateClearance);denomShift+=0.5*(clearance-candidateClearance);}frac=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"individualShift",children:[{type:"elem",elem:denomm,shift:denomShift},{type:"elem",elem:numerm,shift:-numShift}]},options);}else{// Rule 15d
var axisHeight=options.fontMetrics().axisHeight;if(numShift-numerm.depth-(axisHeight+0.5*ruleWidth)<clearance){numShift+=clearance-(numShift-numerm.depth-(axisHeight+0.5*ruleWidth));}if(axisHeight-0.5*ruleWidth-(denomm.height-denomShift)<clearance){denomShift+=clearance-(axisHeight-0.5*ruleWidth-(denomm.height-denomShift));}var midShift=-(axisHeight-0.5*ruleWidth);frac=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"individualShift",children:[{type:"elem",elem:denomm,shift:denomShift},// The next line would ordinarily contain "shift: midShift".
// But we put the rule into a a span that is 5 rules tall,
// to overcome a Chrome rendering issue. Put another way,
// we've replaced a kern of width = 2 * ruleWidth with a
// bottom padding inside the SVG = 2 * ruleWidth.
{type:"elem",elem:rule,shift:midShift+2*ruleWidth},{type:"elem",elem:numerm,shift:-numShift}]},options);}// Since we manually change the style sometimes (with \dfrac or \tfrac),
// account for the possible size change here.
newOptions=options.havingStyle(style);frac.height*=newOptions.sizeMultiplier/options.sizeMultiplier;frac.depth*=newOptions.sizeMultiplier/options.sizeMultiplier;// Rule 15e
var delimSize=void 0;if(style.size===__WEBPACK_IMPORTED_MODULE_4__Style__["a"/* default */].DISPLAY.size){delimSize=options.fontMetrics().delim1;}else{delimSize=options.fontMetrics().delim2;}var leftDelim=void 0;var rightDelim=void 0;if(group.value.leftDelim==null){leftDelim=__WEBPACK_IMPORTED_MODULE_5__buildHTML__["e"/* makeNullDelimiter */](options,["mopen"]);}else{leftDelim=__WEBPACK_IMPORTED_MODULE_2__delimiter__["a"/* default */].customSizedDelim(group.value.leftDelim,delimSize,true,options.havingStyle(style),group.mode,["mopen"]);}if(group.value.rightDelim==null){rightDelim=__WEBPACK_IMPORTED_MODULE_5__buildHTML__["e"/* makeNullDelimiter */](options,["mclose"]);}else{rightDelim=__WEBPACK_IMPORTED_MODULE_2__delimiter__["a"/* default */].customSizedDelim(group.value.rightDelim,delimSize,true,options.havingStyle(style),group.mode,["mclose"]);}return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mord"].concat(newOptions.sizingClasses(options)),[leftDelim,__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mfrac"],[frac]),rightDelim],options);},mathmlBuilder:function mathmlBuilder(group,options){var node=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mfrac",[__WEBPACK_IMPORTED_MODULE_6__buildMathML__["b"/* buildGroup */](group.value.numer,options),__WEBPACK_IMPORTED_MODULE_6__buildMathML__["b"/* buildGroup */](group.value.denom,options)]);if(!group.value.hasBarLine){node.setAttribute("linethickness","0px");}if(group.value.leftDelim!=null||group.value.rightDelim!=null){var withDelims=[];if(group.value.leftDelim!=null){var leftOp=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mo",[new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].TextNode(group.value.leftDelim)]);leftOp.setAttribute("fence","true");withDelims.push(leftOp);}withDelims.push(node);if(group.value.rightDelim!=null){var rightOp=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mo",[new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].TextNode(group.value.rightDelim)]);rightOp.setAttribute("fence","true");withDelims.push(rightOp);}var outerNode=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mrow",withDelims);return outerNode;}return node;}});/***/},/* 129 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__buildMathML__=__webpack_require__(2);// Horizontal overlap functions
Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"lap",names:["\\mathllap","\\mathrlap","\\mathclap"],props:{numArgs:1,allowedInText:true},handler:function handler(context,args){var body=args[0];return{type:"lap",alignment:context.funcName.slice(5),body:body};},htmlBuilder:function htmlBuilder(group,options){// mathllap, mathrlap, mathclap
var inner=void 0;if(group.value.alignment==="clap"){// ref: https://www.math.lsu.edu/~aperlis/publications/mathclap/
inner=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan([],[__WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"/* buildGroup */](group.value.body,options)]);// wrap, since CSS will center a .clap > .inner > span
inner=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["inner"],[inner],options);}else{inner=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["inner"],[__WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"/* buildGroup */](group.value.body,options)]);}var fix=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["fix"],[]);return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mord",group.value.alignment],[inner,fix],options);},mathmlBuilder:function mathmlBuilder(group,options){// mathllap, mathrlap, mathclap
var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mpadded",[__WEBPACK_IMPORTED_MODULE_4__buildMathML__["b"/* buildGroup */](group.value.body,options)]);if(group.value.alignment!=="rlap"){var offset=group.value.alignment==="llap"?"-1":"-0.5";node.setAttribute("lspace",offset+"width");}node.setAttribute("width","0px");return node;}});/***/},/* 130 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__buildMathML__=__webpack_require__(2);// smash, with optional [tb], as in AMS
Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"smash",names:["\\smash"],props:{numArgs:1,numOptionalArgs:1,allowedInText:true},handler:function handler(context,args,optArgs){var smashHeight=false;var smashDepth=false;var tbArg=optArgs[0];if(tbArg){// Optional [tb] argument is engaged.
// ref: amsmath: \renewcommand{\smash}[1][tb]{%
//               def\mb@t{\ht}\def\mb@b{\dp}\def\mb@tb{\ht\z@\z@\dp}%
var letter="";for(var i=0;i<tbArg.value.length;++i){letter=tbArg.value[i].value;if(letter==="t"){smashHeight=true;}else if(letter==="b"){smashDepth=true;}else{smashHeight=false;smashDepth=false;break;}}}else{smashHeight=true;smashDepth=true;}var body=args[0];return{type:"smash",body:body,smashHeight:smashHeight,smashDepth:smashDepth};},htmlBuilder:function htmlBuilder(group,options){var node=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mord"],[__WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"/* buildGroup */](group.value.body,options)]);if(!group.value.smashHeight&&!group.value.smashDepth){return node;}if(group.value.smashHeight){node.height=0;// In order to influence makeVList, we have to reset the children.
if(node.children){for(var i=0;i<node.children.length;i++){node.children[i].height=0;}}}if(group.value.smashDepth){node.depth=0;if(node.children){for(var _i=0;_i<node.children.length;_i++){node.children[_i].depth=0;}}}// At this point, we've reset the TeX-like height and depth values.
// But the span still has an HTML line height.
// makeVList applies "display: table-cell", which prevents the browser
// from acting on that line height. So we'll call makeVList now.
return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:node}]},options);},mathmlBuilder:function mathmlBuilder(group,options){var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mpadded",[__WEBPACK_IMPORTED_MODULE_4__buildMathML__["b"/* buildGroup */](group.value.body,options)]);if(group.value.smashHeight){node.setAttribute("height","0px");}if(group.value.smashDepth){node.setAttribute("depth","0px");}return node;}});/***/},/* 131 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__delimiter__=__webpack_require__(44);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__ParseError__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__utils__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_7__buildMathML__=__webpack_require__(2);// Extra data needed for the delimiter handler down below
var delimiterSizes={"\\bigl":{mclass:"mopen",size:1},"\\Bigl":{mclass:"mopen",size:2},"\\biggl":{mclass:"mopen",size:3},"\\Biggl":{mclass:"mopen",size:4},"\\bigr":{mclass:"mclose",size:1},"\\Bigr":{mclass:"mclose",size:2},"\\biggr":{mclass:"mclose",size:3},"\\Biggr":{mclass:"mclose",size:4},"\\bigm":{mclass:"mrel",size:1},"\\Bigm":{mclass:"mrel",size:2},"\\biggm":{mclass:"mrel",size:3},"\\Biggm":{mclass:"mrel",size:4},"\\big":{mclass:"mord",size:1},"\\Big":{mclass:"mord",size:2},"\\bigg":{mclass:"mord",size:3},"\\Bigg":{mclass:"mord",size:4}};var delimiters=["(",")","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","\\lceil","\\rceil","<",">","\\langle",'\u27E8',"\\rangle",'\u27E9',"\\lt","\\gt","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","\\lmoustache","\\rmoustache","/","\\backslash","|","\\vert","\\|","\\Vert",'\\uparrow','\\Uparrow',"\\downarrow","\\Downarrow",'\\updownarrow','\\Updownarrow',"."];// Delimiter functions
function checkDelimiter(delim,context){if(__WEBPACK_IMPORTED_MODULE_5__utils__["a"/* default */].contains(delimiters,delim.value)){return delim;}else{throw new __WEBPACK_IMPORTED_MODULE_4__ParseError__["a"/* default */]("Invalid delimiter: '"+delim.value+"' after '"+context.funcName+"'",delim);}}Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"/* default */])({type:"delimsizing",names:["\\bigl","\\Bigl","\\biggl","\\Biggl","\\bigr","\\Bigr","\\biggr","\\Biggr","\\bigm","\\Bigm","\\biggm","\\Biggm","\\big","\\Big","\\bigg","\\Bigg"],props:{numArgs:1},handler:function handler(context,args){var delim=checkDelimiter(args[0],context);return{type:"delimsizing",size:delimiterSizes[context.funcName].size,mclass:delimiterSizes[context.funcName].mclass,value:delim.value};},htmlBuilder:function htmlBuilder(group,options){var delim=group.value.value;if(delim==="."){// Empty delimiters still count as elements, even though they don't
// show anything.
return __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"/* default */].makeSpan([group.value.mclass]);}// Use delimiter.sizedDelim to generate the delimiter.
return __WEBPACK_IMPORTED_MODULE_2__delimiter__["a"/* default */].sizedDelim(delim,group.value.size,options,group.mode,[group.value.mclass]);},mathmlBuilder:function mathmlBuilder(group){var children=[];if(group.value.value!=="."){children.push(__WEBPACK_IMPORTED_MODULE_7__buildMathML__["e"/* makeText */](group.value.value,group.mode));}var node=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mo",children);if(group.value.mclass==="mopen"||group.value.mclass==="mclose"){// Only some of the delimsizing functions act as fences, and they
// return "mopen" or "mclose" mclass.
node.setAttribute("fence","true");}else{// Explicitly disable fencing if it's not a fence, to override the
// defaults.
node.setAttribute("fence","false");}return node;}});Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"/* default */])({type:"leftright",names:["\\left","\\right"],props:{numArgs:1},handler:function handler(context,args){var delim=checkDelimiter(args[0],context);if(context.funcName==="\\left"){var parser=context.parser;// Parse out the implicit body
++parser.leftrightDepth;// parseExpression stops before '\\right'
var body=parser.parseExpression(false);--parser.leftrightDepth;// Check the next token
parser.expect("\\right",false);var right=parser.parseFunction();if(!right){throw new __WEBPACK_IMPORTED_MODULE_4__ParseError__["a"/* default */]('failed to parse function after \\right');}return{type:"leftright",body:body,left:delim.value,right:right.value.value};}else{// This is a little weird. We return this object which gets turned
// into a ParseNode which gets returned by
// `const right = parser.parseFunction();` up above.
return{type:"leftright",value:delim.value};}},htmlBuilder:function htmlBuilder(group,options){// Build the inner expression
var inner=__WEBPACK_IMPORTED_MODULE_6__buildHTML__["a"/* buildExpression */](group.value.body,options,true,[null,"mclose"]);var innerHeight=0;var innerDepth=0;var hadMiddle=false;// Calculate its height and depth
for(var i=0;i<inner.length;i++){if(inner[i].isMiddle){hadMiddle=true;}else{innerHeight=Math.max(inner[i].height,innerHeight);innerDepth=Math.max(inner[i].depth,innerDepth);}}// The size of delimiters is the same, regardless of what style we are
// in. Thus, to correctly calculate the size of delimiter we need around
// a group, we scale down the inner size based on the size.
innerHeight*=options.sizeMultiplier;innerDepth*=options.sizeMultiplier;var leftDelim=void 0;if(group.value.left==="."){// Empty delimiters in \left and \right make null delimiter spaces.
leftDelim=__WEBPACK_IMPORTED_MODULE_6__buildHTML__["e"/* makeNullDelimiter */](options,["mopen"]);}else{// Otherwise, use leftRightDelim to generate the correct sized
// delimiter.
leftDelim=__WEBPACK_IMPORTED_MODULE_2__delimiter__["a"/* default */].leftRightDelim(group.value.left,innerHeight,innerDepth,options,group.mode,["mopen"]);}// Add it to the beginning of the expression
inner.unshift(leftDelim);// Handle middle delimiters
if(hadMiddle){for(var _i=1;_i<inner.length;_i++){var middleDelim=inner[_i];if(middleDelim.isMiddle){// Apply the options that were active when \middle was called
inner[_i]=__WEBPACK_IMPORTED_MODULE_2__delimiter__["a"/* default */].leftRightDelim(middleDelim.isMiddle.value,innerHeight,innerDepth,middleDelim.isMiddle.options,group.mode,[]);}}}var rightDelim=void 0;// Same for the right delimiter
if(group.value.right==="."){rightDelim=__WEBPACK_IMPORTED_MODULE_6__buildHTML__["e"/* makeNullDelimiter */](options,["mclose"]);}else{rightDelim=__WEBPACK_IMPORTED_MODULE_2__delimiter__["a"/* default */].leftRightDelim(group.value.right,innerHeight,innerDepth,options,group.mode,["mclose"]);}// Add it to the end of the expression.
inner.push(rightDelim);return __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"/* default */].makeSpan(["minner"],inner,options);},mathmlBuilder:function mathmlBuilder(group,options){var inner=__WEBPACK_IMPORTED_MODULE_7__buildMathML__["a"/* buildExpression */](group.value.body,options);if(group.value.left!=="."){var leftNode=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mo",[__WEBPACK_IMPORTED_MODULE_7__buildMathML__["e"/* makeText */](group.value.left,group.mode)]);leftNode.setAttribute("fence","true");inner.unshift(leftNode);}if(group.value.right!=="."){var rightNode=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mo",[__WEBPACK_IMPORTED_MODULE_7__buildMathML__["e"/* makeText */](group.value.right,group.mode)]);rightNode.setAttribute("fence","true");inner.push(rightNode);}var outerNode=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mrow",inner);return outerNode;}});Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"/* default */])({type:"middle",names:["\\middle"],props:{numArgs:1},handler:function handler(context,args){var delim=checkDelimiter(args[0],context);if(!context.parser.leftrightDepth){throw new __WEBPACK_IMPORTED_MODULE_4__ParseError__["a"/* default */]("\\middle without preceding \\left",delim);}return{type:"middle",value:delim.value};},htmlBuilder:function htmlBuilder(group,options){var middleDelim=void 0;if(group.value.value==="."){middleDelim=__WEBPACK_IMPORTED_MODULE_6__buildHTML__["e"/* makeNullDelimiter */](options,[]);}else{middleDelim=__WEBPACK_IMPORTED_MODULE_2__delimiter__["a"/* default */].sizedDelim(group.value.value,1,options,group.mode,[]);middleDelim.isMiddle={value:group.value.value,options:options};}return middleDelim;},mathmlBuilder:function mathmlBuilder(group,options){var middleNode=new __WEBPACK_IMPORTED_MODULE_3__mathMLTree__["a"/* default */].MathNode("mo",[__WEBPACK_IMPORTED_MODULE_7__buildMathML__["e"/* makeText */](group.value.middle,group.mode)]);middleNode.setAttribute("fence","true");return middleNode;}});/***/},/* 132 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__Style__=__webpack_require__(9);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__sizing__=__webpack_require__(60);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__buildMathML__=__webpack_require__(2);var styleMap={"display":__WEBPACK_IMPORTED_MODULE_2__Style__["a"/* default */].DISPLAY,"text":__WEBPACK_IMPORTED_MODULE_2__Style__["a"/* default */].TEXT,"script":__WEBPACK_IMPORTED_MODULE_2__Style__["a"/* default */].SCRIPT,"scriptscript":__WEBPACK_IMPORTED_MODULE_2__Style__["a"/* default */].SCRIPTSCRIPT};Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"styling",names:["\\displaystyle","\\textstyle","\\scriptstyle","\\scriptscriptstyle"],props:{numArgs:0,allowedInText:true},handler:function handler(context,args){var breakOnTokenText=context.breakOnTokenText,funcName=context.funcName,parser=context.parser;// parse out the implicit body
parser.consumeSpaces();var body=parser.parseExpression(true,breakOnTokenText);return{type:"styling",// Figure out what style to use by pulling out the style from
// the function name
style:funcName.slice(1,funcName.length-5),value:body};},htmlBuilder:function htmlBuilder(group,options){// Style changes are handled in the TeXbook on pg. 442, Rule 3.
var newStyle=styleMap[group.value.style];var newOptions=options.havingStyle(newStyle);return Object(__WEBPACK_IMPORTED_MODULE_3__sizing__["a"/* sizingGroup */])(group.value.value,newOptions,options);},mathmlBuilder:function mathmlBuilder(group,options){// Figure out what style we're changing to.
// TODO(kevinb): dedupe this with buildHTML.js
// This will be easier of handling of styling nodes is in the same file.
var styleMap={"display":__WEBPACK_IMPORTED_MODULE_2__Style__["a"/* default */].DISPLAY,"text":__WEBPACK_IMPORTED_MODULE_2__Style__["a"/* default */].TEXT,"script":__WEBPACK_IMPORTED_MODULE_2__Style__["a"/* default */].SCRIPT,"scriptscript":__WEBPACK_IMPORTED_MODULE_2__Style__["a"/* default */].SCRIPTSCRIPT};var newStyle=styleMap[group.value.style];var newOptions=options.havingStyle(newStyle);var inner=__WEBPACK_IMPORTED_MODULE_4__buildMathML__["a"/* buildExpression */](group.value.value,newOptions);var node=new __WEBPACK_IMPORTED_MODULE_1__mathMLTree__["a"/* default */].MathNode("mstyle",inner);var styleAttributes={"display":["0","true"],"text":["0","false"],"script":["1","false"],"scriptscript":["2","false"]};var attr=styleAttributes[group.value.style];node.setAttribute("scriptlevel",attr[0]);node.setAttribute("displaystyle",attr[1]);return node;}});/***/},/* 133 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys__=__webpack_require__(134);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__ParseNode__=__webpack_require__(14);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__buildMathML__=__webpack_require__(2);// TODO(kevinb): implement \\sl and \\sc
var htmlBuilder=function htmlBuilder(group,options){var font=group.value.font;return __WEBPACK_IMPORTED_MODULE_3__buildHTML__["b"/* buildGroup */](group.value.body,options.withFontFamily(font));};var mathmlBuilder=function mathmlBuilder(group,options){var font=group.value.font;return __WEBPACK_IMPORTED_MODULE_4__buildMathML__["b"/* buildGroup */](group.value.body,options.withFontFamily(font));};var fontAliases={"\\Bbb":"\\mathbb","\\bold":"\\mathbf","\\frak":"\\mathfrak","\\bm":"\\boldsymbol"};Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"/* default */])({type:"font",names:[// styles
"\\mathrm","\\mathit","\\mathbf","\\boldsymbol",// families
"\\mathbb","\\mathcal","\\mathfrak","\\mathscr","\\mathsf","\\mathtt",// aliases
"\\Bbb","\\bold","\\frak","\\bm"],props:{numArgs:1,greediness:2},handler:function handler(context,args){var body=args[0];var func=context.funcName;if(func in fontAliases){func=fontAliases[func];}return{type:"font",font:func.slice(1),body:body};},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});var oldFontFuncsMap={"\\rm":"mathrm","\\sf":"mathsf","\\tt":"mathtt","\\bf":"mathbf","\\it":"mathit"};// Old font changing functions
Object(__WEBPACK_IMPORTED_MODULE_1__defineFunction__["b"/* default */])({type:"font",names:__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys___default()(oldFontFuncsMap),props:{numArgs:0,allowedInText:true},handler:function handler(context,args){var parser=context.parser,funcName=context.funcName,breakOnTokenText=context.breakOnTokenText;parser.consumeSpaces();var body=parser.parseExpression(true,breakOnTokenText);var style=oldFontFuncsMap[funcName];return{type:"font",font:style,body:new __WEBPACK_IMPORTED_MODULE_2__ParseNode__["a"/* default */]("ordgroup",body,parser.mode)};},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});/***/},/* 134 *//***/function(module,exports,__webpack_require__){module.exports={"default":__webpack_require__(135),__esModule:true};/***/},/* 135 *//***/function(module,exports,__webpack_require__){__webpack_require__(136);module.exports=__webpack_require__(8).Object.keys;/***/},/* 136 *//***/function(module,exports,__webpack_require__){// 19.1.2.14 Object.keys(O)
var toObject=__webpack_require__(29),$keys=__webpack_require__(39);__webpack_require__(46)('keys',function(){return function keys(it){return $keys(toObject(it));};});/***/},/* 137 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__utils__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__stretchy__=__webpack_require__(13);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__buildMathML__=__webpack_require__(2);var htmlBuilder=function htmlBuilder(group,options){// Accents are handled in the TeXbook pg. 443, rule 12.
var base=group.value.base;var supsubGroup=void 0;if(group.type==="supsub"){// If our base is a character box, and we have superscripts and
// subscripts, the supsub will defer to us. In particular, we want
// to attach the superscripts and subscripts to the inner body (so
// that the position of the superscripts and subscripts won't be
// affected by the height of the accent). We accomplish this by
// sticking the base of the accent into the base of the supsub, and
// rendering that, while keeping track of where the accent is.
// The supsub group is the group that was passed in
var supsub=group;// The real accent group is the base of the supsub group
group=supsub.value.base;// The character box is the base of the accent group
base=group.value.base;// Stick the character box into the base of the supsub group
supsub.value.base=base;// Rerender the supsub group with its new base, and store that
// result.
supsubGroup=__WEBPACK_IMPORTED_MODULE_5__buildHTML__["b"/* buildGroup */](supsub,options);}// Build the base group
var body=__WEBPACK_IMPORTED_MODULE_5__buildHTML__["b"/* buildGroup */](base,options.havingCrampedStyle());// Does the accent need to shift for the skew of a character?
var mustShift=group.value.isShifty&&__WEBPACK_IMPORTED_MODULE_3__utils__["a"/* default */].isCharacterBox(base);// Calculate the skew of the accent. This is based on the line "If the
// nucleus is not a single character, let s = 0; otherwise set s to the
// kern amount for the nucleus followed by the \skewchar of its font."
// Note that our skew metrics are just the kern between each character
// and the skewchar.
var skew=0;if(mustShift){// If the base is a character box, then we want the skew of the
// innermost character. To do that, we find the innermost character:
var baseChar=__WEBPACK_IMPORTED_MODULE_3__utils__["a"/* default */].getBaseElem(base);// Then, we render its group to get the symbol inside it
var baseGroup=__WEBPACK_IMPORTED_MODULE_5__buildHTML__["b"/* buildGroup */](baseChar,options.havingCrampedStyle());// Finally, we pull the skew off of the symbol.
skew=baseGroup.skew;// Note that we now throw away baseGroup, because the layers we
// removed with getBaseElem might contain things like \color which
// we can't get rid of.
// TODO(emily): Find a better way to get the skew
}// calculate the amount of space between the body and the accent
var clearance=Math.min(body.height,options.fontMetrics().xHeight);// Build the accent
var accentBody=void 0;if(!group.value.isStretchy){var accent=void 0;var width=void 0;if(group.value.label==="\\vec"){// Before version 0.9, \vec used the combining font glyph U+20D7.
// But browsers, especially Safari, are not consistent in how they
// render combining characters when not preceded by a character.
// So now we use an SVG.
// If Safari reforms, we should consider reverting to the glyph.
accent=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].staticSvg("vec",options);width=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].svgData.vec[1];}else{accent=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSymbol(group.value.label,"Main-Regular",group.mode,options);// Remove the italic correction of the accent, because it only serves to
// shift the accent over to a place we don't want.
accent.italic=0;width=accent.width;}accentBody=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["accent-body"],[accent]);// CSS defines `.katex .accent .accent-body { width: 0 }`
// so that the accent doesn't contribute to the bounding box.
// We need to shift the character by its width (effectively half
// its width) to compensate.
var left=-width/2;// Shift the accent over by the skew.
left+=skew;accentBody.style.left=left+"em";accentBody=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:body},{type:"kern",size:-clearance},{type:"elem",elem:accentBody}]},options);}else{accentBody=__WEBPACK_IMPORTED_MODULE_4__stretchy__["a"/* default */].svgSpan(group,options);accentBody=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:body},{type:"elem",elem:accentBody,wrapperClasses:["svg-align"],wrapperStyle:skew>0?{width:"calc(100% - "+2*skew+"em)",marginLeft:2*skew+"em"}:undefined}]},options);}var accentWrap=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mord","accent"],[accentBody],options);if(supsubGroup){// Here, we replace the "base" child of the supsub with our newly
// generated accent.
supsubGroup.children[0]=accentWrap;// Since we don't rerun the height calculation after replacing the
// accent, we manually recalculate height.
supsubGroup.height=Math.max(accentWrap.height,supsubGroup.height);// Accents should always be ords, even when their innards are not.
supsubGroup.classes[0]="mord";return supsubGroup;}else{return accentWrap;}};var mathmlBuilder=function mathmlBuilder(group,options){var accentNode=void 0;if(group.value.isStretchy){accentNode=__WEBPACK_IMPORTED_MODULE_4__stretchy__["a"/* default */].mathMLnode(group.value.label);}else{accentNode=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mo",[__WEBPACK_IMPORTED_MODULE_6__buildMathML__["e"/* makeText */](group.value.label,group.mode)]);}var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mover",[__WEBPACK_IMPORTED_MODULE_6__buildMathML__["b"/* buildGroup */](group.value.base,options),accentNode]);node.setAttribute("accent","true");return node;};var NON_STRETCHY_ACCENT_REGEX=new RegExp(["\\acute","\\grave","\\ddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot","\\mathring"].map(function(accent){return"\\"+accent;}).join("|"));// Accents
Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"accent",names:["\\acute","\\grave","\\ddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot","\\mathring","\\widehat","\\widetilde","\\overrightarrow","\\overleftarrow","\\Overrightarrow","\\overleftrightarrow","\\overgroup","\\overlinesegment","\\overleftharpoon","\\overrightharpoon"],props:{numArgs:1},handler:function handler(context,args){var base=args[0];var isStretchy=!NON_STRETCHY_ACCENT_REGEX.test(context.funcName);var isShifty=!isStretchy||context.funcName==="\\widehat"||context.funcName==="\\widetilde";return{type:"accent",label:context.funcName,isStretchy:isStretchy,isShifty:isShifty,base:base};},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});// Text-mode accents
Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"accent",names:["\\'","\\`","\\^","\\~","\\=",'\\u',"\\.",'\\"',"\\r","\\H","\\v"],props:{numArgs:1,allowedInText:true,allowedInMath:false},handler:function handler(context,args){var base=args[0];return{type:"accent",label:context.funcName,isStretchy:false,isShifty:true,base:base};},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});/***/},/* 138 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__stretchy__=__webpack_require__(13);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__buildMathML__=__webpack_require__(2);// Horizontal overlap functions
Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"accentUnder",names:['\\underleftarrow','\\underrightarrow','\\underleftrightarrow','\\undergroup','\\underlinesegment','\\utilde'],props:{numArgs:1},handler:function handler(context,args){var base=args[0];return{type:"accentUnder",label:context.funcName,base:base};},htmlBuilder:function htmlBuilder(group,options){// Treat under accents much like underlines.
var innerGroup=__WEBPACK_IMPORTED_MODULE_4__buildHTML__["b"/* buildGroup */](group.value.base,options);var accentBody=__WEBPACK_IMPORTED_MODULE_3__stretchy__["a"/* default */].svgSpan(group,options);var kern=group.value.label==='\\utilde'?0.12:0;// Generate the vlist, with the appropriate kerns
var vlist=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVList({positionType:"bottom",positionData:accentBody.height+kern,children:[{type:"elem",elem:accentBody,wrapperClasses:["svg-align"]},{type:"kern",size:kern},{type:"elem",elem:innerGroup}]},options);return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mord","accentunder"],[vlist],options);},mathmlBuilder:function mathmlBuilder(group,options){var accentNode=__WEBPACK_IMPORTED_MODULE_3__stretchy__["a"/* default */].mathMLnode(group.value.label);var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("munder",[__WEBPACK_IMPORTED_MODULE_5__buildMathML__["b"/* buildGroup */](group.value.body,options),accentNode]);node.setAttribute("accentunder","true");return node;}});/***/},/* 139 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__ParseError__=__webpack_require__(6);Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"verb",names:["\\verb"],props:{numArgs:0,allowedInText:true},handler:function handler(context,args,optArgs){// \verb and \verb* are dealt with directly in Parser.js.
// If we end up here, it's because of a failure to match the two delimiters
// in the regex in Lexer.js.  LaTeX raises the following error when \verb is
// terminated by end of line (or file).
throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"/* default */]("\\verb ended by end of line instead of matching delimiter");},htmlBuilder:function htmlBuilder(group,options){var text=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVerb(group,options);var body=[];// \verb enters text mode and therefore is sized like \textstyle
var newOptions=options.havingStyle(options.style.text());for(var i=0;i<text.length;i++){if(text[i]==='\xA0'){// spaces appear as nonbreaking space
// The space character isn't in the Typewriter-Regular font,
// so we implement it as a kern of the same size as a character.
// 0.525 is the width of a texttt character in LaTeX.
// It automatically gets scaled by the font size.
var rule=__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mord","rule"],[],newOptions);rule.style.marginLeft="0.525em";body.push(rule);}else{body.push(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSymbol(text[i],"Typewriter-Regular",group.mode,newOptions,["mathtt"]));}}__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].tryCombineChars(body);return __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeSpan(["mord","text"].concat(newOptions.sizingClasses(options)),// tryCombinChars expects CombinableDomNode[] while makeSpan expects
// DomChildNode[].
// $FlowFixMe: CombinableDomNode[] is not compatible with DomChildNode[]
body,newOptions);},mathmlBuilder:function mathmlBuilder(group,options){var text=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].TextNode(__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeVerb(group,options));var node=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mtext",[text]);node.setAttribute("mathvariant",__WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].fontMap["mathtt"].variant);return node;}});/***/},/* 140 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__buildMathML__=__webpack_require__(2);Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"href",names:["\\href"],props:{numArgs:2,argTypes:["url","original"]},handler:function handler(context,args){var body=args[1];var href=args[0].value;return{type:"href",href:href,body:Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"/* ordargument */])(body)};},htmlBuilder:function htmlBuilder(group,options){var elements=__WEBPACK_IMPORTED_MODULE_3__buildHTML__["a"/* buildExpression */](group.value.body,options,false);var href=group.value.href;return new __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeAnchor(href,[],elements,options);},mathmlBuilder:function mathmlBuilder(group,options){var inner=__WEBPACK_IMPORTED_MODULE_4__buildMathML__["a"/* buildExpression */](group.value.body,options);var math=new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mrow",inner);math.setAttribute("href",group.value.href);return math;}});/***/},/* 141 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineFunction__=__webpack_require__(3);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__Style__=__webpack_require__(9);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__buildMathML__=__webpack_require__(2);var chooseMathStyle=function chooseMathStyle(group,options){var style=options.style;if(style.size===__WEBPACK_IMPORTED_MODULE_3__Style__["a"/* default */].DISPLAY.size){return group.value.display;}else if(style.size===__WEBPACK_IMPORTED_MODULE_3__Style__["a"/* default */].TEXT.size){return group.value.text;}else if(style.size===__WEBPACK_IMPORTED_MODULE_3__Style__["a"/* default */].SCRIPT.size){return group.value.script;}else if(style.size===__WEBPACK_IMPORTED_MODULE_3__Style__["a"/* default */].SCRIPTSCRIPT.size){return group.value.scriptscript;}return group.value.text;};Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["b"/* default */])({type:"mathchoice",names:["\\mathchoice"],props:{numArgs:4},handler:function handler(context,args){return{type:"mathchoice",display:Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"/* ordargument */])(args[0]),text:Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"/* ordargument */])(args[1]),script:Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"/* ordargument */])(args[2]),scriptscript:Object(__WEBPACK_IMPORTED_MODULE_0__defineFunction__["c"/* ordargument */])(args[3])};},htmlBuilder:function htmlBuilder(group,options){var body=chooseMathStyle(group,options);var elements=__WEBPACK_IMPORTED_MODULE_4__buildHTML__["a"/* buildExpression */](body,options,false);return new __WEBPACK_IMPORTED_MODULE_1__buildCommon__["a"/* default */].makeFragment(elements);},mathmlBuilder:function mathmlBuilder(group,options){var body=chooseMathStyle(group,options);var elements=__WEBPACK_IMPORTED_MODULE_5__buildMathML__["a"/* buildExpression */](body,options,false);return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mrow",elements);}});/***/},/* 142 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__defineEnvironment__=__webpack_require__(61);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__environments_array_js__=__webpack_require__(143);var environments=__WEBPACK_IMPORTED_MODULE_0__defineEnvironment__["a"/* _environments */];/* harmony default export */__webpack_exports__["a"]=environments;// All environment definitions should be imported below
/***/},/* 143 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__buildCommon__=__webpack_require__(0);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__defineEnvironment__=__webpack_require__(61);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__mathMLTree__=__webpack_require__(1);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__ParseError__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__ParseNode__=__webpack_require__(14);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__units__=__webpack_require__(19);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__utils__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_7__stretchy__=__webpack_require__(13);/* harmony import */var __WEBPACK_IMPORTED_MODULE_8__buildHTML__=__webpack_require__(4);/* harmony import */var __WEBPACK_IMPORTED_MODULE_9__buildMathML__=__webpack_require__(2);// Data stored in the ParseNode associated with the environment.
/**
 * Parse the body of the environment, with rows delimited by \\ and
 * columns delimited by &, and create a nested list in row-major order
 * with one group per cell.  If given an optional argument style
 * ("text", "display", etc.), then each cell is cast into that style.
 */function parseArray(parser,result,style){var row=[];var body=[row];var rowGaps=[];while(true){// eslint-disable-line no-constant-condition
var cell=parser.parseExpression(false,undefined);cell=new __WEBPACK_IMPORTED_MODULE_4__ParseNode__["a"/* default */]("ordgroup",cell,parser.mode);if(style){cell=new __WEBPACK_IMPORTED_MODULE_4__ParseNode__["a"/* default */]("styling",{style:style,value:[cell]},parser.mode);}row.push(cell);var next=parser.nextToken.text;if(next==="&"){parser.consume();}else if(next==="\\end"){// Arrays terminate newlines with `\crcr` which consumes a `\cr` if
// the last line is empty.
var lastRow=body[body.length-1];if(body.length>1&&lastRow.length===1&&lastRow[0].value.value[0].value.length===0){body.pop();}break;}else if(next==="\\\\"||next==="\\cr"){var cr=parser.parseFunction();if(!cr){throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"/* default */]("Failed to parse function after "+next);}rowGaps.push(cr.value.size);row=[];body.push(row);}else{throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"/* default */]("Expected & or \\\\ or \\end",parser.nextToken);}}result.body=body;result.rowGaps=rowGaps;return new __WEBPACK_IMPORTED_MODULE_4__ParseNode__["a"/* default */](result.type,result,parser.mode);}// Decides on a style for cells in an array according to whether the given
// environment name starts with the letter 'd'.
function dCellStyle(envName){if(envName.substr(0,1)==="d"){return"display";}else{return"text";}}var htmlBuilder=function htmlBuilder(group,options){var r=void 0;var c=void 0;var nr=group.value.body.length;var nc=0;var body=new Array(nr);// Horizontal spacing
var pt=1/options.fontMetrics().ptPerEm;var arraycolsep=5*pt;// \arraycolsep in article.cls
// Vertical spacing
var baselineskip=12*pt;// see size10.clo
// Default \jot from ltmath.dtx
// TODO(edemaine): allow overriding \jot via \setlength (#687)
var jot=3*pt;// Default \arraystretch from lttab.dtx
// TODO(gagern): may get redefined once we have user-defined macros
var arraystretch=__WEBPACK_IMPORTED_MODULE_6__utils__["a"/* default */].deflt(group.value.arraystretch,1);var arrayskip=arraystretch*baselineskip;var arstrutHeight=0.7*arrayskip;// \strutbox in ltfsstrc.dtx and
var arstrutDepth=0.3*arrayskip;// \@arstrutbox in lttab.dtx
var totalHeight=0;for(r=0;r<group.value.body.length;++r){var inrow=group.value.body[r];var _height=arstrutHeight;// \@array adds an \@arstrut
var _depth=arstrutDepth;// to each tow (via the template)
if(nc<inrow.length){nc=inrow.length;}var outrow=new Array(inrow.length);for(c=0;c<inrow.length;++c){var elt=__WEBPACK_IMPORTED_MODULE_8__buildHTML__["b"/* buildGroup */](inrow[c],options);if(_depth<elt.depth){_depth=elt.depth;}if(_height<elt.height){_height=elt.height;}outrow[c]=elt;}var gap=0;if(group.value.rowGaps[r]){gap=Object(__WEBPACK_IMPORTED_MODULE_5__units__["a"/* calculateSize */])(group.value.rowGaps[r].value,options);if(gap>0){// \@argarraycr
gap+=arstrutDepth;if(_depth<gap){_depth=gap;// \@xargarraycr
}gap=0;}}// In AMS multiline environments such as aligned and gathered, rows
// correspond to lines that have additional \jot added to the
// \baselineskip via \openup.
if(group.value.addJot){_depth+=jot;}outrow.height=_height;outrow.depth=_depth;totalHeight+=_height;outrow.pos=totalHeight;totalHeight+=_depth+gap;// \@yargarraycr
body[r]=outrow;}var offset=totalHeight/2+options.fontMetrics().axisHeight;var colDescriptions=group.value.cols||[];var cols=[];var colSep=void 0;var colDescrNum=void 0;for(c=0, colDescrNum=0;// Continue while either there are more columns or more column
// descriptions, so trailing separators don't get lost.
c<nc||colDescrNum<colDescriptions.length;++c, ++colDescrNum){var colDescr=colDescriptions[colDescrNum]||{};var firstSeparator=true;while(colDescr.type==="separator"){// If there is more than one separator in a row, add a space
// between them.
if(!firstSeparator){colSep=__WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"/* default */].makeSpan(["arraycolsep"],[]);colSep.style.width=options.fontMetrics().doubleRuleSep+"em";cols.push(colSep);}if(colDescr.separator==="|"){var _separator=__WEBPACK_IMPORTED_MODULE_7__stretchy__["a"/* default */].ruleSpan("vertical-separator",0.05,options);_separator.style.height=totalHeight+"em";_separator.style.verticalAlign=-(totalHeight-offset)+"em";cols.push(_separator);}else{throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"/* default */]("Invalid separator type: "+colDescr.separator);}colDescrNum++;colDescr=colDescriptions[colDescrNum]||{};firstSeparator=false;}if(c>=nc){continue;}var sepwidth=void 0;if(c>0||group.value.hskipBeforeAndAfter){sepwidth=__WEBPACK_IMPORTED_MODULE_6__utils__["a"/* default */].deflt(colDescr.pregap,arraycolsep);if(sepwidth!==0){colSep=__WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"/* default */].makeSpan(["arraycolsep"],[]);colSep.style.width=sepwidth+"em";cols.push(colSep);}}var col=[];for(r=0;r<nr;++r){var row=body[r];var elem=row[c];if(!elem){continue;}var shift=row.pos-offset;elem.depth=row.depth;elem.height=row.height;col.push({type:"elem",elem:elem,shift:shift});}col=__WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"/* default */].makeVList({positionType:"individualShift",children:col},options);col=__WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"/* default */].makeSpan(["col-align-"+(colDescr.align||"c")],[col]);cols.push(col);if(c<nc-1||group.value.hskipBeforeAndAfter){sepwidth=__WEBPACK_IMPORTED_MODULE_6__utils__["a"/* default */].deflt(colDescr.postgap,arraycolsep);if(sepwidth!==0){colSep=__WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"/* default */].makeSpan(["arraycolsep"],[]);colSep.style.width=sepwidth+"em";cols.push(colSep);}}}body=__WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"/* default */].makeSpan(["mtable"],cols);return __WEBPACK_IMPORTED_MODULE_0__buildCommon__["a"/* default */].makeSpan(["mord"],[body],options);};var mathmlBuilder=function mathmlBuilder(group,options){return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mtable",group.value.body.map(function(row){return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mtr",row.map(function(cell){return new __WEBPACK_IMPORTED_MODULE_2__mathMLTree__["a"/* default */].MathNode("mtd",[__WEBPACK_IMPORTED_MODULE_9__buildMathML__["b"/* buildGroup */](cell,options)]);}));}));};// Convinient function for aligned and alignedat environments.
var alignedHandler=function alignedHandler(context,args){var res={type:"array",cols:[],addJot:true};res=parseArray(context.parser,res,"display");// Determining number of columns.
// 1. If the first argument is given, we use it as a number of columns,
//    and makes sure that each row doesn't exceed that number.
// 2. Otherwise, just count number of columns = maximum number
//    of cells in each row ("aligned" mode -- isAligned will be true).
//
// At the same time, prepend empty group {} at beginning of every second
// cell in each row (starting with second cell) so that operators become
// binary.  This behavior is implemented in amsmath's \start@aligned.
var numMaths=void 0;var numCols=0;var emptyGroup=new __WEBPACK_IMPORTED_MODULE_4__ParseNode__["a"/* default */]("ordgroup",[],context.mode);if(args[0]&&args[0].value){var arg0="";for(var i=0;i<args[0].value.length;i++){arg0+=args[0].value[i].value;}numMaths=Number(arg0);numCols=numMaths*2;}var isAligned=!numCols;res.value.body.forEach(function(row){for(var _i=1;_i<row.length;_i+=2){// Modify ordgroup node within styling node
var ordgroup=row[_i].value.value[0];ordgroup.value.unshift(emptyGroup);}if(!isAligned){// Case 1
var curMaths=row.length/2;if(numMaths<curMaths){throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"/* default */]("Too many math in a row: "+("expected "+numMaths+", but got "+curMaths),row);}}else if(numCols<row.length){// Case 2
numCols=row.length;}});// Adjusting alignment.
// In aligned mode, we add one \qquad between columns;
// otherwise we add nothing.
for(var _i2=0;_i2<numCols;++_i2){var _align="r";var _pregap=0;if(_i2%2===1){_align="l";}else if(_i2>0&&isAligned){// "aligned" mode.
_pregap=1;// add one \quad
}res.value.cols[_i2]={type:"align",align:_align,pregap:_pregap,postgap:0};}return res;};// Arrays are part of LaTeX, defined in lttab.dtx so its documentation
// is part of the source2e.pdf file of LaTeX2e source documentation.
// {darray} is an {array} environment where cells are set in \displaystyle,
// as defined in nccmath.sty.
Object(__WEBPACK_IMPORTED_MODULE_1__defineEnvironment__["b"/* default */])({type:"array",names:["array","darray"],props:{numArgs:1},handler:function handler(context,args){var colalign=args[0];colalign=colalign.value.map?colalign.value:[colalign];var cols=colalign.map(function(node){var ca=node.value;if("lcr".indexOf(ca)!==-1){return{type:"align",align:ca};}else if(ca==="|"){return{type:"separator",separator:"|"};}throw new __WEBPACK_IMPORTED_MODULE_3__ParseError__["a"/* default */]("Unknown column alignment: "+node.value,node);});var res={type:"array",cols:cols,hskipBeforeAndAfter:true// \@preamble in lttab.dtx
};res=parseArray(context.parser,res,dCellStyle(context.envName));return res;},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});// The matrix environments of amsmath builds on the array environment
// of LaTeX, which is discussed above.
Object(__WEBPACK_IMPORTED_MODULE_1__defineEnvironment__["b"/* default */])({type:"array",names:["matrix","pmatrix","bmatrix","Bmatrix","vmatrix","Vmatrix"],props:{numArgs:0},handler:function handler(context){var delimiters={"matrix":null,"pmatrix":["(",")"],"bmatrix":["[","]"],"Bmatrix":["\\{","\\}"],"vmatrix":["|","|"],"Vmatrix":["\\Vert","\\Vert"]}[context.envName];var res={type:"array",hskipBeforeAndAfter:false// \hskip -\arraycolsep in amsmath
};res=parseArray(context.parser,res,dCellStyle(context.envName));if(delimiters){res=new __WEBPACK_IMPORTED_MODULE_4__ParseNode__["a"/* default */]("leftright",{body:[res],left:delimiters[0],right:delimiters[1]},context.mode);}return res;},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});// A cases environment (in amsmath.sty) is almost equivalent to
// \def\arraystretch{1.2}%
// \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.
// {dcases} is a {cases} environment where cells are set in \displaystyle,
// as defined in mathtools.sty.
Object(__WEBPACK_IMPORTED_MODULE_1__defineEnvironment__["b"/* default */])({type:"array",names:["cases","dcases"],props:{numArgs:0},handler:function handler(context){var res={type:"array",arraystretch:1.2,cols:[{type:"align",align:"l",pregap:0,// TODO(kevinb) get the current style.
// For now we use the metrics for TEXT style which is what we were
// doing before.  Before attempting to get the current style we
// should look at TeX's behavior especially for \over and matrices.
postgap:1.0/* 1em quad */},{type:"align",align:"l",pregap:0,postgap:0}]};res=parseArray(context.parser,res,dCellStyle(context.envName));res=new __WEBPACK_IMPORTED_MODULE_4__ParseNode__["a"/* default */]("leftright",{body:[res],left:"\\{",right:"."},context.mode);return res;},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});// An aligned environment is like the align* environment
// except it operates within math mode.
// Note that we assume \nomallineskiplimit to be zero,
// so that \strut@ is the same as \strut.
Object(__WEBPACK_IMPORTED_MODULE_1__defineEnvironment__["b"/* default */])({type:"array",names:["aligned"],props:{numArgs:0},handler:alignedHandler,htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});// A gathered environment is like an array environment with one centered
// column, but where rows are considered lines so get \jot line spacing
// and contents are set in \displaystyle.
Object(__WEBPACK_IMPORTED_MODULE_1__defineEnvironment__["b"/* default */])({type:"array",names:["gathered"],props:{numArgs:0},handler:function handler(context){var res={type:"array",cols:[{type:"align",align:"c"}],addJot:true};res=parseArray(context.parser,res,"display");return res;},htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});// alignat environment is like an align environment, but one must explicitly
// specify maximum number of columns in each row, and can adjust spacing between
// each columns.
Object(__WEBPACK_IMPORTED_MODULE_1__defineEnvironment__["b"/* default */])({type:"array",names:["alignedat"],// One for numbered and for unnumbered;
// but, KaTeX doesn't supports math numbering yet,
// they make no difference for now.
props:{numArgs:1},handler:alignedHandler,htmlBuilder:htmlBuilder,mathmlBuilder:mathmlBuilder});/***/},/* 144 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__=__webpack_require__(35);/* harmony import */var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__=__webpack_require__(7);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass__=__webpack_require__(10);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass__);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__Lexer__=__webpack_require__(62);/* harmony import */var __WEBPACK_IMPORTED_MODULE_4__Token__=__webpack_require__(27);/* harmony import */var __WEBPACK_IMPORTED_MODULE_5__macros__=__webpack_require__(146);/* harmony import */var __WEBPACK_IMPORTED_MODULE_6__ParseError__=__webpack_require__(6);/* harmony import */var __WEBPACK_IMPORTED_MODULE_7_object_assign__=__webpack_require__(147);/* harmony import */var __WEBPACK_IMPORTED_MODULE_7_object_assign___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_object_assign__);/**
 * This file contains the “gullet” where macros are expanded
 * until only non-macro tokens remain.
 */var MacroExpander=function(){function MacroExpander(input,macros,mode){__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default()(this,MacroExpander);this.lexer=new __WEBPACK_IMPORTED_MODULE_3__Lexer__["c"/* default */](input);this.macros=__WEBPACK_IMPORTED_MODULE_7_object_assign___default()({},__WEBPACK_IMPORTED_MODULE_5__macros__["a"/* default */],macros);this.mode=mode;this.stack=[];// contains tokens in REVERSE order
}/**
     * Switches between "text" and "math" modes.
     */__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_createClass___default()(MacroExpander,[{key:"switchMode",value:function switchMode(newMode){this.mode=newMode;}/**
         * Returns the topmost token on the stack, without expanding it.
         * Similar in behavior to TeX's `\futurelet`.
         */},{key:"future",value:function future(){if(this.stack.length===0){this.pushToken(this.lexer.lex());}return this.stack[this.stack.length-1];}/**
         * Remove and return the next unexpanded token.
         */},{key:"popToken",value:function popToken(){this.future();// ensure non-empty stack
return this.stack.pop();}/**
         * Add a given token to the token stack.  In particular, this get be used
         * to put back a token returned from one of the other methods.
         */},{key:"pushToken",value:function pushToken(token){this.stack.push(token);}/**
         * Append an array of tokens to the token stack.
         */},{key:"pushTokens",value:function pushTokens(tokens){var _stack;(_stack=this.stack).push.apply(_stack,__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default()(tokens));}/**
         * Consume all following space tokens, without expansion.
         */},{key:"consumeSpaces",value:function consumeSpaces(){for(;;){var token=this.future();if(token.text===" "){this.stack.pop();}else{break;}}}/**
         * Consume the specified number of arguments from the token stream,
         * and return the resulting array of arguments.
         */},{key:"consumeArgs",value:function consumeArgs(numArgs){var args=[];// obtain arguments, either single token or balanced {…} group
for(var i=0;i<numArgs;++i){this.consumeSpaces();// ignore spaces before each argument
var startOfArg=this.popToken();if(startOfArg.text==="{"){var arg=[];var depth=1;while(depth!==0){var tok=this.popToken();arg.push(tok);if(tok.text==="{"){++depth;}else if(tok.text==="}"){--depth;}else if(tok.text==="EOF"){throw new __WEBPACK_IMPORTED_MODULE_6__ParseError__["a"/* default */]("End of input in macro argument",startOfArg);}}arg.pop();// remove last }
arg.reverse();// like above, to fit in with stack order
args[i]=arg;}else if(startOfArg.text==="EOF"){throw new __WEBPACK_IMPORTED_MODULE_6__ParseError__["a"/* default */]("End of input expecting macro argument");}else{args[i]=[startOfArg];}}return args;}/**
         * Expand the next token only once if possible.
         *
         * If the token is expanded, the resulting tokens will be pushed onto
         * the stack in reverse order and will be returned as an array,
         * also in reverse order.
         *
         * If not, the next token will be returned without removing it
         * from the stack.  This case can be detected by a `Token` return value
         * instead of an `Array` return value.
         *
         * In either case, the next token will be on the top of the stack,
         * or the stack will be empty.
         *
         * Used to implement `expandAfterFuture` and `expandNextToken`.
         *
         * At the moment, macro expansion doesn't handle delimited macros,
         * i.e. things like those defined by \def\foo#1\end{…}.
         * See the TeX book page 202ff. for details on how those should behave.
         */},{key:"expandOnce",value:function expandOnce(){var topToken=this.popToken();var name=topToken.text;var isMacro=name.charAt(0)==="\\";if(isMacro&&__WEBPACK_IMPORTED_MODULE_3__Lexer__["b"/* controlWordRegex */].test(name)){// Consume all spaces after \macro (but not \\, \', etc.)
this.consumeSpaces();}if(!this.macros.hasOwnProperty(name)){// Fully expanded
this.pushToken(topToken);return topToken;}var _getExpansion2=this._getExpansion(name),tokens=_getExpansion2.tokens,numArgs=_getExpansion2.numArgs;var expansion=tokens;if(numArgs){var args=this.consumeArgs(numArgs);// paste arguments in place of the placeholders
expansion=expansion.slice();// make a shallow copy
for(var i=expansion.length-1;i>=0;--i){var tok=expansion[i];if(tok.text==="#"){if(i===0){throw new __WEBPACK_IMPORTED_MODULE_6__ParseError__["a"/* default */]("Incomplete placeholder at end of macro body",tok);}tok=expansion[--i];// next token on stack
if(tok.text==="#"){// ## → #
expansion.splice(i+1,1);// drop first #
}else if(/^[1-9]$/.test(tok.text)){var _expansion;// replace the placeholder with the indicated argument
(_expansion=expansion).splice.apply(_expansion,[i,2].concat(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default()(args[+tok.text-1])));}else{throw new __WEBPACK_IMPORTED_MODULE_6__ParseError__["a"/* default */]("Not a valid argument number",tok);}}}}// Concatenate expansion onto top of stack.
this.pushTokens(expansion);return expansion;}/**
         * Expand the next token only once (if possible), and return the resulting
         * top token on the stack (without removing anything from the stack).
         * Similar in behavior to TeX's `\expandafter\futurelet`.
         * Equivalent to expandOnce() followed by future().
         */},{key:"expandAfterFuture",value:function expandAfterFuture(){this.expandOnce();return this.future();}/**
         * Recursively expand first token, then return first non-expandable token.
         */},{key:"expandNextToken",value:function expandNextToken(){for(;;){var expanded=this.expandOnce();// expandOnce returns Token if and only if it's fully expanded.
if(expanded instanceof __WEBPACK_IMPORTED_MODULE_4__Token__["a"/* Token */]){// \relax stops the expansion, but shouldn't get returned (a
// null return value couldn't get implemented as a function).
if(expanded.text==="\\relax"){this.stack.pop();}else{return this.stack.pop();// === expanded
}}}// Flow unable to figure out that this pathway is impossible.
// https://github.com/facebook/flow/issues/4808
throw new Error();// eslint-disable-line no-unreachable
}/**
         * Returns the expanded macro as a reversed array of tokens and a macro
         * argument count.
         * Caches macro expansions for those that were defined simple TeX strings.
         */},{key:"_getExpansion",value:function _getExpansion(name){var definition=this.macros[name];var expansion=typeof definition==="function"?definition(this):definition;if(typeof expansion==="string"){var numArgs=0;if(expansion.indexOf("#")!==-1){var stripped=expansion.replace(/##/g,"");while(stripped.indexOf("#"+(numArgs+1))!==-1){++numArgs;}}var bodyLexer=new __WEBPACK_IMPORTED_MODULE_3__Lexer__["c"/* default */](expansion);var tokens=[];var tok=bodyLexer.lex();while(tok.text!=="EOF"){tokens.push(tok);tok=bodyLexer.lex();}tokens.reverse();// to fit in with stack using push and pop
var expanded={tokens:tokens,numArgs:numArgs};// Cannot cache a macro defined using a function since it relies on
// parser context.
if(typeof definition!=="function"){this.macros[name]=expanded;}return expanded;}return expansion;}}]);return MacroExpander;}();/* harmony default export */__webpack_exports__["a"]=MacroExpander;/***/},/* 145 *//***/function(module,exports){function getRelocatable(re){// In the future, this could use a WeakMap instead of an expando.
if(!re.__matchAtRelocatable){// Disjunctions are the lowest-precedence operator, so we can make any
// pattern match the empty string by appending `|()` to it:
// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-patterns
var source=re.source+'|()';// We always make the new regex global.
var flags='g'+(re.ignoreCase?'i':'')+(re.multiline?'m':'')+(re.unicode?'u':'');re.__matchAtRelocatable=new RegExp(source,flags);}return re.__matchAtRelocatable;}function matchAt(re,str,pos){if(re.global||re.sticky){throw new Error('matchAt(...): Only non-global regexes are supported');}var reloc=getRelocatable(re);reloc.lastIndex=pos;var match=reloc.exec(str);// Last capturing group is our sentinel that indicates whether the regex
// matched at the given location.
if(match[match.length-1]==null){// Original regex matched.
match.length=match.length-1;return match;}else{return null;}}module.exports=matchAt;/***/},/* 146 *//***/function(module,__webpack_exports__,__webpack_require__){var __WEBPACK_IMPORTED_MODULE_0__submodules_katex_fonts_fontMetricsData__=__webpack_require__(59);/* harmony import */var __WEBPACK_IMPORTED_MODULE_1__symbols__=__webpack_require__(28);/* harmony import */var __WEBPACK_IMPORTED_MODULE_2__utils__=__webpack_require__(5);/* harmony import */var __WEBPACK_IMPORTED_MODULE_3__Token__=__webpack_require__(27);/**
 * Predefined macros for KaTeX.
 * This can be used to define some commands in terms of others.
 *//**
 * Provides context to macros defined by functions. Implemented by
 * MacroExpander.
 *//** Macro tokens (in reverse order). */var builtinMacros={};/* harmony default export */__webpack_exports__["a"]=builtinMacros;// This function might one day accept an additional argument and do more things.
function defineMacro(name,body){builtinMacros[name]=body;}//////////////////////////////////////////////////////////////////////
// macro tools
// LaTeX's \@firstoftwo{#1}{#2} expands to #1, skipping #2
// TeX source: \long\def\@firstoftwo#1#2{#1}
defineMacro("\\@firstoftwo",function(context){var args=context.consumeArgs(2);return{tokens:args[0],numArgs:0};});// LaTeX's \@secondoftwo{#1}{#2} expands to #2, skipping #1
// TeX source: \long\def\@secondoftwo#1#2{#2}
defineMacro("\\@secondoftwo",function(context){var args=context.consumeArgs(2);return{tokens:args[1],numArgs:0};});// LaTeX's \@ifnextchar{#1}{#2}{#3} looks ahead to the next (unexpanded)
// symbol.  If it matches #1, then the macro expands to #2; otherwise, #3.
// Note, however, that it does not consume the next symbol in either case.
defineMacro("\\@ifnextchar",function(context){var args=context.consumeArgs(3);// symbol, if, else
var nextToken=context.future();if(args[0].length===1&&args[0][0].text===nextToken.text){return{tokens:args[1],numArgs:0};}else{return{tokens:args[2],numArgs:0};}});// LaTeX's \@ifstar{#1}{#2} looks ahead to the next (unexpanded) symbol.
// If it is `*`, then it consumes the symbol, and the macro expands to #1;
// otherwise, the macro expands to #2 (without consuming the symbol).
// TeX source: \def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#1}}}
defineMacro("\\@ifstar","\\@ifnextchar *{\\@firstoftwo{#1}}");// LaTeX's \TextOrMath{#1}{#2} expands to #1 in text mode, #2 in math mode
defineMacro("\\TextOrMath",function(context){var args=context.consumeArgs(2);if(context.mode==='text'){return{tokens:args[0],numArgs:0};}else{return{tokens:args[1],numArgs:0};}});//////////////////////////////////////////////////////////////////////
// Grouping
// \let\bgroup={ \let\egroup=}
defineMacro("\\bgroup","{");defineMacro("\\egroup","}");defineMacro("\\begingroup","{");defineMacro("\\endgroup","}");// Symbols from latex.ltx:
// \def\lq{`}
// \def\rq{'}
// \def\lbrack{[}
// \def\rbrack{]}
// \def \aa {\r a}
// \def \AA {\r A}
defineMacro("\\lq","`");defineMacro("\\rq","'");defineMacro("\\lbrack","[");defineMacro("\\rbrack","]");defineMacro("\\aa","\\r a");defineMacro("\\AA","\\r A");// Unicode double-struck letters
defineMacro('\u2102',"\\mathbb{C}");defineMacro('\u210D',"\\mathbb{H}");defineMacro('\u2115',"\\mathbb{N}");defineMacro('\u2119',"\\mathbb{P}");defineMacro('\u211A',"\\mathbb{Q}");defineMacro('\u211D',"\\mathbb{R}");defineMacro('\u2124',"\\mathbb{Z}");// Unicode middle dot
// The KaTeX fonts do not contain U+00B7. Instead, \cdotp displays
// the dot at U+22C5 and gives it punct spacing.
defineMacro("\xB7","\\cdotp");// \llap and \rlap render their contents in text mode
defineMacro("\\llap","\\mathllap{\\textrm{#1}}");defineMacro("\\rlap","\\mathrlap{\\textrm{#1}}");defineMacro("\\clap","\\mathclap{\\textrm{#1}}");//////////////////////////////////////////////////////////////////////
// amsmath.sty
// http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf
// Italic Greek capital letters.  AMS defines these with \DeclareMathSymbol,
// but they are equivalent to \mathit{\Letter}.
defineMacro("\\varGamma","\\mathit{\\Gamma}");defineMacro("\\varDelta","\\mathit{\\Delta}");defineMacro("\\varTheta","\\mathit{\\Theta}");defineMacro("\\varLambda","\\mathit{\\Lambda}");defineMacro("\\varXi","\\mathit{\\Xi}");defineMacro("\\varPi","\\mathit{\\Pi}");defineMacro("\\varSigma","\\mathit{\\Sigma}");defineMacro("\\varUpsilon",'\\mathit{\\Upsilon}');defineMacro("\\varPhi","\\mathit{\\Phi}");defineMacro("\\varPsi","\\mathit{\\Psi}");defineMacro("\\varOmega","\\mathit{\\Omega}");// \def\overset#1#2{\binrel@{#2}\binrel@@{\mathop{\kern\z@#2}\limits^{#1}}}
defineMacro("\\overset","\\mathop{#2}\\limits^{#1}");defineMacro('\\underset',"\\mathop{#2}\\limits_{#1}");// \newcommand{\boxed}[1]{\fbox{\m@th$\displaystyle#1$}}
defineMacro("\\boxed","\\fbox{\\displaystyle{#1}}");// \def\iff{\DOTSB\;\Longleftrightarrow\;}
// \def\implies{\DOTSB\;\Longrightarrow\;}
// \def\impliedby{\DOTSB\;\Longleftarrow\;}
defineMacro("\\iff","\\DOTSB\\;\\Longleftrightarrow\\;");defineMacro("\\implies","\\DOTSB\\;\\Longrightarrow\\;");defineMacro("\\impliedby","\\DOTSB\\;\\Longleftarrow\\;");// AMSMath's automatic \dots, based on \mdots@@ macro.
var dotsByToken={',':'\\dotsc','\\not':'\\dotsb',// \keybin@ checks for the following:
'+':'\\dotsb','=':'\\dotsb','<':'\\dotsb','>':'\\dotsb','-':'\\dotsb','*':'\\dotsb',':':'\\dotsb',// Symbols whose definition starts with \DOTSB:
'\\DOTSB':'\\dotsb','\\coprod':'\\dotsb','\\bigvee':'\\dotsb','\\bigwedge':'\\dotsb','\\biguplus':'\\dotsb','\\bigcap':'\\dotsb','\\bigcup':'\\dotsb','\\prod':'\\dotsb','\\sum':'\\dotsb','\\bigotimes':'\\dotsb','\\bigoplus':'\\dotsb','\\bigodot':'\\dotsb','\\bigsqcup':'\\dotsb','\\implies':'\\dotsb','\\impliedby':'\\dotsb','\\And':'\\dotsb','\\longrightarrow':'\\dotsb','\\Longrightarrow':'\\dotsb','\\longleftarrow':'\\dotsb','\\Longleftarrow':'\\dotsb','\\longleftrightarrow':'\\dotsb','\\Longleftrightarrow':'\\dotsb','\\mapsto':'\\dotsb','\\longmapsto':'\\dotsb','\\hookrightarrow':'\\dotsb','\\iff':'\\dotsb','\\doteq':'\\dotsb',// Symbols whose definition starts with \mathbin:
'\\mathbin':'\\dotsb','\\bmod':'\\dotsb',// Symbols whose definition starts with \mathrel:
'\\mathrel':'\\dotsb','\\relbar':'\\dotsb','\\Relbar':'\\dotsb','\\xrightarrow':'\\dotsb','\\xleftarrow':'\\dotsb',// Symbols whose definition starts with \DOTSI:
'\\DOTSI':'\\dotsi','\\int':'\\dotsi','\\oint':'\\dotsi','\\iint':'\\dotsi','\\iiint':'\\dotsi','\\iiiint':'\\dotsi','\\idotsint':'\\dotsi',// Symbols whose definition starts with \DOTSX:
'\\DOTSX':'\\dotsx'};defineMacro("\\dots",function(context){// TODO: If used in text mode, should expand to \textellipsis.
// However, in KaTeX, \textellipsis and \ldots behave the same
// (in text mode), and it's unlikely we'd see any of the math commands
// that affect the behavior of \dots when in text mode.  So fine for now
// (until we support \ifmmode ... \else ... \fi).
var thedots='\\dotso';var next=context.expandAfterFuture().text;if(next in dotsByToken){thedots=dotsByToken[next];}else if(next.substr(0,4)==='\\not'){thedots='\\dotsb';}else if(next in __WEBPACK_IMPORTED_MODULE_1__symbols__["a"/* default */].math){if(__WEBPACK_IMPORTED_MODULE_2__utils__["a"/* default */].contains(['bin','rel'],__WEBPACK_IMPORTED_MODULE_1__symbols__["a"/* default */].math[next].group)){thedots='\\dotsb';}}return thedots;});var spaceAfterDots={// \rightdelim@ checks for the following:
')':true,']':true,'\\rbrack':true,'\\}':true,'\\rbrace':true,'\\rangle':true,'\\rceil':true,'\\rfloor':true,'\\rgroup':true,'\\rmoustache':true,'\\right':true,'\\bigr':true,'\\biggr':true,'\\Bigr':true,'\\Biggr':true,// \extra@ also tests for the following:
'$':true,// \extrap@ checks for the following:
';':true,'.':true,',':true};defineMacro("\\dotso",function(context){var next=context.future().text;if(next in spaceAfterDots){return"\\ldots\\,";}else{return"\\ldots";}});defineMacro("\\dotsc",function(context){var next=context.future().text;// \dotsc uses \extra@ but not \extrap@, instead specially checking for
// ';' and '.', but doesn't check for ','.
if(next in spaceAfterDots&&next!==','){return"\\ldots\\,";}else{return"\\ldots";}});defineMacro("\\cdots",function(context){var next=context.future().text;if(next in spaceAfterDots){return"\\@cdots\\,";}else{return"\\@cdots";}});defineMacro("\\dotsb","\\cdots");defineMacro("\\dotsm","\\cdots");defineMacro("\\dotsi","\\!\\cdots");// amsmath doesn't actually define \dotsx, but \dots followed by a macro
// starting with \DOTSX implies \dotso, and then \extra@ detects this case
// and forces the added `\,`.
defineMacro("\\dotsx","\\ldots\\,");// \let\DOTSI\relax
// \let\DOTSB\relax
// \let\DOTSX\relax
defineMacro("\\DOTSI","\\relax");defineMacro("\\DOTSB","\\relax");defineMacro("\\DOTSX","\\relax");// http://texdoc.net/texmf-dist/doc/latex/amsmath/amsmath.pdf
defineMacro("\\thinspace","\\,");//   \let\thinspace\,
defineMacro("\\medspace","\\:");//   \let\medspace\:
defineMacro("\\thickspace","\\;");//   \let\thickspace\;
//////////////////////////////////////////////////////////////////////
// LaTeX source2e
// \def\TeX{T\kern-.1667em\lower.5ex\hbox{E}\kern-.125emX\@}
// TODO: Doesn't normally work in math mode because \@ fails.  KaTeX doesn't
// support \@ yet, so that's omitted, and we add \text so that the result
// doesn't look funny in math mode.
defineMacro("\\TeX","\\textrm{T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX}");// \DeclareRobustCommand{\LaTeX}{L\kern-.36em%
//         {\sbox\z@ T%
//          \vbox to\ht\z@{\hbox{\check@mathfonts
//                               \fontsize\sf@size\z@
//                               \math@fontsfalse\selectfont
//                               A}%
//                         \vss}%
//         }%
//         \kern-.15em%
//         \TeX}
// This code aligns the top of the A with the T (from the perspective of TeX's
// boxes, though visually the A appears to extend above slightly).
// We compute the corresponding \raisebox when A is rendered at \scriptsize,
// which is size3, which has a scale factor of 0.7 (see Options.js).
var latexRaiseA=__WEBPACK_IMPORTED_MODULE_0__submodules_katex_fonts_fontMetricsData__["a"/* default */]['Main-Regular']["T".charCodeAt(0)][1]-0.7*__WEBPACK_IMPORTED_MODULE_0__submodules_katex_fonts_fontMetricsData__["a"/* default */]['Main-Regular']["A".charCodeAt(0)][1]+"em";defineMacro("\\LaTeX","\\textrm{L\\kern-.36em\\raisebox{"+latexRaiseA+"}{\\scriptsize A}"+"\\kern-.15em\\TeX}");// New KaTeX logo based on tweaking LaTeX logo
defineMacro("\\KaTeX","\\textrm{K\\kern-.17em\\raisebox{"+latexRaiseA+"}{\\scriptsize A}"+"\\kern-.15em\\TeX}");// \DeclareRobustCommand\hspace{\@ifstar\@hspacer\@hspace}
// \def\@hspace#1{\hskip  #1\relax}
// KaTeX doesn't do line breaks, so \hspace and \hspace* are the same as \kern
defineMacro("\\hspace","\\@ifstar\\kern\\kern");//////////////////////////////////////////////////////////////////////
// mathtools.sty
//\providecommand\ordinarycolon{:}
defineMacro("\\ordinarycolon",":");//\def\vcentcolon{\mathrel{\mathop\ordinarycolon}}
//TODO(edemaine): Not yet centered. Fix via \raisebox or #726
defineMacro("\\vcentcolon","\\mathrel{\\mathop\\ordinarycolon}");// \providecommand*\dblcolon{\vcentcolon\mathrel{\mkern-.9mu}\vcentcolon}
defineMacro("\\dblcolon","\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon");// \providecommand*\coloneqq{\vcentcolon\mathrel{\mkern-1.2mu}=}
defineMacro("\\coloneqq","\\vcentcolon\\mathrel{\\mkern-1.2mu}=");// \providecommand*\Coloneqq{\dblcolon\mathrel{\mkern-1.2mu}=}
defineMacro("\\Coloneqq","\\dblcolon\\mathrel{\\mkern-1.2mu}=");// \providecommand*\coloneq{\vcentcolon\mathrel{\mkern-1.2mu}\mathrel{-}}
defineMacro("\\coloneq","\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}");// \providecommand*\Coloneq{\dblcolon\mathrel{\mkern-1.2mu}\mathrel{-}}
defineMacro("\\Coloneq","\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}");// \providecommand*\eqqcolon{=\mathrel{\mkern-1.2mu}\vcentcolon}
defineMacro("\\eqqcolon","=\\mathrel{\\mkern-1.2mu}\\vcentcolon");// \providecommand*\Eqqcolon{=\mathrel{\mkern-1.2mu}\dblcolon}
defineMacro("\\Eqqcolon","=\\mathrel{\\mkern-1.2mu}\\dblcolon");// \providecommand*\eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\vcentcolon}
defineMacro("\\eqcolon","\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon");// \providecommand*\Eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\dblcolon}
defineMacro("\\Eqcolon","\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon");// \providecommand*\colonapprox{\vcentcolon\mathrel{\mkern-1.2mu}\approx}
defineMacro("\\colonapprox","\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx");// \providecommand*\Colonapprox{\dblcolon\mathrel{\mkern-1.2mu}\approx}
defineMacro("\\Colonapprox","\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx");// \providecommand*\colonsim{\vcentcolon\mathrel{\mkern-1.2mu}\sim}
defineMacro("\\colonsim","\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim");// \providecommand*\Colonsim{\dblcolon\mathrel{\mkern-1.2mu}\sim}
defineMacro("\\Colonsim","\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim");// Some Unicode characters are implemented with macros to mathtools functions.
defineMacro('\u2254',"\\coloneqq");// :=
defineMacro('\u2255',"\\eqqcolon");// =:
defineMacro('\u2A74',"\\Coloneqq");// ::=
//////////////////////////////////////////////////////////////////////
// colonequals.sty
// Alternate names for mathtools's macros:
defineMacro("\\ratio","\\vcentcolon");defineMacro("\\coloncolon","\\dblcolon");defineMacro("\\colonequals","\\coloneqq");defineMacro("\\coloncolonequals","\\Coloneqq");defineMacro("\\equalscolon","\\eqqcolon");defineMacro("\\equalscoloncolon","\\Eqqcolon");defineMacro("\\colonminus","\\coloneq");defineMacro("\\coloncolonminus","\\Coloneq");defineMacro("\\minuscolon","\\eqcolon");defineMacro("\\minuscoloncolon","\\Eqcolon");// \colonapprox name is same in mathtools and colonequals.
defineMacro("\\coloncolonapprox","\\Colonapprox");// \colonsim name is same in mathtools and colonequals.
defineMacro("\\coloncolonsim","\\Colonsim");// Additional macros, implemented by analogy with mathtools definitions:
defineMacro("\\simcolon","\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon");defineMacro("\\simcoloncolon","\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon");defineMacro("\\approxcolon","\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon");defineMacro("\\approxcoloncolon","\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon");// Present in newtxmath, pxfonts and txfonts
// TODO: The unicode character U+220C ∌ should be added to the font, and this
//       macro turned into a propper defineSymbol in symbols.js. That way, the
//       MathML result will be much cleaner.
defineMacro("\\notni","\\not\\ni");defineMacro("\\limsup","\\DOTSB\\mathop{\\operatorname{lim\\,sup}}\\limits");defineMacro("\\liminf","\\DOTSB\\mathop{\\operatorname{lim\\,inf}}\\limits");/***/},/* 147 *//***/function(module,exports,__webpack_require__){var getOwnPropertySymbols=Object.getOwnPropertySymbols;var hasOwnProperty=Object.prototype.hasOwnProperty;var propIsEnumerable=Object.prototype.propertyIsEnumerable;function toObject(val){if(val===null||val===undefined){throw new TypeError('Object.assign cannot be called with null or undefined');}return Object(val);}function shouldUseNative(){try{if(!Object.assign){return false;}// Detect buggy property enumeration order in older V8 versions.
// https://bugs.chromium.org/p/v8/issues/detail?id=4118
var test1=new String('abc');// eslint-disable-line no-new-wrappers
test1[5]='de';if(Object.getOwnPropertyNames(test1)[0]==='5'){return false;}// https://bugs.chromium.org/p/v8/issues/detail?id=3056
var test2={};for(var i=0;i<10;i++){test2['_'+String.fromCharCode(i)]=i;}var order2=Object.getOwnPropertyNames(test2).map(function(n){return test2[n];});if(order2.join('')!=='0123456789'){return false;}// https://bugs.chromium.org/p/v8/issues/detail?id=3056
var test3={};'abcdefghijklmnopqrst'.split('').forEach(function(letter){test3[letter]=letter;});if(Object.keys(Object.assign({},test3)).join('')!=='abcdefghijklmnopqrst'){return false;}return true;}catch(err){// We don't expect any of the above to throw, but better to be safe.
return false;}}module.exports=shouldUseNative()?Object.assign:function(target,source){var from;var to=toObject(target);var symbols;for(var s=1;s<arguments.length;s++){from=Object(arguments[s]);for(var key in from){if(hasOwnProperty.call(from,key)){to[key]=from[key];}}if(getOwnPropertySymbols){symbols=getOwnPropertySymbols(from);for(var i=0;i<symbols.length;i++){if(propIsEnumerable.call(from,symbols[i])){to[symbols[i]]=from[symbols[i]];}}}}return to;};/***/},/* 148 *//***/function(module,exports){// Mapping of Unicode accent characters to their LaTeX equivalent in text and
// math mode (when they exist).
// NOTE: This module needs to be written with Node-style modules (not
// ES6 modules) so that unicodeMake.js (a Node application) can import it.
module.exports={'\u0301':{text:"\\'",math:'\\acute'},'\u0300':{text:'\\`',math:'\\grave'},'\u0308':{text:'\\"',math:'\\ddot'},'\u0303':{text:'\\~',math:'\\tilde'},'\u0304':{text:'\\=',math:'\\bar'},'\u0306':{text:'\\u',math:'\\breve'},'\u030C':{text:'\\v',math:'\\check'},'\u0302':{text:'\\^',math:'\\hat'},'\u0307':{text:'\\.',math:'\\dot'},'\u030A':{text:'\\r',math:'\\mathring'},'\u030B':{text:'\\H'}};/***/},/* 149 *//***/function(module,__webpack_exports__,__webpack_require__){__webpack_exports__["a"]={"\xE1":'a\u0301',// á = \'{a}
"\xE0":'a\u0300',// à = \`{a}
"\xE4":'a\u0308',// ä = \"{a}
'\u01DF':'a\u0308\u0304',// ǟ = \"\={a}
"\xE3":'a\u0303',// ã = \~{a}
'\u0101':'a\u0304',// ā = \={a}
'\u0103':'a\u0306',// ă = \u{a}
'\u1EAF':'a\u0306\u0301',// ắ = \u\'{a}
'\u1EB1':'a\u0306\u0300',// ằ = \u\`{a}
'\u1EB5':'a\u0306\u0303',// ẵ = \u\~{a}
'\u01CE':'a\u030C',// ǎ = \v{a}
"\xE2":'a\u0302',// â = \^{a}
'\u1EA5':'a\u0302\u0301',// ấ = \^\'{a}
'\u1EA7':'a\u0302\u0300',// ầ = \^\`{a}
'\u1EAB':'a\u0302\u0303',// ẫ = \^\~{a}
'\u0227':'a\u0307',// ȧ = \.{a}
'\u01E1':'a\u0307\u0304',// ǡ = \.\={a}
"\xE5":'a\u030A',// å = \r{a}
'\u01FB':'a\u030A\u0301',// ǻ = \r\'{a}
'\u1E03':'b\u0307',// ḃ = \.{b}
'\u0107':'c\u0301',// ć = \'{c}
'\u010D':'c\u030C',// č = \v{c}
'\u0109':'c\u0302',// ĉ = \^{c}
'\u010B':'c\u0307',// ċ = \.{c}
'\u010F':'d\u030C',// ď = \v{d}
'\u1E0B':'d\u0307',// ḋ = \.{d}
"\xE9":'e\u0301',// é = \'{e}
"\xE8":'e\u0300',// è = \`{e}
"\xEB":'e\u0308',// ë = \"{e}
'\u1EBD':'e\u0303',// ẽ = \~{e}
'\u0113':'e\u0304',// ē = \={e}
'\u1E17':'e\u0304\u0301',// ḗ = \=\'{e}
'\u1E15':'e\u0304\u0300',// ḕ = \=\`{e}
'\u0115':'e\u0306',// ĕ = \u{e}
'\u011B':'e\u030C',// ě = \v{e}
"\xEA":'e\u0302',// ê = \^{e}
'\u1EBF':'e\u0302\u0301',// ế = \^\'{e}
'\u1EC1':'e\u0302\u0300',// ề = \^\`{e}
'\u1EC5':'e\u0302\u0303',// ễ = \^\~{e}
'\u0117':'e\u0307',// ė = \.{e}
'\u1E1F':'f\u0307',// ḟ = \.{f}
'\u01F5':'g\u0301',// ǵ = \'{g}
'\u1E21':'g\u0304',// ḡ = \={g}
'\u011F':'g\u0306',// ğ = \u{g}
'\u01E7':'g\u030C',// ǧ = \v{g}
'\u011D':'g\u0302',// ĝ = \^{g}
'\u0121':'g\u0307',// ġ = \.{g}
'\u1E27':'h\u0308',// ḧ = \"{h}
'\u021F':'h\u030C',// ȟ = \v{h}
'\u0125':'h\u0302',// ĥ = \^{h}
'\u1E23':'h\u0307',// ḣ = \.{h}
"\xED":'i\u0301',// í = \'{i}
"\xEC":'i\u0300',// ì = \`{i}
"\xEF":'i\u0308',// ï = \"{i}
'\u1E2F':'i\u0308\u0301',// ḯ = \"\'{i}
'\u0129':'i\u0303',// ĩ = \~{i}
'\u012B':'i\u0304',// ī = \={i}
'\u012D':'i\u0306',// ĭ = \u{i}
'\u01D0':'i\u030C',// ǐ = \v{i}
"\xEE":'i\u0302',// î = \^{i}
'\u01F0':'j\u030C',// ǰ = \v{j}
'\u0135':'j\u0302',// ĵ = \^{j}
'\u1E31':'k\u0301',// ḱ = \'{k}
'\u01E9':'k\u030C',// ǩ = \v{k}
'\u013A':'l\u0301',// ĺ = \'{l}
'\u013E':'l\u030C',// ľ = \v{l}
'\u1E3F':'m\u0301',// ḿ = \'{m}
'\u1E41':'m\u0307',// ṁ = \.{m}
'\u0144':'n\u0301',// ń = \'{n}
'\u01F9':'n\u0300',// ǹ = \`{n}
"\xF1":'n\u0303',// ñ = \~{n}
'\u0148':'n\u030C',// ň = \v{n}
'\u1E45':'n\u0307',// ṅ = \.{n}
"\xF3":'o\u0301',// ó = \'{o}
"\xF2":'o\u0300',// ò = \`{o}
"\xF6":'o\u0308',// ö = \"{o}
'\u022B':'o\u0308\u0304',// ȫ = \"\={o}
"\xF5":'o\u0303',// õ = \~{o}
'\u1E4D':'o\u0303\u0301',// ṍ = \~\'{o}
'\u1E4F':'o\u0303\u0308',// ṏ = \~\"{o}
'\u022D':'o\u0303\u0304',// ȭ = \~\={o}
'\u014D':'o\u0304',// ō = \={o}
'\u1E53':'o\u0304\u0301',// ṓ = \=\'{o}
'\u1E51':'o\u0304\u0300',// ṑ = \=\`{o}
'\u014F':'o\u0306',// ŏ = \u{o}
'\u01D2':'o\u030C',// ǒ = \v{o}
"\xF4":'o\u0302',// ô = \^{o}
'\u1ED1':'o\u0302\u0301',// ố = \^\'{o}
'\u1ED3':'o\u0302\u0300',// ồ = \^\`{o}
'\u1ED7':'o\u0302\u0303',// ỗ = \^\~{o}
'\u022F':'o\u0307',// ȯ = \.{o}
'\u0231':'o\u0307\u0304',// ȱ = \.\={o}
'\u0151':'o\u030B',// ő = \H{o}
'\u1E55':'p\u0301',// ṕ = \'{p}
'\u1E57':'p\u0307',// ṗ = \.{p}
'\u0155':'r\u0301',// ŕ = \'{r}
'\u0159':'r\u030C',// ř = \v{r}
'\u1E59':'r\u0307',// ṙ = \.{r}
'\u015B':'s\u0301',// ś = \'{s}
'\u1E65':'s\u0301\u0307',// ṥ = \'\.{s}
'\u0161':'s\u030C',// š = \v{s}
'\u1E67':'s\u030C\u0307',// ṧ = \v\.{s}
'\u015D':'s\u0302',// ŝ = \^{s}
'\u1E61':'s\u0307',// ṡ = \.{s}
'\u1E97':'t\u0308',// ẗ = \"{t}
'\u0165':'t\u030C',// ť = \v{t}
'\u1E6B':'t\u0307',// ṫ = \.{t}
"\xFA":'u\u0301',// ú = \'{u}
"\xF9":'u\u0300',// ù = \`{u}
"\xFC":'u\u0308',// ü = \"{u}
'\u01D8':'u\u0308\u0301',// ǘ = \"\'{u}
'\u01DC':'u\u0308\u0300',// ǜ = \"\`{u}
'\u01D6':'u\u0308\u0304',// ǖ = \"\={u}
'\u01DA':'u\u0308\u030C',// ǚ = \"\v{u}
'\u0169':'u\u0303',// ũ = \~{u}
'\u1E79':'u\u0303\u0301',// ṹ = \~\'{u}
'\u016B':'u\u0304',// ū = \={u}
'\u1E7B':'u\u0304\u0308',// ṻ = \=\"{u}
'\u016D':'u\u0306',// ŭ = \u{u}
'\u01D4':'u\u030C',// ǔ = \v{u}
"\xFB":'u\u0302',// û = \^{u}
'\u016F':'u\u030A',// ů = \r{u}
'\u0171':'u\u030B',// ű = \H{u}
'\u1E7D':'v\u0303',// ṽ = \~{v}
'\u1E83':'w\u0301',// ẃ = \'{w}
'\u1E81':'w\u0300',// ẁ = \`{w}
'\u1E85':'w\u0308',// ẅ = \"{w}
'\u0175':'w\u0302',// ŵ = \^{w}
'\u1E87':'w\u0307',// ẇ = \.{w}
'\u1E98':'w\u030A',// ẘ = \r{w}
'\u1E8D':'x\u0308',// ẍ = \"{x}
'\u1E8B':'x\u0307',// ẋ = \.{x}
"\xFD":'y\u0301',// ý = \'{y}
'\u1EF3':'y\u0300',// ỳ = \`{y}
"\xFF":'y\u0308',// ÿ = \"{y}
'\u1EF9':'y\u0303',// ỹ = \~{y}
'\u0233':'y\u0304',// ȳ = \={y}
'\u0177':'y\u0302',// ŷ = \^{y}
'\u1E8F':'y\u0307',// ẏ = \.{y}
'\u1E99':'y\u030A',// ẙ = \r{y}
'\u017A':'z\u0301',// ź = \'{z}
'\u017E':'z\u030C',// ž = \v{z}
'\u1E91':'z\u0302',// ẑ = \^{z}
'\u017C':'z\u0307',// ż = \.{z}
"\xC1":'A\u0301',// Á = \'{A}
"\xC0":'A\u0300',// À = \`{A}
"\xC4":'A\u0308',// Ä = \"{A}
'\u01DE':'A\u0308\u0304',// Ǟ = \"\={A}
"\xC3":'A\u0303',// Ã = \~{A}
'\u0100':'A\u0304',// Ā = \={A}
'\u0102':'A\u0306',// Ă = \u{A}
'\u1EAE':'A\u0306\u0301',// Ắ = \u\'{A}
'\u1EB0':'A\u0306\u0300',// Ằ = \u\`{A}
'\u1EB4':'A\u0306\u0303',// Ẵ = \u\~{A}
'\u01CD':'A\u030C',// Ǎ = \v{A}
"\xC2":'A\u0302',// Â = \^{A}
'\u1EA4':'A\u0302\u0301',// Ấ = \^\'{A}
'\u1EA6':'A\u0302\u0300',// Ầ = \^\`{A}
'\u1EAA':'A\u0302\u0303',// Ẫ = \^\~{A}
'\u0226':'A\u0307',// Ȧ = \.{A}
'\u01E0':'A\u0307\u0304',// Ǡ = \.\={A}
"\xC5":'A\u030A',// Å = \r{A}
'\u01FA':'A\u030A\u0301',// Ǻ = \r\'{A}
'\u1E02':'B\u0307',// Ḃ = \.{B}
'\u0106':'C\u0301',// Ć = \'{C}
'\u010C':'C\u030C',// Č = \v{C}
'\u0108':'C\u0302',// Ĉ = \^{C}
'\u010A':'C\u0307',// Ċ = \.{C}
'\u010E':'D\u030C',// Ď = \v{D}
'\u1E0A':'D\u0307',// Ḋ = \.{D}
"\xC9":'E\u0301',// É = \'{E}
"\xC8":'E\u0300',// È = \`{E}
"\xCB":'E\u0308',// Ë = \"{E}
'\u1EBC':'E\u0303',// Ẽ = \~{E}
'\u0112':'E\u0304',// Ē = \={E}
'\u1E16':'E\u0304\u0301',// Ḗ = \=\'{E}
'\u1E14':'E\u0304\u0300',// Ḕ = \=\`{E}
'\u0114':'E\u0306',// Ĕ = \u{E}
'\u011A':'E\u030C',// Ě = \v{E}
"\xCA":'E\u0302',// Ê = \^{E}
'\u1EBE':'E\u0302\u0301',// Ế = \^\'{E}
'\u1EC0':'E\u0302\u0300',// Ề = \^\`{E}
'\u1EC4':'E\u0302\u0303',// Ễ = \^\~{E}
'\u0116':'E\u0307',// Ė = \.{E}
'\u1E1E':'F\u0307',// Ḟ = \.{F}
'\u01F4':'G\u0301',// Ǵ = \'{G}
'\u1E20':'G\u0304',// Ḡ = \={G}
'\u011E':'G\u0306',// Ğ = \u{G}
'\u01E6':'G\u030C',// Ǧ = \v{G}
'\u011C':'G\u0302',// Ĝ = \^{G}
'\u0120':'G\u0307',// Ġ = \.{G}
'\u1E26':'H\u0308',// Ḧ = \"{H}
'\u021E':'H\u030C',// Ȟ = \v{H}
'\u0124':'H\u0302',// Ĥ = \^{H}
'\u1E22':'H\u0307',// Ḣ = \.{H}
"\xCD":'I\u0301',// Í = \'{I}
"\xCC":'I\u0300',// Ì = \`{I}
"\xCF":'I\u0308',// Ï = \"{I}
'\u1E2E':'I\u0308\u0301',// Ḯ = \"\'{I}
'\u0128':'I\u0303',// Ĩ = \~{I}
'\u012A':'I\u0304',// Ī = \={I}
'\u012C':'I\u0306',// Ĭ = \u{I}
'\u01CF':'I\u030C',// Ǐ = \v{I}
"\xCE":'I\u0302',// Î = \^{I}
'\u0130':'I\u0307',// İ = \.{I}
'\u0134':'J\u0302',// Ĵ = \^{J}
'\u1E30':'K\u0301',// Ḱ = \'{K}
'\u01E8':'K\u030C',// Ǩ = \v{K}
'\u0139':'L\u0301',// Ĺ = \'{L}
'\u013D':'L\u030C',// Ľ = \v{L}
'\u1E3E':'M\u0301',// Ḿ = \'{M}
'\u1E40':'M\u0307',// Ṁ = \.{M}
'\u0143':'N\u0301',// Ń = \'{N}
'\u01F8':'N\u0300',// Ǹ = \`{N}
"\xD1":'N\u0303',// Ñ = \~{N}
'\u0147':'N\u030C',// Ň = \v{N}
'\u1E44':'N\u0307',// Ṅ = \.{N}
"\xD3":'O\u0301',// Ó = \'{O}
"\xD2":'O\u0300',// Ò = \`{O}
"\xD6":'O\u0308',// Ö = \"{O}
'\u022A':'O\u0308\u0304',// Ȫ = \"\={O}
"\xD5":'O\u0303',// Õ = \~{O}
'\u1E4C':'O\u0303\u0301',// Ṍ = \~\'{O}
'\u1E4E':'O\u0303\u0308',// Ṏ = \~\"{O}
'\u022C':'O\u0303\u0304',// Ȭ = \~\={O}
'\u014C':'O\u0304',// Ō = \={O}
'\u1E52':'O\u0304\u0301',// Ṓ = \=\'{O}
'\u1E50':'O\u0304\u0300',// Ṑ = \=\`{O}
'\u014E':'O\u0306',// Ŏ = \u{O}
'\u01D1':'O\u030C',// Ǒ = \v{O}
"\xD4":'O\u0302',// Ô = \^{O}
'\u1ED0':'O\u0302\u0301',// Ố = \^\'{O}
'\u1ED2':'O\u0302\u0300',// Ồ = \^\`{O}
'\u1ED6':'O\u0302\u0303',// Ỗ = \^\~{O}
'\u022E':'O\u0307',// Ȯ = \.{O}
'\u0230':'O\u0307\u0304',// Ȱ = \.\={O}
'\u0150':'O\u030B',// Ő = \H{O}
'\u1E54':'P\u0301',// Ṕ = \'{P}
'\u1E56':'P\u0307',// Ṗ = \.{P}
'\u0154':'R\u0301',// Ŕ = \'{R}
'\u0158':'R\u030C',// Ř = \v{R}
'\u1E58':'R\u0307',// Ṙ = \.{R}
'\u015A':'S\u0301',// Ś = \'{S}
'\u1E64':'S\u0301\u0307',// Ṥ = \'\.{S}
'\u0160':'S\u030C',// Š = \v{S}
'\u1E66':'S\u030C\u0307',// Ṧ = \v\.{S}
'\u015C':'S\u0302',// Ŝ = \^{S}
'\u1E60':'S\u0307',// Ṡ = \.{S}
'\u0164':'T\u030C',// Ť = \v{T}
'\u1E6A':'T\u0307',// Ṫ = \.{T}
"\xDA":'U\u0301',// Ú = \'{U}
"\xD9":'U\u0300',// Ù = \`{U}
"\xDC":'U\u0308',// Ü = \"{U}
'\u01D7':'U\u0308\u0301',// Ǘ = \"\'{U}
'\u01DB':'U\u0308\u0300',// Ǜ = \"\`{U}
'\u01D5':'U\u0308\u0304',// Ǖ = \"\={U}
'\u01D9':'U\u0308\u030C',// Ǚ = \"\v{U}
'\u0168':'U\u0303',// Ũ = \~{U}
'\u1E78':'U\u0303\u0301',// Ṹ = \~\'{U}
'\u016A':'U\u0304',// Ū = \={U}
'\u1E7A':'U\u0304\u0308',// Ṻ = \=\"{U}
'\u016C':'U\u0306',// Ŭ = \u{U}
'\u01D3':'U\u030C',// Ǔ = \v{U}
"\xDB":'U\u0302',// Û = \^{U}
'\u016E':'U\u030A',// Ů = \r{U}
'\u0170':'U\u030B',// Ű = \H{U}
'\u1E7C':'V\u0303',// Ṽ = \~{V}
'\u1E82':'W\u0301',// Ẃ = \'{W}
'\u1E80':'W\u0300',// Ẁ = \`{W}
'\u1E84':'W\u0308',// Ẅ = \"{W}
'\u0174':'W\u0302',// Ŵ = \^{W}
'\u1E86':'W\u0307',// Ẇ = \.{W}
'\u1E8C':'X\u0308',// Ẍ = \"{X}
'\u1E8A':'X\u0307',// Ẋ = \.{X}
"\xDD":'Y\u0301',// Ý = \'{Y}
'\u1EF2':'Y\u0300',// Ỳ = \`{Y}
'\u0178':'Y\u0308',// Ÿ = \"{Y}
'\u1EF8':'Y\u0303',// Ỹ = \~{Y}
'\u0232':'Y\u0304',// Ȳ = \={Y}
'\u0176':'Y\u0302',// Ŷ = \^{Y}
'\u1E8E':'Y\u0307',// Ẏ = \.{Y}
'\u0179':'Z\u0301',// Ź = \'{Z}
'\u017D':'Z\u030C',// Ž = \v{Z}
'\u1E90':'Z\u0302',// Ẑ = \^{Z}
'\u017B':'Z\u0307',// Ż = \.{Z}
'\u03AC':'\u03B1\u0301',// ά = \'{α}
'\u1F70':'\u03B1\u0300',// ὰ = \`{α}
'\u1FB1':'\u03B1\u0304',// ᾱ = \={α}
'\u1FB0':'\u03B1\u0306',// ᾰ = \u{α}
'\u03AD':'\u03B5\u0301',// έ = \'{ε}
'\u1F72':'\u03B5\u0300',// ὲ = \`{ε}
'\u03AE':'\u03B7\u0301',// ή = \'{η}
'\u1F74':'\u03B7\u0300',// ὴ = \`{η}
'\u03AF':'\u03B9\u0301',// ί = \'{ι}
'\u1F76':'\u03B9\u0300',// ὶ = \`{ι}
'\u03CA':'\u03B9\u0308',// ϊ = \"{ι}
'\u0390':'\u03B9\u0308\u0301',// ΐ = \"\'{ι}
'\u1FD2':'\u03B9\u0308\u0300',// ῒ = \"\`{ι}
'\u1FD1':'\u03B9\u0304',// ῑ = \={ι}
'\u1FD0':'\u03B9\u0306',// ῐ = \u{ι}
'\u03CC':'\u03BF\u0301',// ό = \'{ο}
'\u1F78':'\u03BF\u0300',// ὸ = \`{ο}
'\u03CD':'\u03C5\u0301',// ύ = \'{υ}
'\u1F7A':'\u03C5\u0300',// ὺ = \`{υ}
'\u03CB':'\u03C5\u0308',// ϋ = \"{υ}
'\u03B0':'\u03C5\u0308\u0301',// ΰ = \"\'{υ}
'\u1FE2':'\u03C5\u0308\u0300',// ῢ = \"\`{υ}
'\u1FE1':'\u03C5\u0304',// ῡ = \={υ}
'\u1FE0':'\u03C5\u0306',// ῠ = \u{υ}
'\u03CE':'\u03C9\u0301',// ώ = \'{ω}
'\u1F7C':'\u03C9\u0300',// ὼ = \`{ω}
'\u038E':'\u03A5\u0301',// Ύ = \'{Υ}
'\u1FEA':'\u03A5\u0300',// Ὺ = \`{Υ}
'\u03AB':'\u03A5\u0308',// Ϋ = \"{Υ}
'\u1FE9':'\u03A5\u0304',// Ῡ = \={Υ}
'\u1FE8':'\u03A5\u0306',// Ῠ = \u{Υ}
'\u038F':'\u03A9\u0301',// Ώ = \'{Ω}
'\u1FFA':'\u03A9\u0300'// Ὼ = \`{Ω}
};/***/}]/******/)["default"]);});});unwrapExports(katex);

/* Expose. */

var propertyInformation = getPropertyInformation;

/* Constants. */
var USE_ATTRIBUTE = 0x1;
var USE_PROPERTY = 0x2;
var BOOLEAN_VALUE = 0x8;
var NUMERIC_VALUE = 0x10;
var POSITIVE_NUMERIC_VALUE = 0x20 | 0x10;
var OVERLOADED_BOOLEAN_VALUE = 0x40;
var SPACE_SEPARATED = 0x80;
var COMMA_SEPARATED = 0x100;

/* Map of properties. Names are camel-cased properties. */
var propertyConfig = {
  /* Standard Properties. */
  abbr: null,
  accept: COMMA_SEPARATED,
  acceptCharset: SPACE_SEPARATED,
  accessKey: SPACE_SEPARATED,
  action: null,
  allowFullScreen: USE_ATTRIBUTE | BOOLEAN_VALUE,
  allowTransparency: USE_ATTRIBUTE,
  alt: null,
  /* https://html.spec.whatwg.org/#attr-link-as */
  as: null,
  async: BOOLEAN_VALUE,
  autoComplete: SPACE_SEPARATED,
  autoFocus: BOOLEAN_VALUE,
  autoPlay: BOOLEAN_VALUE,
  capture: USE_ATTRIBUTE | BOOLEAN_VALUE,
  cellPadding: null,
  cellSpacing: null,
  challenge: USE_ATTRIBUTE,
  charSet: USE_ATTRIBUTE,
  checked: USE_PROPERTY | BOOLEAN_VALUE,
  cite: null,
  /* To set className on SVG elements, it's necessary to
   * use .setAttribute; this works on HTML elements too
   * in all browsers except IE8. */
  className: USE_ATTRIBUTE | SPACE_SEPARATED,
  cols: USE_ATTRIBUTE | POSITIVE_NUMERIC_VALUE,
  colSpan: null,
  command: null,
  content: null,
  contentEditable: null,
  contextMenu: USE_ATTRIBUTE,
  controls: USE_PROPERTY | BOOLEAN_VALUE,
  /* https://github.com/WICG/controls-list/blob/gh-pages/explainer.md */
  controlsList: SPACE_SEPARATED,
  coords: NUMERIC_VALUE | COMMA_SEPARATED,
  crossOrigin: null,
  /* For `<object />` acts as `src`. */
  data: null,
  dateTime: USE_ATTRIBUTE,
  default: BOOLEAN_VALUE,
  defer: BOOLEAN_VALUE,
  dir: null,
  dirName: null,
  disabled: USE_ATTRIBUTE | BOOLEAN_VALUE,
  download: OVERLOADED_BOOLEAN_VALUE,
  draggable: null,
  dropzone: SPACE_SEPARATED,
  encType: null,
  form: USE_ATTRIBUTE,
  formAction: USE_ATTRIBUTE,
  formEncType: USE_ATTRIBUTE,
  formMethod: USE_ATTRIBUTE,
  formNoValidate: BOOLEAN_VALUE,
  formTarget: USE_ATTRIBUTE,
  frameBorder: USE_ATTRIBUTE,
  headers: SPACE_SEPARATED,
  height: USE_ATTRIBUTE | POSITIVE_NUMERIC_VALUE,
  hidden: USE_ATTRIBUTE | BOOLEAN_VALUE,
  high: NUMERIC_VALUE,
  href: null,
  hrefLang: null,
  htmlFor: SPACE_SEPARATED,
  httpEquiv: SPACE_SEPARATED,
  id: USE_PROPERTY,
  inputMode: USE_ATTRIBUTE,
  /* Web Components */
  is: USE_ATTRIBUTE,
  isMap: BOOLEAN_VALUE,
  keyParams: USE_ATTRIBUTE,
  keyType: USE_ATTRIBUTE,
  kind: null,
  label: null,
  lang: null,
  list: USE_ATTRIBUTE,
  loop: USE_PROPERTY | BOOLEAN_VALUE,
  low: NUMERIC_VALUE,
  manifest: USE_ATTRIBUTE,
  marginHeight: NUMERIC_VALUE,
  marginWidth: NUMERIC_VALUE,
  max: null,
  maxLength: USE_ATTRIBUTE | POSITIVE_NUMERIC_VALUE,
  media: USE_ATTRIBUTE,
  mediaGroup: null,
  menu: null,
  method: null,
  min: null,
  minLength: USE_ATTRIBUTE | POSITIVE_NUMERIC_VALUE,
  multiple: USE_PROPERTY | BOOLEAN_VALUE,
  muted: USE_PROPERTY | BOOLEAN_VALUE,
  name: null,
  nonce: null,
  noValidate: BOOLEAN_VALUE,
  open: BOOLEAN_VALUE,
  optimum: NUMERIC_VALUE,
  pattern: null,
  ping: SPACE_SEPARATED,
  placeholder: null,
  /* https://html.spec.whatwg.org/#attr-video-playsinline */
  playsInline: BOOLEAN_VALUE,
  poster: null,
  preload: null,
  /* https://html.spec.whatwg.org/#dom-head-profile */
  profile: null,
  radioGroup: null,
  readOnly: USE_PROPERTY | BOOLEAN_VALUE,
  /* https://html.spec.whatwg.org/#attr-link-referrerpolicy */
  referrerPolicy: null,
  /* `rel` is `relList` in DOM */
  rel: SPACE_SEPARATED | USE_ATTRIBUTE,
  required: BOOLEAN_VALUE,
  reversed: BOOLEAN_VALUE,
  role: USE_ATTRIBUTE,
  rows: USE_ATTRIBUTE | POSITIVE_NUMERIC_VALUE,
  rowSpan: POSITIVE_NUMERIC_VALUE,
  sandbox: SPACE_SEPARATED,
  scope: null,
  scoped: BOOLEAN_VALUE,
  scrolling: null,
  seamless: USE_ATTRIBUTE | BOOLEAN_VALUE,
  selected: USE_PROPERTY | BOOLEAN_VALUE,
  shape: null,
  size: USE_ATTRIBUTE | POSITIVE_NUMERIC_VALUE,
  sizes: USE_ATTRIBUTE | SPACE_SEPARATED,
  /* https://html.spec.whatwg.org/#attr-slot */
  slot: null,
  sortable: BOOLEAN_VALUE,
  sorted: SPACE_SEPARATED,
  span: POSITIVE_NUMERIC_VALUE,
  spellCheck: null,
  src: null,
  srcDoc: USE_PROPERTY,
  srcLang: null,
  srcSet: USE_ATTRIBUTE | COMMA_SEPARATED,
  start: NUMERIC_VALUE,
  step: null,
  style: null,
  summary: null,
  tabIndex: NUMERIC_VALUE,
  target: null,
  title: null,
  translate: null,
  type: null,
  typeMustMatch: BOOLEAN_VALUE,
  useMap: null,
  value: USE_PROPERTY,
  volume: POSITIVE_NUMERIC_VALUE,
  width: USE_ATTRIBUTE | NUMERIC_VALUE,
  wmode: USE_ATTRIBUTE,
  wrap: null,

  /* Non-standard Properties. */

  /* `autoCapitalize` and `autoCorrect` are supported in
   * Mobile Safari for keyboard hints. */
  autoCapitalize: null,
  autoCorrect: null,
  /* `autoSave` allows WebKit/Blink to persist values of
   * input fields on page reloads */
  autoSave: null,
  /* `itemProp`, `itemScope`, `itemType` are for Microdata
   * support. See http://schema.org/docs/gs.html */
  itemProp: USE_ATTRIBUTE | SPACE_SEPARATED,
  itemScope: USE_ATTRIBUTE | BOOLEAN_VALUE,
  itemType: USE_ATTRIBUTE | SPACE_SEPARATED,
  /* `itemID` and `itemRef` are for Microdata support as well
   * but only specified in the the WHATWG spec document.
   * See https://html.spec.whatwg.org/multipage/
   * microdata.html#microdata-dom-api */
  itemID: USE_ATTRIBUTE,
  itemRef: USE_ATTRIBUTE | SPACE_SEPARATED,
  /* `property` is supported for OpenGraph in meta tags. */
  property: null,
  /* `results` show looking glass icon and recent searches
   * on input search fields in WebKit/Blink */
  results: null,
  /* IE-only attribute that specifies security
   * restrictions on an iframe as an alternative to the
   * sandbox attribute on IE < 10 */
  security: USE_ATTRIBUTE,
  /* IE-only attribute that controls focus behavior */
  unselectable: USE_ATTRIBUTE,

  /* Ancient. */
  xmlLang: USE_ATTRIBUTE,
  xmlBase: USE_ATTRIBUTE
};

/* Map of properties to attributes.
 * Names are lower-case properties.
 * Values are HTML attributes. */
var propertyToAttributeMapping = {
  xmlbase: 'xml:base',
  xmllang: 'xml:lang',
  classname: 'class',
  htmlfor: 'for',
  httpequiv: 'http-equiv',
  acceptcharset: 'accept-charset'
};

/* Expand config. */
var information = {};
var property;
var name;
var config$1;

getPropertyInformation.all = information;

for (property in propertyConfig) {
  name = lower(property);
  name = propertyToAttributeMapping[name] || name;
  config$1 = propertyConfig[property];

  information[name] = {
    name: name,
    propertyName: property,
    mustUseAttribute: check$2(config$1, USE_ATTRIBUTE),
    mustUseProperty: check$2(config$1, USE_PROPERTY),
    boolean: check$2(config$1, BOOLEAN_VALUE),
    overloadedBoolean: check$2(config$1, OVERLOADED_BOOLEAN_VALUE),
    numeric: check$2(config$1, NUMERIC_VALUE),
    positiveNumeric: check$2(config$1, POSITIVE_NUMERIC_VALUE),
    commaSeparated: check$2(config$1, COMMA_SEPARATED),
    spaceSeparated: check$2(config$1, SPACE_SEPARATED)
  };
}

/* Get a config for a property. */
function getPropertyInformation(propertyName) {
  var insensitive = lower(propertyName);

  return information[propertyToAttributeMapping[insensitive] || insensitive];
}

/* Check a mask. */
function check$2(value, bitmask) {
  return (value & bitmask) === bitmask;
}

/* Lower-case a string. */
function lower(value) {
  return value.toLowerCase();
}

function preserveCamelCase(str) {
	var isLastCharLower = false;

	for (var i = 0; i < str.length; i++) {
		var c = str.charAt(i);

		if (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {
			str = str.substr(0, i) + '-' + str.substr(i);
			isLastCharLower = false;
			i++;
		} else {
			isLastCharLower = c.toLowerCase() === c;
		}
	}

	return str;
}

var camelcase = function camelcase() {
	var str = [].map.call(arguments, function (str) {
		return str.trim();
	}).filter(function (str) {
		return str.length;
	}).join('-');

	if (!str.length) {
		return '';
	}

	if (str.length === 1) {
		return str.toLowerCase();
	}

	if (!/[_.\- ]+/.test(str)) {
		if (str === str.toUpperCase()) {
			return str.toLowerCase();
		}

		if (str[0] !== str[0].toLowerCase()) {
			return str[0].toLowerCase() + str.slice(1);
		}

		return str;
	}

	str = preserveCamelCase(str);

	return str.replace(/^[_.\- ]+/, '').toLowerCase().replace(/[_.\- ]+(\w|$)/g, function (m, p1) {
		return p1.toUpperCase();
	});
};

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice$3 = Array.prototype.slice;
var toStr$1 = Object.prototype.toString;
var funcType = '[object Function]';

var implementation = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr$1.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice$3.call(arguments, 1);

    var bound;
    var binder = function binder() {
        if (this instanceof bound) {
            var result = target.apply(this, args.concat(slice$3.call(arguments)));
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(that, args.concat(slice$3.call(arguments)));
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

var functionBind = Function.prototype.bind || implementation;

var src$32 = functionBind.call(Function.call, Object.prototype.hasOwnProperty);

/* Expose. */

var hastUtilParseSelector = parse$7;

/* Characters */
var dot$1 = '.'.charCodeAt(0);
var hash = '#'.charCodeAt(0);

/* Parse a simple CSS selector into a HAST node. */
function parse$7(selector) {
  var id = null;
  var className = [];
  var value = selector || '';
  var name = 'div';
  var node;
  var type = null;
  var index = -1;
  var code;
  var length = value.length;
  var subvalue;
  var lastIndex;

  node = {
    type: 'element',
    tagName: null,
    properties: {},
    children: []
  };

  type = null;

  while (++index <= length) {
    code = value.charCodeAt(index);

    if (!code || code === dot$1 || code === hash) {
      subvalue = value.slice(lastIndex, index);

      if (subvalue) {
        if (type === dot$1) {
          className.push(subvalue);
        } else if (type === hash) {
          id = subvalue;
        } else {
          name = subvalue;
        }
      }

      lastIndex = index + 1;
      type = code;
    }
  }

  node.tagName = name;

  if (id) {
    node.properties.id = id;
  }

  if (className.length !== 0) {
    node.properties.className = className;
  }

  return node;
}

function preserveCamelCase$1(str) {
	var isLastCharLower = false;

	for (var i = 0; i < str.length; i++) {
		var c = str.charAt(i);

		if (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {
			str = str.substr(0, i) + '-' + str.substr(i);
			isLastCharLower = false;
			i++;
		} else {
			isLastCharLower = c.toLowerCase() === c;
		}
	}

	return str;
}

var camelcase$2 = function camelcase() {
	var str = [].map.call(arguments, function (str) {
		return str.trim();
	}).filter(function (str) {
		return str.length;
	}).join('-');

	if (!str.length) {
		return '';
	}

	if (str.length === 1) {
		return str.toLowerCase();
	}

	if (!/[_.\- ]+/.test(str)) {
		if (str === str.toUpperCase()) {
			return str.toLowerCase();
		}

		if (str[0] !== str[0].toLowerCase()) {
			return str[0].toLowerCase() + str.slice(1);
		}

		return str;
	}

	str = preserveCamelCase$1(str);

	return str.replace(/^[_.\- ]+/, '').toLowerCase().replace(/[_.\- ]+(\w|$)/g, function (m, p1) {
		return p1.toUpperCase();
	});
};

var parse_1$3 = parse$8;
var stringify_1$1 = stringify$4;

var comma$1 = ',';
var space$2 = ' ';
var empty$3 = '';

/* Parse comma-separated tokens to an array. */
function parse$8(value) {
  var values = [];
  var input = String(value || empty$3);
  var index = input.indexOf(comma$1);
  var lastIndex = 0;
  var end = false;
  var val;

  while (!end) {
    if (index === -1) {
      index = input.length;
      end = true;
    }

    val = trim_1(input.slice(lastIndex, index));

    if (val || !end) {
      values.push(val);
    }

    lastIndex = index + 1;
    index = input.indexOf(comma$1, lastIndex);
  }

  return values;
}

/* Compile an array to comma-separated tokens.
 * `options.padLeft` (default: `true`) pads a space left of each
 * token, and `options.padRight` (default: `false`) pads a space
 * to the right of each token. */
function stringify$4(values, options) {
  var settings = options || {};
  var left = settings.padLeft === false ? empty$3 : space$2;
  var right = settings.padRight ? space$2 : empty$3;

  /* Ensure the last empty entry is seen. */
  if (values[values.length - 1] === empty$3) {
    values = values.concat(empty$3);
  }

  return trim_1(values.join(right + comma$1 + left));
}

var commaSeparatedTokens = {
  parse: parse_1$3,
  stringify: stringify_1$1
};

var spaces = spaceSeparatedTokens.parse;
var commas = commaSeparatedTokens.parse;

var hastscript = h;

/* Hyperscript compatible DSL for creating virtual HAST
 * trees. */
function h(selector, properties, children) {
  var node = hastUtilParseSelector(selector);
  var property;

  if (properties && !children && (typeof properties === 'string' || 'length' in properties || isNode$3(node.tagName, properties))) {
    children = properties;
    properties = null;
  }

  if (properties) {
    for (property in properties) {
      addProperty(node.properties, property, properties[property]);
    }
  }

  addChild(node.children, children);

  if (node.tagName === 'template') {
    node.content = { type: 'root', children: node.children };
    node.children = [];
  }

  return node;
}

/* Check if `value` is a valid child node of `tagName`. */
function isNode$3(tagName, value) {
  var type = value.type;

  if (typeof type === 'string') {
    type = type.toLowerCase();
  }

  if (tagName === 'input' || !type || typeof type !== 'string') {
    return false;
  }

  if (_typeof(value.children) === 'object' && 'length' in value.children) {
    return true;
  }

  if (tagName === 'button') {
    return type !== 'menu' && type !== 'submit' && type !== 'reset' && type !== 'button';
  }

  return 'value' in value;
}

/* Add `value` as a child to `nodes`. */
function addChild(nodes, value) {
  var index;
  var length;

  if (value === null || value === undefined) {
    return;
  }

  if (typeof value === 'string' || typeof value === 'number') {
    value = { type: 'text', value: String(value) };
  }

  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && 'length' in value) {
    index = -1;
    length = value.length;

    while (++index < length) {
      addChild(nodes, value[index]);
    }

    return;
  }

  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || !('type' in value)) {
    throw new Error('Expected node, nodes, or string, got `' + value + '`');
  }

  nodes.push(value);
}

/* Add `name` and its `value` to `properties`. `properties` can
 * be prefilled by `parseSelector`: it can have `id` and `className`
 * properties. */
function addProperty(properties, name, value) {
  var info = propertyInformation(name) || {};
  var result = value;
  var key;

  /* Ignore nully and NaN values. */
  if (value === null || value === undefined || value !== value) {
    return;
  }

  /* Handle values. */
  if (name === 'style') {
    /* Accept `object`. */
    if (typeof value !== 'string') {
      result = [];

      for (key in value) {
        result.push([key, value[key]].join(': '));
      }

      result = result.join('; ');
    }
  } else if (info.spaceSeparated) {
    /* Accept both `string` and `Array`. */
    result = typeof value === 'string' ? spaces(result) : result;

    /* Class-names (which can be added both on
     * the `selector` and here). */
    if (name === 'class' && properties.className) {
      result = properties.className.concat(result);
    }
  } else if (info.commaSeparated) {
    /* Accept both `string` and `Array`. */
    result = typeof value === 'string' ? commas(result) : result;
  }

  result = parsePrimitive(info, name, result);

  properties[info.propertyName || camelcase$2(name)] = result;
}

/* Parse a (list of) primitives. */
function parsePrimitive(info, name, value) {
  var result = value;
  var index;
  var length;

  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && 'length' in value) {
    length = value.length;
    index = -1;
    result = [];

    while (++index < length) {
      result[index] = parsePrimitive(info, name, value[index]);
    }

    return result;
  }

  if (info.numeric || info.positiveNumeric) {
    if (!isNaN(result) && result !== '') {
      result = Number(result);
    }
  } else if (info.boolean || info.overloadedBoolean) {
    /* Accept `boolean` and `string`. */
    if (typeof result === 'string' && (result === '' || value.toLowerCase() === name)) {
      result = true;
    }
  }

  return result;
}

/* Dependencies. */

/* Expose. */
var hastUtilFromParse5 = wrapper$1;

/* Handlers. */
var map$3 = {
  '#document': root$1,
  '#document-fragment': root$1,
  '#text': text$3,
  '#comment': comment$1,
  '#documentType': doctype
};

/**
 * Wrapper to normalise options.
 *
 * @param {ASTNode} ast - Parse5 node.
 * @param {VFile|Object?} [options] - Configuration.
 * @return {HASTNode} - HAST node.
 */
function wrapper$1(ast, options) {
  var settings = options || {};
  var file;

  if (settings.messages) {
    file = settings;
    settings = {};
  } else {
    file = settings.file;
  }

  return transform(ast, {
    file: file,
    toPosition: file ? vfileLocation(file).toPosition : null,
    verbose: settings.verbose,
    location: false
  });
}

/**
 * Transform a node.
 *
 * @param {ASTNode} ast - Parse5 node.
 * @param {Object} config - Configuration.
 * @return {HASTNode} - HAST node.
 */
function transform(ast, config) {
  var fn = src$32(map$3, ast.nodeName) ? map$3[ast.nodeName] : element;
  var children;
  var node;
  var position;

  if (ast.childNodes) {
    children = nodes(ast.childNodes, config);
  }

  node = fn(ast, children, config);

  if (ast.__location && config.toPosition) {
    config.location = true;
    position = location$1(ast.__location, ast, node, config);

    if (position) {
      node.position = position;
    }
  }

  return node;
}

/**
 * Transform children.
 *
 * @param {Array.<ASTNode>} children - Parse5 nodes.
 * @param {Object} config - Configuration.
 * @return {Array.<HASTNode>} - HAST nodes.
 */
function nodes(children, config) {
  var length = children.length;
  var index = -1;
  var result = [];

  while (++index < length) {
    result[index] = transform(children[index], config);
  }

  return result;
}

/**
 * Transform a document.
 *
 * Stores `ast.quirksMode` in `node.data.quirksMode`.
 *
 * @param {ASTNode.<Document>} ast - Parse5 document.
 * @param {Array.<ASTNode>} children - Children of `ast`.
 * @param {Object} config - Configuration.
 * @return {HASTRoot} - Root node.
 */
function root$1(ast, children, config) {
  var node = {
    type: 'root',
    children: children,
    data: {
      quirksMode: ast.quirksMode
    }
  };

  if (config.file && config.location) {
    node.position = location$1({
      startOffset: 0,
      endOffset: String(config.file).length
    }, ast, node, config);
  }

  return node;
}

/**
 * Transform a doctype.
 *
 * @param {ASTNode.<DocumentType>} ast - Parse5 doctype.
 * @return {HASTDoctype} - Doctype node.
 */
function doctype(ast) {
  return {
    type: 'doctype',
    name: ast.name || '',
    public: ast.publicId || null,
    system: ast.systemId || null
  };
}

/**
 * Transform a text.
 *
 * @param {ASTNode.<Text>} ast - Parse5 text.
 * @return {HASTText} - Text node.
 */
function text$3(ast) {
  return { type: 'text', value: ast.value };
}

/**
 * Transform a comment.
 *
 * @param {ASTNode.<Comment>} ast - Parse5 comment.
 * @return {HASTComment} - Comment node.
 */
function comment$1(ast) {
  return { type: 'comment', value: ast.data };
}

/**
 * Transform an element.
 *
 * @param {ASTNode.<Element>} ast - Parse5 element.
 * @param {Array.<ASTNode>} children - Children of `ast`.
 * @return {HASTElement} - Element node.
 */
function element(ast, children) {
  var props = {};
  var values = ast.attrs;
  var length = values.length;
  var index = -1;
  var attr;

  while (++index < length) {
    attr = values[index];
    props[(attr.prefix ? attr.prefix + ':' : '') + attr.name] = attr.value;
  }

  return hastscript(ast.tagName, props, children);
}

/**
 * Create clean positional information.
 *
 * @param {Function} toPosition - Offset to position.
 * @param {Object?} [dirty] - Parse5 location information.
 * @return {Location} - Start and end positions.
 */
function loc(toPosition, dirty) {
  return {
    start: toPosition(dirty.startOffset),
    end: toPosition(dirty.endOffset)
  };
}

/**
 * Create clean positional information.
 *
 * @param {Object} info - Parse5 location information.
 * @param {HASTNode} node - HAST node.
 * @param {Object} ast - Parse5 node.
 * @param {Object} config - Options.
 * @return {Location} - Start and end positions.
 */
function location$1(info, ast, node, config) {
  var start = info.startOffset;
  var end = info.endOffset;
  var values = info.attrs || {};
  var propPositions = {};
  var prop;
  var name;
  var reference;

  for (prop in values) {
    name = (propertyInformation(prop) || {}).propertyName || camelcase(prop);
    propPositions[name] = loc(config.toPosition, values[prop]);
  }

  /* Upstream: https://github.com/inikulin/parse5/issues/109 */
  if (node.type === 'element' && !info.endTag) {
    reference = node.children[node.children.length - 1];

    /* Unclosed with children: */
    if (reference && reference.position) {
      if (reference.position.end) {
        end = reference.position.end.offset;
      } else {
        end = null;
      }
      /* Unclosed without children: */
    } else if (info.startTag) {
      end = info.startTag.endOffset;
    }
  }

  if (config.verbose && node.type === 'element') {
    node.data = {
      position: {
        opening: loc(config.toPosition, info.startTag || info),
        closing: info.endTag ? loc(config.toPosition, info.endTag) : null,
        properties: propPositions
      }
    };
  }

  start = typeof start === 'number' ? config.toPosition(start) : null;
  end = typeof end === 'number' ? config.toPosition(end) : null;

  if (!start && !end) {
    return undefined;
  }

  return { start: start, end: end };
}

var REPLACEMENT_CHARACTER = '\uFFFD';

var CODE_POINTS = {
    EOF: -1,
    NULL: 0x00,
    TABULATION: 0x09,
    CARRIAGE_RETURN: 0x0D,
    LINE_FEED: 0x0A,
    FORM_FEED: 0x0C,
    SPACE: 0x20,
    EXCLAMATION_MARK: 0x21,
    QUOTATION_MARK: 0x22,
    NUMBER_SIGN: 0x23,
    AMPERSAND: 0x26,
    APOSTROPHE: 0x27,
    HYPHEN_MINUS: 0x2D,
    SOLIDUS: 0x2F,
    DIGIT_0: 0x30,
    DIGIT_9: 0x39,
    SEMICOLON: 0x3B,
    LESS_THAN_SIGN: 0x3C,
    EQUALS_SIGN: 0x3D,
    GREATER_THAN_SIGN: 0x3E,
    QUESTION_MARK: 0x3F,
    LATIN_CAPITAL_A: 0x41,
    LATIN_CAPITAL_F: 0x46,
    LATIN_CAPITAL_X: 0x58,
    LATIN_CAPITAL_Z: 0x5A,
    GRAVE_ACCENT: 0x60,
    LATIN_SMALL_A: 0x61,
    LATIN_SMALL_F: 0x66,
    LATIN_SMALL_X: 0x78,
    LATIN_SMALL_Z: 0x7A,
    REPLACEMENT_CHARACTER: 0xFFFD
};

var CODE_POINT_SEQUENCES = {
    DASH_DASH_STRING: [0x2D, 0x2D], //--
    DOCTYPE_STRING: [0x44, 0x4F, 0x43, 0x54, 0x59, 0x50, 0x45], //DOCTYPE
    CDATA_START_STRING: [0x5B, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5B], //[CDATA[
    CDATA_END_STRING: [0x5D, 0x5D, 0x3E], //]]>
    SCRIPT_STRING: [0x73, 0x63, 0x72, 0x69, 0x70, 0x74], //script
    PUBLIC_STRING: [0x50, 0x55, 0x42, 0x4C, 0x49, 0x43], //PUBLIC
    SYSTEM_STRING: [0x53, 0x59, 0x53, 0x54, 0x45, 0x4D] //SYSTEM
};

var unicode = {
    REPLACEMENT_CHARACTER: REPLACEMENT_CHARACTER,
    CODE_POINTS: CODE_POINTS,
    CODE_POINT_SEQUENCES: CODE_POINT_SEQUENCES
};

var preprocessor = createCommonjsModule(function (module) {
    var $ = unicode.CODE_POINTS;

    //Utils

    //OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
    //this functions if they will be situated in another module due to context switch.
    //Always perform inlining check before modifying this functions ('node --trace-inlining').
    function isSurrogatePair(cp1, cp2) {
        return cp1 >= 0xD800 && cp1 <= 0xDBFF && cp2 >= 0xDC00 && cp2 <= 0xDFFF;
    }

    function getSurrogatePairCodePoint(cp1, cp2) {
        return (cp1 - 0xD800) * 0x400 + 0x2400 + cp2;
    }

    //Const
    var DEFAULT_BUFFER_WATERLINE = 1 << 16;

    //Preprocessor
    //NOTE: HTML input preprocessing
    //(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)
    var Preprocessor = module.exports = function () {
        this.html = null;

        this.pos = -1;
        this.lastGapPos = -1;
        this.lastCharPos = -1;
        this.droppedBufferSize = 0;

        this.gapStack = [];

        this.skipNextNewLine = false;

        this.lastChunkWritten = false;
        this.endOfChunkHit = false;
        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
    };

    Object.defineProperty(Preprocessor.prototype, 'sourcePos', {
        get: function get() {
            return this.droppedBufferSize + this.pos;
        }
    });

    Preprocessor.prototype.dropParsedChunk = function () {
        if (this.pos > this.bufferWaterline) {
            this.lastCharPos -= this.pos;
            this.droppedBufferSize += this.pos;
            this.html = this.html.substring(this.pos);
            this.pos = 0;
            this.lastGapPos = -1;
            this.gapStack = [];
        }
    };

    Preprocessor.prototype._addGap = function () {
        this.gapStack.push(this.lastGapPos);
        this.lastGapPos = this.pos;
    };

    Preprocessor.prototype._processHighRangeCodePoint = function (cp) {
        //NOTE: try to peek a surrogate pair
        if (this.pos !== this.lastCharPos) {
            var nextCp = this.html.charCodeAt(this.pos + 1);

            if (isSurrogatePair(cp, nextCp)) {
                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.
                this.pos++;
                cp = getSurrogatePairCodePoint(cp, nextCp);

                //NOTE: add gap that should be avoided during retreat
                this._addGap();
            }
        }

        // NOTE: we've hit the end of chunk, stop processing at this point
        else if (!this.lastChunkWritten) {
                this.endOfChunkHit = true;
                return $.EOF;
            }

        return cp;
    };

    Preprocessor.prototype.write = function (chunk, isLastChunk) {
        if (this.html) this.html += chunk;else this.html = chunk;

        this.lastCharPos = this.html.length - 1;
        this.endOfChunkHit = false;
        this.lastChunkWritten = isLastChunk;
    };

    Preprocessor.prototype.insertHtmlAtCurrentPos = function (chunk) {
        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);

        this.lastCharPos = this.html.length - 1;
        this.endOfChunkHit = false;
    };

    Preprocessor.prototype.advance = function () {
        this.pos++;

        if (this.pos > this.lastCharPos) {
            if (!this.lastChunkWritten) this.endOfChunkHit = true;

            return $.EOF;
        }

        var cp = this.html.charCodeAt(this.pos);

        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character
        //must be ignored.
        if (this.skipNextNewLine && cp === $.LINE_FEED) {
            this.skipNextNewLine = false;
            this._addGap();
            return this.advance();
        }

        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters
        if (cp === $.CARRIAGE_RETURN) {
            this.skipNextNewLine = true;
            return $.LINE_FEED;
        }

        this.skipNextNewLine = false;

        //OPTIMIZATION: first perform check if the code point in the allowed range that covers most common
        //HTML input (e.g. ASCII codes) to avoid performance-cost operations for high-range code points.
        return cp >= 0xD800 ? this._processHighRangeCodePoint(cp) : cp;
    };

    Preprocessor.prototype.retreat = function () {
        if (this.pos === this.lastGapPos) {
            this.lastGapPos = this.gapStack.pop();
            this.pos--;
        }

        this.pos--;
    };
});

//Aliases
var $ = unicode.CODE_POINTS;

var assign$2 = function assign(tokenizer) {
    //NOTE: obtain Tokenizer proto this way to avoid module circular references
    var tokenizerProto = Object.getPrototypeOf(tokenizer),
        tokenStartOffset = -1,
        tokenCol = -1,
        tokenLine = 1,
        isEol = false,
        lineStartPosStack = [0],
        lineStartPos = 0,
        col = -1,
        line = 1;

    function attachLocationInfo(token) {
        /**
         * @typedef {Object} LocationInfo
         *
         * @property {Number} line - One-based line index
         * @property {Number} col - One-based column index
         * @property {Number} startOffset - Zero-based first character index
         * @property {Number} endOffset - Zero-based last character index
         */
        token.location = {
            line: tokenLine,
            col: tokenCol,
            startOffset: tokenStartOffset,
            endOffset: -1
        };
    }

    //NOTE: patch consumption method to track line/col information
    tokenizer._consume = function () {
        var cp = tokenizerProto._consume.call(this);

        //NOTE: LF should be in the last column of the line
        if (isEol) {
            isEol = false;
            line++;
            lineStartPosStack.push(this.preprocessor.sourcePos);
            lineStartPos = this.preprocessor.sourcePos;
        }

        if (cp === $.LINE_FEED) isEol = true;

        col = this.preprocessor.sourcePos - lineStartPos + 1;

        return cp;
    };

    tokenizer._unconsume = function () {
        tokenizerProto._unconsume.call(this);
        isEol = false;

        while (lineStartPos > this.preprocessor.sourcePos && lineStartPosStack.length > 1) {
            lineStartPos = lineStartPosStack.pop();
            line--;
        }

        col = this.preprocessor.sourcePos - lineStartPos + 1;
    };

    //NOTE: patch token creation methods and attach location objects
    tokenizer._createStartTagToken = function () {
        tokenizerProto._createStartTagToken.call(this);
        attachLocationInfo(this.currentToken);
    };

    tokenizer._createEndTagToken = function () {
        tokenizerProto._createEndTagToken.call(this);
        attachLocationInfo(this.currentToken);
    };

    tokenizer._createCommentToken = function () {
        tokenizerProto._createCommentToken.call(this);
        attachLocationInfo(this.currentToken);
    };

    tokenizer._createDoctypeToken = function (initialName) {
        tokenizerProto._createDoctypeToken.call(this, initialName);
        attachLocationInfo(this.currentToken);
    };

    tokenizer._createCharacterToken = function (type, ch) {
        tokenizerProto._createCharacterToken.call(this, type, ch);
        attachLocationInfo(this.currentCharacterToken);
    };

    tokenizer._createAttr = function (attrNameFirstCh) {
        tokenizerProto._createAttr.call(this, attrNameFirstCh);
        this.currentAttrLocation = {
            line: line,
            col: col,
            startOffset: this.preprocessor.sourcePos,
            endOffset: -1
        };
    };

    tokenizer._leaveAttrName = function (toState) {
        tokenizerProto._leaveAttrName.call(this, toState);
        this._attachCurrentAttrLocationInfo();
    };

    tokenizer._leaveAttrValue = function (toState) {
        tokenizerProto._leaveAttrValue.call(this, toState);
        this._attachCurrentAttrLocationInfo();
    };

    tokenizer._attachCurrentAttrLocationInfo = function () {
        this.currentAttrLocation.endOffset = this.preprocessor.sourcePos;

        if (!this.currentToken.location.attrs) this.currentToken.location.attrs = {};

        /**
         * @typedef {Object} StartTagLocationInfo
         * @extends LocationInfo
         *
         * @property {Dictionary<String, LocationInfo>} attrs - Start tag attributes' location info.
         */
        this.currentToken.location.attrs[this.currentAttr.name] = this.currentAttrLocation;
    };

    //NOTE: patch token emission methods to determine end location
    tokenizer._emitCurrentToken = function () {
        //NOTE: if we have pending character token make it's end location equal to the
        //current token's start location.
        if (this.currentCharacterToken) this.currentCharacterToken.location.endOffset = this.currentToken.location.startOffset;

        this.currentToken.location.endOffset = this.preprocessor.sourcePos + 1;
        tokenizerProto._emitCurrentToken.call(this);
    };

    tokenizer._emitCurrentCharacterToken = function () {
        //NOTE: if we have character token and it's location wasn't set in the _emitCurrentToken(),
        //then set it's location at the current preprocessor position.
        //We don't need to increment preprocessor position, since character token
        //emission is always forced by the start of the next character token here.
        //So, we already have advanced position.
        if (this.currentCharacterToken && this.currentCharacterToken.location.endOffset === -1) this.currentCharacterToken.location.endOffset = this.preprocessor.sourcePos;

        tokenizerProto._emitCurrentCharacterToken.call(this);
    };

    //NOTE: patch initial states for each mode to obtain token start position
    Object.keys(tokenizerProto.MODE).map(function (modeName) {
        return tokenizerProto.MODE[modeName];
    }).forEach(function (state) {
        tokenizer[state] = function (cp) {
            tokenStartOffset = this.preprocessor.sourcePos;
            tokenLine = line;
            tokenCol = col;
            tokenizerProto[state].call(this, cp);
        };
    });
};

var tokenizer_mixin = {
    assign: assign$2
};

//NOTE: this file contains auto-generated trie structure that is used for named entity references consumption
//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#tokenizing-character-references and
//http://www.whatwg.org/specs/web-apps/current-work/multipage/named-character-references.html#named-character-references)

var named_entity_trie = { 65: { l: { 69: { l: { 108: { l: { 105: { l: { 103: { l: { 59: { c: [198] } }, c: [198] } } } } } } }, 77: { l: { 80: { l: { 59: { c: [38] } }, c: [38] } } }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [193] } }, c: [193] } } } } } } } } }, 98: { l: { 114: { l: { 101: { l: { 118: { l: { 101: { l: { 59: { c: [258] } } } } } } } } } } }, 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [194] } }, c: [194] } } } } }, 121: { l: { 59: { c: [1040] } } } } }, 102: { l: { 114: { l: { 59: { c: [120068] } } } } }, 103: { l: { 114: { l: { 97: { l: { 118: { l: { 101: { l: { 59: { c: [192] } }, c: [192] } } } } } } } } }, 108: { l: { 112: { l: { 104: { l: { 97: { l: { 59: { c: [913] } } } } } } } } }, 109: { l: { 97: { l: { 99: { l: { 114: { l: { 59: { c: [256] } } } } } } } } }, 110: { l: { 100: { l: { 59: { c: [10835] } } } } }, 111: { l: { 103: { l: { 111: { l: { 110: { l: { 59: { c: [260] } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120120] } } } } } } }, 112: { l: { 112: { l: { 108: { l: { 121: { l: { 70: { l: { 117: { l: { 110: { l: { 99: { l: { 116: { l: { 105: { l: { 111: { l: { 110: { l: { 59: { c: [8289] } } } } } } } } } } } } } } } } } } } } } } } } }, 114: { l: { 105: { l: { 110: { l: { 103: { l: { 59: { c: [197] } }, c: [197] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119964] } } } } }, 115: { l: { 105: { l: { 103: { l: { 110: { l: { 59: { c: [8788] } } } } } } } } } } }, 116: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [195] } }, c: [195] } } } } } } } } }, 117: { l: { 109: { l: { 108: { l: { 59: { c: [196] } }, c: [196] } } } } } } }, 66: { l: { 97: { l: { 99: { l: { 107: { l: { 115: { l: { 108: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [8726] } } } } } } } } } } } } } } }, 114: { l: { 118: { l: { 59: { c: [10983] } } }, 119: { l: { 101: { l: { 100: { l: { 59: { c: [8966] } } } } } } } } } } }, 99: { l: { 121: { l: { 59: { c: [1041] } } } } }, 101: { l: { 99: { l: { 97: { l: { 117: { l: { 115: { l: { 101: { l: { 59: { c: [8757] } } } } } } } } } } }, 114: { l: { 110: { l: { 111: { l: { 117: { l: { 108: { l: { 108: { l: { 105: { l: { 115: { l: { 59: { c: [8492] } } } } } } } } } } } } } } } } }, 116: { l: { 97: { l: { 59: { c: [914] } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120069] } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120121] } } } } } } }, 114: { l: { 101: { l: { 118: { l: { 101: { l: { 59: { c: [728] } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [8492] } } } } } } }, 117: { l: { 109: { l: { 112: { l: { 101: { l: { 113: { l: { 59: { c: [8782] } } } } } } } } } } } } }, 67: { l: { 72: { l: { 99: { l: { 121: { l: { 59: { c: [1063] } } } } } } }, 79: { l: { 80: { l: { 89: { l: { 59: { c: [169] } }, c: [169] } } } } }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [262] } } } } } } } } }, 112: { l: { 59: { c: [8914] }, 105: { l: { 116: { l: { 97: { l: { 108: { l: { 68: { l: { 105: { l: { 102: { l: { 102: { l: { 101: { l: { 114: { l: { 101: { l: { 110: { l: { 116: { l: { 105: { l: { 97: { l: { 108: { l: { 68: { l: { 59: { c: [8517] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 121: { l: { 108: { l: { 101: { l: { 121: { l: { 115: { l: { 59: { c: [8493] } } } } } } } } } } } } }, 99: { l: { 97: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [268] } } } } } } } } }, 101: { l: { 100: { l: { 105: { l: { 108: { l: { 59: { c: [199] } }, c: [199] } } } } } } }, 105: { l: { 114: { l: { 99: { l: { 59: { c: [264] } } } } } } }, 111: { l: { 110: { l: { 105: { l: { 110: { l: { 116: { l: { 59: { c: [8752] } } } } } } } } } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [266] } } } } } } }, 101: { l: { 100: { l: { 105: { l: { 108: { l: { 108: { l: { 97: { l: { 59: { c: [184] } } } } } } } } } } }, 110: { l: { 116: { l: { 101: { l: { 114: { l: { 68: { l: { 111: { l: { 116: { l: { 59: { c: [183] } } } } } } } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [8493] } } } } }, 104: { l: { 105: { l: { 59: { c: [935] } } } } }, 105: { l: { 114: { l: { 99: { l: { 108: { l: { 101: { l: { 68: { l: { 111: { l: { 116: { l: { 59: { c: [8857] } } } } } } }, 77: { l: { 105: { l: { 110: { l: { 117: { l: { 115: { l: { 59: { c: [8854] } } } } } } } } } } }, 80: { l: { 108: { l: { 117: { l: { 115: { l: { 59: { c: [8853] } } } } } } } } }, 84: { l: { 105: { l: { 109: { l: { 101: { l: { 115: { l: { 59: { c: [8855] } } } } } } } } } } } } } } } } } } } } }, 108: { l: { 111: { l: { 99: { l: { 107: { l: { 119: { l: { 105: { l: { 115: { l: { 101: { l: { 67: { l: { 111: { l: { 110: { l: { 116: { l: { 111: { l: { 117: { l: { 114: { l: { 73: { l: { 110: { l: { 116: { l: { 101: { l: { 103: { l: { 114: { l: { 97: { l: { 108: { l: { 59: { c: [8754] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 101: { l: { 67: { l: { 117: { l: { 114: { l: { 108: { l: { 121: { l: { 68: { l: { 111: { l: { 117: { l: { 98: { l: { 108: { l: { 101: { l: { 81: { l: { 117: { l: { 111: { l: { 116: { l: { 101: { l: { 59: { c: [8221] } } } } } } } } } } } } } } } } } } } } } } }, 81: { l: { 117: { l: { 111: { l: { 116: { l: { 101: { l: { 59: { c: [8217] } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 111: { l: { 108: { l: { 111: { l: { 110: { l: { 59: { c: [8759] }, 101: { l: { 59: { c: [10868] } } } } } } } } }, 110: { l: { 103: { l: { 114: { l: { 117: { l: { 101: { l: { 110: { l: { 116: { l: { 59: { c: [8801] } } } } } } } } } } } } }, 105: { l: { 110: { l: { 116: { l: { 59: { c: [8751] } } } } } } }, 116: { l: { 111: { l: { 117: { l: { 114: { l: { 73: { l: { 110: { l: { 116: { l: { 101: { l: { 103: { l: { 114: { l: { 97: { l: { 108: { l: { 59: { c: [8750] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 112: { l: { 102: { l: { 59: { c: [8450] } } }, 114: { l: { 111: { l: { 100: { l: { 117: { l: { 99: { l: { 116: { l: { 59: { c: [8720] } } } } } } } } } } } } } } }, 117: { l: { 110: { l: { 116: { l: { 101: { l: { 114: { l: { 67: { l: { 108: { l: { 111: { l: { 99: { l: { 107: { l: { 119: { l: { 105: { l: { 115: { l: { 101: { l: { 67: { l: { 111: { l: { 110: { l: { 116: { l: { 111: { l: { 117: { l: { 114: { l: { 73: { l: { 110: { l: { 116: { l: { 101: { l: { 103: { l: { 114: { l: { 97: { l: { 108: { l: { 59: { c: [8755] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 114: { l: { 111: { l: { 115: { l: { 115: { l: { 59: { c: [10799] } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119966] } } } } } } }, 117: { l: { 112: { l: { 59: { c: [8915] }, 67: { l: { 97: { l: { 112: { l: { 59: { c: [8781] } } } } } } } } } } } } }, 68: { l: { 68: { l: { 59: { c: [8517] }, 111: { l: { 116: { l: { 114: { l: { 97: { l: { 104: { l: { 100: { l: { 59: { c: [10513] } } } } } } } } } } } } } } }, 74: { l: { 99: { l: { 121: { l: { 59: { c: [1026] } } } } } } }, 83: { l: { 99: { l: { 121: { l: { 59: { c: [1029] } } } } } } }, 90: { l: { 99: { l: { 121: { l: { 59: { c: [1039] } } } } } } }, 97: { l: { 103: { l: { 103: { l: { 101: { l: { 114: { l: { 59: { c: [8225] } } } } } } } } }, 114: { l: { 114: { l: { 59: { c: [8609] } } } } }, 115: { l: { 104: { l: { 118: { l: { 59: { c: [10980] } } } } } } } } }, 99: { l: { 97: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [270] } } } } } } } } }, 121: { l: { 59: { c: [1044] } } } } }, 101: { l: { 108: { l: { 59: { c: [8711] }, 116: { l: { 97: { l: { 59: { c: [916] } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120071] } } } } }, 105: { l: { 97: { l: { 99: { l: { 114: { l: { 105: { l: { 116: { l: { 105: { l: { 99: { l: { 97: { l: { 108: { l: { 65: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [180] } } } } } } } } } } }, 68: { l: { 111: { l: { 116: { l: { 59: { c: [729] } } }, 117: { l: { 98: { l: { 108: { l: { 101: { l: { 65: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [733] } } } } } } } } } } } } } } } } } } } } } } }, 71: { l: { 114: { l: { 97: { l: { 118: { l: { 101: { l: { 59: { c: [96] } } } } } } } } } } }, 84: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [732] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 109: { l: { 111: { l: { 110: { l: { 100: { l: { 59: { c: [8900] } } } } } } } } } } }, 102: { l: { 102: { l: { 101: { l: { 114: { l: { 101: { l: { 110: { l: { 116: { l: { 105: { l: { 97: { l: { 108: { l: { 68: { l: { 59: { c: [8518] } } } } } } } } } } } } } } } } } } } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120123] } } } } }, 116: { l: { 59: { c: [168] }, 68: { l: { 111: { l: { 116: { l: { 59: { c: [8412] } } } } } } }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8784] } } } } } } } } } } } } }, 117: { l: { 98: { l: { 108: { l: { 101: { l: { 67: { l: { 111: { l: { 110: { l: { 116: { l: { 111: { l: { 117: { l: { 114: { l: { 73: { l: { 110: { l: { 116: { l: { 101: { l: { 103: { l: { 114: { l: { 97: { l: { 108: { l: { 59: { c: [8751] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 68: { l: { 111: { l: { 116: { l: { 59: { c: [168] } } }, 119: { l: { 110: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8659] } } } } } } } } } } } } } } } } } } }, 76: { l: { 101: { l: { 102: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8656] } } } } } } } } } } }, 82: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8660] } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 101: { l: { 101: { l: { 59: { c: [10980] } } } } } } } } } } } } }, 111: { l: { 110: { l: { 103: { l: { 76: { l: { 101: { l: { 102: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10232] } } } } } } } } } } }, 82: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10234] } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 82: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10233] } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 82: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8658] } } } } } } } } } } }, 84: { l: { 101: { l: { 101: { l: { 59: { c: [8872] } } } } } } } } } } } } } } } } }, 85: { l: { 112: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8657] } } } } } } } } } } }, 68: { l: { 111: { l: { 119: { l: { 110: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8661] } } } } } } } } } } } } } } } } } } } } } } }, 86: { l: { 101: { l: { 114: { l: { 116: { l: { 105: { l: { 99: { l: { 97: { l: { 108: { l: { 66: { l: { 97: { l: { 114: { l: { 59: { c: [8741] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 119: { l: { 110: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8595] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [10515] } } } } } } }, 85: { l: { 112: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8693] } } } } } } } } } } } } } } } } } } } } } } } } }, 66: { l: { 114: { l: { 101: { l: { 118: { l: { 101: { l: { 59: { c: [785] } } } } } } } } } } }, 76: { l: { 101: { l: { 102: { l: { 116: { l: { 82: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [10576] } } } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 101: { l: { 101: { l: { 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [10590] } } } } } } } } } } } } } } } } } } }, 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [8637] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [10582] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 82: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 84: { l: { 101: { l: { 101: { l: { 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [10591] } } } } } } } } } } } } } } } } } } }, 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [8641] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [10583] } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 101: { l: { 101: { l: { 59: { c: [8868] }, 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8615] } } } } } } } } } } } } } } } } }, 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8659] } } } } } } } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119967] } } } } }, 116: { l: { 114: { l: { 111: { l: { 107: { l: { 59: { c: [272] } } } } } } } } } } } } }, 69: { l: { 78: { l: { 71: { l: { 59: { c: [330] } } } } }, 84: { l: { 72: { l: { 59: { c: [208] } }, c: [208] } } }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [201] } }, c: [201] } } } } } } } } }, 99: { l: { 97: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [282] } } } } } } } } }, 105: { l: { 114: { l: { 99: { l: { 59: { c: [202] } }, c: [202] } } } } }, 121: { l: { 59: { c: [1069] } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [278] } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120072] } } } } }, 103: { l: { 114: { l: { 97: { l: { 118: { l: { 101: { l: { 59: { c: [200] } }, c: [200] } } } } } } } } }, 108: { l: { 101: { l: { 109: { l: { 101: { l: { 110: { l: { 116: { l: { 59: { c: [8712] } } } } } } } } } } } } }, 109: { l: { 97: { l: { 99: { l: { 114: { l: { 59: { c: [274] } } } } } } }, 112: { l: { 116: { l: { 121: { l: { 83: { l: { 109: { l: { 97: { l: { 108: { l: { 108: { l: { 83: { l: { 113: { l: { 117: { l: { 97: { l: { 114: { l: { 101: { l: { 59: { c: [9723] } } } } } } } } } } } } } } } } } } } } } } }, 86: { l: { 101: { l: { 114: { l: { 121: { l: { 83: { l: { 109: { l: { 97: { l: { 108: { l: { 108: { l: { 83: { l: { 113: { l: { 117: { l: { 97: { l: { 114: { l: { 101: { l: { 59: { c: [9643] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 111: { l: { 103: { l: { 111: { l: { 110: { l: { 59: { c: [280] } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120124] } } } } } } }, 112: { l: { 115: { l: { 105: { l: { 108: { l: { 111: { l: { 110: { l: { 59: { c: [917] } } } } } } } } } } } } }, 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [10869] }, 84: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [8770] } } } } } } } } } } } } } } }, 105: { l: { 108: { l: { 105: { l: { 98: { l: { 114: { l: { 105: { l: { 117: { l: { 109: { l: { 59: { c: [8652] } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [8496] } } } } }, 105: { l: { 109: { l: { 59: { c: [10867] } } } } } } }, 116: { l: { 97: { l: { 59: { c: [919] } } } } }, 117: { l: { 109: { l: { 108: { l: { 59: { c: [203] } }, c: [203] } } } } }, 120: { l: { 105: { l: { 115: { l: { 116: { l: { 115: { l: { 59: { c: [8707] } } } } } } } } }, 112: { l: { 111: { l: { 110: { l: { 101: { l: { 110: { l: { 116: { l: { 105: { l: { 97: { l: { 108: { l: { 69: { l: { 59: { c: [8519] } } } } } } } } } } } } } } } } } } } } } } } } }, 70: { l: { 99: { l: { 121: { l: { 59: { c: [1060] } } } } }, 102: { l: { 114: { l: { 59: { c: [120073] } } } } }, 105: { l: { 108: { l: { 108: { l: { 101: { l: { 100: { l: { 83: { l: { 109: { l: { 97: { l: { 108: { l: { 108: { l: { 83: { l: { 113: { l: { 117: { l: { 97: { l: { 114: { l: { 101: { l: { 59: { c: [9724] } } } } } } } } } } } } } } } } } } } } } } }, 86: { l: { 101: { l: { 114: { l: { 121: { l: { 83: { l: { 109: { l: { 97: { l: { 108: { l: { 108: { l: { 83: { l: { 113: { l: { 117: { l: { 97: { l: { 114: { l: { 101: { l: { 59: { c: [9642] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120125] } } } } }, 114: { l: { 65: { l: { 108: { l: { 108: { l: { 59: { c: [8704] } } } } } } } } }, 117: { l: { 114: { l: { 105: { l: { 101: { l: { 114: { l: { 116: { l: { 114: { l: { 102: { l: { 59: { c: [8497] } } } } } } } } } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [8497] } } } } } } } } }, 71: { l: { 74: { l: { 99: { l: { 121: { l: { 59: { c: [1027] } } } } } } }, 84: { l: { 59: { c: [62] } }, c: [62] }, 97: { l: { 109: { l: { 109: { l: { 97: { l: { 59: { c: [915] }, 100: { l: { 59: { c: [988] } } } } } } } } } } }, 98: { l: { 114: { l: { 101: { l: { 118: { l: { 101: { l: { 59: { c: [286] } } } } } } } } } } }, 99: { l: { 101: { l: { 100: { l: { 105: { l: { 108: { l: { 59: { c: [290] } } } } } } } } }, 105: { l: { 114: { l: { 99: { l: { 59: { c: [284] } } } } } } }, 121: { l: { 59: { c: [1043] } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [288] } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120074] } } } } }, 103: { l: { 59: { c: [8921] } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120126] } } } } } } }, 114: { l: { 101: { l: { 97: { l: { 116: { l: { 101: { l: { 114: { l: { 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8805] }, 76: { l: { 101: { l: { 115: { l: { 115: { l: { 59: { c: [8923] } } } } } } } } } } } } } } } } } } }, 70: { l: { 117: { l: { 108: { l: { 108: { l: { 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8807] } } } } } } } } } } } } } } } } } } }, 71: { l: { 114: { l: { 101: { l: { 97: { l: { 116: { l: { 101: { l: { 114: { l: { 59: { c: [10914] } } } } } } } } } } } } } } }, 76: { l: { 101: { l: { 115: { l: { 115: { l: { 59: { c: [8823] } } } } } } } } }, 83: { l: { 108: { l: { 97: { l: { 110: { l: { 116: { l: { 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [10878] } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [8819] } } } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119970] } } } } } } }, 116: { l: { 59: { c: [8811] } } } } }, 72: { l: { 65: { l: { 82: { l: { 68: { l: { 99: { l: { 121: { l: { 59: { c: [1066] } } } } } } } } } } }, 97: { l: { 99: { l: { 101: { l: { 107: { l: { 59: { c: [711] } } } } } } }, 116: { l: { 59: { c: [94] } } } } }, 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [292] } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [8460] } } } } }, 105: { l: { 108: { l: { 98: { l: { 101: { l: { 114: { l: { 116: { l: { 83: { l: { 112: { l: { 97: { l: { 99: { l: { 101: { l: { 59: { c: [8459] } } } } } } } } } } } } } } } } } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [8461] } } } } }, 114: { l: { 105: { l: { 122: { l: { 111: { l: { 110: { l: { 116: { l: { 97: { l: { 108: { l: { 76: { l: { 105: { l: { 110: { l: { 101: { l: { 59: { c: [9472] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [8459] } } } } }, 116: { l: { 114: { l: { 111: { l: { 107: { l: { 59: { c: [294] } } } } } } } } } } }, 117: { l: { 109: { l: { 112: { l: { 68: { l: { 111: { l: { 119: { l: { 110: { l: { 72: { l: { 117: { l: { 109: { l: { 112: { l: { 59: { c: [8782] } } } } } } } } } } } } } } } } }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8783] } } } } } } } } } } } } } } } } } } }, 73: { l: { 69: { l: { 99: { l: { 121: { l: { 59: { c: [1045] } } } } } } }, 74: { l: { 108: { l: { 105: { l: { 103: { l: { 59: { c: [306] } } } } } } } } }, 79: { l: { 99: { l: { 121: { l: { 59: { c: [1025] } } } } } } }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [205] } }, c: [205] } } } } } } } } }, 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [206] } }, c: [206] } } } } }, 121: { l: { 59: { c: [1048] } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [304] } } } } } } }, 102: { l: { 114: { l: { 59: { c: [8465] } } } } }, 103: { l: { 114: { l: { 97: { l: { 118: { l: { 101: { l: { 59: { c: [204] } }, c: [204] } } } } } } } } }, 109: { l: { 59: { c: [8465] }, 97: { l: { 99: { l: { 114: { l: { 59: { c: [298] } } } } }, 103: { l: { 105: { l: { 110: { l: { 97: { l: { 114: { l: { 121: { l: { 73: { l: { 59: { c: [8520] } } } } } } } } } } } } } } } } }, 112: { l: { 108: { l: { 105: { l: { 101: { l: { 115: { l: { 59: { c: [8658] } } } } } } } } } } } } }, 110: { l: { 116: { l: { 59: { c: [8748] }, 101: { l: { 103: { l: { 114: { l: { 97: { l: { 108: { l: { 59: { c: [8747] } } } } } } } } }, 114: { l: { 115: { l: { 101: { l: { 99: { l: { 116: { l: { 105: { l: { 111: { l: { 110: { l: { 59: { c: [8898] } } } } } } } } } } } } } } } } } } } } }, 118: { l: { 105: { l: { 115: { l: { 105: { l: { 98: { l: { 108: { l: { 101: { l: { 67: { l: { 111: { l: { 109: { l: { 109: { l: { 97: { l: { 59: { c: [8291] } } } } } } } } } } }, 84: { l: { 105: { l: { 109: { l: { 101: { l: { 115: { l: { 59: { c: [8290] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 111: { l: { 103: { l: { 111: { l: { 110: { l: { 59: { c: [302] } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120128] } } } } }, 116: { l: { 97: { l: { 59: { c: [921] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [8464] } } } } } } }, 116: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [296] } } } } } } } } } } }, 117: { l: { 107: { l: { 99: { l: { 121: { l: { 59: { c: [1030] } } } } } } }, 109: { l: { 108: { l: { 59: { c: [207] } }, c: [207] } } } } } } }, 74: { l: { 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [308] } } } } } } }, 121: { l: { 59: { c: [1049] } } } } }, 102: { l: { 114: { l: { 59: { c: [120077] } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120129] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119973] } } } } }, 101: { l: { 114: { l: { 99: { l: { 121: { l: { 59: { c: [1032] } } } } } } } } } } }, 117: { l: { 107: { l: { 99: { l: { 121: { l: { 59: { c: [1028] } } } } } } } } } } }, 75: { l: { 72: { l: { 99: { l: { 121: { l: { 59: { c: [1061] } } } } } } }, 74: { l: { 99: { l: { 121: { l: { 59: { c: [1036] } } } } } } }, 97: { l: { 112: { l: { 112: { l: { 97: { l: { 59: { c: [922] } } } } } } } } }, 99: { l: { 101: { l: { 100: { l: { 105: { l: { 108: { l: { 59: { c: [310] } } } } } } } } }, 121: { l: { 59: { c: [1050] } } } } }, 102: { l: { 114: { l: { 59: { c: [120078] } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120130] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119974] } } } } } } } } }, 76: { l: { 74: { l: { 99: { l: { 121: { l: { 59: { c: [1033] } } } } } } }, 84: { l: { 59: { c: [60] } }, c: [60] }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [313] } } } } } } } } }, 109: { l: { 98: { l: { 100: { l: { 97: { l: { 59: { c: [923] } } } } } } } } }, 110: { l: { 103: { l: { 59: { c: [10218] } } } } }, 112: { l: { 108: { l: { 97: { l: { 99: { l: { 101: { l: { 116: { l: { 114: { l: { 102: { l: { 59: { c: [8466] } } } } } } } } } } } } } } } } }, 114: { l: { 114: { l: { 59: { c: [8606] } } } } } } }, 99: { l: { 97: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [317] } } } } } } } } }, 101: { l: { 100: { l: { 105: { l: { 108: { l: { 59: { c: [315] } } } } } } } } }, 121: { l: { 59: { c: [1051] } } } } }, 101: { l: { 102: { l: { 116: { l: { 65: { l: { 110: { l: { 103: { l: { 108: { l: { 101: { l: { 66: { l: { 114: { l: { 97: { l: { 99: { l: { 107: { l: { 101: { l: { 116: { l: { 59: { c: [10216] } } } } } } } } } } } } } } } } } } } } } } }, 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8592] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [8676] } } } } } } }, 82: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8646] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 67: { l: { 101: { l: { 105: { l: { 108: { l: { 105: { l: { 110: { l: { 103: { l: { 59: { c: [8968] } } } } } } } } } } } } } } }, 68: { l: { 111: { l: { 117: { l: { 98: { l: { 108: { l: { 101: { l: { 66: { l: { 114: { l: { 97: { l: { 99: { l: { 107: { l: { 101: { l: { 116: { l: { 59: { c: [10214] } } } } } } } } } } } } } } } } } } } } } } }, 119: { l: { 110: { l: { 84: { l: { 101: { l: { 101: { l: { 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [10593] } } } } } } } } } } } } } } } } } } }, 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [8643] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [10585] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 70: { l: { 108: { l: { 111: { l: { 111: { l: { 114: { l: { 59: { c: [8970] } } } } } } } } } } }, 82: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8596] } } } } } } } } } } }, 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [10574] } } } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 101: { l: { 101: { l: { 59: { c: [8867] }, 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8612] } } } } } } } } } } }, 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [10586] } } } } } } } } } } } } } } } } }, 114: { l: { 105: { l: { 97: { l: { 110: { l: { 103: { l: { 108: { l: { 101: { l: { 59: { c: [8882] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [10703] } } } } } } }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8884] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 85: { l: { 112: { l: { 68: { l: { 111: { l: { 119: { l: { 110: { l: { 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [10577] } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 101: { l: { 101: { l: { 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [10592] } } } } } } } } } } } } } } } } } } }, 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [8639] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [10584] } } } } } } } } } } } } } } } } } } } } } } }, 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [8636] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [10578] } } } } } } } } } } } } } } } } } } }, 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8656] } } } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8660] } } } } } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 115: { l: { 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 71: { l: { 114: { l: { 101: { l: { 97: { l: { 116: { l: { 101: { l: { 114: { l: { 59: { c: [8922] } } } } } } } } } } } } } } } } } } } } } } } } }, 70: { l: { 117: { l: { 108: { l: { 108: { l: { 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8806] } } } } } } } } } } } } } } } } } } }, 71: { l: { 114: { l: { 101: { l: { 97: { l: { 116: { l: { 101: { l: { 114: { l: { 59: { c: [8822] } } } } } } } } } } } } } } }, 76: { l: { 101: { l: { 115: { l: { 115: { l: { 59: { c: [10913] } } } } } } } } }, 83: { l: { 108: { l: { 97: { l: { 110: { l: { 116: { l: { 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [10877] } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [8818] } } } } } } } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120079] } } } } }, 108: { l: { 59: { c: [8920] }, 101: { l: { 102: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8666] } } } } } } } } } } } } } } } } } } }, 109: { l: { 105: { l: { 100: { l: { 111: { l: { 116: { l: { 59: { c: [319] } } } } } } } } } } }, 111: { l: { 110: { l: { 103: { l: { 76: { l: { 101: { l: { 102: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10229] } } } } } } } } } } }, 82: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10231] } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 82: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10230] } } } } } } } } } } } } } } } } } } } } }, 108: { l: { 101: { l: { 102: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10232] } } } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10234] } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10233] } } } } } } } } } } } } } } } } } } } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120131] } } } } }, 119: { l: { 101: { l: { 114: { l: { 76: { l: { 101: { l: { 102: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8601] } } } } } } } } } } } } } } } } } } }, 82: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8600] } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [8466] } } } } }, 104: { l: { 59: { c: [8624] } } }, 116: { l: { 114: { l: { 111: { l: { 107: { l: { 59: { c: [321] } } } } } } } } } } }, 116: { l: { 59: { c: [8810] } } } } }, 77: { l: { 97: { l: { 112: { l: { 59: { c: [10501] } } } } }, 99: { l: { 121: { l: { 59: { c: [1052] } } } } }, 101: { l: { 100: { l: { 105: { l: { 117: { l: { 109: { l: { 83: { l: { 112: { l: { 97: { l: { 99: { l: { 101: { l: { 59: { c: [8287] } } } } } } } } } } } } } } } } } } }, 108: { l: { 108: { l: { 105: { l: { 110: { l: { 116: { l: { 114: { l: { 102: { l: { 59: { c: [8499] } } } } } } } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120080] } } } } }, 105: { l: { 110: { l: { 117: { l: { 115: { l: { 80: { l: { 108: { l: { 117: { l: { 115: { l: { 59: { c: [8723] } } } } } } } } } } } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120132] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [8499] } } } } } } }, 117: { l: { 59: { c: [924] } } } } }, 78: { l: { 74: { l: { 99: { l: { 121: { l: { 59: { c: [1034] } } } } } } }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [323] } } } } } } } } } } }, 99: { l: { 97: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [327] } } } } } } } } }, 101: { l: { 100: { l: { 105: { l: { 108: { l: { 59: { c: [325] } } } } } } } } }, 121: { l: { 59: { c: [1053] } } } } }, 101: { l: { 103: { l: { 97: { l: { 116: { l: { 105: { l: { 118: { l: { 101: { l: { 77: { l: { 101: { l: { 100: { l: { 105: { l: { 117: { l: { 109: { l: { 83: { l: { 112: { l: { 97: { l: { 99: { l: { 101: { l: { 59: { c: [8203] } } } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 104: { l: { 105: { l: { 99: { l: { 107: { l: { 83: { l: { 112: { l: { 97: { l: { 99: { l: { 101: { l: { 59: { c: [8203] } } } } } } } } } } } } } } }, 110: { l: { 83: { l: { 112: { l: { 97: { l: { 99: { l: { 101: { l: { 59: { c: [8203] } } } } } } } } } } } } } } } } } } }, 86: { l: { 101: { l: { 114: { l: { 121: { l: { 84: { l: { 104: { l: { 105: { l: { 110: { l: { 83: { l: { 112: { l: { 97: { l: { 99: { l: { 101: { l: { 59: { c: [8203] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 116: { l: { 101: { l: { 100: { l: { 71: { l: { 114: { l: { 101: { l: { 97: { l: { 116: { l: { 101: { l: { 114: { l: { 71: { l: { 114: { l: { 101: { l: { 97: { l: { 116: { l: { 101: { l: { 114: { l: { 59: { c: [8811] } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 76: { l: { 101: { l: { 115: { l: { 115: { l: { 76: { l: { 101: { l: { 115: { l: { 115: { l: { 59: { c: [8810] } } } } } } } } } } } } } } } } } } } } } } } } }, 119: { l: { 76: { l: { 105: { l: { 110: { l: { 101: { l: { 59: { c: [10] } } } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120081] } } } } }, 111: { l: { 66: { l: { 114: { l: { 101: { l: { 97: { l: { 107: { l: { 59: { c: [8288] } } } } } } } } } } }, 110: { l: { 66: { l: { 114: { l: { 101: { l: { 97: { l: { 107: { l: { 105: { l: { 110: { l: { 103: { l: { 83: { l: { 112: { l: { 97: { l: { 99: { l: { 101: { l: { 59: { c: [160] } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 112: { l: { 102: { l: { 59: { c: [8469] } } } } }, 116: { l: { 59: { c: [10988] }, 67: { l: { 111: { l: { 110: { l: { 103: { l: { 114: { l: { 117: { l: { 101: { l: { 110: { l: { 116: { l: { 59: { c: [8802] } } } } } } } } } } } } } } } } }, 117: { l: { 112: { l: { 67: { l: { 97: { l: { 112: { l: { 59: { c: [8813] } } } } } } } } } } } } }, 68: { l: { 111: { l: { 117: { l: { 98: { l: { 108: { l: { 101: { l: { 86: { l: { 101: { l: { 114: { l: { 116: { l: { 105: { l: { 99: { l: { 97: { l: { 108: { l: { 66: { l: { 97: { l: { 114: { l: { 59: { c: [8742] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 69: { l: { 108: { l: { 101: { l: { 109: { l: { 101: { l: { 110: { l: { 116: { l: { 59: { c: [8713] } } } } } } } } } } } } }, 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8800] }, 84: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [8770, 824] } } } } } } } } } } } } } } } } } } }, 120: { l: { 105: { l: { 115: { l: { 116: { l: { 115: { l: { 59: { c: [8708] } } } } } } } } } } } } }, 71: { l: { 114: { l: { 101: { l: { 97: { l: { 116: { l: { 101: { l: { 114: { l: { 59: { c: [8815] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8817] } } } } } } } } } } }, 70: { l: { 117: { l: { 108: { l: { 108: { l: { 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8807, 824] } } } } } } } } } } } } } } } } } } }, 71: { l: { 114: { l: { 101: { l: { 97: { l: { 116: { l: { 101: { l: { 114: { l: { 59: { c: [8811, 824] } } } } } } } } } } } } } } }, 76: { l: { 101: { l: { 115: { l: { 115: { l: { 59: { c: [8825] } } } } } } } } }, 83: { l: { 108: { l: { 97: { l: { 110: { l: { 116: { l: { 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [10878, 824] } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [8821] } } } } } } } } } } } } } } } } } } } } } } } } }, 72: { l: { 117: { l: { 109: { l: { 112: { l: { 68: { l: { 111: { l: { 119: { l: { 110: { l: { 72: { l: { 117: { l: { 109: { l: { 112: { l: { 59: { c: [8782, 824] } } } } } } } } } } } } } } } } }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8783, 824] } } } } } } } } } } } } } } } } } } }, 76: { l: { 101: { l: { 102: { l: { 116: { l: { 84: { l: { 114: { l: { 105: { l: { 97: { l: { 110: { l: { 103: { l: { 108: { l: { 101: { l: { 59: { c: [8938] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [10703, 824] } } } } } } }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8940] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 115: { l: { 59: { c: [8814] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8816] } } } } } } } } } } }, 71: { l: { 114: { l: { 101: { l: { 97: { l: { 116: { l: { 101: { l: { 114: { l: { 59: { c: [8824] } } } } } } } } } } } } } } }, 76: { l: { 101: { l: { 115: { l: { 115: { l: { 59: { c: [8810, 824] } } } } } } } } }, 83: { l: { 108: { l: { 97: { l: { 110: { l: { 116: { l: { 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [10877, 824] } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [8820] } } } } } } } } } } } } } } } } } } }, 78: { l: { 101: { l: { 115: { l: { 116: { l: { 101: { l: { 100: { l: { 71: { l: { 114: { l: { 101: { l: { 97: { l: { 116: { l: { 101: { l: { 114: { l: { 71: { l: { 114: { l: { 101: { l: { 97: { l: { 116: { l: { 101: { l: { 114: { l: { 59: { c: [10914, 824] } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 76: { l: { 101: { l: { 115: { l: { 115: { l: { 76: { l: { 101: { l: { 115: { l: { 115: { l: { 59: { c: [10913, 824] } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 80: { l: { 114: { l: { 101: { l: { 99: { l: { 101: { l: { 100: { l: { 101: { l: { 115: { l: { 59: { c: [8832] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [10927, 824] } } } } } } } } } } }, 83: { l: { 108: { l: { 97: { l: { 110: { l: { 116: { l: { 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8928] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 82: { l: { 101: { l: { 118: { l: { 101: { l: { 114: { l: { 115: { l: { 101: { l: { 69: { l: { 108: { l: { 101: { l: { 109: { l: { 101: { l: { 110: { l: { 116: { l: { 59: { c: [8716] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 105: { l: { 103: { l: { 104: { l: { 116: { l: { 84: { l: { 114: { l: { 105: { l: { 97: { l: { 110: { l: { 103: { l: { 108: { l: { 101: { l: { 59: { c: [8939] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [10704, 824] } } } } } } }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8941] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 83: { l: { 113: { l: { 117: { l: { 97: { l: { 114: { l: { 101: { l: { 83: { l: { 117: { l: { 98: { l: { 115: { l: { 101: { l: { 116: { l: { 59: { c: [8847, 824] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8930] } } } } } } } } } } } } } } } } } } }, 112: { l: { 101: { l: { 114: { l: { 115: { l: { 101: { l: { 116: { l: { 59: { c: [8848, 824] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8931] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 117: { l: { 98: { l: { 115: { l: { 101: { l: { 116: { l: { 59: { c: [8834, 8402] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8840] } } } } } } } } } } } } } } } } } } }, 99: { l: { 99: { l: { 101: { l: { 101: { l: { 100: { l: { 115: { l: { 59: { c: [8833] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [10928, 824] } } } } } } } } } } }, 83: { l: { 108: { l: { 97: { l: { 110: { l: { 116: { l: { 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8929] } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [8831, 824] } } } } } } } } } } } } } } } } } } } } } } }, 112: { l: { 101: { l: { 114: { l: { 115: { l: { 101: { l: { 116: { l: { 59: { c: [8835, 8402] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8841] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [8769] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8772] } } } } } } } } } } }, 70: { l: { 117: { l: { 108: { l: { 108: { l: { 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8775] } } } } } } } } } } } } } } } } } } }, 84: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [8777] } } } } } } } } } } } } } } } } } } } } }, 86: { l: { 101: { l: { 114: { l: { 116: { l: { 105: { l: { 99: { l: { 97: { l: { 108: { l: { 66: { l: { 97: { l: { 114: { l: { 59: { c: [8740] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119977] } } } } } } }, 116: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [209] } }, c: [209] } } } } } } } } }, 117: { l: { 59: { c: [925] } } } } }, 79: { l: { 69: { l: { 108: { l: { 105: { l: { 103: { l: { 59: { c: [338] } } } } } } } } }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [211] } }, c: [211] } } } } } } } } }, 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [212] } }, c: [212] } } } } }, 121: { l: { 59: { c: [1054] } } } } }, 100: { l: { 98: { l: { 108: { l: { 97: { l: { 99: { l: { 59: { c: [336] } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120082] } } } } }, 103: { l: { 114: { l: { 97: { l: { 118: { l: { 101: { l: { 59: { c: [210] } }, c: [210] } } } } } } } } }, 109: { l: { 97: { l: { 99: { l: { 114: { l: { 59: { c: [332] } } } } } } }, 101: { l: { 103: { l: { 97: { l: { 59: { c: [937] } } } } } } }, 105: { l: { 99: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [927] } } } } } } } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120134] } } } } } } }, 112: { l: { 101: { l: { 110: { l: { 67: { l: { 117: { l: { 114: { l: { 108: { l: { 121: { l: { 68: { l: { 111: { l: { 117: { l: { 98: { l: { 108: { l: { 101: { l: { 81: { l: { 117: { l: { 111: { l: { 116: { l: { 101: { l: { 59: { c: [8220] } } } } } } } } } } } } } } } } } } } } } } }, 81: { l: { 117: { l: { 111: { l: { 116: { l: { 101: { l: { 59: { c: [8216] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 114: { l: { 59: { c: [10836] } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119978] } } } } }, 108: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [216] } }, c: [216] } } } } } } } } }, 116: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [213] } }, c: [213] } } } } }, 109: { l: { 101: { l: { 115: { l: { 59: { c: [10807] } } } } } } } } } } }, 117: { l: { 109: { l: { 108: { l: { 59: { c: [214] } }, c: [214] } } } } }, 118: { l: { 101: { l: { 114: { l: { 66: { l: { 97: { l: { 114: { l: { 59: { c: [8254] } } } } }, 114: { l: { 97: { l: { 99: { l: { 101: { l: { 59: { c: [9182] } } }, 107: { l: { 101: { l: { 116: { l: { 59: { c: [9140] } } } } } } } } } } } } } } }, 80: { l: { 97: { l: { 114: { l: { 101: { l: { 110: { l: { 116: { l: { 104: { l: { 101: { l: { 115: { l: { 105: { l: { 115: { l: { 59: { c: [9180] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 80: { l: { 97: { l: { 114: { l: { 116: { l: { 105: { l: { 97: { l: { 108: { l: { 68: { l: { 59: { c: [8706] } } } } } } } } } } } } } } }, 99: { l: { 121: { l: { 59: { c: [1055] } } } } }, 102: { l: { 114: { l: { 59: { c: [120083] } } } } }, 104: { l: { 105: { l: { 59: { c: [934] } } } } }, 105: { l: { 59: { c: [928] } } }, 108: { l: { 117: { l: { 115: { l: { 77: { l: { 105: { l: { 110: { l: { 117: { l: { 115: { l: { 59: { c: [177] } } } } } } } } } } } } } } } } }, 111: { l: { 105: { l: { 110: { l: { 99: { l: { 97: { l: { 114: { l: { 101: { l: { 112: { l: { 108: { l: { 97: { l: { 110: { l: { 101: { l: { 59: { c: [8460] } } } } } } } } } } } } } } } } } } } } } } }, 112: { l: { 102: { l: { 59: { c: [8473] } } } } } } }, 114: { l: { 59: { c: [10939] }, 101: { l: { 99: { l: { 101: { l: { 100: { l: { 101: { l: { 115: { l: { 59: { c: [8826] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [10927] } } } } } } } } } } }, 83: { l: { 108: { l: { 97: { l: { 110: { l: { 116: { l: { 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8828] } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [8830] } } } } } } } } } } } } } } } } } } } } } } }, 105: { l: { 109: { l: { 101: { l: { 59: { c: [8243] } } } } } } }, 111: { l: { 100: { l: { 117: { l: { 99: { l: { 116: { l: { 59: { c: [8719] } } } } } } } } }, 112: { l: { 111: { l: { 114: { l: { 116: { l: { 105: { l: { 111: { l: { 110: { l: { 59: { c: [8759] }, 97: { l: { 108: { l: { 59: { c: [8733] } } } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119979] } } } } }, 105: { l: { 59: { c: [936] } } } } } } }, 81: { l: { 85: { l: { 79: { l: { 84: { l: { 59: { c: [34] } }, c: [34] } } } } }, 102: { l: { 114: { l: { 59: { c: [120084] } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [8474] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119980] } } } } } } } } }, 82: { l: { 66: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [10512] } } } } } } } } }, 69: { l: { 71: { l: { 59: { c: [174] } }, c: [174] } } }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [340] } } } } } } } } }, 110: { l: { 103: { l: { 59: { c: [10219] } } } } }, 114: { l: { 114: { l: { 59: { c: [8608] }, 116: { l: { 108: { l: { 59: { c: [10518] } } } } } } } } } } }, 99: { l: { 97: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [344] } } } } } } } } }, 101: { l: { 100: { l: { 105: { l: { 108: { l: { 59: { c: [342] } } } } } } } } }, 121: { l: { 59: { c: [1056] } } } } }, 101: { l: { 59: { c: [8476] }, 118: { l: { 101: { l: { 114: { l: { 115: { l: { 101: { l: { 69: { l: { 108: { l: { 101: { l: { 109: { l: { 101: { l: { 110: { l: { 116: { l: { 59: { c: [8715] } } } } } } } } } } } } }, 113: { l: { 117: { l: { 105: { l: { 108: { l: { 105: { l: { 98: { l: { 114: { l: { 105: { l: { 117: { l: { 109: { l: { 59: { c: [8651] } } } } } } } } } } } } } } } } } } } } } } }, 85: { l: { 112: { l: { 69: { l: { 113: { l: { 117: { l: { 105: { l: { 108: { l: { 105: { l: { 98: { l: { 114: { l: { 105: { l: { 117: { l: { 109: { l: { 59: { c: [10607] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [8476] } } } } }, 104: { l: { 111: { l: { 59: { c: [929] } } } } }, 105: { l: { 103: { l: { 104: { l: { 116: { l: { 65: { l: { 110: { l: { 103: { l: { 108: { l: { 101: { l: { 66: { l: { 114: { l: { 97: { l: { 99: { l: { 107: { l: { 101: { l: { 116: { l: { 59: { c: [10217] } } } } } } } } } } } } } } } } } } } } } } }, 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8594] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [8677] } } } } } } }, 76: { l: { 101: { l: { 102: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8644] } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 67: { l: { 101: { l: { 105: { l: { 108: { l: { 105: { l: { 110: { l: { 103: { l: { 59: { c: [8969] } } } } } } } } } } } } } } }, 68: { l: { 111: { l: { 117: { l: { 98: { l: { 108: { l: { 101: { l: { 66: { l: { 114: { l: { 97: { l: { 99: { l: { 107: { l: { 101: { l: { 116: { l: { 59: { c: [10215] } } } } } } } } } } } } } } } } } } } } } } }, 119: { l: { 110: { l: { 84: { l: { 101: { l: { 101: { l: { 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [10589] } } } } } } } } } } } } } } } } } } }, 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [8642] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [10581] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 70: { l: { 108: { l: { 111: { l: { 111: { l: { 114: { l: { 59: { c: [8971] } } } } } } } } } } }, 84: { l: { 101: { l: { 101: { l: { 59: { c: [8866] }, 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8614] } } } } } } } } } } }, 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [10587] } } } } } } } } } } } } } } } } }, 114: { l: { 105: { l: { 97: { l: { 110: { l: { 103: { l: { 108: { l: { 101: { l: { 59: { c: [8883] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [10704] } } } } } } }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8885] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 85: { l: { 112: { l: { 68: { l: { 111: { l: { 119: { l: { 110: { l: { 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [10575] } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 101: { l: { 101: { l: { 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [10588] } } } } } } } } } } } } } } } } } } }, 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [8638] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [10580] } } } } } } } } } } } } } } } } } } } } } } }, 86: { l: { 101: { l: { 99: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [8640] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [10579] } } } } } } } } } } } } } } } } } } }, 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8658] } } } } } } } } } } } } } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [8477] } } } } }, 117: { l: { 110: { l: { 100: { l: { 73: { l: { 109: { l: { 112: { l: { 108: { l: { 105: { l: { 101: { l: { 115: { l: { 59: { c: [10608] } } } } } } } } } } } } } } } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8667] } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [8475] } } } } }, 104: { l: { 59: { c: [8625] } } } } }, 117: { l: { 108: { l: { 101: { l: { 68: { l: { 101: { l: { 108: { l: { 97: { l: { 121: { l: { 101: { l: { 100: { l: { 59: { c: [10740] } } } } } } } } } } } } } } } } } } } } } } }, 83: { l: { 72: { l: { 67: { l: { 72: { l: { 99: { l: { 121: { l: { 59: { c: [1065] } } } } } } } } }, 99: { l: { 121: { l: { 59: { c: [1064] } } } } } } }, 79: { l: { 70: { l: { 84: { l: { 99: { l: { 121: { l: { 59: { c: [1068] } } } } } } } } } } }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [346] } } } } } } } } } } }, 99: { l: { 59: { c: [10940] }, 97: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [352] } } } } } } } } }, 101: { l: { 100: { l: { 105: { l: { 108: { l: { 59: { c: [350] } } } } } } } } }, 105: { l: { 114: { l: { 99: { l: { 59: { c: [348] } } } } } } }, 121: { l: { 59: { c: [1057] } } } } }, 102: { l: { 114: { l: { 59: { c: [120086] } } } } }, 104: { l: { 111: { l: { 114: { l: { 116: { l: { 68: { l: { 111: { l: { 119: { l: { 110: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8595] } } } } } } } } } } } } } } } } } } }, 76: { l: { 101: { l: { 102: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8592] } } } } } } } } } } } } } } } } } } }, 82: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8594] } } } } } } } } } } } } } } } } } } } } }, 85: { l: { 112: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8593] } } } } } } } } } } } } } } } } } } } } } } }, 105: { l: { 103: { l: { 109: { l: { 97: { l: { 59: { c: [931] } } } } } } } } }, 109: { l: { 97: { l: { 108: { l: { 108: { l: { 67: { l: { 105: { l: { 114: { l: { 99: { l: { 108: { l: { 101: { l: { 59: { c: [8728] } } } } } } } } } } } } } } } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120138] } } } } } } }, 113: { l: { 114: { l: { 116: { l: { 59: { c: [8730] } } } } }, 117: { l: { 97: { l: { 114: { l: { 101: { l: { 59: { c: [9633] }, 73: { l: { 110: { l: { 116: { l: { 101: { l: { 114: { l: { 115: { l: { 101: { l: { 99: { l: { 116: { l: { 105: { l: { 111: { l: { 110: { l: { 59: { c: [8851] } } } } } } } } } } } } } } } } } } } } } } } } }, 83: { l: { 117: { l: { 98: { l: { 115: { l: { 101: { l: { 116: { l: { 59: { c: [8847] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8849] } } } } } } } } } } } } } } } } } } }, 112: { l: { 101: { l: { 114: { l: { 115: { l: { 101: { l: { 116: { l: { 59: { c: [8848] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8850] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 85: { l: { 110: { l: { 105: { l: { 111: { l: { 110: { l: { 59: { c: [8852] } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119982] } } } } } } }, 116: { l: { 97: { l: { 114: { l: { 59: { c: [8902] } } } } } } }, 117: { l: { 98: { l: { 59: { c: [8912] }, 115: { l: { 101: { l: { 116: { l: { 59: { c: [8912] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8838] } } } } } } } } } } } } } } } } } } }, 99: { l: { 99: { l: { 101: { l: { 101: { l: { 100: { l: { 115: { l: { 59: { c: [8827] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [10928] } } } } } } } } } } }, 83: { l: { 108: { l: { 97: { l: { 110: { l: { 116: { l: { 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8829] } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [8831] } } } } } } } } } } } } } } } } } } } } }, 104: { l: { 84: { l: { 104: { l: { 97: { l: { 116: { l: { 59: { c: [8715] } } } } } } } } } } } } }, 109: { l: { 59: { c: [8721] } } }, 112: { l: { 59: { c: [8913] }, 101: { l: { 114: { l: { 115: { l: { 101: { l: { 116: { l: { 59: { c: [8835] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8839] } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 101: { l: { 116: { l: { 59: { c: [8913] } } } } } } } } } } } } }, 84: { l: { 72: { l: { 79: { l: { 82: { l: { 78: { l: { 59: { c: [222] } }, c: [222] } } } } } } }, 82: { l: { 65: { l: { 68: { l: { 69: { l: { 59: { c: [8482] } } } } } } } } }, 83: { l: { 72: { l: { 99: { l: { 121: { l: { 59: { c: [1035] } } } } } } }, 99: { l: { 121: { l: { 59: { c: [1062] } } } } } } }, 97: { l: { 98: { l: { 59: { c: [9] } } }, 117: { l: { 59: { c: [932] } } } } }, 99: { l: { 97: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [356] } } } } } } } } }, 101: { l: { 100: { l: { 105: { l: { 108: { l: { 59: { c: [354] } } } } } } } } }, 121: { l: { 59: { c: [1058] } } } } }, 102: { l: { 114: { l: { 59: { c: [120087] } } } } }, 104: { l: { 101: { l: { 114: { l: { 101: { l: { 102: { l: { 111: { l: { 114: { l: { 101: { l: { 59: { c: [8756] } } } } } } } } } } } } }, 116: { l: { 97: { l: { 59: { c: [920] } } } } } } }, 105: { l: { 99: { l: { 107: { l: { 83: { l: { 112: { l: { 97: { l: { 99: { l: { 101: { l: { 59: { c: [8287, 8202] } } } } } } } } } } } } } } }, 110: { l: { 83: { l: { 112: { l: { 97: { l: { 99: { l: { 101: { l: { 59: { c: [8201] } } } } } } } } } } } } } } } } }, 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [8764] }, 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8771] } } } } } } } } } } }, 70: { l: { 117: { l: { 108: { l: { 108: { l: { 69: { l: { 113: { l: { 117: { l: { 97: { l: { 108: { l: { 59: { c: [8773] } } } } } } } } } } } } } } } } } } }, 84: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [8776] } } } } } } } } } } } } } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120139] } } } } } } }, 114: { l: { 105: { l: { 112: { l: { 108: { l: { 101: { l: { 68: { l: { 111: { l: { 116: { l: { 59: { c: [8411] } } } } } } } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119983] } } } } }, 116: { l: { 114: { l: { 111: { l: { 107: { l: { 59: { c: [358] } } } } } } } } } } } } }, 85: { l: { 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [218] } }, c: [218] } } } } } } }, 114: { l: { 114: { l: { 59: { c: [8607] }, 111: { l: { 99: { l: { 105: { l: { 114: { l: { 59: { c: [10569] } } } } } } } } } } } } } } }, 98: { l: { 114: { l: { 99: { l: { 121: { l: { 59: { c: [1038] } } } } }, 101: { l: { 118: { l: { 101: { l: { 59: { c: [364] } } } } } } } } } } }, 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [219] } }, c: [219] } } } } }, 121: { l: { 59: { c: [1059] } } } } }, 100: { l: { 98: { l: { 108: { l: { 97: { l: { 99: { l: { 59: { c: [368] } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120088] } } } } }, 103: { l: { 114: { l: { 97: { l: { 118: { l: { 101: { l: { 59: { c: [217] } }, c: [217] } } } } } } } } }, 109: { l: { 97: { l: { 99: { l: { 114: { l: { 59: { c: [362] } } } } } } } } }, 110: { l: { 100: { l: { 101: { l: { 114: { l: { 66: { l: { 97: { l: { 114: { l: { 59: { c: [95] } } } } }, 114: { l: { 97: { l: { 99: { l: { 101: { l: { 59: { c: [9183] } } }, 107: { l: { 101: { l: { 116: { l: { 59: { c: [9141] } } } } } } } } } } } } } } }, 80: { l: { 97: { l: { 114: { l: { 101: { l: { 110: { l: { 116: { l: { 104: { l: { 101: { l: { 115: { l: { 105: { l: { 115: { l: { 59: { c: [9181] } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 105: { l: { 111: { l: { 110: { l: { 59: { c: [8899] }, 80: { l: { 108: { l: { 117: { l: { 115: { l: { 59: { c: [8846] } } } } } } } } } } } } } } } } }, 111: { l: { 103: { l: { 111: { l: { 110: { l: { 59: { c: [370] } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120140] } } } } } } }, 112: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8593] }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [10514] } } } } } } }, 68: { l: { 111: { l: { 119: { l: { 110: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8645] } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 68: { l: { 111: { l: { 119: { l: { 110: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8597] } } } } } } } } } } } } } } } } } } }, 69: { l: { 113: { l: { 117: { l: { 105: { l: { 108: { l: { 105: { l: { 98: { l: { 114: { l: { 105: { l: { 117: { l: { 109: { l: { 59: { c: [10606] } } } } } } } } } } } } } } } } } } } } } } }, 84: { l: { 101: { l: { 101: { l: { 59: { c: [8869] }, 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8613] } } } } } } } } } } } } } } } } }, 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8657] } } } } } } } } } } }, 100: { l: { 111: { l: { 119: { l: { 110: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8661] } } } } } } } } } } } } } } } } } } }, 112: { l: { 101: { l: { 114: { l: { 76: { l: { 101: { l: { 102: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8598] } } } } } } } } } } } } } } } } } } }, 82: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 65: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8599] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 105: { l: { 59: { c: [978] }, 108: { l: { 111: { l: { 110: { l: { 59: { c: [933] } } } } } } } } } } } } }, 114: { l: { 105: { l: { 110: { l: { 103: { l: { 59: { c: [366] } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119984] } } } } } } }, 116: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [360] } } } } } } } } } } }, 117: { l: { 109: { l: { 108: { l: { 59: { c: [220] } }, c: [220] } } } } } } }, 86: { l: { 68: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [8875] } } } } } } } } }, 98: { l: { 97: { l: { 114: { l: { 59: { c: [10987] } } } } } } }, 99: { l: { 121: { l: { 59: { c: [1042] } } } } }, 100: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [8873] }, 108: { l: { 59: { c: [10982] } } } } } } } } } } }, 101: { l: { 101: { l: { 59: { c: [8897] } } }, 114: { l: { 98: { l: { 97: { l: { 114: { l: { 59: { c: [8214] } } } } } } }, 116: { l: { 59: { c: [8214] }, 105: { l: { 99: { l: { 97: { l: { 108: { l: { 66: { l: { 97: { l: { 114: { l: { 59: { c: [8739] } } } } } } }, 76: { l: { 105: { l: { 110: { l: { 101: { l: { 59: { c: [124] } } } } } } } } }, 83: { l: { 101: { l: { 112: { l: { 97: { l: { 114: { l: { 97: { l: { 116: { l: { 111: { l: { 114: { l: { 59: { c: [10072] } } } } } } } } } } } } } } } } } } }, 84: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [8768] } } } } } } } } } } } } } } } } } } } } }, 121: { l: { 84: { l: { 104: { l: { 105: { l: { 110: { l: { 83: { l: { 112: { l: { 97: { l: { 99: { l: { 101: { l: { 59: { c: [8202] } } } } } } } } } } } } } } } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120089] } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120141] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119985] } } } } } } }, 118: { l: { 100: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [8874] } } } } } } } } } } } } }, 87: { l: { 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [372] } } } } } } } } }, 101: { l: { 100: { l: { 103: { l: { 101: { l: { 59: { c: [8896] } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120090] } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120142] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119986] } } } } } } } } }, 88: { l: { 102: { l: { 114: { l: { 59: { c: [120091] } } } } }, 105: { l: { 59: { c: [926] } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120143] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119987] } } } } } } } } }, 89: { l: { 65: { l: { 99: { l: { 121: { l: { 59: { c: [1071] } } } } } } }, 73: { l: { 99: { l: { 121: { l: { 59: { c: [1031] } } } } } } }, 85: { l: { 99: { l: { 121: { l: { 59: { c: [1070] } } } } } } }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [221] } }, c: [221] } } } } } } } } }, 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [374] } } } } } } }, 121: { l: { 59: { c: [1067] } } } } }, 102: { l: { 114: { l: { 59: { c: [120092] } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120144] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119988] } } } } } } }, 117: { l: { 109: { l: { 108: { l: { 59: { c: [376] } } } } } } } } }, 90: { l: { 72: { l: { 99: { l: { 121: { l: { 59: { c: [1046] } } } } } } }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [377] } } } } } } } } } } }, 99: { l: { 97: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [381] } } } } } } } } }, 121: { l: { 59: { c: [1047] } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [379] } } } } } } }, 101: { l: { 114: { l: { 111: { l: { 87: { l: { 105: { l: { 100: { l: { 116: { l: { 104: { l: { 83: { l: { 112: { l: { 97: { l: { 99: { l: { 101: { l: { 59: { c: [8203] } } } } } } } } } } } } } } } } } } } } } } } } }, 116: { l: { 97: { l: { 59: { c: [918] } } } } } } }, 102: { l: { 114: { l: { 59: { c: [8488] } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [8484] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119989] } } } } } } } } }, 97: { l: { 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [225] } }, c: [225] } } } } } } } } }, 98: { l: { 114: { l: { 101: { l: { 118: { l: { 101: { l: { 59: { c: [259] } } } } } } } } } } }, 99: { l: { 59: { c: [8766] }, 69: { l: { 59: { c: [8766, 819] } } }, 100: { l: { 59: { c: [8767] } } }, 105: { l: { 114: { l: { 99: { l: { 59: { c: [226] } }, c: [226] } } } } }, 117: { l: { 116: { l: { 101: { l: { 59: { c: [180] } }, c: [180] } } } } }, 121: { l: { 59: { c: [1072] } } } } }, 101: { l: { 108: { l: { 105: { l: { 103: { l: { 59: { c: [230] } }, c: [230] } } } } } } }, 102: { l: { 59: { c: [8289] }, 114: { l: { 59: { c: [120094] } } } } }, 103: { l: { 114: { l: { 97: { l: { 118: { l: { 101: { l: { 59: { c: [224] } }, c: [224] } } } } } } } } }, 108: { l: { 101: { l: { 102: { l: { 115: { l: { 121: { l: { 109: { l: { 59: { c: [8501] } } } } } } } } }, 112: { l: { 104: { l: { 59: { c: [8501] } } } } } } }, 112: { l: { 104: { l: { 97: { l: { 59: { c: [945] } } } } } } } } }, 109: { l: { 97: { l: { 99: { l: { 114: { l: { 59: { c: [257] } } } } }, 108: { l: { 103: { l: { 59: { c: [10815] } } } } } } }, 112: { l: { 59: { c: [38] } }, c: [38] } } }, 110: { l: { 100: { l: { 59: { c: [8743] }, 97: { l: { 110: { l: { 100: { l: { 59: { c: [10837] } } } } } } }, 100: { l: { 59: { c: [10844] } } }, 115: { l: { 108: { l: { 111: { l: { 112: { l: { 101: { l: { 59: { c: [10840] } } } } } } } } } } }, 118: { l: { 59: { c: [10842] } } } } }, 103: { l: { 59: { c: [8736] }, 101: { l: { 59: { c: [10660] } } }, 108: { l: { 101: { l: { 59: { c: [8736] } } } } }, 109: { l: { 115: { l: { 100: { l: { 59: { c: [8737] }, 97: { l: { 97: { l: { 59: { c: [10664] } } }, 98: { l: { 59: { c: [10665] } } }, 99: { l: { 59: { c: [10666] } } }, 100: { l: { 59: { c: [10667] } } }, 101: { l: { 59: { c: [10668] } } }, 102: { l: { 59: { c: [10669] } } }, 103: { l: { 59: { c: [10670] } } }, 104: { l: { 59: { c: [10671] } } } } } } } } } } }, 114: { l: { 116: { l: { 59: { c: [8735] }, 118: { l: { 98: { l: { 59: { c: [8894] }, 100: { l: { 59: { c: [10653] } } } } } } } } } } }, 115: { l: { 112: { l: { 104: { l: { 59: { c: [8738] } } } } }, 116: { l: { 59: { c: [197] } } } } }, 122: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [9084] } } } } } } } } } } } } }, 111: { l: { 103: { l: { 111: { l: { 110: { l: { 59: { c: [261] } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120146] } } } } } } }, 112: { l: { 59: { c: [8776] }, 69: { l: { 59: { c: [10864] } } }, 97: { l: { 99: { l: { 105: { l: { 114: { l: { 59: { c: [10863] } } } } } } } } }, 101: { l: { 59: { c: [8778] } } }, 105: { l: { 100: { l: { 59: { c: [8779] } } } } }, 111: { l: { 115: { l: { 59: { c: [39] } } } } }, 112: { l: { 114: { l: { 111: { l: { 120: { l: { 59: { c: [8776] }, 101: { l: { 113: { l: { 59: { c: [8778] } } } } } } } } } } } } } } }, 114: { l: { 105: { l: { 110: { l: { 103: { l: { 59: { c: [229] } }, c: [229] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119990] } } } } }, 116: { l: { 59: { c: [42] } } }, 121: { l: { 109: { l: { 112: { l: { 59: { c: [8776] }, 101: { l: { 113: { l: { 59: { c: [8781] } } } } } } } } } } } } }, 116: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [227] } }, c: [227] } } } } } } } } }, 117: { l: { 109: { l: { 108: { l: { 59: { c: [228] } }, c: [228] } } } } }, 119: { l: { 99: { l: { 111: { l: { 110: { l: { 105: { l: { 110: { l: { 116: { l: { 59: { c: [8755] } } } } } } } } } } } } }, 105: { l: { 110: { l: { 116: { l: { 59: { c: [10769] } } } } } } } } } } }, 98: { l: { 78: { l: { 111: { l: { 116: { l: { 59: { c: [10989] } } } } } } }, 97: { l: { 99: { l: { 107: { l: { 99: { l: { 111: { l: { 110: { l: { 103: { l: { 59: { c: [8780] } } } } } } } } }, 101: { l: { 112: { l: { 115: { l: { 105: { l: { 108: { l: { 111: { l: { 110: { l: { 59: { c: [1014] } } } } } } } } } } } } } } }, 112: { l: { 114: { l: { 105: { l: { 109: { l: { 101: { l: { 59: { c: [8245] } } } } } } } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8765] }, 101: { l: { 113: { l: { 59: { c: [8909] } } } } } } } } } } } } } } }, 114: { l: { 118: { l: { 101: { l: { 101: { l: { 59: { c: [8893] } } } } } } }, 119: { l: { 101: { l: { 100: { l: { 59: { c: [8965] }, 103: { l: { 101: { l: { 59: { c: [8965] } } } } } } } } } } } } } } }, 98: { l: { 114: { l: { 107: { l: { 59: { c: [9141] }, 116: { l: { 98: { l: { 114: { l: { 107: { l: { 59: { c: [9142] } } } } } } } } } } } } } } }, 99: { l: { 111: { l: { 110: { l: { 103: { l: { 59: { c: [8780] } } } } } } }, 121: { l: { 59: { c: [1073] } } } } }, 100: { l: { 113: { l: { 117: { l: { 111: { l: { 59: { c: [8222] } } } } } } } } }, 101: { l: { 99: { l: { 97: { l: { 117: { l: { 115: { l: { 59: { c: [8757] }, 101: { l: { 59: { c: [8757] } } } } } } } } } } }, 109: { l: { 112: { l: { 116: { l: { 121: { l: { 118: { l: { 59: { c: [10672] } } } } } } } } } } }, 112: { l: { 115: { l: { 105: { l: { 59: { c: [1014] } } } } } } }, 114: { l: { 110: { l: { 111: { l: { 117: { l: { 59: { c: [8492] } } } } } } } } }, 116: { l: { 97: { l: { 59: { c: [946] } } }, 104: { l: { 59: { c: [8502] } } }, 119: { l: { 101: { l: { 101: { l: { 110: { l: { 59: { c: [8812] } } } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120095] } } } } }, 105: { l: { 103: { l: { 99: { l: { 97: { l: { 112: { l: { 59: { c: [8898] } } } } }, 105: { l: { 114: { l: { 99: { l: { 59: { c: [9711] } } } } } } }, 117: { l: { 112: { l: { 59: { c: [8899] } } } } } } }, 111: { l: { 100: { l: { 111: { l: { 116: { l: { 59: { c: [10752] } } } } } } }, 112: { l: { 108: { l: { 117: { l: { 115: { l: { 59: { c: [10753] } } } } } } } } }, 116: { l: { 105: { l: { 109: { l: { 101: { l: { 115: { l: { 59: { c: [10754] } } } } } } } } } } } } }, 115: { l: { 113: { l: { 99: { l: { 117: { l: { 112: { l: { 59: { c: [10758] } } } } } } } } }, 116: { l: { 97: { l: { 114: { l: { 59: { c: [9733] } } } } } } } } }, 116: { l: { 114: { l: { 105: { l: { 97: { l: { 110: { l: { 103: { l: { 108: { l: { 101: { l: { 100: { l: { 111: { l: { 119: { l: { 110: { l: { 59: { c: [9661] } } } } } } } } }, 117: { l: { 112: { l: { 59: { c: [9651] } } } } } } } } } } } } } } } } } } } } }, 117: { l: { 112: { l: { 108: { l: { 117: { l: { 115: { l: { 59: { c: [10756] } } } } } } } } } } }, 118: { l: { 101: { l: { 101: { l: { 59: { c: [8897] } } } } } } }, 119: { l: { 101: { l: { 100: { l: { 103: { l: { 101: { l: { 59: { c: [8896] } } } } } } } } } } } } } } }, 107: { l: { 97: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10509] } } } } } } } } } } }, 108: { l: { 97: { l: { 99: { l: { 107: { l: { 108: { l: { 111: { l: { 122: { l: { 101: { l: { 110: { l: { 103: { l: { 101: { l: { 59: { c: [10731] } } } } } } } } } } } } } } }, 115: { l: { 113: { l: { 117: { l: { 97: { l: { 114: { l: { 101: { l: { 59: { c: [9642] } } } } } } } } } } } } }, 116: { l: { 114: { l: { 105: { l: { 97: { l: { 110: { l: { 103: { l: { 108: { l: { 101: { l: { 59: { c: [9652] }, 100: { l: { 111: { l: { 119: { l: { 110: { l: { 59: { c: [9662] } } } } } } } } }, 108: { l: { 101: { l: { 102: { l: { 116: { l: { 59: { c: [9666] } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 59: { c: [9656] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 110: { l: { 107: { l: { 59: { c: [9251] } } } } } } }, 107: { l: { 49: { l: { 50: { l: { 59: { c: [9618] } } }, 52: { l: { 59: { c: [9617] } } } } }, 51: { l: { 52: { l: { 59: { c: [9619] } } } } } } }, 111: { l: { 99: { l: { 107: { l: { 59: { c: [9608] } } } } } } } } }, 110: { l: { 101: { l: { 59: { c: [61, 8421] }, 113: { l: { 117: { l: { 105: { l: { 118: { l: { 59: { c: [8801, 8421] } } } } } } } } } } }, 111: { l: { 116: { l: { 59: { c: [8976] } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120147] } } } } }, 116: { l: { 59: { c: [8869] }, 116: { l: { 111: { l: { 109: { l: { 59: { c: [8869] } } } } } } } } }, 119: { l: { 116: { l: { 105: { l: { 101: { l: { 59: { c: [8904] } } } } } } } } }, 120: { l: { 68: { l: { 76: { l: { 59: { c: [9559] } } }, 82: { l: { 59: { c: [9556] } } }, 108: { l: { 59: { c: [9558] } } }, 114: { l: { 59: { c: [9555] } } } } }, 72: { l: { 59: { c: [9552] }, 68: { l: { 59: { c: [9574] } } }, 85: { l: { 59: { c: [9577] } } }, 100: { l: { 59: { c: [9572] } } }, 117: { l: { 59: { c: [9575] } } } } }, 85: { l: { 76: { l: { 59: { c: [9565] } } }, 82: { l: { 59: { c: [9562] } } }, 108: { l: { 59: { c: [9564] } } }, 114: { l: { 59: { c: [9561] } } } } }, 86: { l: { 59: { c: [9553] }, 72: { l: { 59: { c: [9580] } } }, 76: { l: { 59: { c: [9571] } } }, 82: { l: { 59: { c: [9568] } } }, 104: { l: { 59: { c: [9579] } } }, 108: { l: { 59: { c: [9570] } } }, 114: { l: { 59: { c: [9567] } } } } }, 98: { l: { 111: { l: { 120: { l: { 59: { c: [10697] } } } } } } }, 100: { l: { 76: { l: { 59: { c: [9557] } } }, 82: { l: { 59: { c: [9554] } } }, 108: { l: { 59: { c: [9488] } } }, 114: { l: { 59: { c: [9484] } } } } }, 104: { l: { 59: { c: [9472] }, 68: { l: { 59: { c: [9573] } } }, 85: { l: { 59: { c: [9576] } } }, 100: { l: { 59: { c: [9516] } } }, 117: { l: { 59: { c: [9524] } } } } }, 109: { l: { 105: { l: { 110: { l: { 117: { l: { 115: { l: { 59: { c: [8863] } } } } } } } } } } }, 112: { l: { 108: { l: { 117: { l: { 115: { l: { 59: { c: [8862] } } } } } } } } }, 116: { l: { 105: { l: { 109: { l: { 101: { l: { 115: { l: { 59: { c: [8864] } } } } } } } } } } }, 117: { l: { 76: { l: { 59: { c: [9563] } } }, 82: { l: { 59: { c: [9560] } } }, 108: { l: { 59: { c: [9496] } } }, 114: { l: { 59: { c: [9492] } } } } }, 118: { l: { 59: { c: [9474] }, 72: { l: { 59: { c: [9578] } } }, 76: { l: { 59: { c: [9569] } } }, 82: { l: { 59: { c: [9566] } } }, 104: { l: { 59: { c: [9532] } } }, 108: { l: { 59: { c: [9508] } } }, 114: { l: { 59: { c: [9500] } } } } } } } } }, 112: { l: { 114: { l: { 105: { l: { 109: { l: { 101: { l: { 59: { c: [8245] } } } } } } } } } } }, 114: { l: { 101: { l: { 118: { l: { 101: { l: { 59: { c: [728] } } } } } } }, 118: { l: { 98: { l: { 97: { l: { 114: { l: { 59: { c: [166] } }, c: [166] } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119991] } } } } }, 101: { l: { 109: { l: { 105: { l: { 59: { c: [8271] } } } } } } }, 105: { l: { 109: { l: { 59: { c: [8765] }, 101: { l: { 59: { c: [8909] } } } } } } }, 111: { l: { 108: { l: { 59: { c: [92] }, 98: { l: { 59: { c: [10693] } } }, 104: { l: { 115: { l: { 117: { l: { 98: { l: { 59: { c: [10184] } } } } } } } } } } } } } } }, 117: { l: { 108: { l: { 108: { l: { 59: { c: [8226] }, 101: { l: { 116: { l: { 59: { c: [8226] } } } } } } } } }, 109: { l: { 112: { l: { 59: { c: [8782] }, 69: { l: { 59: { c: [10926] } } }, 101: { l: { 59: { c: [8783] }, 113: { l: { 59: { c: [8783] } } } } } } } } } } } } }, 99: { l: { 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [263] } } } } } } } } }, 112: { l: { 59: { c: [8745] }, 97: { l: { 110: { l: { 100: { l: { 59: { c: [10820] } } } } } } }, 98: { l: { 114: { l: { 99: { l: { 117: { l: { 112: { l: { 59: { c: [10825] } } } } } } } } } } }, 99: { l: { 97: { l: { 112: { l: { 59: { c: [10827] } } } } }, 117: { l: { 112: { l: { 59: { c: [10823] } } } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [10816] } } } } } } }, 115: { l: { 59: { c: [8745, 65024] } } } } }, 114: { l: { 101: { l: { 116: { l: { 59: { c: [8257] } } } } }, 111: { l: { 110: { l: { 59: { c: [711] } } } } } } } } }, 99: { l: { 97: { l: { 112: { l: { 115: { l: { 59: { c: [10829] } } } } }, 114: { l: { 111: { l: { 110: { l: { 59: { c: [269] } } } } } } } } }, 101: { l: { 100: { l: { 105: { l: { 108: { l: { 59: { c: [231] } }, c: [231] } } } } } } }, 105: { l: { 114: { l: { 99: { l: { 59: { c: [265] } } } } } } }, 117: { l: { 112: { l: { 115: { l: { 59: { c: [10828] }, 115: { l: { 109: { l: { 59: { c: [10832] } } } } } } } } } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [267] } } } } } } }, 101: { l: { 100: { l: { 105: { l: { 108: { l: { 59: { c: [184] } }, c: [184] } } } } }, 109: { l: { 112: { l: { 116: { l: { 121: { l: { 118: { l: { 59: { c: [10674] } } } } } } } } } } }, 110: { l: { 116: { l: { 59: { c: [162] }, 101: { l: { 114: { l: { 100: { l: { 111: { l: { 116: { l: { 59: { c: [183] } } } } } } } } } } } }, c: [162] } } } } }, 102: { l: { 114: { l: { 59: { c: [120096] } } } } }, 104: { l: { 99: { l: { 121: { l: { 59: { c: [1095] } } } } }, 101: { l: { 99: { l: { 107: { l: { 59: { c: [10003] }, 109: { l: { 97: { l: { 114: { l: { 107: { l: { 59: { c: [10003] } } } } } } } } } } } } } } }, 105: { l: { 59: { c: [967] } } } } }, 105: { l: { 114: { l: { 59: { c: [9675] }, 69: { l: { 59: { c: [10691] } } }, 99: { l: { 59: { c: [710] }, 101: { l: { 113: { l: { 59: { c: [8791] } } } } }, 108: { l: { 101: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 108: { l: { 101: { l: { 102: { l: { 116: { l: { 59: { c: [8634] } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 59: { c: [8635] } } } } } } } } } } } } } } } } } } } } }, 100: { l: { 82: { l: { 59: { c: [174] } } }, 83: { l: { 59: { c: [9416] } } }, 97: { l: { 115: { l: { 116: { l: { 59: { c: [8859] } } } } } } }, 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [8858] } } } } } } } } }, 100: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [8861] } } } } } } } } } } } } } } } } }, 101: { l: { 59: { c: [8791] } } }, 102: { l: { 110: { l: { 105: { l: { 110: { l: { 116: { l: { 59: { c: [10768] } } } } } } } } } } }, 109: { l: { 105: { l: { 100: { l: { 59: { c: [10991] } } } } } } }, 115: { l: { 99: { l: { 105: { l: { 114: { l: { 59: { c: [10690] } } } } } } } } } } } } }, 108: { l: { 117: { l: { 98: { l: { 115: { l: { 59: { c: [9827] }, 117: { l: { 105: { l: { 116: { l: { 59: { c: [9827] } } } } } } } } } } } } } } }, 111: { l: { 108: { l: { 111: { l: { 110: { l: { 59: { c: [58] }, 101: { l: { 59: { c: [8788] }, 113: { l: { 59: { c: [8788] } } } } } } } } } } }, 109: { l: { 109: { l: { 97: { l: { 59: { c: [44] }, 116: { l: { 59: { c: [64] } } } } } } }, 112: { l: { 59: { c: [8705] }, 102: { l: { 110: { l: { 59: { c: [8728] } } } } }, 108: { l: { 101: { l: { 109: { l: { 101: { l: { 110: { l: { 116: { l: { 59: { c: [8705] } } } } } } } } }, 120: { l: { 101: { l: { 115: { l: { 59: { c: [8450] } } } } } } } } } } } } } } }, 110: { l: { 103: { l: { 59: { c: [8773] }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [10861] } } } } } } } } }, 105: { l: { 110: { l: { 116: { l: { 59: { c: [8750] } } } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120148] } } }, 114: { l: { 111: { l: { 100: { l: { 59: { c: [8720] } } } } } } }, 121: { l: { 59: { c: [169] }, 115: { l: { 114: { l: { 59: { c: [8471] } } } } } }, c: [169] } } } } }, 114: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8629] } } } } } } }, 111: { l: { 115: { l: { 115: { l: { 59: { c: [10007] } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119992] } } } } }, 117: { l: { 98: { l: { 59: { c: [10959] }, 101: { l: { 59: { c: [10961] } } } } }, 112: { l: { 59: { c: [10960] }, 101: { l: { 59: { c: [10962] } } } } } } } } }, 116: { l: { 100: { l: { 111: { l: { 116: { l: { 59: { c: [8943] } } } } } } } } }, 117: { l: { 100: { l: { 97: { l: { 114: { l: { 114: { l: { 108: { l: { 59: { c: [10552] } } }, 114: { l: { 59: { c: [10549] } } } } } } } } } } }, 101: { l: { 112: { l: { 114: { l: { 59: { c: [8926] } } } } }, 115: { l: { 99: { l: { 59: { c: [8927] } } } } } } }, 108: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8630] }, 112: { l: { 59: { c: [10557] } } } } } } } } } } }, 112: { l: { 59: { c: [8746] }, 98: { l: { 114: { l: { 99: { l: { 97: { l: { 112: { l: { 59: { c: [10824] } } } } } } } } } } }, 99: { l: { 97: { l: { 112: { l: { 59: { c: [10822] } } } } }, 117: { l: { 112: { l: { 59: { c: [10826] } } } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [8845] } } } } } } }, 111: { l: { 114: { l: { 59: { c: [10821] } } } } }, 115: { l: { 59: { c: [8746, 65024] } } } } }, 114: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8631] }, 109: { l: { 59: { c: [10556] } } } } } } } } }, 108: { l: { 121: { l: { 101: { l: { 113: { l: { 112: { l: { 114: { l: { 101: { l: { 99: { l: { 59: { c: [8926] } } } } } } } } }, 115: { l: { 117: { l: { 99: { l: { 99: { l: { 59: { c: [8927] } } } } } } } } } } } } }, 118: { l: { 101: { l: { 101: { l: { 59: { c: [8910] } } } } } } }, 119: { l: { 101: { l: { 100: { l: { 103: { l: { 101: { l: { 59: { c: [8911] } } } } } } } } } } } } } } }, 114: { l: { 101: { l: { 110: { l: { 59: { c: [164] } }, c: [164] } } } } }, 118: { l: { 101: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 108: { l: { 101: { l: { 102: { l: { 116: { l: { 59: { c: [8630] } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 59: { c: [8631] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 118: { l: { 101: { l: { 101: { l: { 59: { c: [8910] } } } } } } }, 119: { l: { 101: { l: { 100: { l: { 59: { c: [8911] } } } } } } } } }, 119: { l: { 99: { l: { 111: { l: { 110: { l: { 105: { l: { 110: { l: { 116: { l: { 59: { c: [8754] } } } } } } } } } } } } }, 105: { l: { 110: { l: { 116: { l: { 59: { c: [8753] } } } } } } } } }, 121: { l: { 108: { l: { 99: { l: { 116: { l: { 121: { l: { 59: { c: [9005] } } } } } } } } } } } } }, 100: { l: { 65: { l: { 114: { l: { 114: { l: { 59: { c: [8659] } } } } } } }, 72: { l: { 97: { l: { 114: { l: { 59: { c: [10597] } } } } } } }, 97: { l: { 103: { l: { 103: { l: { 101: { l: { 114: { l: { 59: { c: [8224] } } } } } } } } }, 108: { l: { 101: { l: { 116: { l: { 104: { l: { 59: { c: [8504] } } } } } } } } }, 114: { l: { 114: { l: { 59: { c: [8595] } } } } }, 115: { l: { 104: { l: { 59: { c: [8208] }, 118: { l: { 59: { c: [8867] } } } } } } } } }, 98: { l: { 107: { l: { 97: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10511] } } } } } } } } } } }, 108: { l: { 97: { l: { 99: { l: { 59: { c: [733] } } } } } } } } }, 99: { l: { 97: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [271] } } } } } } } } }, 121: { l: { 59: { c: [1076] } } } } }, 100: { l: { 59: { c: [8518] }, 97: { l: { 103: { l: { 103: { l: { 101: { l: { 114: { l: { 59: { c: [8225] } } } } } } } } }, 114: { l: { 114: { l: { 59: { c: [8650] } } } } } } }, 111: { l: { 116: { l: { 115: { l: { 101: { l: { 113: { l: { 59: { c: [10871] } } } } } } } } } } } } }, 101: { l: { 103: { l: { 59: { c: [176] } }, c: [176] }, 108: { l: { 116: { l: { 97: { l: { 59: { c: [948] } } } } } } }, 109: { l: { 112: { l: { 116: { l: { 121: { l: { 118: { l: { 59: { c: [10673] } } } } } } } } } } } } }, 102: { l: { 105: { l: { 115: { l: { 104: { l: { 116: { l: { 59: { c: [10623] } } } } } } } } }, 114: { l: { 59: { c: [120097] } } } } }, 104: { l: { 97: { l: { 114: { l: { 108: { l: { 59: { c: [8643] } } }, 114: { l: { 59: { c: [8642] } } } } } } } } }, 105: { l: { 97: { l: { 109: { l: { 59: { c: [8900] }, 111: { l: { 110: { l: { 100: { l: { 59: { c: [8900] }, 115: { l: { 117: { l: { 105: { l: { 116: { l: { 59: { c: [9830] } } } } } } } } } } } } } } }, 115: { l: { 59: { c: [9830] } } } } } } }, 101: { l: { 59: { c: [168] } } }, 103: { l: { 97: { l: { 109: { l: { 109: { l: { 97: { l: { 59: { c: [989] } } } } } } } } } } }, 115: { l: { 105: { l: { 110: { l: { 59: { c: [8946] } } } } } } }, 118: { l: { 59: { c: [247] }, 105: { l: { 100: { l: { 101: { l: { 59: { c: [247] }, 111: { l: { 110: { l: { 116: { l: { 105: { l: { 109: { l: { 101: { l: { 115: { l: { 59: { c: [8903] } } } } } } } } } } } } } } } }, c: [247] } } } } }, 111: { l: { 110: { l: { 120: { l: { 59: { c: [8903] } } } } } } } } } } }, 106: { l: { 99: { l: { 121: { l: { 59: { c: [1106] } } } } } } }, 108: { l: { 99: { l: { 111: { l: { 114: { l: { 110: { l: { 59: { c: [8990] } } } } } } }, 114: { l: { 111: { l: { 112: { l: { 59: { c: [8973] } } } } } } } } } } }, 111: { l: { 108: { l: { 108: { l: { 97: { l: { 114: { l: { 59: { c: [36] } } } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120149] } } } } }, 116: { l: { 59: { c: [729] }, 101: { l: { 113: { l: { 59: { c: [8784] }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [8785] } } } } } } } } } } }, 109: { l: { 105: { l: { 110: { l: { 117: { l: { 115: { l: { 59: { c: [8760] } } } } } } } } } } }, 112: { l: { 108: { l: { 117: { l: { 115: { l: { 59: { c: [8724] } } } } } } } } }, 115: { l: { 113: { l: { 117: { l: { 97: { l: { 114: { l: { 101: { l: { 59: { c: [8865] } } } } } } } } } } } } } } }, 117: { l: { 98: { l: { 108: { l: { 101: { l: { 98: { l: { 97: { l: { 114: { l: { 119: { l: { 101: { l: { 100: { l: { 103: { l: { 101: { l: { 59: { c: [8966] } } } } } } } } } } } } } } } } } } } } } } } } }, 119: { l: { 110: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8595] } } } } } } } } } } }, 100: { l: { 111: { l: { 119: { l: { 110: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 115: { l: { 59: { c: [8650] } } } } } } } } } } } } } } } } } } } } }, 104: { l: { 97: { l: { 114: { l: { 112: { l: { 111: { l: { 111: { l: { 110: { l: { 108: { l: { 101: { l: { 102: { l: { 116: { l: { 59: { c: [8643] } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 59: { c: [8642] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 114: { l: { 98: { l: { 107: { l: { 97: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10512] } } } } } } } } } } } } }, 99: { l: { 111: { l: { 114: { l: { 110: { l: { 59: { c: [8991] } } } } } } }, 114: { l: { 111: { l: { 112: { l: { 59: { c: [8972] } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119993] } } }, 121: { l: { 59: { c: [1109] } } } } }, 111: { l: { 108: { l: { 59: { c: [10742] } } } } }, 116: { l: { 114: { l: { 111: { l: { 107: { l: { 59: { c: [273] } } } } } } } } } } }, 116: { l: { 100: { l: { 111: { l: { 116: { l: { 59: { c: [8945] } } } } } } }, 114: { l: { 105: { l: { 59: { c: [9663] }, 102: { l: { 59: { c: [9662] } } } } } } } } }, 117: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8693] } } } } } } }, 104: { l: { 97: { l: { 114: { l: { 59: { c: [10607] } } } } } } } } }, 119: { l: { 97: { l: { 110: { l: { 103: { l: { 108: { l: { 101: { l: { 59: { c: [10662] } } } } } } } } } } } } }, 122: { l: { 99: { l: { 121: { l: { 59: { c: [1119] } } } } }, 105: { l: { 103: { l: { 114: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [10239] } } } } } } } } } } } } } } } } }, 101: { l: { 68: { l: { 68: { l: { 111: { l: { 116: { l: { 59: { c: [10871] } } } } } } }, 111: { l: { 116: { l: { 59: { c: [8785] } } } } } } }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [233] } }, c: [233] } } } } } } }, 115: { l: { 116: { l: { 101: { l: { 114: { l: { 59: { c: [10862] } } } } } } } } } } }, 99: { l: { 97: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [283] } } } } } } } } }, 105: { l: { 114: { l: { 59: { c: [8790] }, 99: { l: { 59: { c: [234] } }, c: [234] } } } } }, 111: { l: { 108: { l: { 111: { l: { 110: { l: { 59: { c: [8789] } } } } } } } } }, 121: { l: { 59: { c: [1101] } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [279] } } } } } } }, 101: { l: { 59: { c: [8519] } } }, 102: { l: { 68: { l: { 111: { l: { 116: { l: { 59: { c: [8786] } } } } } } }, 114: { l: { 59: { c: [120098] } } } } }, 103: { l: { 59: { c: [10906] }, 114: { l: { 97: { l: { 118: { l: { 101: { l: { 59: { c: [232] } }, c: [232] } } } } } } }, 115: { l: { 59: { c: [10902] }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [10904] } } } } } } } } } } }, 108: { l: { 59: { c: [10905] }, 105: { l: { 110: { l: { 116: { l: { 101: { l: { 114: { l: { 115: { l: { 59: { c: [9191] } } } } } } } } } } } } }, 108: { l: { 59: { c: [8467] } } }, 115: { l: { 59: { c: [10901] }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [10903] } } } } } } } } } } }, 109: { l: { 97: { l: { 99: { l: { 114: { l: { 59: { c: [275] } } } } } } }, 112: { l: { 116: { l: { 121: { l: { 59: { c: [8709] }, 115: { l: { 101: { l: { 116: { l: { 59: { c: [8709] } } } } } } }, 118: { l: { 59: { c: [8709] } } } } } } } } }, 115: { l: { 112: { l: { 49: { l: { 51: { l: { 59: { c: [8196] } } }, 52: { l: { 59: { c: [8197] } } } } }, 59: { c: [8195] } } } } } } }, 110: { l: { 103: { l: { 59: { c: [331] } } }, 115: { l: { 112: { l: { 59: { c: [8194] } } } } } } }, 111: { l: { 103: { l: { 111: { l: { 110: { l: { 59: { c: [281] } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120150] } } } } } } }, 112: { l: { 97: { l: { 114: { l: { 59: { c: [8917] }, 115: { l: { 108: { l: { 59: { c: [10723] } } } } } } } } }, 108: { l: { 117: { l: { 115: { l: { 59: { c: [10865] } } } } } } }, 115: { l: { 105: { l: { 59: { c: [949] }, 108: { l: { 111: { l: { 110: { l: { 59: { c: [949] } } } } } } }, 118: { l: { 59: { c: [1013] } } } } } } } } }, 113: { l: { 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [8790] } } } } } } }, 111: { l: { 108: { l: { 111: { l: { 110: { l: { 59: { c: [8789] } } } } } } } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8770] } } } } }, 108: { l: { 97: { l: { 110: { l: { 116: { l: { 103: { l: { 116: { l: { 114: { l: { 59: { c: [10902] } } } } } } }, 108: { l: { 101: { l: { 115: { l: { 115: { l: { 59: { c: [10901] } } } } } } } } } } } } } } } } } } }, 117: { l: { 97: { l: { 108: { l: { 115: { l: { 59: { c: [61] } } } } } } }, 101: { l: { 115: { l: { 116: { l: { 59: { c: [8799] } } } } } } }, 105: { l: { 118: { l: { 59: { c: [8801] }, 68: { l: { 68: { l: { 59: { c: [10872] } } } } } } } } } } }, 118: { l: { 112: { l: { 97: { l: { 114: { l: { 115: { l: { 108: { l: { 59: { c: [10725] } } } } } } } } } } } } } } }, 114: { l: { 68: { l: { 111: { l: { 116: { l: { 59: { c: [8787] } } } } } } }, 97: { l: { 114: { l: { 114: { l: { 59: { c: [10609] } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [8495] } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [8784] } } } } } } }, 105: { l: { 109: { l: { 59: { c: [8770] } } } } } } }, 116: { l: { 97: { l: { 59: { c: [951] } } }, 104: { l: { 59: { c: [240] } }, c: [240] } } }, 117: { l: { 109: { l: { 108: { l: { 59: { c: [235] } }, c: [235] } } }, 114: { l: { 111: { l: { 59: { c: [8364] } } } } } } }, 120: { l: { 99: { l: { 108: { l: { 59: { c: [33] } } } } }, 105: { l: { 115: { l: { 116: { l: { 59: { c: [8707] } } } } } } }, 112: { l: { 101: { l: { 99: { l: { 116: { l: { 97: { l: { 116: { l: { 105: { l: { 111: { l: { 110: { l: { 59: { c: [8496] } } } } } } } } } } } } } } } } }, 111: { l: { 110: { l: { 101: { l: { 110: { l: { 116: { l: { 105: { l: { 97: { l: { 108: { l: { 101: { l: { 59: { c: [8519] } } } } } } } } } } } } } } } } } } } } } } } } }, 102: { l: { 97: { l: { 108: { l: { 108: { l: { 105: { l: { 110: { l: { 103: { l: { 100: { l: { 111: { l: { 116: { l: { 115: { l: { 101: { l: { 113: { l: { 59: { c: [8786] } } } } } } } } } } } } } } } } } } } } } } } } }, 99: { l: { 121: { l: { 59: { c: [1092] } } } } }, 101: { l: { 109: { l: { 97: { l: { 108: { l: { 101: { l: { 59: { c: [9792] } } } } } } } } } } }, 102: { l: { 105: { l: { 108: { l: { 105: { l: { 103: { l: { 59: { c: [64259] } } } } } } } } }, 108: { l: { 105: { l: { 103: { l: { 59: { c: [64256] } } } } }, 108: { l: { 105: { l: { 103: { l: { 59: { c: [64260] } } } } } } } } }, 114: { l: { 59: { c: [120099] } } } } }, 105: { l: { 108: { l: { 105: { l: { 103: { l: { 59: { c: [64257] } } } } } } } } }, 106: { l: { 108: { l: { 105: { l: { 103: { l: { 59: { c: [102, 106] } } } } } } } } }, 108: { l: { 97: { l: { 116: { l: { 59: { c: [9837] } } } } }, 108: { l: { 105: { l: { 103: { l: { 59: { c: [64258] } } } } } } }, 116: { l: { 110: { l: { 115: { l: { 59: { c: [9649] } } } } } } } } }, 110: { l: { 111: { l: { 102: { l: { 59: { c: [402] } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120151] } } } } }, 114: { l: { 97: { l: { 108: { l: { 108: { l: { 59: { c: [8704] } } } } } } }, 107: { l: { 59: { c: [8916] }, 118: { l: { 59: { c: [10969] } } } } } } } } }, 112: { l: { 97: { l: { 114: { l: { 116: { l: { 105: { l: { 110: { l: { 116: { l: { 59: { c: [10765] } } } } } } } } } } } } } } }, 114: { l: { 97: { l: { 99: { l: { 49: { l: { 50: { l: { 59: { c: [189] } }, c: [189] }, 51: { l: { 59: { c: [8531] } } }, 52: { l: { 59: { c: [188] } }, c: [188] }, 53: { l: { 59: { c: [8533] } } }, 54: { l: { 59: { c: [8537] } } }, 56: { l: { 59: { c: [8539] } } } } }, 50: { l: { 51: { l: { 59: { c: [8532] } } }, 53: { l: { 59: { c: [8534] } } } } }, 51: { l: { 52: { l: { 59: { c: [190] } }, c: [190] }, 53: { l: { 59: { c: [8535] } } }, 56: { l: { 59: { c: [8540] } } } } }, 52: { l: { 53: { l: { 59: { c: [8536] } } } } }, 53: { l: { 54: { l: { 59: { c: [8538] } } }, 56: { l: { 59: { c: [8541] } } } } }, 55: { l: { 56: { l: { 59: { c: [8542] } } } } } } }, 115: { l: { 108: { l: { 59: { c: [8260] } } } } } } }, 111: { l: { 119: { l: { 110: { l: { 59: { c: [8994] } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119995] } } } } } } } } }, 103: { l: { 69: { l: { 59: { c: [8807] }, 108: { l: { 59: { c: [10892] } } } } }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [501] } } } } } } } } }, 109: { l: { 109: { l: { 97: { l: { 59: { c: [947] }, 100: { l: { 59: { c: [989] } } } } } } } } }, 112: { l: { 59: { c: [10886] } } } } }, 98: { l: { 114: { l: { 101: { l: { 118: { l: { 101: { l: { 59: { c: [287] } } } } } } } } } } }, 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [285] } } } } } } }, 121: { l: { 59: { c: [1075] } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [289] } } } } } } }, 101: { l: { 59: { c: [8805] }, 108: { l: { 59: { c: [8923] } } }, 113: { l: { 59: { c: [8805] }, 113: { l: { 59: { c: [8807] } } }, 115: { l: { 108: { l: { 97: { l: { 110: { l: { 116: { l: { 59: { c: [10878] } } } } } } } } } } } } }, 115: { l: { 59: { c: [10878] }, 99: { l: { 99: { l: { 59: { c: [10921] } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [10880] }, 111: { l: { 59: { c: [10882] }, 108: { l: { 59: { c: [10884] } } } } } } } } } } }, 108: { l: { 59: { c: [8923, 65024] }, 101: { l: { 115: { l: { 59: { c: [10900] } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120100] } } } } }, 103: { l: { 59: { c: [8811] }, 103: { l: { 59: { c: [8921] } } } } }, 105: { l: { 109: { l: { 101: { l: { 108: { l: { 59: { c: [8503] } } } } } } } } }, 106: { l: { 99: { l: { 121: { l: { 59: { c: [1107] } } } } } } }, 108: { l: { 59: { c: [8823] }, 69: { l: { 59: { c: [10898] } } }, 97: { l: { 59: { c: [10917] } } }, 106: { l: { 59: { c: [10916] } } } } }, 110: { l: { 69: { l: { 59: { c: [8809] } } }, 97: { l: { 112: { l: { 59: { c: [10890] }, 112: { l: { 114: { l: { 111: { l: { 120: { l: { 59: { c: [10890] } } } } } } } } } } } } }, 101: { l: { 59: { c: [10888] }, 113: { l: { 59: { c: [10888] }, 113: { l: { 59: { c: [8809] } } } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8935] } } } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120152] } } } } } } }, 114: { l: { 97: { l: { 118: { l: { 101: { l: { 59: { c: [96] } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [8458] } } } } }, 105: { l: { 109: { l: { 59: { c: [8819] }, 101: { l: { 59: { c: [10894] } } }, 108: { l: { 59: { c: [10896] } } } } } } } } }, 116: { l: { 59: { c: [62] }, 99: { l: { 99: { l: { 59: { c: [10919] } } }, 105: { l: { 114: { l: { 59: { c: [10874] } } } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [8919] } } } } } } }, 108: { l: { 80: { l: { 97: { l: { 114: { l: { 59: { c: [10645] } } } } } } } } }, 113: { l: { 117: { l: { 101: { l: { 115: { l: { 116: { l: { 59: { c: [10876] } } } } } } } } } } }, 114: { l: { 97: { l: { 112: { l: { 112: { l: { 114: { l: { 111: { l: { 120: { l: { 59: { c: [10886] } } } } } } } } } } }, 114: { l: { 114: { l: { 59: { c: [10616] } } } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [8919] } } } } } } }, 101: { l: { 113: { l: { 108: { l: { 101: { l: { 115: { l: { 115: { l: { 59: { c: [8923] } } } } } } } } }, 113: { l: { 108: { l: { 101: { l: { 115: { l: { 115: { l: { 59: { c: [10892] } } } } } } } } } } } } } } }, 108: { l: { 101: { l: { 115: { l: { 115: { l: { 59: { c: [8823] } } } } } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8819] } } } } } } } } } }, c: [62] }, 118: { l: { 101: { l: { 114: { l: { 116: { l: { 110: { l: { 101: { l: { 113: { l: { 113: { l: { 59: { c: [8809, 65024] } } } } } } } } } } } } } } }, 110: { l: { 69: { l: { 59: { c: [8809, 65024] } } } } } } } } }, 104: { l: { 65: { l: { 114: { l: { 114: { l: { 59: { c: [8660] } } } } } } }, 97: { l: { 105: { l: { 114: { l: { 115: { l: { 112: { l: { 59: { c: [8202] } } } } } } } } }, 108: { l: { 102: { l: { 59: { c: [189] } } } } }, 109: { l: { 105: { l: { 108: { l: { 116: { l: { 59: { c: [8459] } } } } } } } } }, 114: { l: { 100: { l: { 99: { l: { 121: { l: { 59: { c: [1098] } } } } } } }, 114: { l: { 59: { c: [8596] }, 99: { l: { 105: { l: { 114: { l: { 59: { c: [10568] } } } } } } }, 119: { l: { 59: { c: [8621] } } } } } } } } }, 98: { l: { 97: { l: { 114: { l: { 59: { c: [8463] } } } } } } }, 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [293] } } } } } } } } }, 101: { l: { 97: { l: { 114: { l: { 116: { l: { 115: { l: { 59: { c: [9829] }, 117: { l: { 105: { l: { 116: { l: { 59: { c: [9829] } } } } } } } } } } } } } } }, 108: { l: { 108: { l: { 105: { l: { 112: { l: { 59: { c: [8230] } } } } } } } } }, 114: { l: { 99: { l: { 111: { l: { 110: { l: { 59: { c: [8889] } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120101] } } } } }, 107: { l: { 115: { l: { 101: { l: { 97: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10533] } } } } } } } } } } }, 119: { l: { 97: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10534] } } } } } } } } } } } } } } }, 111: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8703] } } } } } } }, 109: { l: { 116: { l: { 104: { l: { 116: { l: { 59: { c: [8763] } } } } } } } } }, 111: { l: { 107: { l: { 108: { l: { 101: { l: { 102: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8617] } } } } } } } } } } } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8618] } } } } } } } } } } } } } } } } } } } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120153] } } } } }, 114: { l: { 98: { l: { 97: { l: { 114: { l: { 59: { c: [8213] } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119997] } } } } }, 108: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [8463] } } } } } } } } }, 116: { l: { 114: { l: { 111: { l: { 107: { l: { 59: { c: [295] } } } } } } } } } } }, 121: { l: { 98: { l: { 117: { l: { 108: { l: { 108: { l: { 59: { c: [8259] } } } } } } } } }, 112: { l: { 104: { l: { 101: { l: { 110: { l: { 59: { c: [8208] } } } } } } } } } } } } }, 105: { l: { 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [237] } }, c: [237] } } } } } } } } }, 99: { l: { 59: { c: [8291] }, 105: { l: { 114: { l: { 99: { l: { 59: { c: [238] } }, c: [238] } } } } }, 121: { l: { 59: { c: [1080] } } } } }, 101: { l: { 99: { l: { 121: { l: { 59: { c: [1077] } } } } }, 120: { l: { 99: { l: { 108: { l: { 59: { c: [161] } }, c: [161] } } } } } } }, 102: { l: { 102: { l: { 59: { c: [8660] } } }, 114: { l: { 59: { c: [120102] } } } } }, 103: { l: { 114: { l: { 97: { l: { 118: { l: { 101: { l: { 59: { c: [236] } }, c: [236] } } } } } } } } }, 105: { l: { 59: { c: [8520] }, 105: { l: { 105: { l: { 110: { l: { 116: { l: { 59: { c: [10764] } } } } } } }, 110: { l: { 116: { l: { 59: { c: [8749] } } } } } } }, 110: { l: { 102: { l: { 105: { l: { 110: { l: { 59: { c: [10716] } } } } } } } } }, 111: { l: { 116: { l: { 97: { l: { 59: { c: [8489] } } } } } } } } }, 106: { l: { 108: { l: { 105: { l: { 103: { l: { 59: { c: [307] } } } } } } } } }, 109: { l: { 97: { l: { 99: { l: { 114: { l: { 59: { c: [299] } } } } }, 103: { l: { 101: { l: { 59: { c: [8465] } } }, 108: { l: { 105: { l: { 110: { l: { 101: { l: { 59: { c: [8464] } } } } } } } } }, 112: { l: { 97: { l: { 114: { l: { 116: { l: { 59: { c: [8465] } } } } } } } } } } }, 116: { l: { 104: { l: { 59: { c: [305] } } } } } } }, 111: { l: { 102: { l: { 59: { c: [8887] } } } } }, 112: { l: { 101: { l: { 100: { l: { 59: { c: [437] } } } } } } } } }, 110: { l: { 59: { c: [8712] }, 99: { l: { 97: { l: { 114: { l: { 101: { l: { 59: { c: [8453] } } } } } } } } }, 102: { l: { 105: { l: { 110: { l: { 59: { c: [8734] }, 116: { l: { 105: { l: { 101: { l: { 59: { c: [10717] } } } } } } } } } } } } }, 111: { l: { 100: { l: { 111: { l: { 116: { l: { 59: { c: [305] } } } } } } } } }, 116: { l: { 59: { c: [8747] }, 99: { l: { 97: { l: { 108: { l: { 59: { c: [8890] } } } } } } }, 101: { l: { 103: { l: { 101: { l: { 114: { l: { 115: { l: { 59: { c: [8484] } } } } } } } } }, 114: { l: { 99: { l: { 97: { l: { 108: { l: { 59: { c: [8890] } } } } } } } } } } }, 108: { l: { 97: { l: { 114: { l: { 104: { l: { 107: { l: { 59: { c: [10775] } } } } } } } } } } }, 112: { l: { 114: { l: { 111: { l: { 100: { l: { 59: { c: [10812] } } } } } } } } } } } } }, 111: { l: { 99: { l: { 121: { l: { 59: { c: [1105] } } } } }, 103: { l: { 111: { l: { 110: { l: { 59: { c: [303] } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120154] } } } } }, 116: { l: { 97: { l: { 59: { c: [953] } } } } } } }, 112: { l: { 114: { l: { 111: { l: { 100: { l: { 59: { c: [10812] } } } } } } } } }, 113: { l: { 117: { l: { 101: { l: { 115: { l: { 116: { l: { 59: { c: [191] } }, c: [191] } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119998] } } } } }, 105: { l: { 110: { l: { 59: { c: [8712] }, 69: { l: { 59: { c: [8953] } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [8949] } } } } } } }, 115: { l: { 59: { c: [8948] }, 118: { l: { 59: { c: [8947] } } } } }, 118: { l: { 59: { c: [8712] } } } } } } } } }, 116: { l: { 59: { c: [8290] }, 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [297] } } } } } } } } } } }, 117: { l: { 107: { l: { 99: { l: { 121: { l: { 59: { c: [1110] } } } } } } }, 109: { l: { 108: { l: { 59: { c: [239] } }, c: [239] } } } } } } }, 106: { l: { 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [309] } } } } } } }, 121: { l: { 59: { c: [1081] } } } } }, 102: { l: { 114: { l: { 59: { c: [120103] } } } } }, 109: { l: { 97: { l: { 116: { l: { 104: { l: { 59: { c: [567] } } } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120155] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [119999] } } } } }, 101: { l: { 114: { l: { 99: { l: { 121: { l: { 59: { c: [1112] } } } } } } } } } } }, 117: { l: { 107: { l: { 99: { l: { 121: { l: { 59: { c: [1108] } } } } } } } } } } }, 107: { l: { 97: { l: { 112: { l: { 112: { l: { 97: { l: { 59: { c: [954] }, 118: { l: { 59: { c: [1008] } } } } } } } } } } }, 99: { l: { 101: { l: { 100: { l: { 105: { l: { 108: { l: { 59: { c: [311] } } } } } } } } }, 121: { l: { 59: { c: [1082] } } } } }, 102: { l: { 114: { l: { 59: { c: [120104] } } } } }, 103: { l: { 114: { l: { 101: { l: { 101: { l: { 110: { l: { 59: { c: [312] } } } } } } } } } } }, 104: { l: { 99: { l: { 121: { l: { 59: { c: [1093] } } } } } } }, 106: { l: { 99: { l: { 121: { l: { 59: { c: [1116] } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120156] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [120000] } } } } } } } } }, 108: { l: { 65: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8666] } } } } } } }, 114: { l: { 114: { l: { 59: { c: [8656] } } } } }, 116: { l: { 97: { l: { 105: { l: { 108: { l: { 59: { c: [10523] } } } } } } } } } } }, 66: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [10510] } } } } } } } } }, 69: { l: { 59: { c: [8806] }, 103: { l: { 59: { c: [10891] } } } } }, 72: { l: { 97: { l: { 114: { l: { 59: { c: [10594] } } } } } } }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [314] } } } } } } } } }, 101: { l: { 109: { l: { 112: { l: { 116: { l: { 121: { l: { 118: { l: { 59: { c: [10676] } } } } } } } } } } } } }, 103: { l: { 114: { l: { 97: { l: { 110: { l: { 59: { c: [8466] } } } } } } } } }, 109: { l: { 98: { l: { 100: { l: { 97: { l: { 59: { c: [955] } } } } } } } } }, 110: { l: { 103: { l: { 59: { c: [10216] }, 100: { l: { 59: { c: [10641] } } }, 108: { l: { 101: { l: { 59: { c: [10216] } } } } } } } } }, 112: { l: { 59: { c: [10885] } } }, 113: { l: { 117: { l: { 111: { l: { 59: { c: [171] } }, c: [171] } } } } }, 114: { l: { 114: { l: { 59: { c: [8592] }, 98: { l: { 59: { c: [8676] }, 102: { l: { 115: { l: { 59: { c: [10527] } } } } } } }, 102: { l: { 115: { l: { 59: { c: [10525] } } } } }, 104: { l: { 107: { l: { 59: { c: [8617] } } } } }, 108: { l: { 112: { l: { 59: { c: [8619] } } } } }, 112: { l: { 108: { l: { 59: { c: [10553] } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [10611] } } } } } } }, 116: { l: { 108: { l: { 59: { c: [8610] } } } } } } } } }, 116: { l: { 59: { c: [10923] }, 97: { l: { 105: { l: { 108: { l: { 59: { c: [10521] } } } } } } }, 101: { l: { 59: { c: [10925] }, 115: { l: { 59: { c: [10925, 65024] } } } } } } } } }, 98: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [10508] } } } } } } }, 98: { l: { 114: { l: { 107: { l: { 59: { c: [10098] } } } } } } }, 114: { l: { 97: { l: { 99: { l: { 101: { l: { 59: { c: [123] } } }, 107: { l: { 59: { c: [91] } } } } } } }, 107: { l: { 101: { l: { 59: { c: [10635] } } }, 115: { l: { 108: { l: { 100: { l: { 59: { c: [10639] } } }, 117: { l: { 59: { c: [10637] } } } } } } } } } } } } }, 99: { l: { 97: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [318] } } } } } } } } }, 101: { l: { 100: { l: { 105: { l: { 108: { l: { 59: { c: [316] } } } } } } }, 105: { l: { 108: { l: { 59: { c: [8968] } } } } } } }, 117: { l: { 98: { l: { 59: { c: [123] } } } } }, 121: { l: { 59: { c: [1083] } } } } }, 100: { l: { 99: { l: { 97: { l: { 59: { c: [10550] } } } } }, 113: { l: { 117: { l: { 111: { l: { 59: { c: [8220] }, 114: { l: { 59: { c: [8222] } } } } } } } } }, 114: { l: { 100: { l: { 104: { l: { 97: { l: { 114: { l: { 59: { c: [10599] } } } } } } } } }, 117: { l: { 115: { l: { 104: { l: { 97: { l: { 114: { l: { 59: { c: [10571] } } } } } } } } } } } } }, 115: { l: { 104: { l: { 59: { c: [8626] } } } } } } }, 101: { l: { 59: { c: [8804] }, 102: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8592] }, 116: { l: { 97: { l: { 105: { l: { 108: { l: { 59: { c: [8610] } } } } } } } } } } } } } } } } } } }, 104: { l: { 97: { l: { 114: { l: { 112: { l: { 111: { l: { 111: { l: { 110: { l: { 100: { l: { 111: { l: { 119: { l: { 110: { l: { 59: { c: [8637] } } } } } } } } }, 117: { l: { 112: { l: { 59: { c: [8636] } } } } } } } } } } } } } } } } } } }, 108: { l: { 101: { l: { 102: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 115: { l: { 59: { c: [8647] } } } } } } } } } } } } } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8596] }, 115: { l: { 59: { c: [8646] } } } } } } } } } } } } }, 104: { l: { 97: { l: { 114: { l: { 112: { l: { 111: { l: { 111: { l: { 110: { l: { 115: { l: { 59: { c: [8651] } } } } } } } } } } } } } } } } }, 115: { l: { 113: { l: { 117: { l: { 105: { l: { 103: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8621] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 116: { l: { 104: { l: { 114: { l: { 101: { l: { 101: { l: { 116: { l: { 105: { l: { 109: { l: { 101: { l: { 115: { l: { 59: { c: [8907] } } } } } } } } } } } } } } } } } } } } } } } } }, 103: { l: { 59: { c: [8922] } } }, 113: { l: { 59: { c: [8804] }, 113: { l: { 59: { c: [8806] } } }, 115: { l: { 108: { l: { 97: { l: { 110: { l: { 116: { l: { 59: { c: [10877] } } } } } } } } } } } } }, 115: { l: { 59: { c: [10877] }, 99: { l: { 99: { l: { 59: { c: [10920] } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [10879] }, 111: { l: { 59: { c: [10881] }, 114: { l: { 59: { c: [10883] } } } } } } } } } } }, 103: { l: { 59: { c: [8922, 65024] }, 101: { l: { 115: { l: { 59: { c: [10899] } } } } } } }, 115: { l: { 97: { l: { 112: { l: { 112: { l: { 114: { l: { 111: { l: { 120: { l: { 59: { c: [10885] } } } } } } } } } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [8918] } } } } } } }, 101: { l: { 113: { l: { 103: { l: { 116: { l: { 114: { l: { 59: { c: [8922] } } } } } } }, 113: { l: { 103: { l: { 116: { l: { 114: { l: { 59: { c: [10891] } } } } } } } } } } } } }, 103: { l: { 116: { l: { 114: { l: { 59: { c: [8822] } } } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8818] } } } } } } } } } } } } }, 102: { l: { 105: { l: { 115: { l: { 104: { l: { 116: { l: { 59: { c: [10620] } } } } } } } } }, 108: { l: { 111: { l: { 111: { l: { 114: { l: { 59: { c: [8970] } } } } } } } } }, 114: { l: { 59: { c: [120105] } } } } }, 103: { l: { 59: { c: [8822] }, 69: { l: { 59: { c: [10897] } } } } }, 104: { l: { 97: { l: { 114: { l: { 100: { l: { 59: { c: [8637] } } }, 117: { l: { 59: { c: [8636] }, 108: { l: { 59: { c: [10602] } } } } } } } } }, 98: { l: { 108: { l: { 107: { l: { 59: { c: [9604] } } } } } } } } }, 106: { l: { 99: { l: { 121: { l: { 59: { c: [1113] } } } } } } }, 108: { l: { 59: { c: [8810] }, 97: { l: { 114: { l: { 114: { l: { 59: { c: [8647] } } } } } } }, 99: { l: { 111: { l: { 114: { l: { 110: { l: { 101: { l: { 114: { l: { 59: { c: [8990] } } } } } } } } } } } } }, 104: { l: { 97: { l: { 114: { l: { 100: { l: { 59: { c: [10603] } } } } } } } } }, 116: { l: { 114: { l: { 105: { l: { 59: { c: [9722] } } } } } } } } }, 109: { l: { 105: { l: { 100: { l: { 111: { l: { 116: { l: { 59: { c: [320] } } } } } } } } }, 111: { l: { 117: { l: { 115: { l: { 116: { l: { 59: { c: [9136] }, 97: { l: { 99: { l: { 104: { l: { 101: { l: { 59: { c: [9136] } } } } } } } } } } } } } } } } } } }, 110: { l: { 69: { l: { 59: { c: [8808] } } }, 97: { l: { 112: { l: { 59: { c: [10889] }, 112: { l: { 114: { l: { 111: { l: { 120: { l: { 59: { c: [10889] } } } } } } } } } } } } }, 101: { l: { 59: { c: [10887] }, 113: { l: { 59: { c: [10887] }, 113: { l: { 59: { c: [8808] } } } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8934] } } } } } } } } }, 111: { l: { 97: { l: { 110: { l: { 103: { l: { 59: { c: [10220] } } } } }, 114: { l: { 114: { l: { 59: { c: [8701] } } } } } } }, 98: { l: { 114: { l: { 107: { l: { 59: { c: [10214] } } } } } } }, 110: { l: { 103: { l: { 108: { l: { 101: { l: { 102: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10229] } } } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10231] } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 109: { l: { 97: { l: { 112: { l: { 115: { l: { 116: { l: { 111: { l: { 59: { c: [10236] } } } } } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [10230] } } } } } } } } } } } } } } } } } } } } } } } } }, 111: { l: { 112: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 108: { l: { 101: { l: { 102: { l: { 116: { l: { 59: { c: [8619] } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 59: { c: [8620] } } } } } } } } } } } } } } } } } } } } } } } } }, 112: { l: { 97: { l: { 114: { l: { 59: { c: [10629] } } } } }, 102: { l: { 59: { c: [120157] } } }, 108: { l: { 117: { l: { 115: { l: { 59: { c: [10797] } } } } } } } } }, 116: { l: { 105: { l: { 109: { l: { 101: { l: { 115: { l: { 59: { c: [10804] } } } } } } } } } } }, 119: { l: { 97: { l: { 115: { l: { 116: { l: { 59: { c: [8727] } } } } } } }, 98: { l: { 97: { l: { 114: { l: { 59: { c: [95] } } } } } } } } }, 122: { l: { 59: { c: [9674] }, 101: { l: { 110: { l: { 103: { l: { 101: { l: { 59: { c: [9674] } } } } } } } } }, 102: { l: { 59: { c: [10731] } } } } } } }, 112: { l: { 97: { l: { 114: { l: { 59: { c: [40] }, 108: { l: { 116: { l: { 59: { c: [10643] } } } } } } } } } } }, 114: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8646] } } } } } } }, 99: { l: { 111: { l: { 114: { l: { 110: { l: { 101: { l: { 114: { l: { 59: { c: [8991] } } } } } } } } } } } } }, 104: { l: { 97: { l: { 114: { l: { 59: { c: [8651] }, 100: { l: { 59: { c: [10605] } } } } } } } } }, 109: { l: { 59: { c: [8206] } } }, 116: { l: { 114: { l: { 105: { l: { 59: { c: [8895] } } } } } } } } }, 115: { l: { 97: { l: { 113: { l: { 117: { l: { 111: { l: { 59: { c: [8249] } } } } } } } } }, 99: { l: { 114: { l: { 59: { c: [120001] } } } } }, 104: { l: { 59: { c: [8624] } } }, 105: { l: { 109: { l: { 59: { c: [8818] }, 101: { l: { 59: { c: [10893] } } }, 103: { l: { 59: { c: [10895] } } } } } } }, 113: { l: { 98: { l: { 59: { c: [91] } } }, 117: { l: { 111: { l: { 59: { c: [8216] }, 114: { l: { 59: { c: [8218] } } } } } } } } }, 116: { l: { 114: { l: { 111: { l: { 107: { l: { 59: { c: [322] } } } } } } } } } } }, 116: { l: { 59: { c: [60] }, 99: { l: { 99: { l: { 59: { c: [10918] } } }, 105: { l: { 114: { l: { 59: { c: [10873] } } } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [8918] } } } } } } }, 104: { l: { 114: { l: { 101: { l: { 101: { l: { 59: { c: [8907] } } } } } } } } }, 105: { l: { 109: { l: { 101: { l: { 115: { l: { 59: { c: [8905] } } } } } } } } }, 108: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [10614] } } } } } } } } }, 113: { l: { 117: { l: { 101: { l: { 115: { l: { 116: { l: { 59: { c: [10875] } } } } } } } } } } }, 114: { l: { 80: { l: { 97: { l: { 114: { l: { 59: { c: [10646] } } } } } } }, 105: { l: { 59: { c: [9667] }, 101: { l: { 59: { c: [8884] } } }, 102: { l: { 59: { c: [9666] } } } } } } } }, c: [60] }, 117: { l: { 114: { l: { 100: { l: { 115: { l: { 104: { l: { 97: { l: { 114: { l: { 59: { c: [10570] } } } } } } } } } } }, 117: { l: { 104: { l: { 97: { l: { 114: { l: { 59: { c: [10598] } } } } } } } } } } } } }, 118: { l: { 101: { l: { 114: { l: { 116: { l: { 110: { l: { 101: { l: { 113: { l: { 113: { l: { 59: { c: [8808, 65024] } } } } } } } } } } } } } } }, 110: { l: { 69: { l: { 59: { c: [8808, 65024] } } } } } } } } }, 109: { l: { 68: { l: { 68: { l: { 111: { l: { 116: { l: { 59: { c: [8762] } } } } } } } } }, 97: { l: { 99: { l: { 114: { l: { 59: { c: [175] } }, c: [175] } } }, 108: { l: { 101: { l: { 59: { c: [9794] } } }, 116: { l: { 59: { c: [10016] }, 101: { l: { 115: { l: { 101: { l: { 59: { c: [10016] } } } } } } } } } } }, 112: { l: { 59: { c: [8614] }, 115: { l: { 116: { l: { 111: { l: { 59: { c: [8614] }, 100: { l: { 111: { l: { 119: { l: { 110: { l: { 59: { c: [8615] } } } } } } } } }, 108: { l: { 101: { l: { 102: { l: { 116: { l: { 59: { c: [8612] } } } } } } } } }, 117: { l: { 112: { l: { 59: { c: [8613] } } } } } } } } } } } } }, 114: { l: { 107: { l: { 101: { l: { 114: { l: { 59: { c: [9646] } } } } } } } } } } }, 99: { l: { 111: { l: { 109: { l: { 109: { l: { 97: { l: { 59: { c: [10793] } } } } } } } } }, 121: { l: { 59: { c: [1084] } } } } }, 100: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [8212] } } } } } } } } }, 101: { l: { 97: { l: { 115: { l: { 117: { l: { 114: { l: { 101: { l: { 100: { l: { 97: { l: { 110: { l: { 103: { l: { 108: { l: { 101: { l: { 59: { c: [8737] } } } } } } } } } } } } } } } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120106] } } } } }, 104: { l: { 111: { l: { 59: { c: [8487] } } } } }, 105: { l: { 99: { l: { 114: { l: { 111: { l: { 59: { c: [181] } }, c: [181] } } } } }, 100: { l: { 59: { c: [8739] }, 97: { l: { 115: { l: { 116: { l: { 59: { c: [42] } } } } } } }, 99: { l: { 105: { l: { 114: { l: { 59: { c: [10992] } } } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [183] } }, c: [183] } } } } } } }, 110: { l: { 117: { l: { 115: { l: { 59: { c: [8722] }, 98: { l: { 59: { c: [8863] } } }, 100: { l: { 59: { c: [8760] }, 117: { l: { 59: { c: [10794] } } } } } } } } } } } } }, 108: { l: { 99: { l: { 112: { l: { 59: { c: [10971] } } } } }, 100: { l: { 114: { l: { 59: { c: [8230] } } } } } } }, 110: { l: { 112: { l: { 108: { l: { 117: { l: { 115: { l: { 59: { c: [8723] } } } } } } } } } } }, 111: { l: { 100: { l: { 101: { l: { 108: { l: { 115: { l: { 59: { c: [8871] } } } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120158] } } } } } } }, 112: { l: { 59: { c: [8723] } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [120002] } } } } }, 116: { l: { 112: { l: { 111: { l: { 115: { l: { 59: { c: [8766] } } } } } } } } } } }, 117: { l: { 59: { c: [956] }, 108: { l: { 116: { l: { 105: { l: { 109: { l: { 97: { l: { 112: { l: { 59: { c: [8888] } } } } } } } } } } } } }, 109: { l: { 97: { l: { 112: { l: { 59: { c: [8888] } } } } } } } } } } }, 110: { l: { 71: { l: { 103: { l: { 59: { c: [8921, 824] } } }, 116: { l: { 59: { c: [8811, 8402] }, 118: { l: { 59: { c: [8811, 824] } } } } } } }, 76: { l: { 101: { l: { 102: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8653] } } } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8654] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 108: { l: { 59: { c: [8920, 824] } } }, 116: { l: { 59: { c: [8810, 8402] }, 118: { l: { 59: { c: [8810, 824] } } } } } } }, 82: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8655] } } } } } } } } } } } } } } } } } } } } }, 86: { l: { 68: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [8879] } } } } } } } } }, 100: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [8878] } } } } } } } } } } }, 97: { l: { 98: { l: { 108: { l: { 97: { l: { 59: { c: [8711] } } } } } } }, 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [324] } } } } } } } } }, 110: { l: { 103: { l: { 59: { c: [8736, 8402] } } } } }, 112: { l: { 59: { c: [8777] }, 69: { l: { 59: { c: [10864, 824] } } }, 105: { l: { 100: { l: { 59: { c: [8779, 824] } } } } }, 111: { l: { 115: { l: { 59: { c: [329] } } } } }, 112: { l: { 114: { l: { 111: { l: { 120: { l: { 59: { c: [8777] } } } } } } } } } } }, 116: { l: { 117: { l: { 114: { l: { 59: { c: [9838] }, 97: { l: { 108: { l: { 59: { c: [9838] }, 115: { l: { 59: { c: [8469] } } } } } } } } } } } } } } }, 98: { l: { 115: { l: { 112: { l: { 59: { c: [160] } }, c: [160] } } }, 117: { l: { 109: { l: { 112: { l: { 59: { c: [8782, 824] }, 101: { l: { 59: { c: [8783, 824] } } } } } } } } } } }, 99: { l: { 97: { l: { 112: { l: { 59: { c: [10819] } } }, 114: { l: { 111: { l: { 110: { l: { 59: { c: [328] } } } } } } } } }, 101: { l: { 100: { l: { 105: { l: { 108: { l: { 59: { c: [326] } } } } } } } } }, 111: { l: { 110: { l: { 103: { l: { 59: { c: [8775] }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [10861, 824] } } } } } } } } } } } } }, 117: { l: { 112: { l: { 59: { c: [10818] } } } } }, 121: { l: { 59: { c: [1085] } } } } }, 100: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [8211] } } } } } } } } }, 101: { l: { 59: { c: [8800] }, 65: { l: { 114: { l: { 114: { l: { 59: { c: [8663] } } } } } } }, 97: { l: { 114: { l: { 104: { l: { 107: { l: { 59: { c: [10532] } } } } }, 114: { l: { 59: { c: [8599] }, 111: { l: { 119: { l: { 59: { c: [8599] } } } } } } } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [8784, 824] } } } } } } }, 113: { l: { 117: { l: { 105: { l: { 118: { l: { 59: { c: [8802] } } } } } } } } }, 115: { l: { 101: { l: { 97: { l: { 114: { l: { 59: { c: [10536] } } } } } } }, 105: { l: { 109: { l: { 59: { c: [8770, 824] } } } } } } }, 120: { l: { 105: { l: { 115: { l: { 116: { l: { 59: { c: [8708] }, 115: { l: { 59: { c: [8708] } } } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120107] } } } } }, 103: { l: { 69: { l: { 59: { c: [8807, 824] } } }, 101: { l: { 59: { c: [8817] }, 113: { l: { 59: { c: [8817] }, 113: { l: { 59: { c: [8807, 824] } } }, 115: { l: { 108: { l: { 97: { l: { 110: { l: { 116: { l: { 59: { c: [10878, 824] } } } } } } } } } } } } }, 115: { l: { 59: { c: [10878, 824] } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8821] } } } } } } }, 116: { l: { 59: { c: [8815] }, 114: { l: { 59: { c: [8815] } } } } } } }, 104: { l: { 65: { l: { 114: { l: { 114: { l: { 59: { c: [8654] } } } } } } }, 97: { l: { 114: { l: { 114: { l: { 59: { c: [8622] } } } } } } }, 112: { l: { 97: { l: { 114: { l: { 59: { c: [10994] } } } } } } } } }, 105: { l: { 59: { c: [8715] }, 115: { l: { 59: { c: [8956] }, 100: { l: { 59: { c: [8954] } } } } }, 118: { l: { 59: { c: [8715] } } } } }, 106: { l: { 99: { l: { 121: { l: { 59: { c: [1114] } } } } } } }, 108: { l: { 65: { l: { 114: { l: { 114: { l: { 59: { c: [8653] } } } } } } }, 69: { l: { 59: { c: [8806, 824] } } }, 97: { l: { 114: { l: { 114: { l: { 59: { c: [8602] } } } } } } }, 100: { l: { 114: { l: { 59: { c: [8229] } } } } }, 101: { l: { 59: { c: [8816] }, 102: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8602] } } } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8622] } } } } } } } } } } } } } } } } } } } } } } } } }, 113: { l: { 59: { c: [8816] }, 113: { l: { 59: { c: [8806, 824] } } }, 115: { l: { 108: { l: { 97: { l: { 110: { l: { 116: { l: { 59: { c: [10877, 824] } } } } } } } } } } } } }, 115: { l: { 59: { c: [10877, 824] }, 115: { l: { 59: { c: [8814] } } } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8820] } } } } } } }, 116: { l: { 59: { c: [8814] }, 114: { l: { 105: { l: { 59: { c: [8938] }, 101: { l: { 59: { c: [8940] } } } } } } } } } } }, 109: { l: { 105: { l: { 100: { l: { 59: { c: [8740] } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120159] } } } } }, 116: { l: { 59: { c: [172] }, 105: { l: { 110: { l: { 59: { c: [8713] }, 69: { l: { 59: { c: [8953, 824] } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [8949, 824] } } } } } } }, 118: { l: { 97: { l: { 59: { c: [8713] } } }, 98: { l: { 59: { c: [8951] } } }, 99: { l: { 59: { c: [8950] } } } } } } } } }, 110: { l: { 105: { l: { 59: { c: [8716] }, 118: { l: { 97: { l: { 59: { c: [8716] } } }, 98: { l: { 59: { c: [8958] } } }, 99: { l: { 59: { c: [8957] } } } } } } } } } }, c: [172] } } }, 112: { l: { 97: { l: { 114: { l: { 59: { c: [8742] }, 97: { l: { 108: { l: { 108: { l: { 101: { l: { 108: { l: { 59: { c: [8742] } } } } } } } } } } }, 115: { l: { 108: { l: { 59: { c: [11005, 8421] } } } } }, 116: { l: { 59: { c: [8706, 824] } } } } } } }, 111: { l: { 108: { l: { 105: { l: { 110: { l: { 116: { l: { 59: { c: [10772] } } } } } } } } } } }, 114: { l: { 59: { c: [8832] }, 99: { l: { 117: { l: { 101: { l: { 59: { c: [8928] } } } } } } }, 101: { l: { 59: { c: [10927, 824] }, 99: { l: { 59: { c: [8832] }, 101: { l: { 113: { l: { 59: { c: [10927, 824] } } } } } } } } } } } } }, 114: { l: { 65: { l: { 114: { l: { 114: { l: { 59: { c: [8655] } } } } } } }, 97: { l: { 114: { l: { 114: { l: { 59: { c: [8603] }, 99: { l: { 59: { c: [10547, 824] } } }, 119: { l: { 59: { c: [8605, 824] } } } } } } } } }, 105: { l: { 103: { l: { 104: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8603] } } } } } } } } } } } } } } } } } } }, 116: { l: { 114: { l: { 105: { l: { 59: { c: [8939] }, 101: { l: { 59: { c: [8941] } } } } } } } } } } }, 115: { l: { 99: { l: { 59: { c: [8833] }, 99: { l: { 117: { l: { 101: { l: { 59: { c: [8929] } } } } } } }, 101: { l: { 59: { c: [10928, 824] } } }, 114: { l: { 59: { c: [120003] } } } } }, 104: { l: { 111: { l: { 114: { l: { 116: { l: { 109: { l: { 105: { l: { 100: { l: { 59: { c: [8740] } } } } } } }, 112: { l: { 97: { l: { 114: { l: { 97: { l: { 108: { l: { 108: { l: { 101: { l: { 108: { l: { 59: { c: [8742] } } } } } } } } } } } } } } } } } } } } } } } } }, 105: { l: { 109: { l: { 59: { c: [8769] }, 101: { l: { 59: { c: [8772] }, 113: { l: { 59: { c: [8772] } } } } } } } } }, 109: { l: { 105: { l: { 100: { l: { 59: { c: [8740] } } } } } } }, 112: { l: { 97: { l: { 114: { l: { 59: { c: [8742] } } } } } } }, 113: { l: { 115: { l: { 117: { l: { 98: { l: { 101: { l: { 59: { c: [8930] } } } } }, 112: { l: { 101: { l: { 59: { c: [8931] } } } } } } } } } } }, 117: { l: { 98: { l: { 59: { c: [8836] }, 69: { l: { 59: { c: [10949, 824] } } }, 101: { l: { 59: { c: [8840] } } }, 115: { l: { 101: { l: { 116: { l: { 59: { c: [8834, 8402] }, 101: { l: { 113: { l: { 59: { c: [8840] }, 113: { l: { 59: { c: [10949, 824] } } } } } } } } } } } } } } }, 99: { l: { 99: { l: { 59: { c: [8833] }, 101: { l: { 113: { l: { 59: { c: [10928, 824] } } } } } } } } }, 112: { l: { 59: { c: [8837] }, 69: { l: { 59: { c: [10950, 824] } } }, 101: { l: { 59: { c: [8841] } } }, 115: { l: { 101: { l: { 116: { l: { 59: { c: [8835, 8402] }, 101: { l: { 113: { l: { 59: { c: [8841] }, 113: { l: { 59: { c: [10950, 824] } } } } } } } } } } } } } } } } } } }, 116: { l: { 103: { l: { 108: { l: { 59: { c: [8825] } } } } }, 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [241] } }, c: [241] } } } } } } }, 108: { l: { 103: { l: { 59: { c: [8824] } } } } }, 114: { l: { 105: { l: { 97: { l: { 110: { l: { 103: { l: { 108: { l: { 101: { l: { 108: { l: { 101: { l: { 102: { l: { 116: { l: { 59: { c: [8938] }, 101: { l: { 113: { l: { 59: { c: [8940] } } } } } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 59: { c: [8939] }, 101: { l: { 113: { l: { 59: { c: [8941] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 117: { l: { 59: { c: [957] }, 109: { l: { 59: { c: [35] }, 101: { l: { 114: { l: { 111: { l: { 59: { c: [8470] } } } } } } }, 115: { l: { 112: { l: { 59: { c: [8199] } } } } } } } } }, 118: { l: { 68: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [8877] } } } } } } } } }, 72: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [10500] } } } } } } } } }, 97: { l: { 112: { l: { 59: { c: [8781, 8402] } } } } }, 100: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [8876] } } } } } } } } }, 103: { l: { 101: { l: { 59: { c: [8805, 8402] } } }, 116: { l: { 59: { c: [62, 8402] } } } } }, 105: { l: { 110: { l: { 102: { l: { 105: { l: { 110: { l: { 59: { c: [10718] } } } } } } } } } } }, 108: { l: { 65: { l: { 114: { l: { 114: { l: { 59: { c: [10498] } } } } } } }, 101: { l: { 59: { c: [8804, 8402] } } }, 116: { l: { 59: { c: [60, 8402] }, 114: { l: { 105: { l: { 101: { l: { 59: { c: [8884, 8402] } } } } } } } } } } }, 114: { l: { 65: { l: { 114: { l: { 114: { l: { 59: { c: [10499] } } } } } } }, 116: { l: { 114: { l: { 105: { l: { 101: { l: { 59: { c: [8885, 8402] } } } } } } } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8764, 8402] } } } } } } } } }, 119: { l: { 65: { l: { 114: { l: { 114: { l: { 59: { c: [8662] } } } } } } }, 97: { l: { 114: { l: { 104: { l: { 107: { l: { 59: { c: [10531] } } } } }, 114: { l: { 59: { c: [8598] }, 111: { l: { 119: { l: { 59: { c: [8598] } } } } } } } } } } }, 110: { l: { 101: { l: { 97: { l: { 114: { l: { 59: { c: [10535] } } } } } } } } } } } } }, 111: { l: { 83: { l: { 59: { c: [9416] } } }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [243] } }, c: [243] } } } } } } }, 115: { l: { 116: { l: { 59: { c: [8859] } } } } } } }, 99: { l: { 105: { l: { 114: { l: { 59: { c: [8858] }, 99: { l: { 59: { c: [244] } }, c: [244] } } } } }, 121: { l: { 59: { c: [1086] } } } } }, 100: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [8861] } } } } } } }, 98: { l: { 108: { l: { 97: { l: { 99: { l: { 59: { c: [337] } } } } } } } } }, 105: { l: { 118: { l: { 59: { c: [10808] } } } } }, 111: { l: { 116: { l: { 59: { c: [8857] } } } } }, 115: { l: { 111: { l: { 108: { l: { 100: { l: { 59: { c: [10684] } } } } } } } } } } }, 101: { l: { 108: { l: { 105: { l: { 103: { l: { 59: { c: [339] } } } } } } } } }, 102: { l: { 99: { l: { 105: { l: { 114: { l: { 59: { c: [10687] } } } } } } }, 114: { l: { 59: { c: [120108] } } } } }, 103: { l: { 111: { l: { 110: { l: { 59: { c: [731] } } } } }, 114: { l: { 97: { l: { 118: { l: { 101: { l: { 59: { c: [242] } }, c: [242] } } } } } } }, 116: { l: { 59: { c: [10689] } } } } }, 104: { l: { 98: { l: { 97: { l: { 114: { l: { 59: { c: [10677] } } } } } } }, 109: { l: { 59: { c: [937] } } } } }, 105: { l: { 110: { l: { 116: { l: { 59: { c: [8750] } } } } } } }, 108: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8634] } } } } } } }, 99: { l: { 105: { l: { 114: { l: { 59: { c: [10686] } } } } }, 114: { l: { 111: { l: { 115: { l: { 115: { l: { 59: { c: [10683] } } } } } } } } } } }, 105: { l: { 110: { l: { 101: { l: { 59: { c: [8254] } } } } } } }, 116: { l: { 59: { c: [10688] } } } } }, 109: { l: { 97: { l: { 99: { l: { 114: { l: { 59: { c: [333] } } } } } } }, 101: { l: { 103: { l: { 97: { l: { 59: { c: [969] } } } } } } }, 105: { l: { 99: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [959] } } } } } } } } }, 100: { l: { 59: { c: [10678] } } }, 110: { l: { 117: { l: { 115: { l: { 59: { c: [8854] } } } } } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120160] } } } } } } }, 112: { l: { 97: { l: { 114: { l: { 59: { c: [10679] } } } } }, 101: { l: { 114: { l: { 112: { l: { 59: { c: [10681] } } } } } } }, 108: { l: { 117: { l: { 115: { l: { 59: { c: [8853] } } } } } } } } }, 114: { l: { 59: { c: [8744] }, 97: { l: { 114: { l: { 114: { l: { 59: { c: [8635] } } } } } } }, 100: { l: { 59: { c: [10845] }, 101: { l: { 114: { l: { 59: { c: [8500] }, 111: { l: { 102: { l: { 59: { c: [8500] } } } } } } } } }, 102: { l: { 59: { c: [170] } }, c: [170] }, 109: { l: { 59: { c: [186] } }, c: [186] } } }, 105: { l: { 103: { l: { 111: { l: { 102: { l: { 59: { c: [8886] } } } } } } } } }, 111: { l: { 114: { l: { 59: { c: [10838] } } } } }, 115: { l: { 108: { l: { 111: { l: { 112: { l: { 101: { l: { 59: { c: [10839] } } } } } } } } } } }, 118: { l: { 59: { c: [10843] } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [8500] } } } } }, 108: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [248] } }, c: [248] } } } } } } }, 111: { l: { 108: { l: { 59: { c: [8856] } } } } } } }, 116: { l: { 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [245] } }, c: [245] } } } } }, 109: { l: { 101: { l: { 115: { l: { 59: { c: [8855] }, 97: { l: { 115: { l: { 59: { c: [10806] } } } } } } } } } } } } } } }, 117: { l: { 109: { l: { 108: { l: { 59: { c: [246] } }, c: [246] } } } } }, 118: { l: { 98: { l: { 97: { l: { 114: { l: { 59: { c: [9021] } } } } } } } } } } }, 112: { l: { 97: { l: { 114: { l: { 59: { c: [8741] }, 97: { l: { 59: { c: [182] }, 108: { l: { 108: { l: { 101: { l: { 108: { l: { 59: { c: [8741] } } } } } } } } } }, c: [182] }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [10995] } } } } }, 108: { l: { 59: { c: [11005] } } } } }, 116: { l: { 59: { c: [8706] } } } } } } }, 99: { l: { 121: { l: { 59: { c: [1087] } } } } }, 101: { l: { 114: { l: { 99: { l: { 110: { l: { 116: { l: { 59: { c: [37] } } } } } } }, 105: { l: { 111: { l: { 100: { l: { 59: { c: [46] } } } } } } }, 109: { l: { 105: { l: { 108: { l: { 59: { c: [8240] } } } } } } }, 112: { l: { 59: { c: [8869] } } }, 116: { l: { 101: { l: { 110: { l: { 107: { l: { 59: { c: [8241] } } } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120109] } } } } }, 104: { l: { 105: { l: { 59: { c: [966] }, 118: { l: { 59: { c: [981] } } } } }, 109: { l: { 109: { l: { 97: { l: { 116: { l: { 59: { c: [8499] } } } } } } } } }, 111: { l: { 110: { l: { 101: { l: { 59: { c: [9742] } } } } } } } } }, 105: { l: { 59: { c: [960] }, 116: { l: { 99: { l: { 104: { l: { 102: { l: { 111: { l: { 114: { l: { 107: { l: { 59: { c: [8916] } } } } } } } } } } } } } } }, 118: { l: { 59: { c: [982] } } } } }, 108: { l: { 97: { l: { 110: { l: { 99: { l: { 107: { l: { 59: { c: [8463] }, 104: { l: { 59: { c: [8462] } } } } } } }, 107: { l: { 118: { l: { 59: { c: [8463] } } } } } } } } }, 117: { l: { 115: { l: { 59: { c: [43] }, 97: { l: { 99: { l: { 105: { l: { 114: { l: { 59: { c: [10787] } } } } } } } } }, 98: { l: { 59: { c: [8862] } } }, 99: { l: { 105: { l: { 114: { l: { 59: { c: [10786] } } } } } } }, 100: { l: { 111: { l: { 59: { c: [8724] } } }, 117: { l: { 59: { c: [10789] } } } } }, 101: { l: { 59: { c: [10866] } } }, 109: { l: { 110: { l: { 59: { c: [177] } }, c: [177] } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [10790] } } } } } } }, 116: { l: { 119: { l: { 111: { l: { 59: { c: [10791] } } } } } } } } } } } } }, 109: { l: { 59: { c: [177] } } }, 111: { l: { 105: { l: { 110: { l: { 116: { l: { 105: { l: { 110: { l: { 116: { l: { 59: { c: [10773] } } } } } } } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120161] } } } } }, 117: { l: { 110: { l: { 100: { l: { 59: { c: [163] } }, c: [163] } } } } } } }, 114: { l: { 59: { c: [8826] }, 69: { l: { 59: { c: [10931] } } }, 97: { l: { 112: { l: { 59: { c: [10935] } } } } }, 99: { l: { 117: { l: { 101: { l: { 59: { c: [8828] } } } } } } }, 101: { l: { 59: { c: [10927] }, 99: { l: { 59: { c: [8826] }, 97: { l: { 112: { l: { 112: { l: { 114: { l: { 111: { l: { 120: { l: { 59: { c: [10935] } } } } } } } } } } } } }, 99: { l: { 117: { l: { 114: { l: { 108: { l: { 121: { l: { 101: { l: { 113: { l: { 59: { c: [8828] } } } } } } } } } } } } } } }, 101: { l: { 113: { l: { 59: { c: [10927] } } } } }, 110: { l: { 97: { l: { 112: { l: { 112: { l: { 114: { l: { 111: { l: { 120: { l: { 59: { c: [10937] } } } } } } } } } } } } }, 101: { l: { 113: { l: { 113: { l: { 59: { c: [10933] } } } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8936] } } } } } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8830] } } } } } } } } } } }, 105: { l: { 109: { l: { 101: { l: { 59: { c: [8242] }, 115: { l: { 59: { c: [8473] } } } } } } } } }, 110: { l: { 69: { l: { 59: { c: [10933] } } }, 97: { l: { 112: { l: { 59: { c: [10937] } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8936] } } } } } } } } }, 111: { l: { 100: { l: { 59: { c: [8719] } } }, 102: { l: { 97: { l: { 108: { l: { 97: { l: { 114: { l: { 59: { c: [9006] } } } } } } } } }, 108: { l: { 105: { l: { 110: { l: { 101: { l: { 59: { c: [8978] } } } } } } } } }, 115: { l: { 117: { l: { 114: { l: { 102: { l: { 59: { c: [8979] } } } } } } } } } } }, 112: { l: { 59: { c: [8733] }, 116: { l: { 111: { l: { 59: { c: [8733] } } } } } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8830] } } } } } } }, 117: { l: { 114: { l: { 101: { l: { 108: { l: { 59: { c: [8880] } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [120005] } } } } }, 105: { l: { 59: { c: [968] } } } } }, 117: { l: { 110: { l: { 99: { l: { 115: { l: { 112: { l: { 59: { c: [8200] } } } } } } } } } } } } }, 113: { l: { 102: { l: { 114: { l: { 59: { c: [120110] } } } } }, 105: { l: { 110: { l: { 116: { l: { 59: { c: [10764] } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120162] } } } } } } }, 112: { l: { 114: { l: { 105: { l: { 109: { l: { 101: { l: { 59: { c: [8279] } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [120006] } } } } } } }, 117: { l: { 97: { l: { 116: { l: { 101: { l: { 114: { l: { 110: { l: { 105: { l: { 111: { l: { 110: { l: { 115: { l: { 59: { c: [8461] } } } } } } } } } } } } } } }, 105: { l: { 110: { l: { 116: { l: { 59: { c: [10774] } } } } } } } } } } }, 101: { l: { 115: { l: { 116: { l: { 59: { c: [63] }, 101: { l: { 113: { l: { 59: { c: [8799] } } } } } } } } } } }, 111: { l: { 116: { l: { 59: { c: [34] } }, c: [34] } } } } } } }, 114: { l: { 65: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8667] } } } } } } }, 114: { l: { 114: { l: { 59: { c: [8658] } } } } }, 116: { l: { 97: { l: { 105: { l: { 108: { l: { 59: { c: [10524] } } } } } } } } } } }, 66: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [10511] } } } } } } } } }, 72: { l: { 97: { l: { 114: { l: { 59: { c: [10596] } } } } } } }, 97: { l: { 99: { l: { 101: { l: { 59: { c: [8765, 817] } } }, 117: { l: { 116: { l: { 101: { l: { 59: { c: [341] } } } } } } } } }, 100: { l: { 105: { l: { 99: { l: { 59: { c: [8730] } } } } } } }, 101: { l: { 109: { l: { 112: { l: { 116: { l: { 121: { l: { 118: { l: { 59: { c: [10675] } } } } } } } } } } } } }, 110: { l: { 103: { l: { 59: { c: [10217] }, 100: { l: { 59: { c: [10642] } } }, 101: { l: { 59: { c: [10661] } } }, 108: { l: { 101: { l: { 59: { c: [10217] } } } } } } } } }, 113: { l: { 117: { l: { 111: { l: { 59: { c: [187] } }, c: [187] } } } } }, 114: { l: { 114: { l: { 59: { c: [8594] }, 97: { l: { 112: { l: { 59: { c: [10613] } } } } }, 98: { l: { 59: { c: [8677] }, 102: { l: { 115: { l: { 59: { c: [10528] } } } } } } }, 99: { l: { 59: { c: [10547] } } }, 102: { l: { 115: { l: { 59: { c: [10526] } } } } }, 104: { l: { 107: { l: { 59: { c: [8618] } } } } }, 108: { l: { 112: { l: { 59: { c: [8620] } } } } }, 112: { l: { 108: { l: { 59: { c: [10565] } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [10612] } } } } } } }, 116: { l: { 108: { l: { 59: { c: [8611] } } } } }, 119: { l: { 59: { c: [8605] } } } } } } }, 116: { l: { 97: { l: { 105: { l: { 108: { l: { 59: { c: [10522] } } } } } } }, 105: { l: { 111: { l: { 59: { c: [8758] }, 110: { l: { 97: { l: { 108: { l: { 115: { l: { 59: { c: [8474] } } } } } } } } } } } } } } } } }, 98: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [10509] } } } } } } }, 98: { l: { 114: { l: { 107: { l: { 59: { c: [10099] } } } } } } }, 114: { l: { 97: { l: { 99: { l: { 101: { l: { 59: { c: [125] } } }, 107: { l: { 59: { c: [93] } } } } } } }, 107: { l: { 101: { l: { 59: { c: [10636] } } }, 115: { l: { 108: { l: { 100: { l: { 59: { c: [10638] } } }, 117: { l: { 59: { c: [10640] } } } } } } } } } } } } }, 99: { l: { 97: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [345] } } } } } } } } }, 101: { l: { 100: { l: { 105: { l: { 108: { l: { 59: { c: [343] } } } } } } }, 105: { l: { 108: { l: { 59: { c: [8969] } } } } } } }, 117: { l: { 98: { l: { 59: { c: [125] } } } } }, 121: { l: { 59: { c: [1088] } } } } }, 100: { l: { 99: { l: { 97: { l: { 59: { c: [10551] } } } } }, 108: { l: { 100: { l: { 104: { l: { 97: { l: { 114: { l: { 59: { c: [10601] } } } } } } } } } } }, 113: { l: { 117: { l: { 111: { l: { 59: { c: [8221] }, 114: { l: { 59: { c: [8221] } } } } } } } } }, 115: { l: { 104: { l: { 59: { c: [8627] } } } } } } }, 101: { l: { 97: { l: { 108: { l: { 59: { c: [8476] }, 105: { l: { 110: { l: { 101: { l: { 59: { c: [8475] } } } } } } }, 112: { l: { 97: { l: { 114: { l: { 116: { l: { 59: { c: [8476] } } } } } } } } }, 115: { l: { 59: { c: [8477] } } } } } } }, 99: { l: { 116: { l: { 59: { c: [9645] } } } } }, 103: { l: { 59: { c: [174] } }, c: [174] } } }, 102: { l: { 105: { l: { 115: { l: { 104: { l: { 116: { l: { 59: { c: [10621] } } } } } } } } }, 108: { l: { 111: { l: { 111: { l: { 114: { l: { 59: { c: [8971] } } } } } } } } }, 114: { l: { 59: { c: [120111] } } } } }, 104: { l: { 97: { l: { 114: { l: { 100: { l: { 59: { c: [8641] } } }, 117: { l: { 59: { c: [8640] }, 108: { l: { 59: { c: [10604] } } } } } } } } }, 111: { l: { 59: { c: [961] }, 118: { l: { 59: { c: [1009] } } } } } } }, 105: { l: { 103: { l: { 104: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8594] }, 116: { l: { 97: { l: { 105: { l: { 108: { l: { 59: { c: [8611] } } } } } } } } } } } } } } } } } } }, 104: { l: { 97: { l: { 114: { l: { 112: { l: { 111: { l: { 111: { l: { 110: { l: { 100: { l: { 111: { l: { 119: { l: { 110: { l: { 59: { c: [8641] } } } } } } } } }, 117: { l: { 112: { l: { 59: { c: [8640] } } } } } } } } } } } } } } } } } } }, 108: { l: { 101: { l: { 102: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 115: { l: { 59: { c: [8644] } } } } } } } } } } } } }, 104: { l: { 97: { l: { 114: { l: { 112: { l: { 111: { l: { 111: { l: { 110: { l: { 115: { l: { 59: { c: [8652] } } } } } } } } } } } } } } } } } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 115: { l: { 59: { c: [8649] } } } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 113: { l: { 117: { l: { 105: { l: { 103: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8605] } } } } } } } } } } } } } } } } } } } } }, 116: { l: { 104: { l: { 114: { l: { 101: { l: { 101: { l: { 116: { l: { 105: { l: { 109: { l: { 101: { l: { 115: { l: { 59: { c: [8908] } } } } } } } } } } } } } } } } } } } } } } } } } } }, 110: { l: { 103: { l: { 59: { c: [730] } } } } }, 115: { l: { 105: { l: { 110: { l: { 103: { l: { 100: { l: { 111: { l: { 116: { l: { 115: { l: { 101: { l: { 113: { l: { 59: { c: [8787] } } } } } } } } } } } } } } } } } } } } } } }, 108: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8644] } } } } } } }, 104: { l: { 97: { l: { 114: { l: { 59: { c: [8652] } } } } } } }, 109: { l: { 59: { c: [8207] } } } } }, 109: { l: { 111: { l: { 117: { l: { 115: { l: { 116: { l: { 59: { c: [9137] }, 97: { l: { 99: { l: { 104: { l: { 101: { l: { 59: { c: [9137] } } } } } } } } } } } } } } } } } } }, 110: { l: { 109: { l: { 105: { l: { 100: { l: { 59: { c: [10990] } } } } } } } } }, 111: { l: { 97: { l: { 110: { l: { 103: { l: { 59: { c: [10221] } } } } }, 114: { l: { 114: { l: { 59: { c: [8702] } } } } } } }, 98: { l: { 114: { l: { 107: { l: { 59: { c: [10215] } } } } } } }, 112: { l: { 97: { l: { 114: { l: { 59: { c: [10630] } } } } }, 102: { l: { 59: { c: [120163] } } }, 108: { l: { 117: { l: { 115: { l: { 59: { c: [10798] } } } } } } } } }, 116: { l: { 105: { l: { 109: { l: { 101: { l: { 115: { l: { 59: { c: [10805] } } } } } } } } } } } } }, 112: { l: { 97: { l: { 114: { l: { 59: { c: [41] }, 103: { l: { 116: { l: { 59: { c: [10644] } } } } } } } } }, 112: { l: { 111: { l: { 108: { l: { 105: { l: { 110: { l: { 116: { l: { 59: { c: [10770] } } } } } } } } } } } } } } }, 114: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8649] } } } } } } } } }, 115: { l: { 97: { l: { 113: { l: { 117: { l: { 111: { l: { 59: { c: [8250] } } } } } } } } }, 99: { l: { 114: { l: { 59: { c: [120007] } } } } }, 104: { l: { 59: { c: [8625] } } }, 113: { l: { 98: { l: { 59: { c: [93] } } }, 117: { l: { 111: { l: { 59: { c: [8217] }, 114: { l: { 59: { c: [8217] } } } } } } } } } } }, 116: { l: { 104: { l: { 114: { l: { 101: { l: { 101: { l: { 59: { c: [8908] } } } } } } } } }, 105: { l: { 109: { l: { 101: { l: { 115: { l: { 59: { c: [8906] } } } } } } } } }, 114: { l: { 105: { l: { 59: { c: [9657] }, 101: { l: { 59: { c: [8885] } } }, 102: { l: { 59: { c: [9656] } } }, 108: { l: { 116: { l: { 114: { l: { 105: { l: { 59: { c: [10702] } } } } } } } } } } } } } } }, 117: { l: { 108: { l: { 117: { l: { 104: { l: { 97: { l: { 114: { l: { 59: { c: [10600] } } } } } } } } } } } } }, 120: { l: { 59: { c: [8478] } } } } }, 115: { l: { 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [347] } } } } } } } } } } }, 98: { l: { 113: { l: { 117: { l: { 111: { l: { 59: { c: [8218] } } } } } } } } }, 99: { l: { 59: { c: [8827] }, 69: { l: { 59: { c: [10932] } } }, 97: { l: { 112: { l: { 59: { c: [10936] } } }, 114: { l: { 111: { l: { 110: { l: { 59: { c: [353] } } } } } } } } }, 99: { l: { 117: { l: { 101: { l: { 59: { c: [8829] } } } } } } }, 101: { l: { 59: { c: [10928] }, 100: { l: { 105: { l: { 108: { l: { 59: { c: [351] } } } } } } } } }, 105: { l: { 114: { l: { 99: { l: { 59: { c: [349] } } } } } } }, 110: { l: { 69: { l: { 59: { c: [10934] } } }, 97: { l: { 112: { l: { 59: { c: [10938] } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8937] } } } } } } } } }, 112: { l: { 111: { l: { 108: { l: { 105: { l: { 110: { l: { 116: { l: { 59: { c: [10771] } } } } } } } } } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8831] } } } } } } }, 121: { l: { 59: { c: [1089] } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [8901] }, 98: { l: { 59: { c: [8865] } } }, 101: { l: { 59: { c: [10854] } } } } } } } } }, 101: { l: { 65: { l: { 114: { l: { 114: { l: { 59: { c: [8664] } } } } } } }, 97: { l: { 114: { l: { 104: { l: { 107: { l: { 59: { c: [10533] } } } } }, 114: { l: { 59: { c: [8600] }, 111: { l: { 119: { l: { 59: { c: [8600] } } } } } } } } } } }, 99: { l: { 116: { l: { 59: { c: [167] } }, c: [167] } } }, 109: { l: { 105: { l: { 59: { c: [59] } } } } }, 115: { l: { 119: { l: { 97: { l: { 114: { l: { 59: { c: [10537] } } } } } } } } }, 116: { l: { 109: { l: { 105: { l: { 110: { l: { 117: { l: { 115: { l: { 59: { c: [8726] } } } } } } } } }, 110: { l: { 59: { c: [8726] } } } } } } }, 120: { l: { 116: { l: { 59: { c: [10038] } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120112] }, 111: { l: { 119: { l: { 110: { l: { 59: { c: [8994] } } } } } } } } } } }, 104: { l: { 97: { l: { 114: { l: { 112: { l: { 59: { c: [9839] } } } } } } }, 99: { l: { 104: { l: { 99: { l: { 121: { l: { 59: { c: [1097] } } } } } } }, 121: { l: { 59: { c: [1096] } } } } }, 111: { l: { 114: { l: { 116: { l: { 109: { l: { 105: { l: { 100: { l: { 59: { c: [8739] } } } } } } }, 112: { l: { 97: { l: { 114: { l: { 97: { l: { 108: { l: { 108: { l: { 101: { l: { 108: { l: { 59: { c: [8741] } } } } } } } } } } } } } } } } } } } } } } }, 121: { l: { 59: { c: [173] } }, c: [173] } } }, 105: { l: { 103: { l: { 109: { l: { 97: { l: { 59: { c: [963] }, 102: { l: { 59: { c: [962] } } }, 118: { l: { 59: { c: [962] } } } } } } } } }, 109: { l: { 59: { c: [8764] }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [10858] } } } } } } }, 101: { l: { 59: { c: [8771] }, 113: { l: { 59: { c: [8771] } } } } }, 103: { l: { 59: { c: [10910] }, 69: { l: { 59: { c: [10912] } } } } }, 108: { l: { 59: { c: [10909] }, 69: { l: { 59: { c: [10911] } } } } }, 110: { l: { 101: { l: { 59: { c: [8774] } } } } }, 112: { l: { 108: { l: { 117: { l: { 115: { l: { 59: { c: [10788] } } } } } } } } }, 114: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [10610] } } } } } } } } } } } } }, 108: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8592] } } } } } } } } }, 109: { l: { 97: { l: { 108: { l: { 108: { l: { 115: { l: { 101: { l: { 116: { l: { 109: { l: { 105: { l: { 110: { l: { 117: { l: { 115: { l: { 59: { c: [8726] } } } } } } } } } } } } } } } } } } } } }, 115: { l: { 104: { l: { 112: { l: { 59: { c: [10803] } } } } } } } } }, 101: { l: { 112: { l: { 97: { l: { 114: { l: { 115: { l: { 108: { l: { 59: { c: [10724] } } } } } } } } } } } } }, 105: { l: { 100: { l: { 59: { c: [8739] } } }, 108: { l: { 101: { l: { 59: { c: [8995] } } } } } } }, 116: { l: { 59: { c: [10922] }, 101: { l: { 59: { c: [10924] }, 115: { l: { 59: { c: [10924, 65024] } } } } } } } } }, 111: { l: { 102: { l: { 116: { l: { 99: { l: { 121: { l: { 59: { c: [1100] } } } } } } } } }, 108: { l: { 59: { c: [47] }, 98: { l: { 59: { c: [10692] }, 97: { l: { 114: { l: { 59: { c: [9023] } } } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120164] } } } } } } }, 112: { l: { 97: { l: { 100: { l: { 101: { l: { 115: { l: { 59: { c: [9824] }, 117: { l: { 105: { l: { 116: { l: { 59: { c: [9824] } } } } } } } } } } } } }, 114: { l: { 59: { c: [8741] } } } } } } }, 113: { l: { 99: { l: { 97: { l: { 112: { l: { 59: { c: [8851] }, 115: { l: { 59: { c: [8851, 65024] } } } } } } }, 117: { l: { 112: { l: { 59: { c: [8852] }, 115: { l: { 59: { c: [8852, 65024] } } } } } } } } }, 115: { l: { 117: { l: { 98: { l: { 59: { c: [8847] }, 101: { l: { 59: { c: [8849] } } }, 115: { l: { 101: { l: { 116: { l: { 59: { c: [8847] }, 101: { l: { 113: { l: { 59: { c: [8849] } } } } } } } } } } } } }, 112: { l: { 59: { c: [8848] }, 101: { l: { 59: { c: [8850] } } }, 115: { l: { 101: { l: { 116: { l: { 59: { c: [8848] }, 101: { l: { 113: { l: { 59: { c: [8850] } } } } } } } } } } } } } } } } }, 117: { l: { 59: { c: [9633] }, 97: { l: { 114: { l: { 101: { l: { 59: { c: [9633] } } }, 102: { l: { 59: { c: [9642] } } } } } } }, 102: { l: { 59: { c: [9642] } } } } } } }, 114: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8594] } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [120008] } } } } }, 101: { l: { 116: { l: { 109: { l: { 110: { l: { 59: { c: [8726] } } } } } } } } }, 109: { l: { 105: { l: { 108: { l: { 101: { l: { 59: { c: [8995] } } } } } } } } }, 116: { l: { 97: { l: { 114: { l: { 102: { l: { 59: { c: [8902] } } } } } } } } } } }, 116: { l: { 97: { l: { 114: { l: { 59: { c: [9734] }, 102: { l: { 59: { c: [9733] } } } } } } }, 114: { l: { 97: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 101: { l: { 112: { l: { 115: { l: { 105: { l: { 108: { l: { 111: { l: { 110: { l: { 59: { c: [1013] } } } } } } } } } } } } } } }, 112: { l: { 104: { l: { 105: { l: { 59: { c: [981] } } } } } } } } } } } } } } } } }, 110: { l: { 115: { l: { 59: { c: [175] } } } } } } } } }, 117: { l: { 98: { l: { 59: { c: [8834] }, 69: { l: { 59: { c: [10949] } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [10941] } } } } } } }, 101: { l: { 59: { c: [8838] }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [10947] } } } } } } } } }, 109: { l: { 117: { l: { 108: { l: { 116: { l: { 59: { c: [10945] } } } } } } } } }, 110: { l: { 69: { l: { 59: { c: [10955] } } }, 101: { l: { 59: { c: [8842] } } } } }, 112: { l: { 108: { l: { 117: { l: { 115: { l: { 59: { c: [10943] } } } } } } } } }, 114: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [10617] } } } } } } } } }, 115: { l: { 101: { l: { 116: { l: { 59: { c: [8834] }, 101: { l: { 113: { l: { 59: { c: [8838] }, 113: { l: { 59: { c: [10949] } } } } } } }, 110: { l: { 101: { l: { 113: { l: { 59: { c: [8842] }, 113: { l: { 59: { c: [10955] } } } } } } } } } } } } }, 105: { l: { 109: { l: { 59: { c: [10951] } } } } }, 117: { l: { 98: { l: { 59: { c: [10965] } } }, 112: { l: { 59: { c: [10963] } } } } } } } } }, 99: { l: { 99: { l: { 59: { c: [8827] }, 97: { l: { 112: { l: { 112: { l: { 114: { l: { 111: { l: { 120: { l: { 59: { c: [10936] } } } } } } } } } } } } }, 99: { l: { 117: { l: { 114: { l: { 108: { l: { 121: { l: { 101: { l: { 113: { l: { 59: { c: [8829] } } } } } } } } } } } } } } }, 101: { l: { 113: { l: { 59: { c: [10928] } } } } }, 110: { l: { 97: { l: { 112: { l: { 112: { l: { 114: { l: { 111: { l: { 120: { l: { 59: { c: [10938] } } } } } } } } } } } } }, 101: { l: { 113: { l: { 113: { l: { 59: { c: [10934] } } } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8937] } } } } } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8831] } } } } } } } } } } }, 109: { l: { 59: { c: [8721] } } }, 110: { l: { 103: { l: { 59: { c: [9834] } } } } }, 112: { l: { 49: { l: { 59: { c: [185] } }, c: [185] }, 50: { l: { 59: { c: [178] } }, c: [178] }, 51: { l: { 59: { c: [179] } }, c: [179] }, 59: { c: [8835] }, 69: { l: { 59: { c: [10950] } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [10942] } } } } }, 115: { l: { 117: { l: { 98: { l: { 59: { c: [10968] } } } } } } } } }, 101: { l: { 59: { c: [8839] }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [10948] } } } } } } } } }, 104: { l: { 115: { l: { 111: { l: { 108: { l: { 59: { c: [10185] } } } } }, 117: { l: { 98: { l: { 59: { c: [10967] } } } } } } } } }, 108: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [10619] } } } } } } } } }, 109: { l: { 117: { l: { 108: { l: { 116: { l: { 59: { c: [10946] } } } } } } } } }, 110: { l: { 69: { l: { 59: { c: [10956] } } }, 101: { l: { 59: { c: [8843] } } } } }, 112: { l: { 108: { l: { 117: { l: { 115: { l: { 59: { c: [10944] } } } } } } } } }, 115: { l: { 101: { l: { 116: { l: { 59: { c: [8835] }, 101: { l: { 113: { l: { 59: { c: [8839] }, 113: { l: { 59: { c: [10950] } } } } } } }, 110: { l: { 101: { l: { 113: { l: { 59: { c: [8843] }, 113: { l: { 59: { c: [10956] } } } } } } } } } } } } }, 105: { l: { 109: { l: { 59: { c: [10952] } } } } }, 117: { l: { 98: { l: { 59: { c: [10964] } } }, 112: { l: { 59: { c: [10966] } } } } } } } } } } }, 119: { l: { 65: { l: { 114: { l: { 114: { l: { 59: { c: [8665] } } } } } } }, 97: { l: { 114: { l: { 104: { l: { 107: { l: { 59: { c: [10534] } } } } }, 114: { l: { 59: { c: [8601] }, 111: { l: { 119: { l: { 59: { c: [8601] } } } } } } } } } } }, 110: { l: { 119: { l: { 97: { l: { 114: { l: { 59: { c: [10538] } } } } } } } } } } }, 122: { l: { 108: { l: { 105: { l: { 103: { l: { 59: { c: [223] } }, c: [223] } } } } } } } } }, 116: { l: { 97: { l: { 114: { l: { 103: { l: { 101: { l: { 116: { l: { 59: { c: [8982] } } } } } } } } }, 117: { l: { 59: { c: [964] } } } } }, 98: { l: { 114: { l: { 107: { l: { 59: { c: [9140] } } } } } } }, 99: { l: { 97: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [357] } } } } } } } } }, 101: { l: { 100: { l: { 105: { l: { 108: { l: { 59: { c: [355] } } } } } } } } }, 121: { l: { 59: { c: [1090] } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [8411] } } } } } } }, 101: { l: { 108: { l: { 114: { l: { 101: { l: { 99: { l: { 59: { c: [8981] } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120113] } } } } }, 104: { l: { 101: { l: { 114: { l: { 101: { l: { 52: { l: { 59: { c: [8756] } } }, 102: { l: { 111: { l: { 114: { l: { 101: { l: { 59: { c: [8756] } } } } } } } } } } } } }, 116: { l: { 97: { l: { 59: { c: [952] }, 115: { l: { 121: { l: { 109: { l: { 59: { c: [977] } } } } } } }, 118: { l: { 59: { c: [977] } } } } } } } } }, 105: { l: { 99: { l: { 107: { l: { 97: { l: { 112: { l: { 112: { l: { 114: { l: { 111: { l: { 120: { l: { 59: { c: [8776] } } } } } } } } } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8764] } } } } } } } } } } }, 110: { l: { 115: { l: { 112: { l: { 59: { c: [8201] } } } } } } } } }, 107: { l: { 97: { l: { 112: { l: { 59: { c: [8776] } } } } }, 115: { l: { 105: { l: { 109: { l: { 59: { c: [8764] } } } } } } } } }, 111: { l: { 114: { l: { 110: { l: { 59: { c: [254] } }, c: [254] } } } } } } }, 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [732] } } } } } } }, 109: { l: { 101: { l: { 115: { l: { 59: { c: [215] }, 98: { l: { 59: { c: [8864] }, 97: { l: { 114: { l: { 59: { c: [10801] } } } } } } }, 100: { l: { 59: { c: [10800] } } } }, c: [215] } } } } }, 110: { l: { 116: { l: { 59: { c: [8749] } } } } } } }, 111: { l: { 101: { l: { 97: { l: { 59: { c: [10536] } } } } }, 112: { l: { 59: { c: [8868] }, 98: { l: { 111: { l: { 116: { l: { 59: { c: [9014] } } } } } } }, 99: { l: { 105: { l: { 114: { l: { 59: { c: [10993] } } } } } } }, 102: { l: { 59: { c: [120165] }, 111: { l: { 114: { l: { 107: { l: { 59: { c: [10970] } } } } } } } } } } }, 115: { l: { 97: { l: { 59: { c: [10537] } } } } } } }, 112: { l: { 114: { l: { 105: { l: { 109: { l: { 101: { l: { 59: { c: [8244] } } } } } } } } } } }, 114: { l: { 97: { l: { 100: { l: { 101: { l: { 59: { c: [8482] } } } } } } }, 105: { l: { 97: { l: { 110: { l: { 103: { l: { 108: { l: { 101: { l: { 59: { c: [9653] }, 100: { l: { 111: { l: { 119: { l: { 110: { l: { 59: { c: [9663] } } } } } } } } }, 108: { l: { 101: { l: { 102: { l: { 116: { l: { 59: { c: [9667] }, 101: { l: { 113: { l: { 59: { c: [8884] } } } } } } } } } } } } }, 113: { l: { 59: { c: [8796] } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 59: { c: [9657] }, 101: { l: { 113: { l: { 59: { c: [8885] } } } } } } } } } } } } } } } } } } } } } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [9708] } } } } } } }, 101: { l: { 59: { c: [8796] } } }, 109: { l: { 105: { l: { 110: { l: { 117: { l: { 115: { l: { 59: { c: [10810] } } } } } } } } } } }, 112: { l: { 108: { l: { 117: { l: { 115: { l: { 59: { c: [10809] } } } } } } } } }, 115: { l: { 98: { l: { 59: { c: [10701] } } } } }, 116: { l: { 105: { l: { 109: { l: { 101: { l: { 59: { c: [10811] } } } } } } } } } } }, 112: { l: { 101: { l: { 122: { l: { 105: { l: { 117: { l: { 109: { l: { 59: { c: [9186] } } } } } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [120009] } } }, 121: { l: { 59: { c: [1094] } } } } }, 104: { l: { 99: { l: { 121: { l: { 59: { c: [1115] } } } } } } }, 116: { l: { 114: { l: { 111: { l: { 107: { l: { 59: { c: [359] } } } } } } } } } } }, 119: { l: { 105: { l: { 120: { l: { 116: { l: { 59: { c: [8812] } } } } } } }, 111: { l: { 104: { l: { 101: { l: { 97: { l: { 100: { l: { 108: { l: { 101: { l: { 102: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8606] } } } } } } } } } } } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8608] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 117: { l: { 65: { l: { 114: { l: { 114: { l: { 59: { c: [8657] } } } } } } }, 72: { l: { 97: { l: { 114: { l: { 59: { c: [10595] } } } } } } }, 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [250] } }, c: [250] } } } } } } }, 114: { l: { 114: { l: { 59: { c: [8593] } } } } } } }, 98: { l: { 114: { l: { 99: { l: { 121: { l: { 59: { c: [1118] } } } } }, 101: { l: { 118: { l: { 101: { l: { 59: { c: [365] } } } } } } } } } } }, 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [251] } }, c: [251] } } } } }, 121: { l: { 59: { c: [1091] } } } } }, 100: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8645] } } } } } } }, 98: { l: { 108: { l: { 97: { l: { 99: { l: { 59: { c: [369] } } } } } } } } }, 104: { l: { 97: { l: { 114: { l: { 59: { c: [10606] } } } } } } } } }, 102: { l: { 105: { l: { 115: { l: { 104: { l: { 116: { l: { 59: { c: [10622] } } } } } } } } }, 114: { l: { 59: { c: [120114] } } } } }, 103: { l: { 114: { l: { 97: { l: { 118: { l: { 101: { l: { 59: { c: [249] } }, c: [249] } } } } } } } } }, 104: { l: { 97: { l: { 114: { l: { 108: { l: { 59: { c: [8639] } } }, 114: { l: { 59: { c: [8638] } } } } } } }, 98: { l: { 108: { l: { 107: { l: { 59: { c: [9600] } } } } } } } } }, 108: { l: { 99: { l: { 111: { l: { 114: { l: { 110: { l: { 59: { c: [8988] }, 101: { l: { 114: { l: { 59: { c: [8988] } } } } } } } } } } }, 114: { l: { 111: { l: { 112: { l: { 59: { c: [8975] } } } } } } } } }, 116: { l: { 114: { l: { 105: { l: { 59: { c: [9720] } } } } } } } } }, 109: { l: { 97: { l: { 99: { l: { 114: { l: { 59: { c: [363] } } } } } } }, 108: { l: { 59: { c: [168] } }, c: [168] } } }, 111: { l: { 103: { l: { 111: { l: { 110: { l: { 59: { c: [371] } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120166] } } } } } } }, 112: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8593] } } } } } } } } } } }, 100: { l: { 111: { l: { 119: { l: { 110: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 59: { c: [8597] } } } } } } } } } } } } } } } } } } }, 104: { l: { 97: { l: { 114: { l: { 112: { l: { 111: { l: { 111: { l: { 110: { l: { 108: { l: { 101: { l: { 102: { l: { 116: { l: { 59: { c: [8639] } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 59: { c: [8638] } } } } } } } } } } } } } } } } } } } } } } } } }, 108: { l: { 117: { l: { 115: { l: { 59: { c: [8846] } } } } } } }, 115: { l: { 105: { l: { 59: { c: [965] }, 104: { l: { 59: { c: [978] } } }, 108: { l: { 111: { l: { 110: { l: { 59: { c: [965] } } } } } } } } } } }, 117: { l: { 112: { l: { 97: { l: { 114: { l: { 114: { l: { 111: { l: { 119: { l: { 115: { l: { 59: { c: [8648] } } } } } } } } } } } } } } } } } } }, 114: { l: { 99: { l: { 111: { l: { 114: { l: { 110: { l: { 59: { c: [8989] }, 101: { l: { 114: { l: { 59: { c: [8989] } } } } } } } } } } }, 114: { l: { 111: { l: { 112: { l: { 59: { c: [8974] } } } } } } } } }, 105: { l: { 110: { l: { 103: { l: { 59: { c: [367] } } } } } } }, 116: { l: { 114: { l: { 105: { l: { 59: { c: [9721] } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [120010] } } } } } } }, 116: { l: { 100: { l: { 111: { l: { 116: { l: { 59: { c: [8944] } } } } } } }, 105: { l: { 108: { l: { 100: { l: { 101: { l: { 59: { c: [361] } } } } } } } } }, 114: { l: { 105: { l: { 59: { c: [9653] }, 102: { l: { 59: { c: [9652] } } } } } } } } }, 117: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8648] } } } } } } }, 109: { l: { 108: { l: { 59: { c: [252] } }, c: [252] } } } } }, 119: { l: { 97: { l: { 110: { l: { 103: { l: { 108: { l: { 101: { l: { 59: { c: [10663] } } } } } } } } } } } } } } }, 118: { l: { 65: { l: { 114: { l: { 114: { l: { 59: { c: [8661] } } } } } } }, 66: { l: { 97: { l: { 114: { l: { 59: { c: [10984] }, 118: { l: { 59: { c: [10985] } } } } } } } } }, 68: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [8872] } } } } } } } } }, 97: { l: { 110: { l: { 103: { l: { 114: { l: { 116: { l: { 59: { c: [10652] } } } } } } } } }, 114: { l: { 101: { l: { 112: { l: { 115: { l: { 105: { l: { 108: { l: { 111: { l: { 110: { l: { 59: { c: [1013] } } } } } } } } } } } } } } }, 107: { l: { 97: { l: { 112: { l: { 112: { l: { 97: { l: { 59: { c: [1008] } } } } } } } } } } }, 110: { l: { 111: { l: { 116: { l: { 104: { l: { 105: { l: { 110: { l: { 103: { l: { 59: { c: [8709] } } } } } } } } } } } } } } }, 112: { l: { 104: { l: { 105: { l: { 59: { c: [981] } } } } }, 105: { l: { 59: { c: [982] } } }, 114: { l: { 111: { l: { 112: { l: { 116: { l: { 111: { l: { 59: { c: [8733] } } } } } } } } } } } } }, 114: { l: { 59: { c: [8597] }, 104: { l: { 111: { l: { 59: { c: [1009] } } } } } } }, 115: { l: { 105: { l: { 103: { l: { 109: { l: { 97: { l: { 59: { c: [962] } } } } } } } } }, 117: { l: { 98: { l: { 115: { l: { 101: { l: { 116: { l: { 110: { l: { 101: { l: { 113: { l: { 59: { c: [8842, 65024] }, 113: { l: { 59: { c: [10955, 65024] } } } } } } } } } } } } } } } } }, 112: { l: { 115: { l: { 101: { l: { 116: { l: { 110: { l: { 101: { l: { 113: { l: { 59: { c: [8843, 65024] }, 113: { l: { 59: { c: [10956, 65024] } } } } } } } } } } } } } } } } } } } } }, 116: { l: { 104: { l: { 101: { l: { 116: { l: { 97: { l: { 59: { c: [977] } } } } } } } } }, 114: { l: { 105: { l: { 97: { l: { 110: { l: { 103: { l: { 108: { l: { 101: { l: { 108: { l: { 101: { l: { 102: { l: { 116: { l: { 59: { c: [8882] } } } } } } } } }, 114: { l: { 105: { l: { 103: { l: { 104: { l: { 116: { l: { 59: { c: [8883] } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }, 99: { l: { 121: { l: { 59: { c: [1074] } } } } }, 100: { l: { 97: { l: { 115: { l: { 104: { l: { 59: { c: [8866] } } } } } } } } }, 101: { l: { 101: { l: { 59: { c: [8744] }, 98: { l: { 97: { l: { 114: { l: { 59: { c: [8891] } } } } } } }, 101: { l: { 113: { l: { 59: { c: [8794] } } } } } } }, 108: { l: { 108: { l: { 105: { l: { 112: { l: { 59: { c: [8942] } } } } } } } } }, 114: { l: { 98: { l: { 97: { l: { 114: { l: { 59: { c: [124] } } } } } } }, 116: { l: { 59: { c: [124] } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120115] } } } } }, 108: { l: { 116: { l: { 114: { l: { 105: { l: { 59: { c: [8882] } } } } } } } } }, 110: { l: { 115: { l: { 117: { l: { 98: { l: { 59: { c: [8834, 8402] } } }, 112: { l: { 59: { c: [8835, 8402] } } } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120167] } } } } } } }, 112: { l: { 114: { l: { 111: { l: { 112: { l: { 59: { c: [8733] } } } } } } } } }, 114: { l: { 116: { l: { 114: { l: { 105: { l: { 59: { c: [8883] } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [120011] } } } } }, 117: { l: { 98: { l: { 110: { l: { 69: { l: { 59: { c: [10955, 65024] } } }, 101: { l: { 59: { c: [8842, 65024] } } } } } } }, 112: { l: { 110: { l: { 69: { l: { 59: { c: [10956, 65024] } } }, 101: { l: { 59: { c: [8843, 65024] } } } } } } } } } } }, 122: { l: { 105: { l: { 103: { l: { 122: { l: { 97: { l: { 103: { l: { 59: { c: [10650] } } } } } } } } } } } } } } }, 119: { l: { 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [373] } } } } } } } } }, 101: { l: { 100: { l: { 98: { l: { 97: { l: { 114: { l: { 59: { c: [10847] } } } } } } }, 103: { l: { 101: { l: { 59: { c: [8743] }, 113: { l: { 59: { c: [8793] } } } } } } } } }, 105: { l: { 101: { l: { 114: { l: { 112: { l: { 59: { c: [8472] } } } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120116] } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120168] } } } } } } }, 112: { l: { 59: { c: [8472] } } }, 114: { l: { 59: { c: [8768] }, 101: { l: { 97: { l: { 116: { l: { 104: { l: { 59: { c: [8768] } } } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [120012] } } } } } } } } }, 120: { l: { 99: { l: { 97: { l: { 112: { l: { 59: { c: [8898] } } } } }, 105: { l: { 114: { l: { 99: { l: { 59: { c: [9711] } } } } } } }, 117: { l: { 112: { l: { 59: { c: [8899] } } } } } } }, 100: { l: { 116: { l: { 114: { l: { 105: { l: { 59: { c: [9661] } } } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120117] } } } } }, 104: { l: { 65: { l: { 114: { l: { 114: { l: { 59: { c: [10234] } } } } } } }, 97: { l: { 114: { l: { 114: { l: { 59: { c: [10231] } } } } } } } } }, 105: { l: { 59: { c: [958] } } }, 108: { l: { 65: { l: { 114: { l: { 114: { l: { 59: { c: [10232] } } } } } } }, 97: { l: { 114: { l: { 114: { l: { 59: { c: [10229] } } } } } } } } }, 109: { l: { 97: { l: { 112: { l: { 59: { c: [10236] } } } } } } }, 110: { l: { 105: { l: { 115: { l: { 59: { c: [8955] } } } } } } }, 111: { l: { 100: { l: { 111: { l: { 116: { l: { 59: { c: [10752] } } } } } } }, 112: { l: { 102: { l: { 59: { c: [120169] } } }, 108: { l: { 117: { l: { 115: { l: { 59: { c: [10753] } } } } } } } } }, 116: { l: { 105: { l: { 109: { l: { 101: { l: { 59: { c: [10754] } } } } } } } } } } }, 114: { l: { 65: { l: { 114: { l: { 114: { l: { 59: { c: [10233] } } } } } } }, 97: { l: { 114: { l: { 114: { l: { 59: { c: [10230] } } } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [120013] } } } } }, 113: { l: { 99: { l: { 117: { l: { 112: { l: { 59: { c: [10758] } } } } } } } } } } }, 117: { l: { 112: { l: { 108: { l: { 117: { l: { 115: { l: { 59: { c: [10756] } } } } } } } } }, 116: { l: { 114: { l: { 105: { l: { 59: { c: [9651] } } } } } } } } }, 118: { l: { 101: { l: { 101: { l: { 59: { c: [8897] } } } } } } }, 119: { l: { 101: { l: { 100: { l: { 103: { l: { 101: { l: { 59: { c: [8896] } } } } } } } } } } } } }, 121: { l: { 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [253] } }, c: [253] } } } } }, 121: { l: { 59: { c: [1103] } } } } } } }, 99: { l: { 105: { l: { 114: { l: { 99: { l: { 59: { c: [375] } } } } } } }, 121: { l: { 59: { c: [1099] } } } } }, 101: { l: { 110: { l: { 59: { c: [165] } }, c: [165] } } }, 102: { l: { 114: { l: { 59: { c: [120118] } } } } }, 105: { l: { 99: { l: { 121: { l: { 59: { c: [1111] } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120170] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [120014] } } } } } } }, 117: { l: { 99: { l: { 121: { l: { 59: { c: [1102] } } } } }, 109: { l: { 108: { l: { 59: { c: [255] } }, c: [255] } } } } } } }, 122: { l: { 97: { l: { 99: { l: { 117: { l: { 116: { l: { 101: { l: { 59: { c: [378] } } } } } } } } } } }, 99: { l: { 97: { l: { 114: { l: { 111: { l: { 110: { l: { 59: { c: [382] } } } } } } } } }, 121: { l: { 59: { c: [1079] } } } } }, 100: { l: { 111: { l: { 116: { l: { 59: { c: [380] } } } } } } }, 101: { l: { 101: { l: { 116: { l: { 114: { l: { 102: { l: { 59: { c: [8488] } } } } } } } } }, 116: { l: { 97: { l: { 59: { c: [950] } } } } } } }, 102: { l: { 114: { l: { 59: { c: [120119] } } } } }, 104: { l: { 99: { l: { 121: { l: { 59: { c: [1078] } } } } } } }, 105: { l: { 103: { l: { 114: { l: { 97: { l: { 114: { l: { 114: { l: { 59: { c: [8669] } } } } } } } } } } } } }, 111: { l: { 112: { l: { 102: { l: { 59: { c: [120171] } } } } } } }, 115: { l: { 99: { l: { 114: { l: { 59: { c: [120015] } } } } } } }, 119: { l: { 106: { l: { 59: { c: [8205] } } }, 110: { l: { 106: { l: { 59: { c: [8204] } } } } } } } } } };

var tokenizer$3 = createCommonjsModule(function (module) {
    var $ = unicode.CODE_POINTS,
        $$ = unicode.CODE_POINT_SEQUENCES;

    //Replacement code points for numeric entities
    var NUMERIC_ENTITY_REPLACEMENTS = {
        0x00: 0xFFFD, 0x0D: 0x000D, 0x80: 0x20AC, 0x81: 0x0081, 0x82: 0x201A, 0x83: 0x0192, 0x84: 0x201E,
        0x85: 0x2026, 0x86: 0x2020, 0x87: 0x2021, 0x88: 0x02C6, 0x89: 0x2030, 0x8A: 0x0160, 0x8B: 0x2039,
        0x8C: 0x0152, 0x8D: 0x008D, 0x8E: 0x017D, 0x8F: 0x008F, 0x90: 0x0090, 0x91: 0x2018, 0x92: 0x2019,
        0x93: 0x201C, 0x94: 0x201D, 0x95: 0x2022, 0x96: 0x2013, 0x97: 0x2014, 0x98: 0x02DC, 0x99: 0x2122,
        0x9A: 0x0161, 0x9B: 0x203A, 0x9C: 0x0153, 0x9D: 0x009D, 0x9E: 0x017E, 0x9F: 0x0178
    };

    //States
    var DATA_STATE = 'DATA_STATE',
        CHARACTER_REFERENCE_IN_DATA_STATE = 'CHARACTER_REFERENCE_IN_DATA_STATE',
        RCDATA_STATE = 'RCDATA_STATE',
        CHARACTER_REFERENCE_IN_RCDATA_STATE = 'CHARACTER_REFERENCE_IN_RCDATA_STATE',
        RAWTEXT_STATE = 'RAWTEXT_STATE',
        SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE',
        PLAINTEXT_STATE = 'PLAINTEXT_STATE',
        TAG_OPEN_STATE = 'TAG_OPEN_STATE',
        END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE',
        TAG_NAME_STATE = 'TAG_NAME_STATE',
        RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE',
        RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE',
        RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE',
        RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE',
        RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE',
        RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE',
        SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE',
        SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE',
        SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE',
        SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE',
        SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE',
        SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE',
        SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE',
        SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE',
        SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE',
        SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE',
        SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE',
        SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE',
        SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE',
        SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE',
        SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE',
        SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE',
        SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE',
        BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE',
        ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE',
        AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE',
        BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE',
        ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE',
        ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE',
        ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE',
        CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE = 'CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE',
        AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE',
        SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE',
        BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE',
        BOGUS_COMMENT_STATE_CONTINUATION = 'BOGUS_COMMENT_STATE_CONTINUATION',
        MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE',
        COMMENT_START_STATE = 'COMMENT_START_STATE',
        COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE',
        COMMENT_STATE = 'COMMENT_STATE',
        COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE',
        COMMENT_END_STATE = 'COMMENT_END_STATE',
        COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE',
        DOCTYPE_STATE = 'DOCTYPE_STATE',
        DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE',
        AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE',
        BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE',
        DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE',
        DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE',
        BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE',
        BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE',
        DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE',
        DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE',
        AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE',
        BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE',
        CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';

    //Utils

    //OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
    //this functions if they will be situated in another module due to context switch.
    //Always perform inlining check before modifying this functions ('node --trace-inlining').
    function isWhitespace(cp) {
        return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;
    }

    function isAsciiDigit(cp) {
        return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;
    }

    function isAsciiUpper(cp) {
        return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;
    }

    function isAsciiLower(cp) {
        return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;
    }

    function isAsciiLetter(cp) {
        return isAsciiLower(cp) || isAsciiUpper(cp);
    }

    function isAsciiAlphaNumeric(cp) {
        return isAsciiLetter(cp) || isAsciiDigit(cp);
    }

    function isDigit(cp, isHex) {
        return isAsciiDigit(cp) || isHex && (cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F || cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F);
    }

    function isReservedCodePoint(cp) {
        return cp >= 0xD800 && cp <= 0xDFFF || cp > 0x10FFFF;
    }

    function toAsciiLowerCodePoint(cp) {
        return cp + 0x0020;
    }

    //NOTE: String.fromCharCode() function can handle only characters from BMP subset.
    //So, we need to workaround this manually.
    //(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)
    function toChar(cp) {
        if (cp <= 0xFFFF) return String.fromCharCode(cp);

        cp -= 0x10000;
        return String.fromCharCode(cp >>> 10 & 0x3FF | 0xD800) + String.fromCharCode(0xDC00 | cp & 0x3FF);
    }

    function toAsciiLowerChar(cp) {
        return String.fromCharCode(toAsciiLowerCodePoint(cp));
    }

    //Tokenizer
    var Tokenizer = module.exports = function (options) {
        this.preprocessor = new preprocessor();

        this.tokenQueue = [];

        this.allowCDATA = false;

        this.state = DATA_STATE;
        this.returnState = '';

        this.tempBuff = [];
        this.additionalAllowedCp = void 0;
        this.lastStartTagName = '';

        this.consumedAfterSnapshot = -1;
        this.active = false;

        this.currentCharacterToken = null;
        this.currentToken = null;
        this.currentAttr = null;

        if (options && options.locationInfo) tokenizer_mixin.assign(this);
    };

    //Token types
    Tokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';
    Tokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';
    Tokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';
    Tokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';
    Tokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';
    Tokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';
    Tokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';
    Tokenizer.EOF_TOKEN = 'EOF_TOKEN';
    Tokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';

    //Tokenizer initial states for different modes
    Tokenizer.MODE = Tokenizer.prototype.MODE = {
        DATA: DATA_STATE,
        RCDATA: RCDATA_STATE,
        RAWTEXT: RAWTEXT_STATE,
        SCRIPT_DATA: SCRIPT_DATA_STATE,
        PLAINTEXT: PLAINTEXT_STATE
    };

    //Static
    Tokenizer.getTokenAttr = function (token, attrName) {
        for (var i = token.attrs.length - 1; i >= 0; i--) {
            if (token.attrs[i].name === attrName) return token.attrs[i].value;
        }

        return null;
    };

    //API
    Tokenizer.prototype.getNextToken = function () {
        while (!this.tokenQueue.length && this.active) {
            this._hibernationSnapshot();

            var cp = this._consume();

            if (!this._ensureHibernation()) this[this.state](cp);
        }

        return this.tokenQueue.shift();
    };

    Tokenizer.prototype.write = function (chunk, isLastChunk) {
        this.active = true;
        this.preprocessor.write(chunk, isLastChunk);
    };

    Tokenizer.prototype.insertHtmlAtCurrentPos = function (chunk) {
        this.active = true;
        this.preprocessor.insertHtmlAtCurrentPos(chunk);
    };

    //Hibernation
    Tokenizer.prototype._hibernationSnapshot = function () {
        this.consumedAfterSnapshot = 0;
    };

    Tokenizer.prototype._ensureHibernation = function () {
        if (this.preprocessor.endOfChunkHit) {
            for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {
                this.preprocessor.retreat();
            }this.active = false;
            this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });

            return true;
        }

        return false;
    };

    //Consumption
    Tokenizer.prototype._consume = function () {
        this.consumedAfterSnapshot++;
        return this.preprocessor.advance();
    };

    Tokenizer.prototype._unconsume = function () {
        this.consumedAfterSnapshot--;
        this.preprocessor.retreat();
    };

    Tokenizer.prototype._unconsumeSeveral = function (count) {
        while (count--) {
            this._unconsume();
        }
    };

    Tokenizer.prototype._reconsumeInState = function (state) {
        this.state = state;
        this._unconsume();
    };

    Tokenizer.prototype._consumeSubsequentIfMatch = function (pattern, startCp, caseSensitive) {
        var consumedCount = 0,
            isMatch = true,
            patternLength = pattern.length,
            patternPos = 0,
            cp = startCp,
            patternCp = void 0;

        for (; patternPos < patternLength; patternPos++) {
            if (patternPos > 0) {
                cp = this._consume();
                consumedCount++;
            }

            if (cp === $.EOF) {
                isMatch = false;
                break;
            }

            patternCp = pattern[patternPos];

            if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
                isMatch = false;
                break;
            }
        }

        if (!isMatch) this._unconsumeSeveral(consumedCount);

        return isMatch;
    };

    //Lookahead
    Tokenizer.prototype._lookahead = function () {
        var cp = this._consume();

        this._unconsume();

        return cp;
    };

    //Temp buffer
    Tokenizer.prototype.isTempBufferEqualToScriptString = function () {
        if (this.tempBuff.length !== $$.SCRIPT_STRING.length) return false;

        for (var i = 0; i < this.tempBuff.length; i++) {
            if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) return false;
        }

        return true;
    };

    //Token creation
    Tokenizer.prototype._createStartTagToken = function () {
        this.currentToken = {
            type: Tokenizer.START_TAG_TOKEN,
            tagName: '',
            selfClosing: false,
            attrs: []
        };
    };

    Tokenizer.prototype._createEndTagToken = function () {
        this.currentToken = {
            type: Tokenizer.END_TAG_TOKEN,
            tagName: '',
            attrs: []
        };
    };

    Tokenizer.prototype._createCommentToken = function () {
        this.currentToken = {
            type: Tokenizer.COMMENT_TOKEN,
            data: ''
        };
    };

    Tokenizer.prototype._createDoctypeToken = function (initialName) {
        this.currentToken = {
            type: Tokenizer.DOCTYPE_TOKEN,
            name: initialName,
            forceQuirks: false,
            publicId: null,
            systemId: null
        };
    };

    Tokenizer.prototype._createCharacterToken = function (type, ch) {
        this.currentCharacterToken = {
            type: type,
            chars: ch
        };
    };

    //Tag attributes
    Tokenizer.prototype._createAttr = function (attrNameFirstCh) {
        this.currentAttr = {
            name: attrNameFirstCh,
            value: ''
        };
    };

    Tokenizer.prototype._isDuplicateAttr = function () {
        return Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) !== null;
    };

    Tokenizer.prototype._leaveAttrName = function (toState) {
        this.state = toState;

        if (!this._isDuplicateAttr()) this.currentToken.attrs.push(this.currentAttr);
    };

    Tokenizer.prototype._leaveAttrValue = function (toState) {
        this.state = toState;
    };

    //Appropriate end tag token
    //(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#appropriate-end-tag-token)
    Tokenizer.prototype._isAppropriateEndTagToken = function () {
        return this.lastStartTagName === this.currentToken.tagName;
    };

    //Token emission
    Tokenizer.prototype._emitCurrentToken = function () {
        this._emitCurrentCharacterToken();

        //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.
        if (this.currentToken.type === Tokenizer.START_TAG_TOKEN) this.lastStartTagName = this.currentToken.tagName;

        this.tokenQueue.push(this.currentToken);
        this.currentToken = null;
    };

    Tokenizer.prototype._emitCurrentCharacterToken = function () {
        if (this.currentCharacterToken) {
            this.tokenQueue.push(this.currentCharacterToken);
            this.currentCharacterToken = null;
        }
    };

    Tokenizer.prototype._emitEOFToken = function () {
        this._emitCurrentCharacterToken();
        this.tokenQueue.push({ type: Tokenizer.EOF_TOKEN });
    };

    //Characters emission

    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).
    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
    //If we have a sequence of characters that belong to the same group, parser can process it
    //as a single solid character token.
    //So, there are 3 types of character tokens in parse5:
    //1)NULL_CHARACTER_TOKEN - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
    //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
    //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
    Tokenizer.prototype._appendCharToCurrentCharacterToken = function (type, ch) {
        if (this.currentCharacterToken && this.currentCharacterToken.type !== type) this._emitCurrentCharacterToken();

        if (this.currentCharacterToken) this.currentCharacterToken.chars += ch;else this._createCharacterToken(type, ch);
    };

    Tokenizer.prototype._emitCodePoint = function (cp) {
        var type = Tokenizer.CHARACTER_TOKEN;

        if (isWhitespace(cp)) type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;else if (cp === $.NULL) type = Tokenizer.NULL_CHARACTER_TOKEN;

        this._appendCharToCurrentCharacterToken(type, toChar(cp));
    };

    Tokenizer.prototype._emitSeveralCodePoints = function (codePoints) {
        for (var i = 0; i < codePoints.length; i++) {
            this._emitCodePoint(codePoints[i]);
        }
    };

    //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.
    //So we can avoid additional checks here.
    Tokenizer.prototype._emitChar = function (ch) {
        this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
    };

    //Character reference tokenization
    Tokenizer.prototype._consumeNumericEntity = function (isHex) {
        var digits = '',
            nextCp = void 0;

        do {
            digits += toChar(this._consume());
            nextCp = this._lookahead();
        } while (nextCp !== $.EOF && isDigit(nextCp, isHex));

        if (this._lookahead() === $.SEMICOLON) this._consume();

        var referencedCp = parseInt(digits, isHex ? 16 : 10),
            replacement = NUMERIC_ENTITY_REPLACEMENTS[referencedCp];

        if (replacement) return replacement;

        if (isReservedCodePoint(referencedCp)) return $.REPLACEMENT_CHARACTER;

        return referencedCp;
    };

    Tokenizer.prototype._consumeNamedEntity = function (startCp, inAttr) {
        var referencedCodePoints = null,
            entityCodePointsCount = 0,
            cp = startCp,
            leaf = named_entity_trie[cp],
            consumedCount = 1,
            semicolonTerminated = false;

        for (; leaf && cp !== $.EOF; cp = this._consume(), consumedCount++, leaf = leaf.l && leaf.l[cp]) {
            if (leaf.c) {
                //NOTE: we have at least one named reference match. But we don't stop lookup at this point,
                //because longer matches still can be found (e.g. '&not' and '&notin;') except the case
                //then found match is terminated by semicolon.
                referencedCodePoints = leaf.c;
                entityCodePointsCount = consumedCount;

                if (cp === $.SEMICOLON) {
                    semicolonTerminated = true;
                    break;
                }
            }
        }

        if (referencedCodePoints) {
            if (!semicolonTerminated) {
                //NOTE: unconsume excess (e.g. 'it' in '&notit')
                this._unconsumeSeveral(consumedCount - entityCodePointsCount);

                //NOTE: If the character reference is being consumed as part of an attribute and the next character
                //is either a U+003D EQUALS SIGN character (=) or an alphanumeric ASCII character, then, for historical
                //reasons, all the characters that were matched after the U+0026 AMPERSAND character (&) must be
                //unconsumed, and nothing is returned.
                //However, if this next character is in fact a U+003D EQUALS SIGN character (=), then this is a
                //parse error, because some legacy user agents will misinterpret the markup in those cases.
                //(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#tokenizing-character-references)
                if (inAttr) {
                    var nextCp = this._lookahead();

                    if (nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp)) {
                        this._unconsumeSeveral(entityCodePointsCount);
                        return null;
                    }
                }
            }

            return referencedCodePoints;
        }

        this._unconsumeSeveral(consumedCount);

        return null;
    };

    Tokenizer.prototype._consumeCharacterReference = function (startCp, inAttr) {
        if (isWhitespace(startCp) || startCp === $.GREATER_THAN_SIGN || startCp === $.AMPERSAND || startCp === this.additionalAllowedCp || startCp === $.EOF) {
            //NOTE: not a character reference. No characters are consumed, and nothing is returned.
            this._unconsume();
            return null;
        }

        if (startCp === $.NUMBER_SIGN) {
            //NOTE: we have a numeric entity candidate, now we should determine if it's hex or decimal
            var isHex = false,
                nextCp = this._lookahead();

            if (nextCp === $.LATIN_SMALL_X || nextCp === $.LATIN_CAPITAL_X) {
                this._consume();
                isHex = true;
            }

            nextCp = this._lookahead();

            //NOTE: if we have at least one digit this is a numeric entity for sure, so we consume it
            if (nextCp !== $.EOF && isDigit(nextCp, isHex)) return [this._consumeNumericEntity(isHex)];

            //NOTE: otherwise this is a bogus number entity and a parse error. Unconsume the number sign
            //and the 'x'-character if appropriate.
            this._unconsumeSeveral(isHex ? 2 : 1);
            return null;
        }

        return this._consumeNamedEntity(startCp, inAttr);
    };

    //State machine
    var _ = Tokenizer.prototype;

    //12.2.4.1 Data state
    //------------------------------------------------------------------
    _[DATA_STATE] = function dataState(cp) {
        this.preprocessor.dropParsedChunk();

        if (cp === $.AMPERSAND) this.state = CHARACTER_REFERENCE_IN_DATA_STATE;else if (cp === $.LESS_THAN_SIGN) this.state = TAG_OPEN_STATE;else if (cp === $.NULL) this._emitCodePoint(cp);else if (cp === $.EOF) this._emitEOFToken();else this._emitCodePoint(cp);
    };

    //12.2.4.2 Character reference in data state
    //------------------------------------------------------------------
    _[CHARACTER_REFERENCE_IN_DATA_STATE] = function characterReferenceInDataState(cp) {
        this.additionalAllowedCp = void 0;

        var referencedCodePoints = this._consumeCharacterReference(cp, false);

        if (!this._ensureHibernation()) {
            if (referencedCodePoints) this._emitSeveralCodePoints(referencedCodePoints);else this._emitChar('&');

            this.state = DATA_STATE;
        }
    };

    //12.2.4.3 RCDATA state
    //------------------------------------------------------------------
    _[RCDATA_STATE] = function rcdataState(cp) {
        this.preprocessor.dropParsedChunk();

        if (cp === $.AMPERSAND) this.state = CHARACTER_REFERENCE_IN_RCDATA_STATE;else if (cp === $.LESS_THAN_SIGN) this.state = RCDATA_LESS_THAN_SIGN_STATE;else if (cp === $.NULL) this._emitChar(unicode.REPLACEMENT_CHARACTER);else if (cp === $.EOF) this._emitEOFToken();else this._emitCodePoint(cp);
    };

    //12.2.4.4 Character reference in RCDATA state
    //------------------------------------------------------------------
    _[CHARACTER_REFERENCE_IN_RCDATA_STATE] = function characterReferenceInRcdataState(cp) {
        this.additionalAllowedCp = void 0;

        var referencedCodePoints = this._consumeCharacterReference(cp, false);

        if (!this._ensureHibernation()) {
            if (referencedCodePoints) this._emitSeveralCodePoints(referencedCodePoints);else this._emitChar('&');

            this.state = RCDATA_STATE;
        }
    };

    //12.2.4.5 RAWTEXT state
    //------------------------------------------------------------------
    _[RAWTEXT_STATE] = function rawtextState(cp) {
        this.preprocessor.dropParsedChunk();

        if (cp === $.LESS_THAN_SIGN) this.state = RAWTEXT_LESS_THAN_SIGN_STATE;else if (cp === $.NULL) this._emitChar(unicode.REPLACEMENT_CHARACTER);else if (cp === $.EOF) this._emitEOFToken();else this._emitCodePoint(cp);
    };

    //12.2.4.6 Script data state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_STATE] = function scriptDataState(cp) {
        this.preprocessor.dropParsedChunk();

        if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;else if (cp === $.NULL) this._emitChar(unicode.REPLACEMENT_CHARACTER);else if (cp === $.EOF) this._emitEOFToken();else this._emitCodePoint(cp);
    };

    //12.2.4.7 PLAINTEXT state
    //------------------------------------------------------------------
    _[PLAINTEXT_STATE] = function plaintextState(cp) {
        this.preprocessor.dropParsedChunk();

        if (cp === $.NULL) this._emitChar(unicode.REPLACEMENT_CHARACTER);else if (cp === $.EOF) this._emitEOFToken();else this._emitCodePoint(cp);
    };

    //12.2.4.8 Tag open state
    //------------------------------------------------------------------
    _[TAG_OPEN_STATE] = function tagOpenState(cp) {
        if (cp === $.EXCLAMATION_MARK) this.state = MARKUP_DECLARATION_OPEN_STATE;else if (cp === $.SOLIDUS) this.state = END_TAG_OPEN_STATE;else if (isAsciiLetter(cp)) {
            this._createStartTagToken();
            this._reconsumeInState(TAG_NAME_STATE);
        } else if (cp === $.QUESTION_MARK) this._reconsumeInState(BOGUS_COMMENT_STATE);else {
            this._emitChar('<');
            this._reconsumeInState(DATA_STATE);
        }
    };

    //12.2.4.9 End tag open state
    //------------------------------------------------------------------
    _[END_TAG_OPEN_STATE] = function endTagOpenState(cp) {
        if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(TAG_NAME_STATE);
        } else if (cp === $.GREATER_THAN_SIGN) this.state = DATA_STATE;else if (cp === $.EOF) {
            this._reconsumeInState(DATA_STATE);
            this._emitChar('<');
            this._emitChar('/');
        } else this._reconsumeInState(BOGUS_COMMENT_STATE);
    };

    //12.2.4.10 Tag name state
    //------------------------------------------------------------------
    _[TAG_NAME_STATE] = function tagNameState(cp) {
        if (isWhitespace(cp)) this.state = BEFORE_ATTRIBUTE_NAME_STATE;else if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE;else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (isAsciiUpper(cp)) this.currentToken.tagName += toAsciiLowerChar(cp);else if (cp === $.NULL) this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this.currentToken.tagName += toChar(cp);
    };

    //12.2.4.11 RCDATA less-than sign state
    //------------------------------------------------------------------
    _[RCDATA_LESS_THAN_SIGN_STATE] = function rcdataLessThanSignState(cp) {
        if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = RCDATA_END_TAG_OPEN_STATE;
        } else {
            this._emitChar('<');
            this._reconsumeInState(RCDATA_STATE);
        }
    };

    //12.2.4.12 RCDATA end tag open state
    //------------------------------------------------------------------
    _[RCDATA_END_TAG_OPEN_STATE] = function rcdataEndTagOpenState(cp) {
        if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);
        } else {
            this._emitChar('<');
            this._emitChar('/');
            this._reconsumeInState(RCDATA_STATE);
        }
    };

    //12.2.4.13 RCDATA end tag name state
    //------------------------------------------------------------------
    _[RCDATA_END_TAG_NAME_STATE] = function rcdataEndTagNameState(cp) {
        if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
        } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
        } else {
            if (this._isAppropriateEndTagToken()) {
                if (isWhitespace(cp)) {
                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                    return;
                }

                if (cp === $.SOLIDUS) {
                    this.state = SELF_CLOSING_START_TAG_STATE;
                    return;
                }

                if (cp === $.GREATER_THAN_SIGN) {
                    this.state = DATA_STATE;
                    this._emitCurrentToken();
                    return;
                }
            }

            this._emitChar('<');
            this._emitChar('/');
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(RCDATA_STATE);
        }
    };

    //12.2.4.14 RAWTEXT less-than sign state
    //------------------------------------------------------------------
    _[RAWTEXT_LESS_THAN_SIGN_STATE] = function rawtextLessThanSignState(cp) {
        if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = RAWTEXT_END_TAG_OPEN_STATE;
        } else {
            this._emitChar('<');
            this._reconsumeInState(RAWTEXT_STATE);
        }
    };

    //12.2.4.15 RAWTEXT end tag open state
    //------------------------------------------------------------------
    _[RAWTEXT_END_TAG_OPEN_STATE] = function rawtextEndTagOpenState(cp) {
        if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);
        } else {
            this._emitChar('<');
            this._emitChar('/');
            this._reconsumeInState(RAWTEXT_STATE);
        }
    };

    //12.2.4.16 RAWTEXT end tag name state
    //------------------------------------------------------------------
    _[RAWTEXT_END_TAG_NAME_STATE] = function rawtextEndTagNameState(cp) {
        if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
        } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
        } else {
            if (this._isAppropriateEndTagToken()) {
                if (isWhitespace(cp)) {
                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                    return;
                }

                if (cp === $.SOLIDUS) {
                    this.state = SELF_CLOSING_START_TAG_STATE;
                    return;
                }

                if (cp === $.GREATER_THAN_SIGN) {
                    this._emitCurrentToken();
                    this.state = DATA_STATE;
                    return;
                }
            }

            this._emitChar('<');
            this._emitChar('/');
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(RAWTEXT_STATE);
        }
    };

    //12.2.4.17 Script data less-than sign state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_LESS_THAN_SIGN_STATE] = function scriptDataLessThanSignState(cp) {
        if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
        } else if (cp === $.EXCLAMATION_MARK) {
            this.state = SCRIPT_DATA_ESCAPE_START_STATE;
            this._emitChar('<');
            this._emitChar('!');
        } else {
            this._emitChar('<');
            this._reconsumeInState(SCRIPT_DATA_STATE);
        }
    };

    //12.2.4.18 Script data end tag open state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_END_TAG_OPEN_STATE] = function scriptDataEndTagOpenState(cp) {
        if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);
        } else {
            this._emitChar('<');
            this._emitChar('/');
            this._reconsumeInState(SCRIPT_DATA_STATE);
        }
    };

    //12.2.4.19 Script data end tag name state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_END_TAG_NAME_STATE] = function scriptDataEndTagNameState(cp) {
        if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
        } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
        } else {
            if (this._isAppropriateEndTagToken()) {
                if (isWhitespace(cp)) {
                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                    return;
                } else if (cp === $.SOLIDUS) {
                    this.state = SELF_CLOSING_START_TAG_STATE;
                    return;
                } else if (cp === $.GREATER_THAN_SIGN) {
                    this._emitCurrentToken();
                    this.state = DATA_STATE;
                    return;
                }
            }

            this._emitChar('<');
            this._emitChar('/');
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(SCRIPT_DATA_STATE);
        }
    };

    //12.2.4.20 Script data escape start state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_ESCAPE_START_STATE] = function scriptDataEscapeStartState(cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;
            this._emitChar('-');
        } else this._reconsumeInState(SCRIPT_DATA_STATE);
    };

    //12.2.4.21 Script data escape start dash state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_ESCAPE_START_DASH_STATE] = function scriptDataEscapeStartDashState(cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
            this._emitChar('-');
        } else this._reconsumeInState(SCRIPT_DATA_STATE);
    };

    //12.2.4.22 Script data escaped state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_ESCAPED_STATE] = function scriptDataEscapedState(cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;
            this._emitChar('-');
        } else if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;else if (cp === $.NULL) this._emitChar(unicode.REPLACEMENT_CHARACTER);else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this._emitCodePoint(cp);
    };

    //12.2.4.23 Script data escaped dash state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_ESCAPED_DASH_STATE] = function scriptDataEscapedDashState(cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
            this._emitChar('-');
        } else if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;else if (cp === $.NULL) {
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitChar(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else {
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitCodePoint(cp);
        }
    };

    //12.2.4.24 Script data escaped dash dash state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_ESCAPED_DASH_DASH_STATE] = function scriptDataEscapedDashDashState(cp) {
        if (cp === $.HYPHEN_MINUS) this._emitChar('-');else if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;else if (cp === $.GREATER_THAN_SIGN) {
            this.state = SCRIPT_DATA_STATE;
            this._emitChar('>');
        } else if (cp === $.NULL) {
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitChar(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else {
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitCodePoint(cp);
        }
    };

    //12.2.4.25 Script data escaped less-than sign state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataEscapedLessThanSignState(cp) {
        if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
        } else if (isAsciiLetter(cp)) {
            this.tempBuff = [];
            this._emitChar('<');
            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);
        } else {
            this._emitChar('<');
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
        }
    };

    //12.2.4.26 Script data escaped end tag open state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE] = function scriptDataEscapedEndTagOpenState(cp) {
        if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);
        } else {
            this._emitChar('<');
            this._emitChar('/');
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
        }
    };

    //12.2.4.27 Script data escaped end tag name state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE] = function scriptDataEscapedEndTagNameState(cp) {
        if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
        } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
        } else {
            if (this._isAppropriateEndTagToken()) {
                if (isWhitespace(cp)) {
                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                    return;
                }

                if (cp === $.SOLIDUS) {
                    this.state = SELF_CLOSING_START_TAG_STATE;
                    return;
                }

                if (cp === $.GREATER_THAN_SIGN) {
                    this._emitCurrentToken();
                    this.state = DATA_STATE;
                    return;
                }
            }

            this._emitChar('<');
            this._emitChar('/');
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
        }
    };

    //12.2.4.28 Script data double escape start state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE] = function scriptDataDoubleEscapeStartState(cp) {
        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
            this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;
            this._emitCodePoint(cp);
        } else if (isAsciiUpper(cp)) {
            this.tempBuff.push(toAsciiLowerCodePoint(cp));
            this._emitCodePoint(cp);
        } else if (isAsciiLower(cp)) {
            this.tempBuff.push(cp);
            this._emitCodePoint(cp);
        } else this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
    };

    //12.2.4.29 Script data double escaped state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_DOUBLE_ESCAPED_STATE] = function scriptDataDoubleEscapedState(cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;
            this._emitChar('-');
        } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
            this._emitChar('<');
        } else if (cp === $.NULL) this._emitChar(unicode.REPLACEMENT_CHARACTER);else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this._emitCodePoint(cp);
    };

    //12.2.4.30 Script data double escaped dash state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE] = function scriptDataDoubleEscapedDashState(cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;
            this._emitChar('-');
        } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
            this._emitChar('<');
        } else if (cp === $.NULL) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitChar(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitCodePoint(cp);
        }
    };

    //12.2.4.31 Script data double escaped dash dash state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE] = function scriptDataDoubleEscapedDashDashState(cp) {
        if (cp === $.HYPHEN_MINUS) this._emitChar('-');else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
            this._emitChar('<');
        } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = SCRIPT_DATA_STATE;
            this._emitChar('>');
        } else if (cp === $.NULL) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitChar(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitCodePoint(cp);
        }
    };

    //12.2.4.32 Script data double escaped less-than sign state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataDoubleEscapedLessThanSignState(cp) {
        if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;
            this._emitChar('/');
        } else this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
    };

    //12.2.4.33 Script data double escape end state
    //------------------------------------------------------------------
    _[SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE] = function scriptDataDoubleEscapeEndState(cp) {
        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
            this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

            this._emitCodePoint(cp);
        } else if (isAsciiUpper(cp)) {
            this.tempBuff.push(toAsciiLowerCodePoint(cp));
            this._emitCodePoint(cp);
        } else if (isAsciiLower(cp)) {
            this.tempBuff.push(cp);
            this._emitCodePoint(cp);
        } else this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
    };

    //12.2.4.34 Before attribute name state
    //------------------------------------------------------------------
    _[BEFORE_ATTRIBUTE_NAME_STATE] = function beforeAttributeNameState(cp) {
        if (isWhitespace(cp)) return;

        if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);else if (cp === $.EQUALS_SIGN) {
            this._createAttr('=');
            this.state = ATTRIBUTE_NAME_STATE;
        } else {
            this._createAttr('');
            this._reconsumeInState(ATTRIBUTE_NAME_STATE);
        }
    };

    //12.2.4.35 Attribute name state
    //------------------------------------------------------------------
    _[ATTRIBUTE_NAME_STATE] = function attributeNameState(cp) {
        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
            this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);
            this._unconsume();
        } else if (cp === $.EQUALS_SIGN) this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);else if (isAsciiUpper(cp)) this.currentAttr.name += toAsciiLowerChar(cp);else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) this.currentAttr.name += toChar(cp);else if (cp === $.NULL) this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;else this.currentAttr.name += toChar(cp);
    };

    //12.2.4.36 After attribute name state
    //------------------------------------------------------------------
    _[AFTER_ATTRIBUTE_NAME_STATE] = function afterAttributeNameState(cp) {
        if (isWhitespace(cp)) return;

        if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE;else if (cp === $.EQUALS_SIGN) this.state = BEFORE_ATTRIBUTE_VALUE_STATE;else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else {
            this._createAttr('');
            this._reconsumeInState(ATTRIBUTE_NAME_STATE);
        }
    };

    //12.2.4.37 Before attribute value state
    //------------------------------------------------------------------
    _[BEFORE_ATTRIBUTE_VALUE_STATE] = function beforeAttributeValueState(cp) {
        if (isWhitespace(cp)) return;

        if (cp === $.QUOTATION_MARK) this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;else if (cp === $.APOSTROPHE) this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;else this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);
    };

    //12.2.4.38 Attribute value (double-quoted) state
    //------------------------------------------------------------------
    _[ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE] = function attributeValueDoubleQuotedState(cp) {
        if (cp === $.QUOTATION_MARK) this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;else if (cp === $.AMPERSAND) {
            this.additionalAllowedCp = $.QUOTATION_MARK;
            this.returnState = this.state;
            this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
        } else if (cp === $.NULL) this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this.currentAttr.value += toChar(cp);
    };

    //12.2.4.39 Attribute value (single-quoted) state
    //------------------------------------------------------------------
    _[ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE] = function attributeValueSingleQuotedState(cp) {
        if (cp === $.APOSTROPHE) this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;else if (cp === $.AMPERSAND) {
            this.additionalAllowedCp = $.APOSTROPHE;
            this.returnState = this.state;
            this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
        } else if (cp === $.NULL) this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this.currentAttr.value += toChar(cp);
    };

    //12.2.4.40 Attribute value (unquoted) state
    //------------------------------------------------------------------
    _[ATTRIBUTE_VALUE_UNQUOTED_STATE] = function attributeValueUnquotedState(cp) {
        if (isWhitespace(cp)) this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);else if (cp === $.AMPERSAND) {
            this.additionalAllowedCp = $.GREATER_THAN_SIGN;
            this.returnState = this.state;
            this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this._leaveAttrValue(DATA_STATE);
            this._emitCurrentToken();
        } else if (cp === $.NULL) this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) this.currentAttr.value += toChar(cp);else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this.currentAttr.value += toChar(cp);
    };

    //12.2.4.41 Character reference in attribute value state
    //------------------------------------------------------------------
    _[CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE] = function characterReferenceInAttributeValueState(cp) {
        var referencedCodePoints = this._consumeCharacterReference(cp, true);

        if (!this._ensureHibernation()) {
            if (referencedCodePoints) {
                for (var i = 0; i < referencedCodePoints.length; i++) {
                    this.currentAttr.value += toChar(referencedCodePoints[i]);
                }
            } else this.currentAttr.value += '&';

            this.state = this.returnState;
        }
    };

    //12.2.4.42 After attribute value (quoted) state
    //------------------------------------------------------------------
    _[AFTER_ATTRIBUTE_VALUE_QUOTED_STATE] = function afterAttributeValueQuotedState(cp) {
        if (isWhitespace(cp)) this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);else if (cp === $.SOLIDUS) this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);else if (cp === $.GREATER_THAN_SIGN) {
            this._leaveAttrValue(DATA_STATE);
            this._emitCurrentToken();
        } else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
    };

    //12.2.4.43 Self-closing start tag state
    //------------------------------------------------------------------
    _[SELF_CLOSING_START_TAG_STATE] = function selfClosingStartTagState(cp) {
        if (cp === $.GREATER_THAN_SIGN) {
            this.currentToken.selfClosing = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EOF) this._reconsumeInState(DATA_STATE);else this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
    };

    //12.2.4.44 Bogus comment state
    //------------------------------------------------------------------
    _[BOGUS_COMMENT_STATE] = function bogusCommentState() {
        this._createCommentToken();
        this._reconsumeInState(BOGUS_COMMENT_STATE_CONTINUATION);
    };

    //HACK: to support streaming and make BOGUS_COMMENT_STATE reentrant we've
    //introduced BOGUS_COMMENT_STATE_CONTINUATION state which will not produce
    //comment token on each call.
    _[BOGUS_COMMENT_STATE_CONTINUATION] = function bogusCommentStateContinuation(cp) {
        while (true) {
            if (cp === $.GREATER_THAN_SIGN) {
                this.state = DATA_STATE;
                break;
            } else if (cp === $.EOF) {
                this._reconsumeInState(DATA_STATE);
                break;
            } else {
                this.currentToken.data += cp === $.NULL ? unicode.REPLACEMENT_CHARACTER : toChar(cp);

                this._hibernationSnapshot();
                cp = this._consume();

                if (this._ensureHibernation()) return;
            }
        }

        this._emitCurrentToken();
    };

    //12.2.4.45 Markup declaration open state
    //------------------------------------------------------------------
    _[MARKUP_DECLARATION_OPEN_STATE] = function markupDeclarationOpenState(cp) {
        var dashDashMatch = this._consumeSubsequentIfMatch($$.DASH_DASH_STRING, cp, true),
            doctypeMatch = !dashDashMatch && this._consumeSubsequentIfMatch($$.DOCTYPE_STRING, cp, false),
            cdataMatch = !dashDashMatch && !doctypeMatch && this.allowCDATA && this._consumeSubsequentIfMatch($$.CDATA_START_STRING, cp, true);

        if (!this._ensureHibernation()) {
            if (dashDashMatch) {
                this._createCommentToken();
                this.state = COMMENT_START_STATE;
            } else if (doctypeMatch) this.state = DOCTYPE_STATE;else if (cdataMatch) this.state = CDATA_SECTION_STATE;else this._reconsumeInState(BOGUS_COMMENT_STATE);
        }
    };

    //12.2.4.46 Comment start state
    //------------------------------------------------------------------
    _[COMMENT_START_STATE] = function commentStartState(cp) {
        if (cp === $.HYPHEN_MINUS) this.state = COMMENT_START_DASH_STATE;else if (cp === $.NULL) {
            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
            this.state = COMMENT_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EOF) {
            this._emitCurrentToken();
            this._reconsumeInState(DATA_STATE);
        } else {
            this.currentToken.data += toChar(cp);
            this.state = COMMENT_STATE;
        }
    };

    //12.2.4.47 Comment start dash state
    //------------------------------------------------------------------
    _[COMMENT_START_DASH_STATE] = function commentStartDashState(cp) {
        if (cp === $.HYPHEN_MINUS) this.state = COMMENT_END_STATE;else if (cp === $.NULL) {
            this.currentToken.data += '-';
            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
            this.state = COMMENT_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EOF) {
            this._emitCurrentToken();
            this._reconsumeInState(DATA_STATE);
        } else {
            this.currentToken.data += '-';
            this.currentToken.data += toChar(cp);
            this.state = COMMENT_STATE;
        }
    };

    //12.2.4.48 Comment state
    //------------------------------------------------------------------
    _[COMMENT_STATE] = function commentState(cp) {
        if (cp === $.HYPHEN_MINUS) this.state = COMMENT_END_DASH_STATE;else if (cp === $.NULL) this.currentToken.data += unicode.REPLACEMENT_CHARACTER;else if (cp === $.EOF) {
            this._emitCurrentToken();
            this._reconsumeInState(DATA_STATE);
        } else this.currentToken.data += toChar(cp);
    };

    //12.2.4.49 Comment end dash state
    //------------------------------------------------------------------
    _[COMMENT_END_DASH_STATE] = function commentEndDashState(cp) {
        if (cp === $.HYPHEN_MINUS) this.state = COMMENT_END_STATE;else if (cp === $.NULL) {
            this.currentToken.data += '-';
            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
            this.state = COMMENT_STATE;
        } else if (cp === $.EOF) {
            this._emitCurrentToken();
            this._reconsumeInState(DATA_STATE);
        } else {
            this.currentToken.data += '-';
            this.currentToken.data += toChar(cp);
            this.state = COMMENT_STATE;
        }
    };

    //12.2.4.50 Comment end state
    //------------------------------------------------------------------
    _[COMMENT_END_STATE] = function commentEndState(cp) {
        if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.EXCLAMATION_MARK) this.state = COMMENT_END_BANG_STATE;else if (cp === $.HYPHEN_MINUS) this.currentToken.data += '-';else if (cp === $.NULL) {
            this.currentToken.data += '--';
            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
            this.state = COMMENT_STATE;
        } else if (cp === $.EOF) {
            this._reconsumeInState(DATA_STATE);
            this._emitCurrentToken();
        } else {
            this.currentToken.data += '--';
            this.currentToken.data += toChar(cp);
            this.state = COMMENT_STATE;
        }
    };

    //12.2.4.51 Comment end bang state
    //------------------------------------------------------------------
    _[COMMENT_END_BANG_STATE] = function commentEndBangState(cp) {
        if (cp === $.HYPHEN_MINUS) {
            this.currentToken.data += '--!';
            this.state = COMMENT_END_DASH_STATE;
        } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else if (cp === $.NULL) {
            this.currentToken.data += '--!';
            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
            this.state = COMMENT_STATE;
        } else if (cp === $.EOF) {
            this._emitCurrentToken();
            this._reconsumeInState(DATA_STATE);
        } else {
            this.currentToken.data += '--!';
            this.currentToken.data += toChar(cp);
            this.state = COMMENT_STATE;
        }
    };

    //12.2.4.52 DOCTYPE state
    //------------------------------------------------------------------
    _[DOCTYPE_STATE] = function doctypeState(cp) {
        if (isWhitespace(cp)) return;else if (cp === $.GREATER_THAN_SIGN) {
            this._createDoctypeToken(null);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.EOF) {
            this._createDoctypeToken(null);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._reconsumeInState(DATA_STATE);
        } else {
            this._createDoctypeToken('');
            this._reconsumeInState(DOCTYPE_NAME_STATE);
        }
    };

    //12.2.4.54 DOCTYPE name state
    //------------------------------------------------------------------
    _[DOCTYPE_NAME_STATE] = function doctypeNameState(cp) {
        if (isWhitespace(cp) || cp === $.GREATER_THAN_SIGN || cp === $.EOF) this._reconsumeInState(AFTER_DOCTYPE_NAME_STATE);else if (isAsciiUpper(cp)) this.currentToken.name += toAsciiLowerChar(cp);else if (cp === $.NULL) this.currentToken.name += unicode.REPLACEMENT_CHARACTER;else this.currentToken.name += toChar(cp);
    };

    //12.2.4.55 After DOCTYPE name state
    //------------------------------------------------------------------
    _[AFTER_DOCTYPE_NAME_STATE] = function afterDoctypeNameState(cp) {
        if (isWhitespace(cp)) return;

        if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
        } else {
            var publicMatch = this._consumeSubsequentIfMatch($$.PUBLIC_STRING, cp, false),
                systemMatch = !publicMatch && this._consumeSubsequentIfMatch($$.SYSTEM_STRING, cp, false);

            if (!this._ensureHibernation()) {
                if (publicMatch) this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;else if (systemMatch) this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;else {
                    this.currentToken.forceQuirks = true;
                    this.state = BOGUS_DOCTYPE_STATE;
                }
            }
        }
    };

    //12.2.4.57 Before DOCTYPE public identifier state
    //------------------------------------------------------------------
    _[BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE] = function beforeDoctypePublicIdentifierState(cp) {
        if (isWhitespace(cp)) return;

        if (cp === $.QUOTATION_MARK) {
            this.currentToken.publicId = '';
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
        } else if (cp === $.APOSTROPHE) {
            this.currentToken.publicId = '';
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
        } else {
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
    };

    //12.2.4.58 DOCTYPE public identifier (double-quoted) state
    //------------------------------------------------------------------
    _[DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypePublicIdentifierDoubleQuotedState(cp) {
        if (cp === $.QUOTATION_MARK) this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;else if (cp === $.NULL) this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;else if (cp === $.GREATER_THAN_SIGN) {
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.EOF) {
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._reconsumeInState(DATA_STATE);
        } else this.currentToken.publicId += toChar(cp);
    };

    //12.2.4.59 DOCTYPE public identifier (single-quoted) state
    //------------------------------------------------------------------
    _[DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypePublicIdentifierSingleQuotedState(cp) {
        if (cp === $.APOSTROPHE) this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;else if (cp === $.NULL) this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;else if (cp === $.GREATER_THAN_SIGN) {
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.EOF) {
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._reconsumeInState(DATA_STATE);
        } else this.currentToken.publicId += toChar(cp);
    };

    //12.2.4.61 Between DOCTYPE public and system identifiers state
    //------------------------------------------------------------------
    _[BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE] = function betweenDoctypePublicAndSystemIdentifiersState(cp) {
        if (isWhitespace(cp)) return;

        if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.QUOTATION_MARK) {
            this.currentToken.systemId = '';
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
        } else if (cp === $.APOSTROPHE) {
            this.currentToken.systemId = '';
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
        } else {
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
    };

    //12.2.4.63 Before DOCTYPE system identifier state
    //------------------------------------------------------------------
    _[BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function beforeDoctypeSystemIdentifierState(cp) {
        if (isWhitespace(cp)) return;

        if (cp === $.QUOTATION_MARK) {
            this.currentToken.systemId = '';
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
        } else if (cp === $.APOSTROPHE) {
            this.currentToken.systemId = '';
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
        } else {
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
    };

    //12.2.4.64 DOCTYPE system identifier (double-quoted) state
    //------------------------------------------------------------------
    _[DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypeSystemIdentifierDoubleQuotedState(cp) {
        if (cp === $.QUOTATION_MARK) this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;else if (cp === $.GREATER_THAN_SIGN) {
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.NULL) this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;else if (cp === $.EOF) {
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._reconsumeInState(DATA_STATE);
        } else this.currentToken.systemId += toChar(cp);
    };

    //12.2.4.65 DOCTYPE system identifier (single-quoted) state
    //------------------------------------------------------------------
    _[DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypeSystemIdentifierSingleQuotedState(cp) {
        if (cp === $.APOSTROPHE) this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;else if (cp === $.GREATER_THAN_SIGN) {
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.NULL) this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;else if (cp === $.EOF) {
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._reconsumeInState(DATA_STATE);
        } else this.currentToken.systemId += toChar(cp);
    };

    //12.2.4.66 After DOCTYPE system identifier state
    //------------------------------------------------------------------
    _[AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function afterDoctypeSystemIdentifierState(cp) {
        if (isWhitespace(cp)) return;

        if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.EOF) {
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._reconsumeInState(DATA_STATE);
        } else this.state = BOGUS_DOCTYPE_STATE;
    };

    //12.2.4.67 Bogus DOCTYPE state
    //------------------------------------------------------------------
    _[BOGUS_DOCTYPE_STATE] = function bogusDoctypeState(cp) {
        if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();
            this.state = DATA_STATE;
        } else if (cp === $.EOF) {
            this._emitCurrentToken();
            this._reconsumeInState(DATA_STATE);
        }
    };

    //12.2.4.68 CDATA section state
    //------------------------------------------------------------------
    _[CDATA_SECTION_STATE] = function cdataSectionState(cp) {
        while (true) {
            if (cp === $.EOF) {
                this._reconsumeInState(DATA_STATE);
                break;
            } else {
                var cdataEndMatch = this._consumeSubsequentIfMatch($$.CDATA_END_STRING, cp, true);

                if (this._ensureHibernation()) break;

                if (cdataEndMatch) {
                    this.state = DATA_STATE;
                    break;
                }

                this._emitCodePoint(cp);

                this._hibernationSnapshot();
                cp = this._consume();

                if (this._ensureHibernation()) break;
            }
        }
    };
});

var html$4 = createCommonjsModule(function (module, exports) {
    var NS = exports.NAMESPACES = {
        HTML: 'http://www.w3.org/1999/xhtml',
        MATHML: 'http://www.w3.org/1998/Math/MathML',
        SVG: 'http://www.w3.org/2000/svg',
        XLINK: 'http://www.w3.org/1999/xlink',
        XML: 'http://www.w3.org/XML/1998/namespace',
        XMLNS: 'http://www.w3.org/2000/xmlns/'
    };

    exports.ATTRS = {
        TYPE: 'type',
        ACTION: 'action',
        ENCODING: 'encoding',
        PROMPT: 'prompt',
        NAME: 'name',
        COLOR: 'color',
        FACE: 'face',
        SIZE: 'size'
    };

    var $ = exports.TAG_NAMES = {
        A: 'a',
        ADDRESS: 'address',
        ANNOTATION_XML: 'annotation-xml',
        APPLET: 'applet',
        AREA: 'area',
        ARTICLE: 'article',
        ASIDE: 'aside',

        B: 'b',
        BASE: 'base',
        BASEFONT: 'basefont',
        BGSOUND: 'bgsound',
        BIG: 'big',
        BLOCKQUOTE: 'blockquote',
        BODY: 'body',
        BR: 'br',
        BUTTON: 'button',

        CAPTION: 'caption',
        CENTER: 'center',
        CODE: 'code',
        COL: 'col',
        COLGROUP: 'colgroup',

        DD: 'dd',
        DESC: 'desc',
        DETAILS: 'details',
        DIALOG: 'dialog',
        DIR: 'dir',
        DIV: 'div',
        DL: 'dl',
        DT: 'dt',

        EM: 'em',
        EMBED: 'embed',

        FIELDSET: 'fieldset',
        FIGCAPTION: 'figcaption',
        FIGURE: 'figure',
        FONT: 'font',
        FOOTER: 'footer',
        FOREIGN_OBJECT: 'foreignObject',
        FORM: 'form',
        FRAME: 'frame',
        FRAMESET: 'frameset',

        H1: 'h1',
        H2: 'h2',
        H3: 'h3',
        H4: 'h4',
        H5: 'h5',
        H6: 'h6',
        HEAD: 'head',
        HEADER: 'header',
        HGROUP: 'hgroup',
        HR: 'hr',
        HTML: 'html',

        I: 'i',
        IMG: 'img',
        IMAGE: 'image',
        INPUT: 'input',
        IFRAME: 'iframe',

        KEYGEN: 'keygen',

        LABEL: 'label',
        LI: 'li',
        LINK: 'link',
        LISTING: 'listing',

        MAIN: 'main',
        MALIGNMARK: 'malignmark',
        MARQUEE: 'marquee',
        MATH: 'math',
        MENU: 'menu',
        MENUITEM: 'menuitem',
        META: 'meta',
        MGLYPH: 'mglyph',
        MI: 'mi',
        MO: 'mo',
        MN: 'mn',
        MS: 'ms',
        MTEXT: 'mtext',

        NAV: 'nav',
        NOBR: 'nobr',
        NOFRAMES: 'noframes',
        NOEMBED: 'noembed',
        NOSCRIPT: 'noscript',

        OBJECT: 'object',
        OL: 'ol',
        OPTGROUP: 'optgroup',
        OPTION: 'option',

        P: 'p',
        PARAM: 'param',
        PLAINTEXT: 'plaintext',
        PRE: 'pre',

        RB: 'rb',
        RP: 'rp',
        RT: 'rt',
        RTC: 'rtc',
        RUBY: 'ruby',

        S: 's',
        SCRIPT: 'script',
        SECTION: 'section',
        SELECT: 'select',
        SOURCE: 'source',
        SMALL: 'small',
        SPAN: 'span',
        STRIKE: 'strike',
        STRONG: 'strong',
        STYLE: 'style',
        SUB: 'sub',
        SUMMARY: 'summary',
        SUP: 'sup',

        TABLE: 'table',
        TBODY: 'tbody',
        TEMPLATE: 'template',
        TEXTAREA: 'textarea',
        TFOOT: 'tfoot',
        TD: 'td',
        TH: 'th',
        THEAD: 'thead',
        TITLE: 'title',
        TR: 'tr',
        TRACK: 'track',
        TT: 'tt',

        U: 'u',
        UL: 'ul',

        SVG: 'svg',

        VAR: 'var',

        WBR: 'wbr',

        XMP: 'xmp'
    };

    var SPECIAL_ELEMENTS = exports.SPECIAL_ELEMENTS = {};

    SPECIAL_ELEMENTS[NS.HTML] = {};
    SPECIAL_ELEMENTS[NS.HTML][$.ADDRESS] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.APPLET] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.AREA] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.ARTICLE] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.ASIDE] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.BASE] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.BASEFONT] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.BGSOUND] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.BLOCKQUOTE] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.BODY] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.BR] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.BUTTON] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.CAPTION] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.CENTER] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.COL] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.COLGROUP] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.DD] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.DETAILS] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.DIR] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.DIV] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.DL] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.DT] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.EMBED] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.FIELDSET] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.FIGCAPTION] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.FIGURE] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.FOOTER] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.FORM] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.FRAME] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.FRAMESET] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.H1] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.H2] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.H3] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.H4] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.H5] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.H6] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.HEAD] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.HEADER] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.HGROUP] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.HR] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.HTML] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.IFRAME] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.IMG] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.INPUT] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.LI] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.LINK] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.LISTING] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.MAIN] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.MARQUEE] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.MENU] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.META] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.NAV] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.NOEMBED] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.NOFRAMES] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.NOSCRIPT] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.OBJECT] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.OL] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.P] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.PARAM] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.PLAINTEXT] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.PRE] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.SCRIPT] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.SECTION] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.SELECT] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.SOURCE] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.STYLE] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.SUMMARY] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.TABLE] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.TBODY] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.TD] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.TEMPLATE] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.TEXTAREA] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.TFOOT] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.TH] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.THEAD] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.TITLE] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.TR] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.TRACK] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.UL] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.WBR] = true;
    SPECIAL_ELEMENTS[NS.HTML][$.XMP] = true;

    SPECIAL_ELEMENTS[NS.MATHML] = {};
    SPECIAL_ELEMENTS[NS.MATHML][$.MI] = true;
    SPECIAL_ELEMENTS[NS.MATHML][$.MO] = true;
    SPECIAL_ELEMENTS[NS.MATHML][$.MN] = true;
    SPECIAL_ELEMENTS[NS.MATHML][$.MS] = true;
    SPECIAL_ELEMENTS[NS.MATHML][$.MTEXT] = true;
    SPECIAL_ELEMENTS[NS.MATHML][$.ANNOTATION_XML] = true;

    SPECIAL_ELEMENTS[NS.SVG] = {};
    SPECIAL_ELEMENTS[NS.SVG][$.TITLE] = true;
    SPECIAL_ELEMENTS[NS.SVG][$.FOREIGN_OBJECT] = true;
    SPECIAL_ELEMENTS[NS.SVG][$.DESC] = true;
});

var html_1$2 = html$4.NAMESPACES;
var html_2 = html$4.ATTRS;
var html_3 = html$4.TAG_NAMES;
var html_4 = html$4.SPECIAL_ELEMENTS;

var open_element_stack = createCommonjsModule(function (module) {
    var $ = html$4.TAG_NAMES,
        NS = html$4.NAMESPACES;

    //Element utils

    //OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
    //It's faster than using dictionary.
    function isImpliedEndTagRequired(tn) {
        switch (tn.length) {
            case 1:
                return tn === $.P;

            case 2:
                return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;

            case 3:
                return tn === $.RTC;

            case 6:
                return tn === $.OPTION;

            case 8:
                return tn === $.OPTGROUP || tn === $.MENUITEM;
        }

        return false;
    }

    function isScopingElement(tn, ns) {
        switch (tn.length) {
            case 2:
                if (tn === $.TD || tn === $.TH) return ns === NS.HTML;else if (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS) return ns === NS.MATHML;

                break;

            case 4:
                if (tn === $.HTML) return ns === NS.HTML;else if (tn === $.DESC) return ns === NS.SVG;

                break;

            case 5:
                if (tn === $.TABLE) return ns === NS.HTML;else if (tn === $.MTEXT) return ns === NS.MATHML;else if (tn === $.TITLE) return ns === NS.SVG;

                break;

            case 6:
                return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;

            case 7:
                return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;

            case 8:
                return tn === $.TEMPLATE && ns === NS.HTML;

            case 13:
                return tn === $.FOREIGN_OBJECT && ns === NS.SVG;

            case 14:
                return tn === $.ANNOTATION_XML && ns === NS.MATHML;
        }

        return false;
    }

    //Stack of open elements
    var OpenElementStack = module.exports = function (document, treeAdapter) {
        this.stackTop = -1;
        this.items = [];
        this.current = document;
        this.currentTagName = null;
        this.currentTmplContent = null;
        this.tmplCount = 0;
        this.treeAdapter = treeAdapter;
    };

    //Index of element
    OpenElementStack.prototype._indexOf = function (element) {
        var idx = -1;

        for (var i = this.stackTop; i >= 0; i--) {
            if (this.items[i] === element) {
                idx = i;
                break;
            }
        }
        return idx;
    };

    //Update current element
    OpenElementStack.prototype._isInTemplate = function () {
        return this.currentTagName === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
    };

    OpenElementStack.prototype._updateCurrentElement = function () {
        this.current = this.items[this.stackTop];
        this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);

        this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : null;
    };

    //Mutations
    OpenElementStack.prototype.push = function (element) {
        this.items[++this.stackTop] = element;
        this._updateCurrentElement();

        if (this._isInTemplate()) this.tmplCount++;
    };

    OpenElementStack.prototype.pop = function () {
        this.stackTop--;

        if (this.tmplCount > 0 && this._isInTemplate()) this.tmplCount--;

        this._updateCurrentElement();
    };

    OpenElementStack.prototype.replace = function (oldElement, newElement) {
        var idx = this._indexOf(oldElement);

        this.items[idx] = newElement;

        if (idx === this.stackTop) this._updateCurrentElement();
    };

    OpenElementStack.prototype.insertAfter = function (referenceElement, newElement) {
        var insertionIdx = this._indexOf(referenceElement) + 1;

        this.items.splice(insertionIdx, 0, newElement);

        if (insertionIdx === ++this.stackTop) this._updateCurrentElement();
    };

    OpenElementStack.prototype.popUntilTagNamePopped = function (tagName) {
        while (this.stackTop > -1) {
            var tn = this.currentTagName,
                ns = this.treeAdapter.getNamespaceURI(this.current);

            this.pop();

            if (tn === tagName && ns === NS.HTML) break;
        }
    };

    OpenElementStack.prototype.popUntilElementPopped = function (element) {
        while (this.stackTop > -1) {
            var poppedElement = this.current;

            this.pop();

            if (poppedElement === element) break;
        }
    };

    OpenElementStack.prototype.popUntilNumberedHeaderPopped = function () {
        while (this.stackTop > -1) {
            var tn = this.currentTagName,
                ns = this.treeAdapter.getNamespaceURI(this.current);

            this.pop();

            if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6 && ns === NS.HTML) break;
        }
    };

    OpenElementStack.prototype.popUntilTableCellPopped = function () {
        while (this.stackTop > -1) {
            var tn = this.currentTagName,
                ns = this.treeAdapter.getNamespaceURI(this.current);

            this.pop();

            if (tn === $.TD || tn === $.TH && ns === NS.HTML) break;
        }
    };

    OpenElementStack.prototype.popAllUpToHtmlElement = function () {
        //NOTE: here we assume that root <html> element is always first in the open element stack, so
        //we perform this fast stack clean up.
        this.stackTop = 0;
        this._updateCurrentElement();
    };

    OpenElementStack.prototype.clearBackToTableContext = function () {
        while (this.currentTagName !== $.TABLE && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
            this.pop();
        }
    };

    OpenElementStack.prototype.clearBackToTableBodyContext = function () {
        while (this.currentTagName !== $.TBODY && this.currentTagName !== $.TFOOT && this.currentTagName !== $.THEAD && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
            this.pop();
        }
    };

    OpenElementStack.prototype.clearBackToTableRowContext = function () {
        while (this.currentTagName !== $.TR && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
            this.pop();
        }
    };

    OpenElementStack.prototype.remove = function (element) {
        for (var i = this.stackTop; i >= 0; i--) {
            if (this.items[i] === element) {
                this.items.splice(i, 1);
                this.stackTop--;
                this._updateCurrentElement();
                break;
            }
        }
    };

    //Search
    OpenElementStack.prototype.tryPeekProperlyNestedBodyElement = function () {
        //Properly nested <body> element (should be second element in stack).
        var element = this.items[1];

        return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;
    };

    OpenElementStack.prototype.contains = function (element) {
        return this._indexOf(element) > -1;
    };

    OpenElementStack.prototype.getCommonAncestor = function (element) {
        var elementIdx = this._indexOf(element);

        return --elementIdx >= 0 ? this.items[elementIdx] : null;
    };

    OpenElementStack.prototype.isRootHtmlElementCurrent = function () {
        return this.stackTop === 0 && this.currentTagName === $.HTML;
    };

    //Element in scope
    OpenElementStack.prototype.hasInScope = function (tagName) {
        for (var i = this.stackTop; i >= 0; i--) {
            var tn = this.treeAdapter.getTagName(this.items[i]),
                ns = this.treeAdapter.getNamespaceURI(this.items[i]);

            if (tn === tagName && ns === NS.HTML) return true;

            if (isScopingElement(tn, ns)) return false;
        }

        return true;
    };

    OpenElementStack.prototype.hasNumberedHeaderInScope = function () {
        for (var i = this.stackTop; i >= 0; i--) {
            var tn = this.treeAdapter.getTagName(this.items[i]),
                ns = this.treeAdapter.getNamespaceURI(this.items[i]);

            if ((tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) && ns === NS.HTML) return true;

            if (isScopingElement(tn, ns)) return false;
        }

        return true;
    };

    OpenElementStack.prototype.hasInListItemScope = function (tagName) {
        for (var i = this.stackTop; i >= 0; i--) {
            var tn = this.treeAdapter.getTagName(this.items[i]),
                ns = this.treeAdapter.getNamespaceURI(this.items[i]);

            if (tn === tagName && ns === NS.HTML) return true;

            if ((tn === $.UL || tn === $.OL) && ns === NS.HTML || isScopingElement(tn, ns)) return false;
        }

        return true;
    };

    OpenElementStack.prototype.hasInButtonScope = function (tagName) {
        for (var i = this.stackTop; i >= 0; i--) {
            var tn = this.treeAdapter.getTagName(this.items[i]),
                ns = this.treeAdapter.getNamespaceURI(this.items[i]);

            if (tn === tagName && ns === NS.HTML) return true;

            if (tn === $.BUTTON && ns === NS.HTML || isScopingElement(tn, ns)) return false;
        }

        return true;
    };

    OpenElementStack.prototype.hasInTableScope = function (tagName) {
        for (var i = this.stackTop; i >= 0; i--) {
            var tn = this.treeAdapter.getTagName(this.items[i]),
                ns = this.treeAdapter.getNamespaceURI(this.items[i]);

            if (ns !== NS.HTML) continue;

            if (tn === tagName) return true;

            if (tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) return false;
        }

        return true;
    };

    OpenElementStack.prototype.hasTableBodyContextInTableScope = function () {
        for (var i = this.stackTop; i >= 0; i--) {
            var tn = this.treeAdapter.getTagName(this.items[i]),
                ns = this.treeAdapter.getNamespaceURI(this.items[i]);

            if (ns !== NS.HTML) continue;

            if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT) return true;

            if (tn === $.TABLE || tn === $.HTML) return false;
        }

        return true;
    };

    OpenElementStack.prototype.hasInSelectScope = function (tagName) {
        for (var i = this.stackTop; i >= 0; i--) {
            var tn = this.treeAdapter.getTagName(this.items[i]),
                ns = this.treeAdapter.getNamespaceURI(this.items[i]);

            if (ns !== NS.HTML) continue;

            if (tn === tagName) return true;

            if (tn !== $.OPTION && tn !== $.OPTGROUP) return false;
        }

        return true;
    };

    //Implied end tags
    OpenElementStack.prototype.generateImpliedEndTags = function () {
        while (isImpliedEndTagRequired(this.currentTagName)) {
            this.pop();
        }
    };

    OpenElementStack.prototype.generateImpliedEndTagsWithExclusion = function (exclusionTagName) {
        while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) {
            this.pop();
        }
    };
});

var formatting_element_list = createCommonjsModule(function (module) {
    var NOAH_ARK_CAPACITY = 3;

    //List of formatting elements
    var FormattingElementList = module.exports = function (treeAdapter) {
        this.length = 0;
        this.entries = [];
        this.treeAdapter = treeAdapter;
        this.bookmark = null;
    };

    //Entry types
    FormattingElementList.MARKER_ENTRY = 'MARKER_ENTRY';
    FormattingElementList.ELEMENT_ENTRY = 'ELEMENT_ENTRY';

    //Noah Ark's condition
    //OPTIMIZATION: at first we try to find possible candidates for exclusion using
    //lightweight heuristics without thorough attributes check.
    FormattingElementList.prototype._getNoahArkConditionCandidates = function (newElement) {
        var candidates = [];

        if (this.length >= NOAH_ARK_CAPACITY) {
            var neAttrsLength = this.treeAdapter.getAttrList(newElement).length,
                neTagName = this.treeAdapter.getTagName(newElement),
                neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);

            for (var i = this.length - 1; i >= 0; i--) {
                var entry = this.entries[i];

                if (entry.type === FormattingElementList.MARKER_ENTRY) break;

                var element = entry.element,
                    elementAttrs = this.treeAdapter.getAttrList(element),
                    isCandidate = this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI && elementAttrs.length === neAttrsLength;

                if (isCandidate) candidates.push({ idx: i, attrs: elementAttrs });
            }
        }

        return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
    };

    FormattingElementList.prototype._ensureNoahArkCondition = function (newElement) {
        var candidates = this._getNoahArkConditionCandidates(newElement),
            cLength = candidates.length;

        if (cLength) {
            var neAttrs = this.treeAdapter.getAttrList(newElement),
                neAttrsLength = neAttrs.length,
                neAttrsMap = {};

            //NOTE: build attrs map for the new element so we can perform fast lookups
            for (var i = 0; i < neAttrsLength; i++) {
                var neAttr = neAttrs[i];

                neAttrsMap[neAttr.name] = neAttr.value;
            }

            for (i = 0; i < neAttrsLength; i++) {
                for (var j = 0; j < cLength; j++) {
                    var cAttr = candidates[j].attrs[i];

                    if (neAttrsMap[cAttr.name] !== cAttr.value) {
                        candidates.splice(j, 1);
                        cLength--;
                    }

                    if (candidates.length < NOAH_ARK_CAPACITY) return;
                }
            }

            //NOTE: remove bottommost candidates until Noah's Ark condition will not be met
            for (i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {
                this.entries.splice(candidates[i].idx, 1);
                this.length--;
            }
        }
    };

    //Mutations
    FormattingElementList.prototype.insertMarker = function () {
        this.entries.push({ type: FormattingElementList.MARKER_ENTRY });
        this.length++;
    };

    FormattingElementList.prototype.pushElement = function (element, token) {
        this._ensureNoahArkCondition(element);

        this.entries.push({
            type: FormattingElementList.ELEMENT_ENTRY,
            element: element,
            token: token
        });

        this.length++;
    };

    FormattingElementList.prototype.insertElementAfterBookmark = function (element, token) {
        var bookmarkIdx = this.length - 1;

        for (; bookmarkIdx >= 0; bookmarkIdx--) {
            if (this.entries[bookmarkIdx] === this.bookmark) break;
        }

        this.entries.splice(bookmarkIdx + 1, 0, {
            type: FormattingElementList.ELEMENT_ENTRY,
            element: element,
            token: token
        });

        this.length++;
    };

    FormattingElementList.prototype.removeEntry = function (entry) {
        for (var i = this.length - 1; i >= 0; i--) {
            if (this.entries[i] === entry) {
                this.entries.splice(i, 1);
                this.length--;
                break;
            }
        }
    };

    FormattingElementList.prototype.clearToLastMarker = function () {
        while (this.length) {
            var entry = this.entries.pop();

            this.length--;

            if (entry.type === FormattingElementList.MARKER_ENTRY) break;
        }
    };

    //Search
    FormattingElementList.prototype.getElementEntryInScopeWithTagName = function (tagName) {
        for (var i = this.length - 1; i >= 0; i--) {
            var entry = this.entries[i];

            if (entry.type === FormattingElementList.MARKER_ENTRY) return null;

            if (this.treeAdapter.getTagName(entry.element) === tagName) return entry;
        }

        return null;
    };

    FormattingElementList.prototype.getElementEntry = function (element) {
        for (var i = this.length - 1; i >= 0; i--) {
            var entry = this.entries[i];

            if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element) return entry;
        }

        return null;
    };
});

//Aliases
var $$1 = html$4.TAG_NAMES;

function setEndLocation(element, closingToken, treeAdapter) {
    var loc = element.__location;

    if (!loc) return;

    /**
     * @typedef {Object} ElementLocationInfo
     * @extends StartTagLocationInfo
     *
     * @property {StartTagLocationInfo} startTag - Element's start tag location info.
     * @property {LocationInfo} endTag - Element's end tag location info.
     */
    if (!loc.startTag) {
        loc.startTag = {
            line: loc.line,
            col: loc.col,
            startOffset: loc.startOffset,
            endOffset: loc.endOffset
        };
        if (loc.attrs) loc.startTag.attrs = loc.attrs;
    }

    if (closingToken.location) {
        var ctLocation = closingToken.location,
            tn = treeAdapter.getTagName(element),

        // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing tag and
        // for cases like <td> <p> </td> - 'p' closes without a closing tag
        isClosingEndTag = closingToken.type === tokenizer$3.END_TAG_TOKEN && tn === closingToken.tagName;

        if (isClosingEndTag) {
            loc.endTag = {
                line: ctLocation.line,
                col: ctLocation.col,
                startOffset: ctLocation.startOffset,
                endOffset: ctLocation.endOffset
            };
        }

        if (isClosingEndTag) loc.endOffset = ctLocation.endOffset;else loc.endOffset = ctLocation.startOffset;
    }
}

var assign$3 = function assign(parser) {
    //NOTE: obtain Parser proto this way to avoid module circular references
    var parserProto = Object.getPrototypeOf(parser),
        treeAdapter = parser.treeAdapter,
        attachableElementLocation = null,
        lastFosterParentingLocation = null,
        currentToken = null;

    //NOTE: patch _bootstrap method
    parser._bootstrap = function (document, fragmentContext) {
        parserProto._bootstrap.call(this, document, fragmentContext);

        attachableElementLocation = null;
        lastFosterParentingLocation = null;
        currentToken = null;

        //OpenElementStack
        parser.openElements.pop = function () {
            setEndLocation(this.current, currentToken, treeAdapter);
            open_element_stack.prototype.pop.call(this);
        };

        parser.openElements.popAllUpToHtmlElement = function () {
            for (var i = this.stackTop; i > 0; i--) {
                setEndLocation(this.items[i], currentToken, treeAdapter);
            }open_element_stack.prototype.popAllUpToHtmlElement.call(this);
        };

        parser.openElements.remove = function (element) {
            setEndLocation(element, currentToken, treeAdapter);
            open_element_stack.prototype.remove.call(this, element);
        };
    };

    //Token processing
    parser._processTokenInForeignContent = function (token) {
        currentToken = token;
        parserProto._processTokenInForeignContent.call(this, token);
    };

    parser._processToken = function (token) {
        currentToken = token;
        parserProto._processToken.call(this, token);

        //NOTE: <body> and <html> are never popped from the stack, so we need to updated
        //their end location explicitly.
        if (token.type === tokenizer$3.END_TAG_TOKEN && (token.tagName === $$1.HTML || token.tagName === $$1.BODY && this.openElements.hasInScope($$1.BODY))) {
            for (var i = this.openElements.stackTop; i >= 0; i--) {
                var element = this.openElements.items[i];

                if (this.treeAdapter.getTagName(element) === token.tagName) {
                    setEndLocation(element, token, treeAdapter);
                    break;
                }
            }
        }
    };

    //Doctype
    parser._setDocumentType = function (token) {
        parserProto._setDocumentType.call(this, token);

        var documentChildren = this.treeAdapter.getChildNodes(this.document),
            cnLength = documentChildren.length;

        for (var i = 0; i < cnLength; i++) {
            var node = documentChildren[i];

            if (this.treeAdapter.isDocumentTypeNode(node)) {
                node.__location = token.location;
                break;
            }
        }
    };

    //Elements
    parser._attachElementToTree = function (element) {
        //NOTE: _attachElementToTree is called from _appendElement, _insertElement and _insertTemplate methods.
        //So we will use token location stored in this methods for the element.
        element.__location = attachableElementLocation || null;
        attachableElementLocation = null;
        parserProto._attachElementToTree.call(this, element);
    };

    parser._appendElement = function (token, namespaceURI) {
        attachableElementLocation = token.location;
        parserProto._appendElement.call(this, token, namespaceURI);
    };

    parser._insertElement = function (token, namespaceURI) {
        attachableElementLocation = token.location;
        parserProto._insertElement.call(this, token, namespaceURI);
    };

    parser._insertTemplate = function (token) {
        attachableElementLocation = token.location;
        parserProto._insertTemplate.call(this, token);

        var tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);

        tmplContent.__location = null;
    };

    parser._insertFakeRootElement = function () {
        parserProto._insertFakeRootElement.call(this);
        this.openElements.current.__location = null;
    };

    //Comments
    parser._appendCommentNode = function (token, parent) {
        parserProto._appendCommentNode.call(this, token, parent);

        var children = this.treeAdapter.getChildNodes(parent),
            commentNode = children[children.length - 1];

        commentNode.__location = token.location;
    };

    //Text
    parser._findFosterParentingLocation = function () {
        //NOTE: store last foster parenting location, so we will be able to find inserted text
        //in case of foster parenting
        lastFosterParentingLocation = parserProto._findFosterParentingLocation.call(this);
        return lastFosterParentingLocation;
    };

    parser._insertCharacters = function (token) {
        parserProto._insertCharacters.call(this, token);

        var hasFosterParent = this._shouldFosterParentOnInsertion(),
            parent = hasFosterParent && lastFosterParentingLocation.parent || this.openElements.currentTmplContent || this.openElements.current,
            siblings = this.treeAdapter.getChildNodes(parent),
            textNodeIdx = hasFosterParent && lastFosterParentingLocation.beforeElement ? siblings.indexOf(lastFosterParentingLocation.beforeElement) - 1 : siblings.length - 1,
            textNode = siblings[textNodeIdx];

        //NOTE: if we have location assigned by another token, then just update end position
        if (textNode.__location) textNode.__location.endOffset = token.location.endOffset;else textNode.__location = token.location;
    };
};

var parser_mixin = {
    assign: assign$3
};

var _default = createCommonjsModule(function (module, exports) {
    exports.createDocument = function () {
        return {
            nodeName: '#document',
            quirksMode: false,
            childNodes: []
        };
    };

    /**
     * Creates a document fragment node.
     *
     * @function createDocumentFragment
     * @memberof TreeAdapter
     *
     * @returns {ASTNode<DocumentFragment>} fragment
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L37|default implementation.}
     */
    exports.createDocumentFragment = function () {
        return {
            nodeName: '#document-fragment',
            quirksMode: false,
            childNodes: []
        };
    };

    /**
     * Creates an element node.
     *
     * @function createElement
     * @memberof TreeAdapter
     *
     * @param {String} tagName - Tag name of the element.
     * @param {String} namespaceURI - Namespace of the element.
     * @param {Array}  attrs - Attribute name-value pair array.
     *                         Foreign attributes may contain `namespace` and `prefix` fields as well.
     *
     * @returns {ASTNode<Element>} element
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L61|default implementation.}
     */
    exports.createElement = function (tagName, namespaceURI, attrs) {
        return {
            nodeName: tagName,
            tagName: tagName,
            attrs: attrs,
            namespaceURI: namespaceURI,
            childNodes: [],
            parentNode: null
        };
    };

    /**
     * Creates a comment node.
     *
     * @function createCommentNode
     * @memberof TreeAdapter
     *
     * @param {String} data - Comment text.
     *
     * @returns {ASTNode<CommentNode>} comment
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L85|default implementation.}
     */
    exports.createCommentNode = function (data) {
        return {
            nodeName: '#comment',
            data: data,
            parentNode: null
        };
    };

    var createTextNode = function createTextNode(value) {
        return {
            nodeName: '#text',
            value: value,
            parentNode: null
        };
    };

    //Tree mutation
    /**
     * Appends a child node to the given parent node.
     *
     * @function appendChild
     * @memberof TreeAdapter
     *
     * @param {ASTNode} parentNode - Parent node.
     * @param {ASTNode} newNode -  Child node.
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L114|default implementation.}
     */
    var appendChild = exports.appendChild = function (parentNode, newNode) {
        parentNode.childNodes.push(newNode);
        newNode.parentNode = parentNode;
    };

    /**
     * Inserts a child node to the given parent node before the given reference node.
     *
     * @function insertBefore
     * @memberof TreeAdapter
     *
     * @param {ASTNode} parentNode - Parent node.
     * @param {ASTNode} newNode -  Child node.
     * @param {ASTNode} referenceNode -  Reference node.
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L131|default implementation.}
     */
    var insertBefore = exports.insertBefore = function (parentNode, newNode, referenceNode) {
        var insertionIdx = parentNode.childNodes.indexOf(referenceNode);

        parentNode.childNodes.splice(insertionIdx, 0, newNode);
        newNode.parentNode = parentNode;
    };

    /**
     * Sets the `<template>` element content element.
     *
     * @function setTemplateContent
     * @memberof TreeAdapter
     *
     * @param {ASTNode<TemplateElement>} templateElement - `<template>` element.
     * @param {ASTNode<DocumentFragment>} contentTemplate -  Content element.
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L149|default implementation.}
     */
    exports.setTemplateContent = function (templateElement, contentElement) {
        templateElement.content = contentElement;
    };

    /**
     * Returns the `<template>` element content element.
     *
     * @function getTemplateContent
     * @memberof TreeAdapter
     *
     * @param {ASTNode<TemplateElement>} templateElement - `<template>` element.
    
     * @returns {ASTNode<DocumentFragment>}
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L166|default implementation.}
     */
    exports.getTemplateContent = function (templateElement) {
        return templateElement.content;
    };

    /**
     * Sets the document type. If the `document` already contains a document type node, the `name`, `publicId` and `systemId`
     * properties of this node will be updated with the provided values. Otherwise, creates a new document type node
     * with the given properties and inserts it into the `document`.
     *
     * @function setDocumentType
     * @memberof TreeAdapter
     *
     * @param {ASTNode<Document>} document - Document node.
     * @param {String} name -  Document type name.
     * @param {String} publicId - Document type public identifier.
     * @param {String} systemId - Document type system identifier.
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L185|default implementation.}
     */
    exports.setDocumentType = function (document, name, publicId, systemId) {
        var doctypeNode = null;

        for (var i = 0; i < document.childNodes.length; i++) {
            if (document.childNodes[i].nodeName === '#documentType') {
                doctypeNode = document.childNodes[i];
                break;
            }
        }

        if (doctypeNode) {
            doctypeNode.name = name;
            doctypeNode.publicId = publicId;
            doctypeNode.systemId = systemId;
        } else {
            appendChild(document, {
                nodeName: '#documentType',
                name: name,
                publicId: publicId,
                systemId: systemId
            });
        }
    };

    /**
     * Sets the document's quirks mode flag.
     *
     * @function setQuirksMode
     * @memberof TreeAdapter
     *
     * @param {ASTNode<Document>} document - Document node.
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L221|default implementation.}
     */
    exports.setQuirksMode = function (document) {
        document.quirksMode = true;
    };

    /**
     * Determines if the document's quirks mode flag is set.
     *
     * @function isQuirksMode
     * @memberof TreeAdapter
     *
     * @param {ASTNode<Document>} document - Document node.
    
     * @returns {Boolean}
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L237|default implementation.}
     */
    exports.isQuirksMode = function (document) {
        return document.quirksMode;
    };

    /**
     * Removes a node from its parent.
     *
     * @function detachNode
     * @memberof TreeAdapter
     *
     * @param {ASTNode} node - Node.
    
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L251|default implementation.}
     */
    exports.detachNode = function (node) {
        if (node.parentNode) {
            var idx = node.parentNode.childNodes.indexOf(node);

            node.parentNode.childNodes.splice(idx, 1);
            node.parentNode = null;
        }
    };

    /**
     * Inserts text into a node. If the last child of the node is a text node, the provided text will be appended to the
     * text node content. Otherwise, inserts a new text node with the given text.
     *
     *
     * @function insertText
     * @memberof TreeAdapter
     *
     * @param {ASTNode} parentNode - Node to insert text into.
     * @param {String} text - Text to insert.
    
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L273|default implementation.}
     */
    exports.insertText = function (parentNode, text) {
        if (parentNode.childNodes.length) {
            var prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];

            if (prevNode.nodeName === '#text') {
                prevNode.value += text;
                return;
            }
        }

        appendChild(parentNode, createTextNode(text));
    };

    /**
     * Inserts text into a sibling node that goes before the reference node. If this sibling node is the text node,
     * the provided text will be appended to the text node content. Otherwise, inserts a new sibling text node with
     * the given text before the reference node.
     *
     *
     * @function insertTextBefore
     * @memberof TreeAdapter
     *
     * @param {ASTNode} parentNode - Node to insert text into.
     * @param {String} text - Text to insert.
     * @param {ASTNode} referenceNode - Node to insert text before.
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L301|default implementation.}
     */
    exports.insertTextBefore = function (parentNode, text, referenceNode) {
        var prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];

        if (prevNode && prevNode.nodeName === '#text') prevNode.value += text;else insertBefore(parentNode, createTextNode(text), referenceNode);
    };

    /**
     * Copies attributes to the given node. Only attributes that are not yet present in the node are copied.
     *
     * @function adoptAttributes
     * @memberof TreeAdapter
     *
     * @param {ASTNode} recipientNode - Node to copy attributes into.
     * @param {Array} attrs - Attributes to copy.
    
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L321|default implementation.}
     */
    exports.adoptAttributes = function (recipientNode, attrs) {
        var recipientAttrsMap = [];

        for (var i = 0; i < recipientNode.attrs.length; i++) {
            recipientAttrsMap.push(recipientNode.attrs[i].name);
        }for (var j = 0; j < attrs.length; j++) {
            if (recipientAttrsMap.indexOf(attrs[j].name) === -1) recipientNode.attrs.push(attrs[j]);
        }
    };

    //Tree traversing

    /**
     * Returns the first child of the given node.
     *
     * @function getFirstChild
     * @memberof TreeAdapter
     *
     * @param {ASTNode} node - Node.
     *
     * @returns {ASTNode} firstChild
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L348|default implementation.}
     */
    exports.getFirstChild = function (node) {
        return node.childNodes[0];
    };

    /**
     * Returns the given node's children in an array.
     *
     * @function getChildNodes
     * @memberof TreeAdapter
     *
     * @param {ASTNode} node - Node.
     *
     * @returns {Array} children
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L364|default implementation.}
     */
    exports.getChildNodes = function (node) {
        return node.childNodes;
    };

    /**
     * Returns the given node's parent.
     *
     * @function getParentNode
     * @memberof TreeAdapter
     *
     * @param {ASTNode} node - Node.
     *
     * @returns {ASTNode} parent
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L380|default implementation.}
     */
    exports.getParentNode = function (node) {
        return node.parentNode;
    };

    /**
     * Returns the given node's attributes in an array, in the form of name-value pairs.
     * Foreign attributes may contain `namespace` and `prefix` fields as well.
     *
     * @function getAttrList
     * @memberof TreeAdapter
     *
     * @param {ASTNode} node - Node.
     *
     * @returns {Array} attributes
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L397|default implementation.}
     */
    exports.getAttrList = function (node) {
        return node.attrs;
    };

    //Node data

    /**
     * Returns the given element's tag name.
     *
     * @function getTagName
     * @memberof TreeAdapter
     *
     * @param {ASTNode<Element>} element - Element.
     *
     * @returns {String} tagName
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L415|default implementation.}
     */
    exports.getTagName = function (element) {
        return element.tagName;
    };

    /**
     * Returns the given element's namespace.
     *
     * @function getNamespaceURI
     * @memberof TreeAdapter
     *
     * @param {ASTNode<Element>} element - Element.
     *
     * @returns {String} namespaceURI
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L431|default implementation.}
     */
    exports.getNamespaceURI = function (element) {
        return element.namespaceURI;
    };

    /**
     * Returns the given text node's content.
     *
     * @function getTextNodeContent
     * @memberof TreeAdapter
     *
     * @param {ASTNode<Text>} textNode - Text node.
     *
     * @returns {String} text
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L447|default implementation.}
     */
    exports.getTextNodeContent = function (textNode) {
        return textNode.value;
    };

    /**
     * Returns the given comment node's content.
     *
     * @function getCommentNodeContent
     * @memberof TreeAdapter
     *
     * @param {ASTNode<Comment>} commentNode - Comment node.
     *
     * @returns {String} commentText
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L463|default implementation.}
     */
    exports.getCommentNodeContent = function (commentNode) {
        return commentNode.data;
    };

    /**
     * Returns the given document type node's name.
     *
     * @function getDocumentTypeNodeName
     * @memberof TreeAdapter
     *
     * @param {ASTNode<DocumentType>} doctypeNode - Document type node.
     *
     * @returns {String} name
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L479|default implementation.}
     */
    exports.getDocumentTypeNodeName = function (doctypeNode) {
        return doctypeNode.name;
    };

    /**
     * Returns the given document type node's public identifier.
     *
     * @function getDocumentTypeNodePublicId
     * @memberof TreeAdapter
     *
     * @param {ASTNode<DocumentType>} doctypeNode - Document type node.
     *
     * @returns {String} publicId
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L495|default implementation.}
     */
    exports.getDocumentTypeNodePublicId = function (doctypeNode) {
        return doctypeNode.publicId;
    };

    /**
     * Returns the given document type node's system identifier.
     *
     * @function getDocumentTypeNodeSystemId
     * @memberof TreeAdapter
     *
     * @param {ASTNode<DocumentType>} doctypeNode - Document type node.
     *
     * @returns {String} systemId
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L511|default implementation.}
     */
    exports.getDocumentTypeNodeSystemId = function (doctypeNode) {
        return doctypeNode.systemId;
    };

    //Node types
    /**
     * Determines if the given node is a text node.
     *
     * @function isTextNode
     * @memberof TreeAdapter
     *
     * @param {ASTNode} node - Node.
     *
     * @returns {Boolean}
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L526|default implementation.}
     */
    exports.isTextNode = function (node) {
        return node.nodeName === '#text';
    };

    /**
     * Determines if the given node is a comment node.
     *
     * @function isCommentNode
     * @memberof TreeAdapter
     *
     * @param {ASTNode} node - Node.
     *
     * @returns {Boolean}
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L544|default implementation.}
     */
    exports.isCommentNode = function (node) {
        return node.nodeName === '#comment';
    };

    /**
     * Determines if the given node is a document type node.
     *
     * @function isDocumentTypeNode
     * @memberof TreeAdapter
     *
     * @param {ASTNode} node - Node.
     *
     * @returns {Boolean}
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L560|default implementation.}
     */
    exports.isDocumentTypeNode = function (node) {
        return node.nodeName === '#documentType';
    };

    /**
     * Determines if the given node is an element.
     *
     * @function isElementNode
     * @memberof TreeAdapter
     *
     * @param {ASTNode} node - Node.
     *
     * @returns {Boolean}
     *
     * @see {@link https://github.com/inikulin/parse5/blob/tree-adapter-docs-rev/lib/tree_adapters/default.js#L576|default implementation.}
     */
    exports.isElementNode = function (node) {
        return !!node.tagName;
    };
});

var _default_1 = _default.createDocument;
var _default_2 = _default.createDocumentFragment;
var _default_3 = _default.createElement;
var _default_4 = _default.createCommentNode;
var _default_5 = _default.appendChild;
var _default_6 = _default.insertBefore;
var _default_7 = _default.setTemplateContent;
var _default_8 = _default.getTemplateContent;
var _default_9 = _default.setDocumentType;
var _default_10 = _default.setQuirksMode;
var _default_11 = _default.isQuirksMode;
var _default_12 = _default.detachNode;
var _default_13 = _default.insertText;
var _default_14 = _default.insertTextBefore;
var _default_15 = _default.adoptAttributes;
var _default_16 = _default.getFirstChild;
var _default_17 = _default.getChildNodes;
var _default_18 = _default.getParentNode;
var _default_19 = _default.getAttrList;
var _default_20 = _default.getTagName;
var _default_21 = _default.getNamespaceURI;
var _default_22 = _default.getTextNodeContent;
var _default_23 = _default.getCommentNodeContent;
var _default_24 = _default.getDocumentTypeNodeName;
var _default_25 = _default.getDocumentTypeNodePublicId;
var _default_26 = _default.getDocumentTypeNodeSystemId;
var _default_27 = _default.isTextNode;
var _default_28 = _default.isCommentNode;
var _default_29 = _default.isDocumentTypeNode;
var _default_30 = _default.isElementNode;

//Const

var VALID_DOCTYPE_NAME = 'html';
var QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';
var QUIRKS_MODE_PUBLIC_ID_PREFIXES = ['+//silmaril//dtd html pro v0r11 19970101//en', '-//advasoft ltd//dtd html 3.0 aswedit + extensions//en', '-//as//dtd html 3.0 aswedit + extensions//en', '-//ietf//dtd html 2.0 level 1//en', '-//ietf//dtd html 2.0 level 2//en', '-//ietf//dtd html 2.0 strict level 1//en', '-//ietf//dtd html 2.0 strict level 2//en', '-//ietf//dtd html 2.0 strict//en', '-//ietf//dtd html 2.0//en', '-//ietf//dtd html 2.1e//en', '-//ietf//dtd html 3.0//en', '-//ietf//dtd html 3.0//en//', '-//ietf//dtd html 3.2 final//en', '-//ietf//dtd html 3.2//en', '-//ietf//dtd html 3//en', '-//ietf//dtd html level 0//en', '-//ietf//dtd html level 0//en//2.0', '-//ietf//dtd html level 1//en', '-//ietf//dtd html level 1//en//2.0', '-//ietf//dtd html level 2//en', '-//ietf//dtd html level 2//en//2.0', '-//ietf//dtd html level 3//en', '-//ietf//dtd html level 3//en//3.0', '-//ietf//dtd html strict level 0//en', '-//ietf//dtd html strict level 0//en//2.0', '-//ietf//dtd html strict level 1//en', '-//ietf//dtd html strict level 1//en//2.0', '-//ietf//dtd html strict level 2//en', '-//ietf//dtd html strict level 2//en//2.0', '-//ietf//dtd html strict level 3//en', '-//ietf//dtd html strict level 3//en//3.0', '-//ietf//dtd html strict//en', '-//ietf//dtd html strict//en//2.0', '-//ietf//dtd html strict//en//3.0', '-//ietf//dtd html//en', '-//ietf//dtd html//en//2.0', '-//ietf//dtd html//en//3.0', '-//metrius//dtd metrius presentational//en', '-//microsoft//dtd internet explorer 2.0 html strict//en', '-//microsoft//dtd internet explorer 2.0 html//en', '-//microsoft//dtd internet explorer 2.0 tables//en', '-//microsoft//dtd internet explorer 3.0 html strict//en', '-//microsoft//dtd internet explorer 3.0 html//en', '-//microsoft//dtd internet explorer 3.0 tables//en', '-//netscape comm. corp.//dtd html//en', '-//netscape comm. corp.//dtd strict html//en', '-//o\'reilly and associates//dtd html 2.0//en', '-//o\'reilly and associates//dtd html extended 1.0//en', '-//spyglass//dtd html 2.0 extended//en', '-//sq//dtd html 2.0 hotmetal + extensions//en', '-//sun microsystems corp.//dtd hotjava html//en', '-//sun microsystems corp.//dtd hotjava strict html//en', '-//w3c//dtd html 3 1995-03-24//en', '-//w3c//dtd html 3.2 draft//en', '-//w3c//dtd html 3.2 final//en', '-//w3c//dtd html 3.2//en', '-//w3c//dtd html 3.2s draft//en', '-//w3c//dtd html 4.0 frameset//en', '-//w3c//dtd html 4.0 transitional//en', '-//w3c//dtd html experimental 19960712//en', '-//w3c//dtd html experimental 970421//en', '-//w3c//dtd w3 html//en', '-//w3o//dtd w3 html 3.0//en', '-//w3o//dtd w3 html 3.0//en//', '-//webtechs//dtd mozilla html 2.0//en', '-//webtechs//dtd mozilla html//en'];
var QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = ['-//w3c//dtd html 4.01 frameset//', '-//w3c//dtd html 4.01 transitional//'];
var QUIRKS_MODE_PUBLIC_IDS = ['-//w3o//dtd w3 html strict 3.0//en//', '-/w3c/dtd html 4.0 transitional/en', 'html'];

//Utils
function enquoteDoctypeId(id) {
    var quote = id.indexOf('"') !== -1 ? '\'' : '"';

    return quote + id + quote;
}

//API
var isQuirks = function isQuirks(name, publicId, systemId) {
    if (name !== VALID_DOCTYPE_NAME) return true;

    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) return true;

    if (publicId !== null) {
        publicId = publicId.toLowerCase();

        if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1) return true;

        var prefixes = QUIRKS_MODE_PUBLIC_ID_PREFIXES;

        if (systemId === null) prefixes = prefixes.concat(QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES);

        for (var i = 0; i < prefixes.length; i++) {
            if (publicId.indexOf(prefixes[i]) === 0) return true;
        }
    }

    return false;
};

var serializeContent = function serializeContent(name, publicId, systemId) {
    var str = '!DOCTYPE ';

    if (name) str += name;

    if (publicId !== null) str += ' PUBLIC ' + enquoteDoctypeId(publicId);else if (systemId !== null) str += ' SYSTEM';

    if (systemId !== null) str += ' ' + enquoteDoctypeId(systemId);

    return str;
};

var doctype$1 = {
    isQuirks: isQuirks,
    serializeContent: serializeContent
};

var foreign_content = createCommonjsModule(function (module, exports) {
    var $ = html$4.TAG_NAMES,
        NS = html$4.NAMESPACES,
        ATTRS = html$4.ATTRS;

    //MIME types
    var MIME_TYPES = {
        TEXT_HTML: 'text/html',
        APPLICATION_XML: 'application/xhtml+xml'
    };

    //Attributes
    var DEFINITION_URL_ATTR = 'definitionurl',
        ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL',
        SVG_ATTRS_ADJUSTMENT_MAP = {
        'attributename': 'attributeName',
        'attributetype': 'attributeType',
        'basefrequency': 'baseFrequency',
        'baseprofile': 'baseProfile',
        'calcmode': 'calcMode',
        'clippathunits': 'clipPathUnits',
        'diffuseconstant': 'diffuseConstant',
        'edgemode': 'edgeMode',
        'filterunits': 'filterUnits',
        'glyphref': 'glyphRef',
        'gradienttransform': 'gradientTransform',
        'gradientunits': 'gradientUnits',
        'kernelmatrix': 'kernelMatrix',
        'kernelunitlength': 'kernelUnitLength',
        'keypoints': 'keyPoints',
        'keysplines': 'keySplines',
        'keytimes': 'keyTimes',
        'lengthadjust': 'lengthAdjust',
        'limitingconeangle': 'limitingConeAngle',
        'markerheight': 'markerHeight',
        'markerunits': 'markerUnits',
        'markerwidth': 'markerWidth',
        'maskcontentunits': 'maskContentUnits',
        'maskunits': 'maskUnits',
        'numoctaves': 'numOctaves',
        'pathlength': 'pathLength',
        'patterncontentunits': 'patternContentUnits',
        'patterntransform': 'patternTransform',
        'patternunits': 'patternUnits',
        'pointsatx': 'pointsAtX',
        'pointsaty': 'pointsAtY',
        'pointsatz': 'pointsAtZ',
        'preservealpha': 'preserveAlpha',
        'preserveaspectratio': 'preserveAspectRatio',
        'primitiveunits': 'primitiveUnits',
        'refx': 'refX',
        'refy': 'refY',
        'repeatcount': 'repeatCount',
        'repeatdur': 'repeatDur',
        'requiredextensions': 'requiredExtensions',
        'requiredfeatures': 'requiredFeatures',
        'specularconstant': 'specularConstant',
        'specularexponent': 'specularExponent',
        'spreadmethod': 'spreadMethod',
        'startoffset': 'startOffset',
        'stddeviation': 'stdDeviation',
        'stitchtiles': 'stitchTiles',
        'surfacescale': 'surfaceScale',
        'systemlanguage': 'systemLanguage',
        'tablevalues': 'tableValues',
        'targetx': 'targetX',
        'targety': 'targetY',
        'textlength': 'textLength',
        'viewbox': 'viewBox',
        'viewtarget': 'viewTarget',
        'xchannelselector': 'xChannelSelector',
        'ychannelselector': 'yChannelSelector',
        'zoomandpan': 'zoomAndPan'
    },
        XML_ATTRS_ADJUSTMENT_MAP = {
        'xlink:actuate': { prefix: 'xlink', name: 'actuate', namespace: NS.XLINK },
        'xlink:arcrole': { prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK },
        'xlink:href': { prefix: 'xlink', name: 'href', namespace: NS.XLINK },
        'xlink:role': { prefix: 'xlink', name: 'role', namespace: NS.XLINK },
        'xlink:show': { prefix: 'xlink', name: 'show', namespace: NS.XLINK },
        'xlink:title': { prefix: 'xlink', name: 'title', namespace: NS.XLINK },
        'xlink:type': { prefix: 'xlink', name: 'type', namespace: NS.XLINK },
        'xml:base': { prefix: 'xml', name: 'base', namespace: NS.XML },
        'xml:lang': { prefix: 'xml', name: 'lang', namespace: NS.XML },
        'xml:space': { prefix: 'xml', name: 'space', namespace: NS.XML },
        'xmlns': { prefix: '', name: 'xmlns', namespace: NS.XMLNS },
        'xmlns:xlink': { prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS }

    };

    //SVG tag names adjustment map
    var SVG_TAG_NAMES_ADJUSTMENT_MAP = exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = {
        'altglyph': 'altGlyph',
        'altglyphdef': 'altGlyphDef',
        'altglyphitem': 'altGlyphItem',
        'animatecolor': 'animateColor',
        'animatemotion': 'animateMotion',
        'animatetransform': 'animateTransform',
        'clippath': 'clipPath',
        'feblend': 'feBlend',
        'fecolormatrix': 'feColorMatrix',
        'fecomponenttransfer': 'feComponentTransfer',
        'fecomposite': 'feComposite',
        'feconvolvematrix': 'feConvolveMatrix',
        'fediffuselighting': 'feDiffuseLighting',
        'fedisplacementmap': 'feDisplacementMap',
        'fedistantlight': 'feDistantLight',
        'feflood': 'feFlood',
        'fefunca': 'feFuncA',
        'fefuncb': 'feFuncB',
        'fefuncg': 'feFuncG',
        'fefuncr': 'feFuncR',
        'fegaussianblur': 'feGaussianBlur',
        'feimage': 'feImage',
        'femerge': 'feMerge',
        'femergenode': 'feMergeNode',
        'femorphology': 'feMorphology',
        'feoffset': 'feOffset',
        'fepointlight': 'fePointLight',
        'fespecularlighting': 'feSpecularLighting',
        'fespotlight': 'feSpotLight',
        'fetile': 'feTile',
        'feturbulence': 'feTurbulence',
        'foreignobject': 'foreignObject',
        'glyphref': 'glyphRef',
        'lineargradient': 'linearGradient',
        'radialgradient': 'radialGradient',
        'textpath': 'textPath'
    };

    //Tags that causes exit from foreign content
    var EXITS_FOREIGN_CONTENT = {};

    EXITS_FOREIGN_CONTENT[$.B] = true;
    EXITS_FOREIGN_CONTENT[$.BIG] = true;
    EXITS_FOREIGN_CONTENT[$.BLOCKQUOTE] = true;
    EXITS_FOREIGN_CONTENT[$.BODY] = true;
    EXITS_FOREIGN_CONTENT[$.BR] = true;
    EXITS_FOREIGN_CONTENT[$.CENTER] = true;
    EXITS_FOREIGN_CONTENT[$.CODE] = true;
    EXITS_FOREIGN_CONTENT[$.DD] = true;
    EXITS_FOREIGN_CONTENT[$.DIV] = true;
    EXITS_FOREIGN_CONTENT[$.DL] = true;
    EXITS_FOREIGN_CONTENT[$.DT] = true;
    EXITS_FOREIGN_CONTENT[$.EM] = true;
    EXITS_FOREIGN_CONTENT[$.EMBED] = true;
    EXITS_FOREIGN_CONTENT[$.H1] = true;
    EXITS_FOREIGN_CONTENT[$.H2] = true;
    EXITS_FOREIGN_CONTENT[$.H3] = true;
    EXITS_FOREIGN_CONTENT[$.H4] = true;
    EXITS_FOREIGN_CONTENT[$.H5] = true;
    EXITS_FOREIGN_CONTENT[$.H6] = true;
    EXITS_FOREIGN_CONTENT[$.HEAD] = true;
    EXITS_FOREIGN_CONTENT[$.HR] = true;
    EXITS_FOREIGN_CONTENT[$.I] = true;
    EXITS_FOREIGN_CONTENT[$.IMG] = true;
    EXITS_FOREIGN_CONTENT[$.LI] = true;
    EXITS_FOREIGN_CONTENT[$.LISTING] = true;
    EXITS_FOREIGN_CONTENT[$.MENU] = true;
    EXITS_FOREIGN_CONTENT[$.META] = true;
    EXITS_FOREIGN_CONTENT[$.NOBR] = true;
    EXITS_FOREIGN_CONTENT[$.OL] = true;
    EXITS_FOREIGN_CONTENT[$.P] = true;
    EXITS_FOREIGN_CONTENT[$.PRE] = true;
    EXITS_FOREIGN_CONTENT[$.RUBY] = true;
    EXITS_FOREIGN_CONTENT[$.S] = true;
    EXITS_FOREIGN_CONTENT[$.SMALL] = true;
    EXITS_FOREIGN_CONTENT[$.SPAN] = true;
    EXITS_FOREIGN_CONTENT[$.STRONG] = true;
    EXITS_FOREIGN_CONTENT[$.STRIKE] = true;
    EXITS_FOREIGN_CONTENT[$.SUB] = true;
    EXITS_FOREIGN_CONTENT[$.SUP] = true;
    EXITS_FOREIGN_CONTENT[$.TABLE] = true;
    EXITS_FOREIGN_CONTENT[$.TT] = true;
    EXITS_FOREIGN_CONTENT[$.U] = true;
    EXITS_FOREIGN_CONTENT[$.UL] = true;
    EXITS_FOREIGN_CONTENT[$.VAR] = true;

    //Check exit from foreign content
    exports.causesExit = function (startTagToken) {
        var tn = startTagToken.tagName;
        var isFontWithAttrs = tn === $.FONT && (tokenizer$3.getTokenAttr(startTagToken, ATTRS.COLOR) !== null || tokenizer$3.getTokenAttr(startTagToken, ATTRS.SIZE) !== null || tokenizer$3.getTokenAttr(startTagToken, ATTRS.FACE) !== null);

        return isFontWithAttrs ? true : EXITS_FOREIGN_CONTENT[tn];
    };

    //Token adjustments
    exports.adjustTokenMathMLAttrs = function (token) {
        for (var i = 0; i < token.attrs.length; i++) {
            if (token.attrs[i].name === DEFINITION_URL_ATTR) {
                token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
                break;
            }
        }
    };

    exports.adjustTokenSVGAttrs = function (token) {
        for (var i = 0; i < token.attrs.length; i++) {
            var adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

            if (adjustedAttrName) token.attrs[i].name = adjustedAttrName;
        }
    };

    exports.adjustTokenXMLAttrs = function (token) {
        for (var i = 0; i < token.attrs.length; i++) {
            var adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

            if (adjustedAttrEntry) {
                token.attrs[i].prefix = adjustedAttrEntry.prefix;
                token.attrs[i].name = adjustedAttrEntry.name;
                token.attrs[i].namespace = adjustedAttrEntry.namespace;
            }
        }
    };

    exports.adjustTokenSVGTagName = function (token) {
        var adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];

        if (adjustedTagName) token.tagName = adjustedTagName;
    };

    //Integration points
    function isMathMLTextIntegrationPoint(tn, ns) {
        return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);
    }

    function isHtmlIntegrationPoint(tn, ns, attrs) {
        if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {
            for (var i = 0; i < attrs.length; i++) {
                if (attrs[i].name === ATTRS.ENCODING) {
                    var value = attrs[i].value.toLowerCase();

                    return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
                }
            }
        }

        return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);
    }

    exports.isIntegrationPoint = function (tn, ns, attrs, foreignNS) {
        if ((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) return true;

        if ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)) return true;

        return false;
    };
});

var foreign_content_1 = foreign_content.SVG_TAG_NAMES_ADJUSTMENT_MAP;
var foreign_content_2 = foreign_content.causesExit;
var foreign_content_3 = foreign_content.adjustTokenMathMLAttrs;
var foreign_content_4 = foreign_content.adjustTokenSVGAttrs;
var foreign_content_5 = foreign_content.adjustTokenXMLAttrs;
var foreign_content_6 = foreign_content.adjustTokenSVGTagName;
var foreign_content_7 = foreign_content.isIntegrationPoint;

var merge_options = function mergeOptions(defaults, options) {
    options = options || {};

    return [defaults, options].reduce(function (merged, optObj) {
        Object.keys(optObj).forEach(function (key) {
            merged[key] = optObj[key];
        });

        return merged;
    }, {});
};

var parser$2 = createCommonjsModule(function (module) {
    var $ = html$4.TAG_NAMES,
        NS = html$4.NAMESPACES,
        ATTRS = html$4.ATTRS;

    /**
     * @typedef {Object} ParserOptions
     *
     * @property {Boolean} [locationInfo=false] - Enables source code location information for the nodes.
     * When enabled, each node (except root node) has the `__location` property. In case the node is not an empty element,
     * `__location` will be {@link ElementLocationInfo} object, otherwise it's {@link LocationInfo}.
     * If the element was implicitly created by the parser it's `__location` property will be `null`.
     *
     * @property {TreeAdapter} [treeAdapter=parse5.treeAdapters.default] - Specifies the resulting tree format.
     */
    var DEFAULT_OPTIONS = {
        locationInfo: false,
        treeAdapter: _default
    };

    //Misc constants
    var HIDDEN_INPUT_TYPE = 'hidden';

    //Adoption agency loops iteration count
    var AA_OUTER_LOOP_ITER = 8,
        AA_INNER_LOOP_ITER = 3;

    //Insertion modes
    var INITIAL_MODE = 'INITIAL_MODE',
        BEFORE_HTML_MODE = 'BEFORE_HTML_MODE',
        BEFORE_HEAD_MODE = 'BEFORE_HEAD_MODE',
        IN_HEAD_MODE = 'IN_HEAD_MODE',
        AFTER_HEAD_MODE = 'AFTER_HEAD_MODE',
        IN_BODY_MODE = 'IN_BODY_MODE',
        TEXT_MODE = 'TEXT_MODE',
        IN_TABLE_MODE = 'IN_TABLE_MODE',
        IN_TABLE_TEXT_MODE = 'IN_TABLE_TEXT_MODE',
        IN_CAPTION_MODE = 'IN_CAPTION_MODE',
        IN_COLUMN_GROUP_MODE = 'IN_COLUMN_GROUP_MODE',
        IN_TABLE_BODY_MODE = 'IN_TABLE_BODY_MODE',
        IN_ROW_MODE = 'IN_ROW_MODE',
        IN_CELL_MODE = 'IN_CELL_MODE',
        IN_SELECT_MODE = 'IN_SELECT_MODE',
        IN_SELECT_IN_TABLE_MODE = 'IN_SELECT_IN_TABLE_MODE',
        IN_TEMPLATE_MODE = 'IN_TEMPLATE_MODE',
        AFTER_BODY_MODE = 'AFTER_BODY_MODE',
        IN_FRAMESET_MODE = 'IN_FRAMESET_MODE',
        AFTER_FRAMESET_MODE = 'AFTER_FRAMESET_MODE',
        AFTER_AFTER_BODY_MODE = 'AFTER_AFTER_BODY_MODE',
        AFTER_AFTER_FRAMESET_MODE = 'AFTER_AFTER_FRAMESET_MODE';

    //Insertion mode reset map
    var INSERTION_MODE_RESET_MAP = {};

    INSERTION_MODE_RESET_MAP[$.TR] = IN_ROW_MODE;
    INSERTION_MODE_RESET_MAP[$.TBODY] = INSERTION_MODE_RESET_MAP[$.THEAD] = INSERTION_MODE_RESET_MAP[$.TFOOT] = IN_TABLE_BODY_MODE;
    INSERTION_MODE_RESET_MAP[$.CAPTION] = IN_CAPTION_MODE;
    INSERTION_MODE_RESET_MAP[$.COLGROUP] = IN_COLUMN_GROUP_MODE;
    INSERTION_MODE_RESET_MAP[$.TABLE] = IN_TABLE_MODE;
    INSERTION_MODE_RESET_MAP[$.BODY] = IN_BODY_MODE;
    INSERTION_MODE_RESET_MAP[$.FRAMESET] = IN_FRAMESET_MODE;

    //Template insertion mode switch map
    var TEMPLATE_INSERTION_MODE_SWITCH_MAP = {};

    TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.CAPTION] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COLGROUP] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TBODY] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TFOOT] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.THEAD] = IN_TABLE_MODE;
    TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COL] = IN_COLUMN_GROUP_MODE;
    TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TR] = IN_TABLE_BODY_MODE;
    TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TD] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TH] = IN_ROW_MODE;

    //Token handlers map for insertion modes
    var _ = {};

    _[INITIAL_MODE] = {};
    _[INITIAL_MODE][tokenizer$3.CHARACTER_TOKEN] = _[INITIAL_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = tokenInInitialMode;
    _[INITIAL_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
    _[INITIAL_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[INITIAL_MODE][tokenizer$3.DOCTYPE_TOKEN] = doctypeInInitialMode;
    _[INITIAL_MODE][tokenizer$3.START_TAG_TOKEN] = _[INITIAL_MODE][tokenizer$3.END_TAG_TOKEN] = _[INITIAL_MODE][tokenizer$3.EOF_TOKEN] = tokenInInitialMode;

    _[BEFORE_HTML_MODE] = {};
    _[BEFORE_HTML_MODE][tokenizer$3.CHARACTER_TOKEN] = _[BEFORE_HTML_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = tokenBeforeHtml;
    _[BEFORE_HTML_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
    _[BEFORE_HTML_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[BEFORE_HTML_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[BEFORE_HTML_MODE][tokenizer$3.START_TAG_TOKEN] = startTagBeforeHtml;
    _[BEFORE_HTML_MODE][tokenizer$3.END_TAG_TOKEN] = endTagBeforeHtml;
    _[BEFORE_HTML_MODE][tokenizer$3.EOF_TOKEN] = tokenBeforeHtml;

    _[BEFORE_HEAD_MODE] = {};
    _[BEFORE_HEAD_MODE][tokenizer$3.CHARACTER_TOKEN] = _[BEFORE_HEAD_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = tokenBeforeHead;
    _[BEFORE_HEAD_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
    _[BEFORE_HEAD_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[BEFORE_HEAD_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[BEFORE_HEAD_MODE][tokenizer$3.START_TAG_TOKEN] = startTagBeforeHead;
    _[BEFORE_HEAD_MODE][tokenizer$3.END_TAG_TOKEN] = endTagBeforeHead;
    _[BEFORE_HEAD_MODE][tokenizer$3.EOF_TOKEN] = tokenBeforeHead;

    _[IN_HEAD_MODE] = {};
    _[IN_HEAD_MODE][tokenizer$3.CHARACTER_TOKEN] = _[IN_HEAD_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = tokenInHead;
    _[IN_HEAD_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
    _[IN_HEAD_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[IN_HEAD_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[IN_HEAD_MODE][tokenizer$3.START_TAG_TOKEN] = startTagInHead;
    _[IN_HEAD_MODE][tokenizer$3.END_TAG_TOKEN] = endTagInHead;
    _[IN_HEAD_MODE][tokenizer$3.EOF_TOKEN] = tokenInHead;

    _[AFTER_HEAD_MODE] = {};
    _[AFTER_HEAD_MODE][tokenizer$3.CHARACTER_TOKEN] = _[AFTER_HEAD_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = tokenAfterHead;
    _[AFTER_HEAD_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
    _[AFTER_HEAD_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[AFTER_HEAD_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[AFTER_HEAD_MODE][tokenizer$3.START_TAG_TOKEN] = startTagAfterHead;
    _[AFTER_HEAD_MODE][tokenizer$3.END_TAG_TOKEN] = endTagAfterHead;
    _[AFTER_HEAD_MODE][tokenizer$3.EOF_TOKEN] = tokenAfterHead;

    _[IN_BODY_MODE] = {};
    _[IN_BODY_MODE][tokenizer$3.CHARACTER_TOKEN] = characterInBody;
    _[IN_BODY_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = ignoreToken;
    _[IN_BODY_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
    _[IN_BODY_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[IN_BODY_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[IN_BODY_MODE][tokenizer$3.START_TAG_TOKEN] = startTagInBody;
    _[IN_BODY_MODE][tokenizer$3.END_TAG_TOKEN] = endTagInBody;
    _[IN_BODY_MODE][tokenizer$3.EOF_TOKEN] = eofInBody;

    _[TEXT_MODE] = {};
    _[TEXT_MODE][tokenizer$3.CHARACTER_TOKEN] = _[TEXT_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = _[TEXT_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
    _[TEXT_MODE][tokenizer$3.COMMENT_TOKEN] = _[TEXT_MODE][tokenizer$3.DOCTYPE_TOKEN] = _[TEXT_MODE][tokenizer$3.START_TAG_TOKEN] = ignoreToken;
    _[TEXT_MODE][tokenizer$3.END_TAG_TOKEN] = endTagInText;
    _[TEXT_MODE][tokenizer$3.EOF_TOKEN] = eofInText;

    _[IN_TABLE_MODE] = {};
    _[IN_TABLE_MODE][tokenizer$3.CHARACTER_TOKEN] = _[IN_TABLE_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = _[IN_TABLE_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
    _[IN_TABLE_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[IN_TABLE_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[IN_TABLE_MODE][tokenizer$3.START_TAG_TOKEN] = startTagInTable;
    _[IN_TABLE_MODE][tokenizer$3.END_TAG_TOKEN] = endTagInTable;
    _[IN_TABLE_MODE][tokenizer$3.EOF_TOKEN] = eofInBody;

    _[IN_TABLE_TEXT_MODE] = {};
    _[IN_TABLE_TEXT_MODE][tokenizer$3.CHARACTER_TOKEN] = characterInTableText;
    _[IN_TABLE_TEXT_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = ignoreToken;
    _[IN_TABLE_TEXT_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInTableText;
    _[IN_TABLE_TEXT_MODE][tokenizer$3.COMMENT_TOKEN] = _[IN_TABLE_TEXT_MODE][tokenizer$3.DOCTYPE_TOKEN] = _[IN_TABLE_TEXT_MODE][tokenizer$3.START_TAG_TOKEN] = _[IN_TABLE_TEXT_MODE][tokenizer$3.END_TAG_TOKEN] = _[IN_TABLE_TEXT_MODE][tokenizer$3.EOF_TOKEN] = tokenInTableText;

    _[IN_CAPTION_MODE] = {};
    _[IN_CAPTION_MODE][tokenizer$3.CHARACTER_TOKEN] = characterInBody;
    _[IN_CAPTION_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = ignoreToken;
    _[IN_CAPTION_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
    _[IN_CAPTION_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[IN_CAPTION_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[IN_CAPTION_MODE][tokenizer$3.START_TAG_TOKEN] = startTagInCaption;
    _[IN_CAPTION_MODE][tokenizer$3.END_TAG_TOKEN] = endTagInCaption;
    _[IN_CAPTION_MODE][tokenizer$3.EOF_TOKEN] = eofInBody;

    _[IN_COLUMN_GROUP_MODE] = {};
    _[IN_COLUMN_GROUP_MODE][tokenizer$3.CHARACTER_TOKEN] = _[IN_COLUMN_GROUP_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = tokenInColumnGroup;
    _[IN_COLUMN_GROUP_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
    _[IN_COLUMN_GROUP_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[IN_COLUMN_GROUP_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[IN_COLUMN_GROUP_MODE][tokenizer$3.START_TAG_TOKEN] = startTagInColumnGroup;
    _[IN_COLUMN_GROUP_MODE][tokenizer$3.END_TAG_TOKEN] = endTagInColumnGroup;
    _[IN_COLUMN_GROUP_MODE][tokenizer$3.EOF_TOKEN] = eofInBody;

    _[IN_TABLE_BODY_MODE] = {};
    _[IN_TABLE_BODY_MODE][tokenizer$3.CHARACTER_TOKEN] = _[IN_TABLE_BODY_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = _[IN_TABLE_BODY_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
    _[IN_TABLE_BODY_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[IN_TABLE_BODY_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[IN_TABLE_BODY_MODE][tokenizer$3.START_TAG_TOKEN] = startTagInTableBody;
    _[IN_TABLE_BODY_MODE][tokenizer$3.END_TAG_TOKEN] = endTagInTableBody;
    _[IN_TABLE_BODY_MODE][tokenizer$3.EOF_TOKEN] = eofInBody;

    _[IN_ROW_MODE] = {};
    _[IN_ROW_MODE][tokenizer$3.CHARACTER_TOKEN] = _[IN_ROW_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = _[IN_ROW_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
    _[IN_ROW_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[IN_ROW_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[IN_ROW_MODE][tokenizer$3.START_TAG_TOKEN] = startTagInRow;
    _[IN_ROW_MODE][tokenizer$3.END_TAG_TOKEN] = endTagInRow;
    _[IN_ROW_MODE][tokenizer$3.EOF_TOKEN] = eofInBody;

    _[IN_CELL_MODE] = {};
    _[IN_CELL_MODE][tokenizer$3.CHARACTER_TOKEN] = characterInBody;
    _[IN_CELL_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = ignoreToken;
    _[IN_CELL_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
    _[IN_CELL_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[IN_CELL_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[IN_CELL_MODE][tokenizer$3.START_TAG_TOKEN] = startTagInCell;
    _[IN_CELL_MODE][tokenizer$3.END_TAG_TOKEN] = endTagInCell;
    _[IN_CELL_MODE][tokenizer$3.EOF_TOKEN] = eofInBody;

    _[IN_SELECT_MODE] = {};
    _[IN_SELECT_MODE][tokenizer$3.CHARACTER_TOKEN] = insertCharacters;
    _[IN_SELECT_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = ignoreToken;
    _[IN_SELECT_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
    _[IN_SELECT_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[IN_SELECT_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[IN_SELECT_MODE][tokenizer$3.START_TAG_TOKEN] = startTagInSelect;
    _[IN_SELECT_MODE][tokenizer$3.END_TAG_TOKEN] = endTagInSelect;
    _[IN_SELECT_MODE][tokenizer$3.EOF_TOKEN] = eofInBody;

    _[IN_SELECT_IN_TABLE_MODE] = {};
    _[IN_SELECT_IN_TABLE_MODE][tokenizer$3.CHARACTER_TOKEN] = insertCharacters;
    _[IN_SELECT_IN_TABLE_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = ignoreToken;
    _[IN_SELECT_IN_TABLE_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
    _[IN_SELECT_IN_TABLE_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[IN_SELECT_IN_TABLE_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[IN_SELECT_IN_TABLE_MODE][tokenizer$3.START_TAG_TOKEN] = startTagInSelectInTable;
    _[IN_SELECT_IN_TABLE_MODE][tokenizer$3.END_TAG_TOKEN] = endTagInSelectInTable;
    _[IN_SELECT_IN_TABLE_MODE][tokenizer$3.EOF_TOKEN] = eofInBody;

    _[IN_TEMPLATE_MODE] = {};
    _[IN_TEMPLATE_MODE][tokenizer$3.CHARACTER_TOKEN] = characterInBody;
    _[IN_TEMPLATE_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = ignoreToken;
    _[IN_TEMPLATE_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
    _[IN_TEMPLATE_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[IN_TEMPLATE_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[IN_TEMPLATE_MODE][tokenizer$3.START_TAG_TOKEN] = startTagInTemplate;
    _[IN_TEMPLATE_MODE][tokenizer$3.END_TAG_TOKEN] = endTagInTemplate;
    _[IN_TEMPLATE_MODE][tokenizer$3.EOF_TOKEN] = eofInTemplate;

    _[AFTER_BODY_MODE] = {};
    _[AFTER_BODY_MODE][tokenizer$3.CHARACTER_TOKEN] = _[AFTER_BODY_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = tokenAfterBody;
    _[AFTER_BODY_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
    _[AFTER_BODY_MODE][tokenizer$3.COMMENT_TOKEN] = appendCommentToRootHtmlElement;
    _[AFTER_BODY_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[AFTER_BODY_MODE][tokenizer$3.START_TAG_TOKEN] = startTagAfterBody;
    _[AFTER_BODY_MODE][tokenizer$3.END_TAG_TOKEN] = endTagAfterBody;
    _[AFTER_BODY_MODE][tokenizer$3.EOF_TOKEN] = stopParsing;

    _[IN_FRAMESET_MODE] = {};
    _[IN_FRAMESET_MODE][tokenizer$3.CHARACTER_TOKEN] = _[IN_FRAMESET_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = ignoreToken;
    _[IN_FRAMESET_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
    _[IN_FRAMESET_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[IN_FRAMESET_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[IN_FRAMESET_MODE][tokenizer$3.START_TAG_TOKEN] = startTagInFrameset;
    _[IN_FRAMESET_MODE][tokenizer$3.END_TAG_TOKEN] = endTagInFrameset;
    _[IN_FRAMESET_MODE][tokenizer$3.EOF_TOKEN] = stopParsing;

    _[AFTER_FRAMESET_MODE] = {};
    _[AFTER_FRAMESET_MODE][tokenizer$3.CHARACTER_TOKEN] = _[AFTER_FRAMESET_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = ignoreToken;
    _[AFTER_FRAMESET_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
    _[AFTER_FRAMESET_MODE][tokenizer$3.COMMENT_TOKEN] = appendComment;
    _[AFTER_FRAMESET_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[AFTER_FRAMESET_MODE][tokenizer$3.START_TAG_TOKEN] = startTagAfterFrameset;
    _[AFTER_FRAMESET_MODE][tokenizer$3.END_TAG_TOKEN] = endTagAfterFrameset;
    _[AFTER_FRAMESET_MODE][tokenizer$3.EOF_TOKEN] = stopParsing;

    _[AFTER_AFTER_BODY_MODE] = {};
    _[AFTER_AFTER_BODY_MODE][tokenizer$3.CHARACTER_TOKEN] = tokenAfterAfterBody;
    _[AFTER_AFTER_BODY_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = tokenAfterAfterBody;
    _[AFTER_AFTER_BODY_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
    _[AFTER_AFTER_BODY_MODE][tokenizer$3.COMMENT_TOKEN] = appendCommentToDocument;
    _[AFTER_AFTER_BODY_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[AFTER_AFTER_BODY_MODE][tokenizer$3.START_TAG_TOKEN] = startTagAfterAfterBody;
    _[AFTER_AFTER_BODY_MODE][tokenizer$3.END_TAG_TOKEN] = tokenAfterAfterBody;
    _[AFTER_AFTER_BODY_MODE][tokenizer$3.EOF_TOKEN] = stopParsing;

    _[AFTER_AFTER_FRAMESET_MODE] = {};
    _[AFTER_AFTER_FRAMESET_MODE][tokenizer$3.CHARACTER_TOKEN] = _[AFTER_AFTER_FRAMESET_MODE][tokenizer$3.NULL_CHARACTER_TOKEN] = ignoreToken;
    _[AFTER_AFTER_FRAMESET_MODE][tokenizer$3.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
    _[AFTER_AFTER_FRAMESET_MODE][tokenizer$3.COMMENT_TOKEN] = appendCommentToDocument;
    _[AFTER_AFTER_FRAMESET_MODE][tokenizer$3.DOCTYPE_TOKEN] = ignoreToken;
    _[AFTER_AFTER_FRAMESET_MODE][tokenizer$3.START_TAG_TOKEN] = startTagAfterAfterFrameset;
    _[AFTER_AFTER_FRAMESET_MODE][tokenizer$3.END_TAG_TOKEN] = ignoreToken;
    _[AFTER_AFTER_FRAMESET_MODE][tokenizer$3.EOF_TOKEN] = stopParsing;

    //Parser
    var Parser = module.exports = function (options) {
        this.options = merge_options(DEFAULT_OPTIONS, options);

        this.treeAdapter = this.options.treeAdapter;
        this.pendingScript = null;

        if (this.options.locationInfo) parser_mixin.assign(this);
    };

    // API
    Parser.prototype.parse = function (html) {
        var document = this.treeAdapter.createDocument();

        this._bootstrap(document, null);
        this.tokenizer.write(html, true);
        this._runParsingLoop(null, null);

        return document;
    };

    Parser.prototype.parseFragment = function (html, fragmentContext) {
        //NOTE: use <template> element as a fragment context if context element was not provided,
        //so we will parse in "forgiving" manner
        if (!fragmentContext) fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);

        //NOTE: create fake element which will be used as 'document' for fragment parsing.
        //This is important for jsdom there 'document' can't be recreated, therefore
        //fragment parsing causes messing of the main `document`.
        var documentMock = this.treeAdapter.createElement('documentmock', NS.HTML, []);

        this._bootstrap(documentMock, fragmentContext);

        if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE) this._pushTmplInsertionMode(IN_TEMPLATE_MODE);

        this._initTokenizerForFragmentParsing();
        this._insertFakeRootElement();
        this._resetInsertionMode();
        this._findFormInFragmentContext();
        this.tokenizer.write(html, true);
        this._runParsingLoop(null, null);

        var rootElement = this.treeAdapter.getFirstChild(documentMock),
            fragment = this.treeAdapter.createDocumentFragment();

        this._adoptNodes(rootElement, fragment);

        return fragment;
    };

    //Bootstrap parser
    Parser.prototype._bootstrap = function (document, fragmentContext) {
        this.tokenizer = new tokenizer$3(this.options);

        this.stopped = false;

        this.insertionMode = INITIAL_MODE;
        this.originalInsertionMode = '';

        this.document = document;
        this.fragmentContext = fragmentContext;

        this.headElement = null;
        this.formElement = null;

        this.openElements = new open_element_stack(this.document, this.treeAdapter);
        this.activeFormattingElements = new formatting_element_list(this.treeAdapter);

        this.tmplInsertionModeStack = [];
        this.tmplInsertionModeStackTop = -1;
        this.currentTmplInsertionMode = null;

        this.pendingCharacterTokens = [];
        this.hasNonWhitespacePendingCharacterToken = false;

        this.framesetOk = true;
        this.skipNextNewLine = false;
        this.fosterParentingEnabled = false;
    };

    //Parsing loop
    Parser.prototype._runParsingLoop = function (writeCallback, scriptHandler) {
        while (!this.stopped) {
            this._setupTokenizerCDATAMode();

            var token = this.tokenizer.getNextToken();

            if (token.type === tokenizer$3.HIBERNATION_TOKEN) break;

            if (this.skipNextNewLine) {
                this.skipNextNewLine = false;

                if (token.type === tokenizer$3.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\n') {
                    if (token.chars.length === 1) continue;

                    token.chars = token.chars.substr(1);
                }
            }

            this._processInputToken(token);

            if (scriptHandler && this.pendingScript) break;
        }

        if (scriptHandler && this.pendingScript) {
            var script = this.pendingScript;

            this.pendingScript = null;

            scriptHandler(script);

            return;
        }

        if (writeCallback) writeCallback();
    };

    //Text parsing
    Parser.prototype._setupTokenizerCDATAMode = function () {
        var current = this._getAdjustedCurrentElement();

        this.tokenizer.allowCDATA = current && current !== this.document && this.treeAdapter.getNamespaceURI(current) !== NS.HTML && !this._isIntegrationPoint(current);
    };

    Parser.prototype._switchToTextParsing = function (currentToken, nextTokenizerState) {
        this._insertElement(currentToken, NS.HTML);
        this.tokenizer.state = nextTokenizerState;
        this.originalInsertionMode = this.insertionMode;
        this.insertionMode = TEXT_MODE;
    };

    //Fragment parsing
    Parser.prototype._getAdjustedCurrentElement = function () {
        return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
    };

    Parser.prototype._findFormInFragmentContext = function () {
        var node = this.fragmentContext;

        do {
            if (this.treeAdapter.getTagName(node) === $.FORM) {
                this.formElement = node;
                break;
            }

            node = this.treeAdapter.getParentNode(node);
        } while (node);
    };

    Parser.prototype._initTokenizerForFragmentParsing = function () {
        if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS.HTML) {
            var tn = this.treeAdapter.getTagName(this.fragmentContext);

            if (tn === $.TITLE || tn === $.TEXTAREA) this.tokenizer.state = tokenizer$3.MODE.RCDATA;else if (tn === $.STYLE || tn === $.XMP || tn === $.IFRAME || tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) this.tokenizer.state = tokenizer$3.MODE.RAWTEXT;else if (tn === $.SCRIPT) this.tokenizer.state = tokenizer$3.MODE.SCRIPT_DATA;else if (tn === $.PLAINTEXT) this.tokenizer.state = tokenizer$3.MODE.PLAINTEXT;
        }
    };

    //Tree mutation
    Parser.prototype._setDocumentType = function (token) {
        this.treeAdapter.setDocumentType(this.document, token.name, token.publicId, token.systemId);
    };

    Parser.prototype._attachElementToTree = function (element) {
        if (this._shouldFosterParentOnInsertion()) this._fosterParentElement(element);else {
            var parent = this.openElements.currentTmplContent || this.openElements.current;

            this.treeAdapter.appendChild(parent, element);
        }
    };

    Parser.prototype._appendElement = function (token, namespaceURI) {
        var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

        this._attachElementToTree(element);
    };

    Parser.prototype._insertElement = function (token, namespaceURI) {
        var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

        this._attachElementToTree(element);
        this.openElements.push(element);
    };

    Parser.prototype._insertFakeElement = function (tagName) {
        var element = this.treeAdapter.createElement(tagName, NS.HTML, []);

        this._attachElementToTree(element);
        this.openElements.push(element);
    };

    Parser.prototype._insertTemplate = function (token) {
        var tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs),
            content = this.treeAdapter.createDocumentFragment();

        this.treeAdapter.setTemplateContent(tmpl, content);
        this._attachElementToTree(tmpl);
        this.openElements.push(tmpl);
    };

    Parser.prototype._insertFakeRootElement = function () {
        var element = this.treeAdapter.createElement($.HTML, NS.HTML, []);

        this.treeAdapter.appendChild(this.openElements.current, element);
        this.openElements.push(element);
    };

    Parser.prototype._appendCommentNode = function (token, parent) {
        var commentNode = this.treeAdapter.createCommentNode(token.data);

        this.treeAdapter.appendChild(parent, commentNode);
    };

    Parser.prototype._insertCharacters = function (token) {
        if (this._shouldFosterParentOnInsertion()) this._fosterParentText(token.chars);else {
            var parent = this.openElements.currentTmplContent || this.openElements.current;

            this.treeAdapter.insertText(parent, token.chars);
        }
    };

    Parser.prototype._adoptNodes = function (donor, recipient) {
        while (true) {
            var child = this.treeAdapter.getFirstChild(donor);

            if (!child) break;

            this.treeAdapter.detachNode(child);
            this.treeAdapter.appendChild(recipient, child);
        }
    };

    //Token processing
    Parser.prototype._shouldProcessTokenInForeignContent = function (token) {
        var current = this._getAdjustedCurrentElement();

        if (!current || current === this.document) return false;

        var ns = this.treeAdapter.getNamespaceURI(current);

        if (ns === NS.HTML) return false;

        if (this.treeAdapter.getTagName(current) === $.ANNOTATION_XML && ns === NS.MATHML && token.type === tokenizer$3.START_TAG_TOKEN && token.tagName === $.SVG) return false;

        var isCharacterToken = token.type === tokenizer$3.CHARACTER_TOKEN || token.type === tokenizer$3.NULL_CHARACTER_TOKEN || token.type === tokenizer$3.WHITESPACE_CHARACTER_TOKEN,
            isMathMLTextStartTag = token.type === tokenizer$3.START_TAG_TOKEN && token.tagName !== $.MGLYPH && token.tagName !== $.MALIGNMARK;

        if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS.MATHML)) return false;

        if ((token.type === tokenizer$3.START_TAG_TOKEN || isCharacterToken) && this._isIntegrationPoint(current, NS.HTML)) return false;

        return token.type !== tokenizer$3.EOF_TOKEN;
    };

    Parser.prototype._processToken = function (token) {
        _[this.insertionMode][token.type](this, token);
    };

    Parser.prototype._processTokenInBodyMode = function (token) {
        _[IN_BODY_MODE][token.type](this, token);
    };

    Parser.prototype._processTokenInForeignContent = function (token) {
        if (token.type === tokenizer$3.CHARACTER_TOKEN) characterInForeignContent(this, token);else if (token.type === tokenizer$3.NULL_CHARACTER_TOKEN) nullCharacterInForeignContent(this, token);else if (token.type === tokenizer$3.WHITESPACE_CHARACTER_TOKEN) insertCharacters(this, token);else if (token.type === tokenizer$3.COMMENT_TOKEN) appendComment(this, token);else if (token.type === tokenizer$3.START_TAG_TOKEN) startTagInForeignContent(this, token);else if (token.type === tokenizer$3.END_TAG_TOKEN) endTagInForeignContent(this, token);
    };

    Parser.prototype._processInputToken = function (token) {
        if (this._shouldProcessTokenInForeignContent(token)) this._processTokenInForeignContent(token);else this._processToken(token);
    };

    //Integration points
    Parser.prototype._isIntegrationPoint = function (element, foreignNS) {
        var tn = this.treeAdapter.getTagName(element),
            ns = this.treeAdapter.getNamespaceURI(element),
            attrs = this.treeAdapter.getAttrList(element);

        return foreign_content.isIntegrationPoint(tn, ns, attrs, foreignNS);
    };

    //Active formatting elements reconstruction
    Parser.prototype._reconstructActiveFormattingElements = function () {
        var listLength = this.activeFormattingElements.length;

        if (listLength) {
            var unopenIdx = listLength,
                entry = null;

            do {
                unopenIdx--;
                entry = this.activeFormattingElements.entries[unopenIdx];

                if (entry.type === formatting_element_list.MARKER_ENTRY || this.openElements.contains(entry.element)) {
                    unopenIdx++;
                    break;
                }
            } while (unopenIdx > 0);

            for (var i = unopenIdx; i < listLength; i++) {
                entry = this.activeFormattingElements.entries[i];
                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
                entry.element = this.openElements.current;
            }
        }
    };

    //Close elements
    Parser.prototype._closeTableCell = function () {
        this.openElements.generateImpliedEndTags();
        this.openElements.popUntilTableCellPopped();
        this.activeFormattingElements.clearToLastMarker();
        this.insertionMode = IN_ROW_MODE;
    };

    Parser.prototype._closePElement = function () {
        this.openElements.generateImpliedEndTagsWithExclusion($.P);
        this.openElements.popUntilTagNamePopped($.P);
    };

    //Insertion modes
    Parser.prototype._resetInsertionMode = function () {
        for (var i = this.openElements.stackTop, last = false; i >= 0; i--) {
            var element = this.openElements.items[i];

            if (i === 0) {
                last = true;

                if (this.fragmentContext) element = this.fragmentContext;
            }

            var tn = this.treeAdapter.getTagName(element),
                newInsertionMode = INSERTION_MODE_RESET_MAP[tn];

            if (newInsertionMode) {
                this.insertionMode = newInsertionMode;
                break;
            } else if (!last && (tn === $.TD || tn === $.TH)) {
                this.insertionMode = IN_CELL_MODE;
                break;
            } else if (!last && tn === $.HEAD) {
                this.insertionMode = IN_HEAD_MODE;
                break;
            } else if (tn === $.SELECT) {
                this._resetInsertionModeForSelect(i);
                break;
            } else if (tn === $.TEMPLATE) {
                this.insertionMode = this.currentTmplInsertionMode;
                break;
            } else if (tn === $.HTML) {
                this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
                break;
            } else if (last) {
                this.insertionMode = IN_BODY_MODE;
                break;
            }
        }
    };

    Parser.prototype._resetInsertionModeForSelect = function (selectIdx) {
        if (selectIdx > 0) {
            for (var i = selectIdx - 1; i > 0; i--) {
                var ancestor = this.openElements.items[i],
                    tn = this.treeAdapter.getTagName(ancestor);

                if (tn === $.TEMPLATE) break;else if (tn === $.TABLE) {
                    this.insertionMode = IN_SELECT_IN_TABLE_MODE;
                    return;
                }
            }
        }

        this.insertionMode = IN_SELECT_MODE;
    };

    Parser.prototype._pushTmplInsertionMode = function (mode) {
        this.tmplInsertionModeStack.push(mode);
        this.tmplInsertionModeStackTop++;
        this.currentTmplInsertionMode = mode;
    };

    Parser.prototype._popTmplInsertionMode = function () {
        this.tmplInsertionModeStack.pop();
        this.tmplInsertionModeStackTop--;
        this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
    };

    //Foster parenting
    Parser.prototype._isElementCausesFosterParenting = function (element) {
        var tn = this.treeAdapter.getTagName(element);

        return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR;
    };

    Parser.prototype._shouldFosterParentOnInsertion = function () {
        return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
    };

    Parser.prototype._findFosterParentingLocation = function () {
        var location = {
            parent: null,
            beforeElement: null
        };

        for (var i = this.openElements.stackTop; i >= 0; i--) {
            var openElement = this.openElements.items[i],
                tn = this.treeAdapter.getTagName(openElement),
                ns = this.treeAdapter.getNamespaceURI(openElement);

            if (tn === $.TEMPLATE && ns === NS.HTML) {
                location.parent = this.treeAdapter.getTemplateContent(openElement);
                break;
            } else if (tn === $.TABLE) {
                location.parent = this.treeAdapter.getParentNode(openElement);

                if (location.parent) location.beforeElement = openElement;else location.parent = this.openElements.items[i - 1];

                break;
            }
        }

        if (!location.parent) location.parent = this.openElements.items[0];

        return location;
    };

    Parser.prototype._fosterParentElement = function (element) {
        var location = this._findFosterParentingLocation();

        if (location.beforeElement) this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);else this.treeAdapter.appendChild(location.parent, element);
    };

    Parser.prototype._fosterParentText = function (chars) {
        var location = this._findFosterParentingLocation();

        if (location.beforeElement) this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement);else this.treeAdapter.insertText(location.parent, chars);
    };

    //Special elements
    Parser.prototype._isSpecialElement = function (element) {
        var tn = this.treeAdapter.getTagName(element),
            ns = this.treeAdapter.getNamespaceURI(element);

        return html$4.SPECIAL_ELEMENTS[ns][tn];
    };

    //Adoption agency algorithm
    //(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)
    //------------------------------------------------------------------

    //Steps 5-8 of the algorithm
    function aaObtainFormattingElementEntry(p, token) {
        var formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);

        if (formattingElementEntry) {
            if (!p.openElements.contains(formattingElementEntry.element)) {
                p.activeFormattingElements.removeEntry(formattingElementEntry);
                formattingElementEntry = null;
            } else if (!p.openElements.hasInScope(token.tagName)) formattingElementEntry = null;
        } else genericEndTagInBody(p, token);

        return formattingElementEntry;
    }

    //Steps 9 and 10 of the algorithm
    function aaObtainFurthestBlock(p, formattingElementEntry) {
        var furthestBlock = null;

        for (var i = p.openElements.stackTop; i >= 0; i--) {
            var element = p.openElements.items[i];

            if (element === formattingElementEntry.element) break;

            if (p._isSpecialElement(element)) furthestBlock = element;
        }

        if (!furthestBlock) {
            p.openElements.popUntilElementPopped(formattingElementEntry.element);
            p.activeFormattingElements.removeEntry(formattingElementEntry);
        }

        return furthestBlock;
    }

    //Step 13 of the algorithm
    function aaInnerLoop(p, furthestBlock, formattingElement) {
        var lastElement = furthestBlock,
            nextElement = p.openElements.getCommonAncestor(furthestBlock);

        for (var i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {
            //NOTE: store next element for the next loop iteration (it may be deleted from the stack by step 9.5)
            nextElement = p.openElements.getCommonAncestor(element);

            var elementEntry = p.activeFormattingElements.getElementEntry(element),
                counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER,
                shouldRemoveFromOpenElements = !elementEntry || counterOverflow;

            if (shouldRemoveFromOpenElements) {
                if (counterOverflow) p.activeFormattingElements.removeEntry(elementEntry);

                p.openElements.remove(element);
            } else {
                element = aaRecreateElementFromEntry(p, elementEntry);

                if (lastElement === furthestBlock) p.activeFormattingElements.bookmark = elementEntry;

                p.treeAdapter.detachNode(lastElement);
                p.treeAdapter.appendChild(element, lastElement);
                lastElement = element;
            }
        }

        return lastElement;
    }

    //Step 13.7 of the algorithm
    function aaRecreateElementFromEntry(p, elementEntry) {
        var ns = p.treeAdapter.getNamespaceURI(elementEntry.element),
            newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);

        p.openElements.replace(elementEntry.element, newElement);
        elementEntry.element = newElement;

        return newElement;
    }

    //Step 14 of the algorithm
    function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
        if (p._isElementCausesFosterParenting(commonAncestor)) p._fosterParentElement(lastElement);else {
            var tn = p.treeAdapter.getTagName(commonAncestor),
                ns = p.treeAdapter.getNamespaceURI(commonAncestor);

            if (tn === $.TEMPLATE && ns === NS.HTML) commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);

            p.treeAdapter.appendChild(commonAncestor, lastElement);
        }
    }

    //Steps 15-19 of the algorithm
    function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
        var ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element),
            token = formattingElementEntry.token,
            newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);

        p._adoptNodes(furthestBlock, newElement);
        p.treeAdapter.appendChild(furthestBlock, newElement);

        p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
        p.activeFormattingElements.removeEntry(formattingElementEntry);

        p.openElements.remove(formattingElementEntry.element);
        p.openElements.insertAfter(furthestBlock, newElement);
    }

    //Algorithm entry point
    function callAdoptionAgency(p, token) {
        var formattingElementEntry;

        for (var i = 0; i < AA_OUTER_LOOP_ITER; i++) {
            formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);

            if (!formattingElementEntry) break;

            var furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);

            if (!furthestBlock) break;

            p.activeFormattingElements.bookmark = formattingElementEntry;

            var lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element),
                commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);

            p.treeAdapter.detachNode(lastElement);
            aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
            aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
        }
    }

    //Generic token handlers
    //------------------------------------------------------------------
    function ignoreToken() {
        //NOTE: do nothing =)
    }

    function appendComment(p, token) {
        p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);
    }

    function appendCommentToRootHtmlElement(p, token) {
        p._appendCommentNode(token, p.openElements.items[0]);
    }

    function appendCommentToDocument(p, token) {
        p._appendCommentNode(token, p.document);
    }

    function insertCharacters(p, token) {
        p._insertCharacters(token);
    }

    function stopParsing(p) {
        p.stopped = true;
    }

    //12.2.5.4.1 The "initial" insertion mode
    //------------------------------------------------------------------
    function doctypeInInitialMode(p, token) {
        p._setDocumentType(token);

        if (token.forceQuirks || doctype$1.isQuirks(token.name, token.publicId, token.systemId)) p.treeAdapter.setQuirksMode(p.document);

        p.insertionMode = BEFORE_HTML_MODE;
    }

    function tokenInInitialMode(p, token) {
        p.treeAdapter.setQuirksMode(p.document);
        p.insertionMode = BEFORE_HTML_MODE;
        p._processToken(token);
    }

    //12.2.5.4.2 The "before html" insertion mode
    //------------------------------------------------------------------
    function startTagBeforeHtml(p, token) {
        if (token.tagName === $.HTML) {
            p._insertElement(token, NS.HTML);
            p.insertionMode = BEFORE_HEAD_MODE;
        } else tokenBeforeHtml(p, token);
    }

    function endTagBeforeHtml(p, token) {
        var tn = token.tagName;

        if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) tokenBeforeHtml(p, token);
    }

    function tokenBeforeHtml(p, token) {
        p._insertFakeRootElement();
        p.insertionMode = BEFORE_HEAD_MODE;
        p._processToken(token);
    }

    //12.2.5.4.3 The "before head" insertion mode
    //------------------------------------------------------------------
    function startTagBeforeHead(p, token) {
        var tn = token.tagName;

        if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.HEAD) {
            p._insertElement(token, NS.HTML);
            p.headElement = p.openElements.current;
            p.insertionMode = IN_HEAD_MODE;
        } else tokenBeforeHead(p, token);
    }

    function endTagBeforeHead(p, token) {
        var tn = token.tagName;

        if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) tokenBeforeHead(p, token);
    }

    function tokenBeforeHead(p, token) {
        p._insertFakeElement($.HEAD);
        p.headElement = p.openElements.current;
        p.insertionMode = IN_HEAD_MODE;
        p._processToken(token);
    }

    //12.2.5.4.4 The "in head" insertion mode
    //------------------------------------------------------------------
    function startTagInHead(p, token) {
        var tn = token.tagName;

        if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META) p._appendElement(token, NS.HTML);else if (tn === $.TITLE) p._switchToTextParsing(token, tokenizer$3.MODE.RCDATA);

        //NOTE: here we assume that we always act as an interactive user agent with enabled scripting, so we parse
        //<noscript> as a rawtext.
        else if (tn === $.NOSCRIPT || tn === $.NOFRAMES || tn === $.STYLE) p._switchToTextParsing(token, tokenizer$3.MODE.RAWTEXT);else if (tn === $.SCRIPT) p._switchToTextParsing(token, tokenizer$3.MODE.SCRIPT_DATA);else if (tn === $.TEMPLATE) {
                p._insertTemplate(token, NS.HTML);
                p.activeFormattingElements.insertMarker();
                p.framesetOk = false;
                p.insertionMode = IN_TEMPLATE_MODE;
                p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
            } else if (tn !== $.HEAD) tokenInHead(p, token);
    }

    function endTagInHead(p, token) {
        var tn = token.tagName;

        if (tn === $.HEAD) {
            p.openElements.pop();
            p.insertionMode = AFTER_HEAD_MODE;
        } else if (tn === $.BODY || tn === $.BR || tn === $.HTML) tokenInHead(p, token);else if (tn === $.TEMPLATE && p.openElements.tmplCount > 0) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped($.TEMPLATE);
            p.activeFormattingElements.clearToLastMarker();
            p._popTmplInsertionMode();
            p._resetInsertionMode();
        }
    }

    function tokenInHead(p, token) {
        p.openElements.pop();
        p.insertionMode = AFTER_HEAD_MODE;
        p._processToken(token);
    }

    //12.2.5.4.6 The "after head" insertion mode
    //------------------------------------------------------------------
    function startTagAfterHead(p, token) {
        var tn = token.tagName;

        if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.BODY) {
            p._insertElement(token, NS.HTML);
            p.framesetOk = false;
            p.insertionMode = IN_BODY_MODE;
        } else if (tn === $.FRAMESET) {
            p._insertElement(token, NS.HTML);
            p.insertionMode = IN_FRAMESET_MODE;
        } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
            p.openElements.push(p.headElement);
            startTagInHead(p, token);
            p.openElements.remove(p.headElement);
        } else if (tn !== $.HEAD) tokenAfterHead(p, token);
    }

    function endTagAfterHead(p, token) {
        var tn = token.tagName;

        if (tn === $.BODY || tn === $.HTML || tn === $.BR) tokenAfterHead(p, token);else if (tn === $.TEMPLATE) endTagInHead(p, token);
    }

    function tokenAfterHead(p, token) {
        p._insertFakeElement($.BODY);
        p.insertionMode = IN_BODY_MODE;
        p._processToken(token);
    }

    //12.2.5.4.7 The "in body" insertion mode
    //------------------------------------------------------------------
    function whitespaceCharacterInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertCharacters(token);
    }

    function characterInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertCharacters(token);
        p.framesetOk = false;
    }

    function htmlStartTagInBody(p, token) {
        if (p.openElements.tmplCount === 0) p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
    }

    function bodyStartTagInBody(p, token) {
        var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

        if (bodyElement && p.openElements.tmplCount === 0) {
            p.framesetOk = false;
            p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
        }
    }

    function framesetStartTagInBody(p, token) {
        var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

        if (p.framesetOk && bodyElement) {
            p.treeAdapter.detachNode(bodyElement);
            p.openElements.popAllUpToHtmlElement();
            p._insertElement(token, NS.HTML);
            p.insertionMode = IN_FRAMESET_MODE;
        }
    }

    function addressStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) p._closePElement();

        p._insertElement(token, NS.HTML);
    }

    function numberedHeaderStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) p._closePElement();

        var tn = p.openElements.currentTagName;

        if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) p.openElements.pop();

        p._insertElement(token, NS.HTML);
    }

    function preStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) p._closePElement();

        p._insertElement(token, NS.HTML);
        //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
        //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)
        p.skipNextNewLine = true;
        p.framesetOk = false;
    }

    function formStartTagInBody(p, token) {
        var inTemplate = p.openElements.tmplCount > 0;

        if (!p.formElement || inTemplate) {
            if (p.openElements.hasInButtonScope($.P)) p._closePElement();

            p._insertElement(token, NS.HTML);

            if (!inTemplate) p.formElement = p.openElements.current;
        }
    }

    function listItemStartTagInBody(p, token) {
        p.framesetOk = false;

        var tn = token.tagName;

        for (var i = p.openElements.stackTop; i >= 0; i--) {
            var element = p.openElements.items[i],
                elementTn = p.treeAdapter.getTagName(element),
                closeTn = null;

            if (tn === $.LI && elementTn === $.LI) closeTn = $.LI;else if ((tn === $.DD || tn === $.DT) && (elementTn === $.DD || elementTn === $.DT)) closeTn = elementTn;

            if (closeTn) {
                p.openElements.generateImpliedEndTagsWithExclusion(closeTn);
                p.openElements.popUntilTagNamePopped(closeTn);
                break;
            }

            if (elementTn !== $.ADDRESS && elementTn !== $.DIV && elementTn !== $.P && p._isSpecialElement(element)) break;
        }

        if (p.openElements.hasInButtonScope($.P)) p._closePElement();

        p._insertElement(token, NS.HTML);
    }

    function plaintextStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) p._closePElement();

        p._insertElement(token, NS.HTML);
        p.tokenizer.state = tokenizer$3.MODE.PLAINTEXT;
    }

    function buttonStartTagInBody(p, token) {
        if (p.openElements.hasInScope($.BUTTON)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped($.BUTTON);
        }

        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
    }

    function aStartTagInBody(p, token) {
        var activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);

        if (activeElementEntry) {
            callAdoptionAgency(p, token);
            p.openElements.remove(activeElementEntry.element);
            p.activeFormattingElements.removeEntry(activeElementEntry);
        }

        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.pushElement(p.openElements.current, token);
    }

    function bStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.pushElement(p.openElements.current, token);
    }

    function nobrStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();

        if (p.openElements.hasInScope($.NOBR)) {
            callAdoptionAgency(p, token);
            p._reconstructActiveFormattingElements();
        }

        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.pushElement(p.openElements.current, token);
    }

    function appletStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.insertMarker();
        p.framesetOk = false;
    }

    function tableStartTagInBody(p, token) {
        if (!p.treeAdapter.isQuirksMode(p.document) && p.openElements.hasInButtonScope($.P)) p._closePElement();

        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
        p.insertionMode = IN_TABLE_MODE;
    }

    function areaStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._appendElement(token, NS.HTML);
        p.framesetOk = false;
    }

    function inputStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._appendElement(token, NS.HTML);

        var inputType = tokenizer$3.getTokenAttr(token, ATTRS.TYPE);

        if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) p.framesetOk = false;
    }

    function paramStartTagInBody(p, token) {
        p._appendElement(token, NS.HTML);
    }

    function hrStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) p._closePElement();

        if (p.openElements.currentTagName === $.MENUITEM) p.openElements.pop();

        p._appendElement(token, NS.HTML);
        p.framesetOk = false;
    }

    function imageStartTagInBody(p, token) {
        token.tagName = $.IMG;
        areaStartTagInBody(p, token);
    }

    function textareaStartTagInBody(p, token) {
        p._insertElement(token, NS.HTML);
        //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
        //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)
        p.skipNextNewLine = true;
        p.tokenizer.state = tokenizer$3.MODE.RCDATA;
        p.originalInsertionMode = p.insertionMode;
        p.framesetOk = false;
        p.insertionMode = TEXT_MODE;
    }

    function xmpStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) p._closePElement();

        p._reconstructActiveFormattingElements();
        p.framesetOk = false;
        p._switchToTextParsing(token, tokenizer$3.MODE.RAWTEXT);
    }

    function iframeStartTagInBody(p, token) {
        p.framesetOk = false;
        p._switchToTextParsing(token, tokenizer$3.MODE.RAWTEXT);
    }

    //NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse
    //<noembed> as a rawtext.
    function noembedStartTagInBody(p, token) {
        p._switchToTextParsing(token, tokenizer$3.MODE.RAWTEXT);
    }

    function selectStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;

        if (p.insertionMode === IN_TABLE_MODE || p.insertionMode === IN_CAPTION_MODE || p.insertionMode === IN_TABLE_BODY_MODE || p.insertionMode === IN_ROW_MODE || p.insertionMode === IN_CELL_MODE) p.insertionMode = IN_SELECT_IN_TABLE_MODE;else p.insertionMode = IN_SELECT_MODE;
    }

    function optgroupStartTagInBody(p, token) {
        if (p.openElements.currentTagName === $.OPTION) p.openElements.pop();

        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
    }

    function rbStartTagInBody(p, token) {
        if (p.openElements.hasInScope($.RUBY)) p.openElements.generateImpliedEndTags();

        p._insertElement(token, NS.HTML);
    }

    function rtStartTagInBody(p, token) {
        if (p.openElements.hasInScope($.RUBY)) p.openElements.generateImpliedEndTagsWithExclusion($.RTC);

        p._insertElement(token, NS.HTML);
    }

    function menuitemStartTagInBody(p, token) {
        if (p.openElements.currentTagName === $.MENUITEM) p.openElements.pop();

        // TODO needs clarification, see https://github.com/whatwg/html/pull/907/files#r73505877
        p._reconstructActiveFormattingElements();

        p._insertElement(token, NS.HTML);
    }

    function menuStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) p._closePElement();

        if (p.openElements.currentTagName === $.MENUITEM) p.openElements.pop();

        p._insertElement(token, NS.HTML);
    }

    function mathStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();

        foreign_content.adjustTokenMathMLAttrs(token);
        foreign_content.adjustTokenXMLAttrs(token);

        if (token.selfClosing) p._appendElement(token, NS.MATHML);else p._insertElement(token, NS.MATHML);
    }

    function svgStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();

        foreign_content.adjustTokenSVGAttrs(token);
        foreign_content.adjustTokenXMLAttrs(token);

        if (token.selfClosing) p._appendElement(token, NS.SVG);else p._insertElement(token, NS.SVG);
    }

    function genericStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
    }

    //OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
    //It's faster than using dictionary.
    function startTagInBody(p, token) {
        var tn = token.tagName;

        switch (tn.length) {
            case 1:
                if (tn === $.I || tn === $.S || tn === $.B || tn === $.U) bStartTagInBody(p, token);else if (tn === $.P) addressStartTagInBody(p, token);else if (tn === $.A) aStartTagInBody(p, token);else genericStartTagInBody(p, token);

                break;

            case 2:
                if (tn === $.DL || tn === $.OL || tn === $.UL) addressStartTagInBody(p, token);else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) numberedHeaderStartTagInBody(p, token);else if (tn === $.LI || tn === $.DD || tn === $.DT) listItemStartTagInBody(p, token);else if (tn === $.EM || tn === $.TT) bStartTagInBody(p, token);else if (tn === $.BR) areaStartTagInBody(p, token);else if (tn === $.HR) hrStartTagInBody(p, token);else if (tn === $.RB) rbStartTagInBody(p, token);else if (tn === $.RT || tn === $.RP) rtStartTagInBody(p, token);else if (tn !== $.TH && tn !== $.TD && tn !== $.TR) genericStartTagInBody(p, token);

                break;

            case 3:
                if (tn === $.DIV || tn === $.DIR || tn === $.NAV) addressStartTagInBody(p, token);else if (tn === $.PRE) preStartTagInBody(p, token);else if (tn === $.BIG) bStartTagInBody(p, token);else if (tn === $.IMG || tn === $.WBR) areaStartTagInBody(p, token);else if (tn === $.XMP) xmpStartTagInBody(p, token);else if (tn === $.SVG) svgStartTagInBody(p, token);else if (tn === $.RTC) rbStartTagInBody(p, token);else if (tn !== $.COL) genericStartTagInBody(p, token);

                break;

            case 4:
                if (tn === $.HTML) htmlStartTagInBody(p, token);else if (tn === $.BASE || tn === $.LINK || tn === $.META) startTagInHead(p, token);else if (tn === $.BODY) bodyStartTagInBody(p, token);else if (tn === $.MAIN) addressStartTagInBody(p, token);else if (tn === $.FORM) formStartTagInBody(p, token);else if (tn === $.CODE || tn === $.FONT) bStartTagInBody(p, token);else if (tn === $.NOBR) nobrStartTagInBody(p, token);else if (tn === $.AREA) areaStartTagInBody(p, token);else if (tn === $.MATH) mathStartTagInBody(p, token);else if (tn === $.MENU) menuStartTagInBody(p, token);else if (tn !== $.HEAD) genericStartTagInBody(p, token);

                break;

            case 5:
                if (tn === $.STYLE || tn === $.TITLE) startTagInHead(p, token);else if (tn === $.ASIDE) addressStartTagInBody(p, token);else if (tn === $.SMALL) bStartTagInBody(p, token);else if (tn === $.TABLE) tableStartTagInBody(p, token);else if (tn === $.EMBED) areaStartTagInBody(p, token);else if (tn === $.INPUT) inputStartTagInBody(p, token);else if (tn === $.PARAM || tn === $.TRACK) paramStartTagInBody(p, token);else if (tn === $.IMAGE) imageStartTagInBody(p, token);else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD) genericStartTagInBody(p, token);

                break;

            case 6:
                if (tn === $.SCRIPT) startTagInHead(p, token);else if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP) addressStartTagInBody(p, token);else if (tn === $.BUTTON) buttonStartTagInBody(p, token);else if (tn === $.STRIKE || tn === $.STRONG) bStartTagInBody(p, token);else if (tn === $.APPLET || tn === $.OBJECT) appletStartTagInBody(p, token);else if (tn === $.KEYGEN) areaStartTagInBody(p, token);else if (tn === $.SOURCE) paramStartTagInBody(p, token);else if (tn === $.IFRAME) iframeStartTagInBody(p, token);else if (tn === $.SELECT) selectStartTagInBody(p, token);else if (tn === $.OPTION) optgroupStartTagInBody(p, token);else genericStartTagInBody(p, token);

                break;

            case 7:
                if (tn === $.BGSOUND) startTagInHead(p, token);else if (tn === $.DETAILS || tn === $.ADDRESS || tn === $.ARTICLE || tn === $.SECTION || tn === $.SUMMARY) addressStartTagInBody(p, token);else if (tn === $.LISTING) preStartTagInBody(p, token);else if (tn === $.MARQUEE) appletStartTagInBody(p, token);else if (tn === $.NOEMBED) noembedStartTagInBody(p, token);else if (tn !== $.CAPTION) genericStartTagInBody(p, token);

                break;

            case 8:
                if (tn === $.BASEFONT) startTagInHead(p, token);else if (tn === $.MENUITEM) menuitemStartTagInBody(p, token);else if (tn === $.FRAMESET) framesetStartTagInBody(p, token);else if (tn === $.FIELDSET) addressStartTagInBody(p, token);else if (tn === $.TEXTAREA) textareaStartTagInBody(p, token);else if (tn === $.TEMPLATE) startTagInHead(p, token);else if (tn === $.NOSCRIPT) noembedStartTagInBody(p, token);else if (tn === $.OPTGROUP) optgroupStartTagInBody(p, token);else if (tn !== $.COLGROUP) genericStartTagInBody(p, token);

                break;

            case 9:
                if (tn === $.PLAINTEXT) plaintextStartTagInBody(p, token);else genericStartTagInBody(p, token);

                break;

            case 10:
                if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) addressStartTagInBody(p, token);else genericStartTagInBody(p, token);

                break;

            default:
                genericStartTagInBody(p, token);
        }
    }

    function bodyEndTagInBody(p) {
        if (p.openElements.hasInScope($.BODY)) p.insertionMode = AFTER_BODY_MODE;
    }

    function htmlEndTagInBody(p, token) {
        if (p.openElements.hasInScope($.BODY)) {
            p.insertionMode = AFTER_BODY_MODE;
            p._processToken(token);
        }
    }

    function addressEndTagInBody(p, token) {
        var tn = token.tagName;

        if (p.openElements.hasInScope(tn)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped(tn);
        }
    }

    function formEndTagInBody(p) {
        var inTemplate = p.openElements.tmplCount > 0,
            formElement = p.formElement;

        if (!inTemplate) p.formElement = null;

        if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
            p.openElements.generateImpliedEndTags();

            if (inTemplate) p.openElements.popUntilTagNamePopped($.FORM);else p.openElements.remove(formElement);
        }
    }

    function pEndTagInBody(p) {
        if (!p.openElements.hasInButtonScope($.P)) p._insertFakeElement($.P);

        p._closePElement();
    }

    function liEndTagInBody(p) {
        if (p.openElements.hasInListItemScope($.LI)) {
            p.openElements.generateImpliedEndTagsWithExclusion($.LI);
            p.openElements.popUntilTagNamePopped($.LI);
        }
    }

    function ddEndTagInBody(p, token) {
        var tn = token.tagName;

        if (p.openElements.hasInScope(tn)) {
            p.openElements.generateImpliedEndTagsWithExclusion(tn);
            p.openElements.popUntilTagNamePopped(tn);
        }
    }

    function numberedHeaderEndTagInBody(p) {
        if (p.openElements.hasNumberedHeaderInScope()) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilNumberedHeaderPopped();
        }
    }

    function appletEndTagInBody(p, token) {
        var tn = token.tagName;

        if (p.openElements.hasInScope(tn)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped(tn);
            p.activeFormattingElements.clearToLastMarker();
        }
    }

    function brEndTagInBody(p) {
        p._reconstructActiveFormattingElements();
        p._insertFakeElement($.BR);
        p.openElements.pop();
        p.framesetOk = false;
    }

    function genericEndTagInBody(p, token) {
        var tn = token.tagName;

        for (var i = p.openElements.stackTop; i > 0; i--) {
            var element = p.openElements.items[i];

            if (p.treeAdapter.getTagName(element) === tn) {
                p.openElements.generateImpliedEndTagsWithExclusion(tn);
                p.openElements.popUntilElementPopped(element);
                break;
            }

            if (p._isSpecialElement(element)) break;
        }
    }

    //OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
    //It's faster than using dictionary.
    function endTagInBody(p, token) {
        var tn = token.tagName;

        switch (tn.length) {
            case 1:
                if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn === $.U) callAdoptionAgency(p, token);else if (tn === $.P) pEndTagInBody(p, token);else genericEndTagInBody(p, token);

                break;

            case 2:
                if (tn === $.DL || tn === $.UL || tn === $.OL) addressEndTagInBody(p, token);else if (tn === $.LI) liEndTagInBody(p, token);else if (tn === $.DD || tn === $.DT) ddEndTagInBody(p, token);else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) numberedHeaderEndTagInBody(p, token);else if (tn === $.BR) brEndTagInBody(p, token);else if (tn === $.EM || tn === $.TT) callAdoptionAgency(p, token);else genericEndTagInBody(p, token);

                break;

            case 3:
                if (tn === $.BIG) callAdoptionAgency(p, token);else if (tn === $.DIR || tn === $.DIV || tn === $.NAV) addressEndTagInBody(p, token);else genericEndTagInBody(p, token);

                break;

            case 4:
                if (tn === $.BODY) bodyEndTagInBody(p, token);else if (tn === $.HTML) htmlEndTagInBody(p, token);else if (tn === $.FORM) formEndTagInBody(p, token);else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR) callAdoptionAgency(p, token);else if (tn === $.MAIN || tn === $.MENU) addressEndTagInBody(p, token);else genericEndTagInBody(p, token);

                break;

            case 5:
                if (tn === $.ASIDE) addressEndTagInBody(p, token);else if (tn === $.SMALL) callAdoptionAgency(p, token);else genericEndTagInBody(p, token);

                break;

            case 6:
                if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP) addressEndTagInBody(p, token);else if (tn === $.APPLET || tn === $.OBJECT) appletEndTagInBody(p, token);else if (tn === $.STRIKE || tn === $.STRONG) callAdoptionAgency(p, token);else genericEndTagInBody(p, token);

                break;

            case 7:
                if (tn === $.ADDRESS || tn === $.ARTICLE || tn === $.DETAILS || tn === $.SECTION || tn === $.SUMMARY) addressEndTagInBody(p, token);else if (tn === $.MARQUEE) appletEndTagInBody(p, token);else genericEndTagInBody(p, token);

                break;

            case 8:
                if (tn === $.FIELDSET) addressEndTagInBody(p, token);else if (tn === $.TEMPLATE) endTagInHead(p, token);else genericEndTagInBody(p, token);

                break;

            case 10:
                if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) addressEndTagInBody(p, token);else genericEndTagInBody(p, token);

                break;

            default:
                genericEndTagInBody(p, token);
        }
    }

    function eofInBody(p, token) {
        if (p.tmplInsertionModeStackTop > -1) eofInTemplate(p, token);else p.stopped = true;
    }

    //12.2.5.4.8 The "text" insertion mode
    //------------------------------------------------------------------
    function endTagInText(p, token) {
        if (token.tagName === $.SCRIPT) p.pendingScript = p.openElements.current;

        p.openElements.pop();
        p.insertionMode = p.originalInsertionMode;
    }

    function eofInText(p, token) {
        p.openElements.pop();
        p.insertionMode = p.originalInsertionMode;
        p._processToken(token);
    }

    //12.2.5.4.9 The "in table" insertion mode
    //------------------------------------------------------------------
    function characterInTable(p, token) {
        var curTn = p.openElements.currentTagName;

        if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
            p.pendingCharacterTokens = [];
            p.hasNonWhitespacePendingCharacterToken = false;
            p.originalInsertionMode = p.insertionMode;
            p.insertionMode = IN_TABLE_TEXT_MODE;
            p._processToken(token);
        } else tokenInTable(p, token);
    }

    function captionStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p.activeFormattingElements.insertMarker();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_CAPTION_MODE;
    }

    function colgroupStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_COLUMN_GROUP_MODE;
    }

    function colStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertFakeElement($.COLGROUP);
        p.insertionMode = IN_COLUMN_GROUP_MODE;
        p._processToken(token);
    }

    function tbodyStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_TABLE_BODY_MODE;
    }

    function tdStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertFakeElement($.TBODY);
        p.insertionMode = IN_TABLE_BODY_MODE;
        p._processToken(token);
    }

    function tableStartTagInTable(p, token) {
        if (p.openElements.hasInTableScope($.TABLE)) {
            p.openElements.popUntilTagNamePopped($.TABLE);
            p._resetInsertionMode();
            p._processToken(token);
        }
    }

    function inputStartTagInTable(p, token) {
        var inputType = tokenizer$3.getTokenAttr(token, ATTRS.TYPE);

        if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) p._appendElement(token, NS.HTML);else tokenInTable(p, token);
    }

    function formStartTagInTable(p, token) {
        if (!p.formElement && p.openElements.tmplCount === 0) {
            p._insertElement(token, NS.HTML);
            p.formElement = p.openElements.current;
            p.openElements.pop();
        }
    }

    function startTagInTable(p, token) {
        var tn = token.tagName;

        switch (tn.length) {
            case 2:
                if (tn === $.TD || tn === $.TH || tn === $.TR) tdStartTagInTable(p, token);else tokenInTable(p, token);

                break;

            case 3:
                if (tn === $.COL) colStartTagInTable(p, token);else tokenInTable(p, token);

                break;

            case 4:
                if (tn === $.FORM) formStartTagInTable(p, token);else tokenInTable(p, token);

                break;

            case 5:
                if (tn === $.TABLE) tableStartTagInTable(p, token);else if (tn === $.STYLE) startTagInHead(p, token);else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) tbodyStartTagInTable(p, token);else if (tn === $.INPUT) inputStartTagInTable(p, token);else tokenInTable(p, token);

                break;

            case 6:
                if (tn === $.SCRIPT) startTagInHead(p, token);else tokenInTable(p, token);

                break;

            case 7:
                if (tn === $.CAPTION) captionStartTagInTable(p, token);else tokenInTable(p, token);

                break;

            case 8:
                if (tn === $.COLGROUP) colgroupStartTagInTable(p, token);else if (tn === $.TEMPLATE) startTagInHead(p, token);else tokenInTable(p, token);

                break;

            default:
                tokenInTable(p, token);
        }
    }

    function endTagInTable(p, token) {
        var tn = token.tagName;

        if (tn === $.TABLE) {
            if (p.openElements.hasInTableScope($.TABLE)) {
                p.openElements.popUntilTagNamePopped($.TABLE);
                p._resetInsertionMode();
            }
        } else if (tn === $.TEMPLATE) endTagInHead(p, token);else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) tokenInTable(p, token);
    }

    function tokenInTable(p, token) {
        var savedFosterParentingState = p.fosterParentingEnabled;

        p.fosterParentingEnabled = true;
        p._processTokenInBodyMode(token);
        p.fosterParentingEnabled = savedFosterParentingState;
    }

    //12.2.5.4.10 The "in table text" insertion mode
    //------------------------------------------------------------------
    function whitespaceCharacterInTableText(p, token) {
        p.pendingCharacterTokens.push(token);
    }

    function characterInTableText(p, token) {
        p.pendingCharacterTokens.push(token);
        p.hasNonWhitespacePendingCharacterToken = true;
    }

    function tokenInTableText(p, token) {
        var i = 0;

        if (p.hasNonWhitespacePendingCharacterToken) {
            for (; i < p.pendingCharacterTokens.length; i++) {
                tokenInTable(p, p.pendingCharacterTokens[i]);
            }
        } else {
            for (; i < p.pendingCharacterTokens.length; i++) {
                p._insertCharacters(p.pendingCharacterTokens[i]);
            }
        }

        p.insertionMode = p.originalInsertionMode;
        p._processToken(token);
    }

    //12.2.5.4.11 The "in caption" insertion mode
    //------------------------------------------------------------------
    function startTagInCaption(p, token) {
        var tn = token.tagName;

        if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
            if (p.openElements.hasInTableScope($.CAPTION)) {
                p.openElements.generateImpliedEndTags();
                p.openElements.popUntilTagNamePopped($.CAPTION);
                p.activeFormattingElements.clearToLastMarker();
                p.insertionMode = IN_TABLE_MODE;
                p._processToken(token);
            }
        } else startTagInBody(p, token);
    }

    function endTagInCaption(p, token) {
        var tn = token.tagName;

        if (tn === $.CAPTION || tn === $.TABLE) {
            if (p.openElements.hasInTableScope($.CAPTION)) {
                p.openElements.generateImpliedEndTags();
                p.openElements.popUntilTagNamePopped($.CAPTION);
                p.activeFormattingElements.clearToLastMarker();
                p.insertionMode = IN_TABLE_MODE;

                if (tn === $.TABLE) p._processToken(token);
            }
        } else if (tn !== $.BODY && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) endTagInBody(p, token);
    }

    //12.2.5.4.12 The "in column group" insertion mode
    //------------------------------------------------------------------
    function startTagInColumnGroup(p, token) {
        var tn = token.tagName;

        if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.COL) p._appendElement(token, NS.HTML);else if (tn === $.TEMPLATE) startTagInHead(p, token);else tokenInColumnGroup(p, token);
    }

    function endTagInColumnGroup(p, token) {
        var tn = token.tagName;

        if (tn === $.COLGROUP) {
            if (p.openElements.currentTagName === $.COLGROUP) {
                p.openElements.pop();
                p.insertionMode = IN_TABLE_MODE;
            }
        } else if (tn === $.TEMPLATE) endTagInHead(p, token);else if (tn !== $.COL) tokenInColumnGroup(p, token);
    }

    function tokenInColumnGroup(p, token) {
        if (p.openElements.currentTagName === $.COLGROUP) {
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
        }
    }

    //12.2.5.4.13 The "in table body" insertion mode
    //------------------------------------------------------------------
    function startTagInTableBody(p, token) {
        var tn = token.tagName;

        if (tn === $.TR) {
            p.openElements.clearBackToTableBodyContext();
            p._insertElement(token, NS.HTML);
            p.insertionMode = IN_ROW_MODE;
        } else if (tn === $.TH || tn === $.TD) {
            p.openElements.clearBackToTableBodyContext();
            p._insertFakeElement($.TR);
            p.insertionMode = IN_ROW_MODE;
            p._processToken(token);
        } else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {

            if (p.openElements.hasTableBodyContextInTableScope()) {
                p.openElements.clearBackToTableBodyContext();
                p.openElements.pop();
                p.insertionMode = IN_TABLE_MODE;
                p._processToken(token);
            }
        } else startTagInTable(p, token);
    }

    function endTagInTableBody(p, token) {
        var tn = token.tagName;

        if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
            if (p.openElements.hasInTableScope(tn)) {
                p.openElements.clearBackToTableBodyContext();
                p.openElements.pop();
                p.insertionMode = IN_TABLE_MODE;
            }
        } else if (tn === $.TABLE) {
            if (p.openElements.hasTableBodyContextInTableScope()) {
                p.openElements.clearBackToTableBodyContext();
                p.openElements.pop();
                p.insertionMode = IN_TABLE_MODE;
                p._processToken(token);
            }
        } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR) endTagInTable(p, token);
    }

    //12.2.5.4.14 The "in row" insertion mode
    //------------------------------------------------------------------
    function startTagInRow(p, token) {
        var tn = token.tagName;

        if (tn === $.TH || tn === $.TD) {
            p.openElements.clearBackToTableRowContext();
            p._insertElement(token, NS.HTML);
            p.insertionMode = IN_CELL_MODE;
            p.activeFormattingElements.insertMarker();
        } else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
            if (p.openElements.hasInTableScope($.TR)) {
                p.openElements.clearBackToTableRowContext();
                p.openElements.pop();
                p.insertionMode = IN_TABLE_BODY_MODE;
                p._processToken(token);
            }
        } else startTagInTable(p, token);
    }

    function endTagInRow(p, token) {
        var tn = token.tagName;

        if (tn === $.TR) {
            if (p.openElements.hasInTableScope($.TR)) {
                p.openElements.clearBackToTableRowContext();
                p.openElements.pop();
                p.insertionMode = IN_TABLE_BODY_MODE;
            }
        } else if (tn === $.TABLE) {
            if (p.openElements.hasInTableScope($.TR)) {
                p.openElements.clearBackToTableRowContext();
                p.openElements.pop();
                p.insertionMode = IN_TABLE_BODY_MODE;
                p._processToken(token);
            }
        } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
            if (p.openElements.hasInTableScope(tn) || p.openElements.hasInTableScope($.TR)) {
                p.openElements.clearBackToTableRowContext();
                p.openElements.pop();
                p.insertionMode = IN_TABLE_BODY_MODE;
                p._processToken(token);
            }
        } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH) endTagInTable(p, token);
    }

    //12.2.5.4.15 The "in cell" insertion mode
    //------------------------------------------------------------------
    function startTagInCell(p, token) {
        var tn = token.tagName;

        if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {

            if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
                p._closeTableCell();
                p._processToken(token);
            }
        } else startTagInBody(p, token);
    }

    function endTagInCell(p, token) {
        var tn = token.tagName;

        if (tn === $.TD || tn === $.TH) {
            if (p.openElements.hasInTableScope(tn)) {
                p.openElements.generateImpliedEndTags();
                p.openElements.popUntilTagNamePopped(tn);
                p.activeFormattingElements.clearToLastMarker();
                p.insertionMode = IN_ROW_MODE;
            }
        } else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
            if (p.openElements.hasInTableScope(tn)) {
                p._closeTableCell();
                p._processToken(token);
            }
        } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML) endTagInBody(p, token);
    }

    //12.2.5.4.16 The "in select" insertion mode
    //------------------------------------------------------------------
    function startTagInSelect(p, token) {
        var tn = token.tagName;

        if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.OPTION) {
            if (p.openElements.currentTagName === $.OPTION) p.openElements.pop();

            p._insertElement(token, NS.HTML);
        } else if (tn === $.OPTGROUP) {
            if (p.openElements.currentTagName === $.OPTION) p.openElements.pop();

            if (p.openElements.currentTagName === $.OPTGROUP) p.openElements.pop();

            p._insertElement(token, NS.HTML);
        } else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA || tn === $.SELECT) {
            if (p.openElements.hasInSelectScope($.SELECT)) {
                p.openElements.popUntilTagNamePopped($.SELECT);
                p._resetInsertionMode();

                if (tn !== $.SELECT) p._processToken(token);
            }
        } else if (tn === $.SCRIPT || tn === $.TEMPLATE) startTagInHead(p, token);
    }

    function endTagInSelect(p, token) {
        var tn = token.tagName;

        if (tn === $.OPTGROUP) {
            var prevOpenElement = p.openElements.items[p.openElements.stackTop - 1],
                prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);

            if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP) p.openElements.pop();

            if (p.openElements.currentTagName === $.OPTGROUP) p.openElements.pop();
        } else if (tn === $.OPTION) {
            if (p.openElements.currentTagName === $.OPTION) p.openElements.pop();
        } else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
            p.openElements.popUntilTagNamePopped($.SELECT);
            p._resetInsertionMode();
        } else if (tn === $.TEMPLATE) endTagInHead(p, token);
    }

    //12.2.5.4.17 The "in select in table" insertion mode
    //------------------------------------------------------------------
    function startTagInSelectInTable(p, token) {
        var tn = token.tagName;

        if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
            p.openElements.popUntilTagNamePopped($.SELECT);
            p._resetInsertionMode();
            p._processToken(token);
        } else startTagInSelect(p, token);
    }

    function endTagInSelectInTable(p, token) {
        var tn = token.tagName;

        if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
            if (p.openElements.hasInTableScope(tn)) {
                p.openElements.popUntilTagNamePopped($.SELECT);
                p._resetInsertionMode();
                p._processToken(token);
            }
        } else endTagInSelect(p, token);
    }

    //12.2.5.4.18 The "in template" insertion mode
    //------------------------------------------------------------------
    function startTagInTemplate(p, token) {
        var tn = token.tagName;

        if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) startTagInHead(p, token);else {
            var newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;

            p._popTmplInsertionMode();
            p._pushTmplInsertionMode(newInsertionMode);
            p.insertionMode = newInsertionMode;
            p._processToken(token);
        }
    }

    function endTagInTemplate(p, token) {
        if (token.tagName === $.TEMPLATE) endTagInHead(p, token);
    }

    function eofInTemplate(p, token) {
        if (p.openElements.tmplCount > 0) {
            p.openElements.popUntilTagNamePopped($.TEMPLATE);
            p.activeFormattingElements.clearToLastMarker();
            p._popTmplInsertionMode();
            p._resetInsertionMode();
            p._processToken(token);
        } else p.stopped = true;
    }

    //12.2.5.4.19 The "after body" insertion mode
    //------------------------------------------------------------------
    function startTagAfterBody(p, token) {
        if (token.tagName === $.HTML) startTagInBody(p, token);else tokenAfterBody(p, token);
    }

    function endTagAfterBody(p, token) {
        if (token.tagName === $.HTML) {
            if (!p.fragmentContext) p.insertionMode = AFTER_AFTER_BODY_MODE;
        } else tokenAfterBody(p, token);
    }

    function tokenAfterBody(p, token) {
        p.insertionMode = IN_BODY_MODE;
        p._processToken(token);
    }

    //12.2.5.4.20 The "in frameset" insertion mode
    //------------------------------------------------------------------
    function startTagInFrameset(p, token) {
        var tn = token.tagName;

        if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.FRAMESET) p._insertElement(token, NS.HTML);else if (tn === $.FRAME) p._appendElement(token, NS.HTML);else if (tn === $.NOFRAMES) startTagInHead(p, token);
    }

    function endTagInFrameset(p, token) {
        if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
            p.openElements.pop();

            if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET) p.insertionMode = AFTER_FRAMESET_MODE;
        }
    }

    //12.2.5.4.21 The "after frameset" insertion mode
    //------------------------------------------------------------------
    function startTagAfterFrameset(p, token) {
        var tn = token.tagName;

        if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.NOFRAMES) startTagInHead(p, token);
    }

    function endTagAfterFrameset(p, token) {
        if (token.tagName === $.HTML) p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
    }

    //12.2.5.4.22 The "after after body" insertion mode
    //------------------------------------------------------------------
    function startTagAfterAfterBody(p, token) {
        if (token.tagName === $.HTML) startTagInBody(p, token);else tokenAfterAfterBody(p, token);
    }

    function tokenAfterAfterBody(p, token) {
        p.insertionMode = IN_BODY_MODE;
        p._processToken(token);
    }

    //12.2.5.4.23 The "after after frameset" insertion mode
    //------------------------------------------------------------------
    function startTagAfterAfterFrameset(p, token) {
        var tn = token.tagName;

        if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.NOFRAMES) startTagInHead(p, token);
    }

    //12.2.5.5 The rules for parsing tokens in foreign content
    //------------------------------------------------------------------
    function nullCharacterInForeignContent(p, token) {
        token.chars = unicode.REPLACEMENT_CHARACTER;
        p._insertCharacters(token);
    }

    function characterInForeignContent(p, token) {
        p._insertCharacters(token);
        p.framesetOk = false;
    }

    function startTagInForeignContent(p, token) {
        if (foreign_content.causesExit(token) && !p.fragmentContext) {
            while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && !p._isIntegrationPoint(p.openElements.current)) {
                p.openElements.pop();
            }p._processToken(token);
        } else {
            var current = p._getAdjustedCurrentElement(),
                currentNs = p.treeAdapter.getNamespaceURI(current);

            if (currentNs === NS.MATHML) foreign_content.adjustTokenMathMLAttrs(token);else if (currentNs === NS.SVG) {
                foreign_content.adjustTokenSVGTagName(token);
                foreign_content.adjustTokenSVGAttrs(token);
            }

            foreign_content.adjustTokenXMLAttrs(token);

            if (token.selfClosing) p._appendElement(token, currentNs);else p._insertElement(token, currentNs);
        }
    }

    function endTagInForeignContent(p, token) {
        for (var i = p.openElements.stackTop; i > 0; i--) {
            var element = p.openElements.items[i];

            if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
                p._processToken(token);
                break;
            }

            if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
                p.openElements.popUntilElementPopped(element);
                break;
            }
        }
    }
});

var rehypeParse = parse$9;

function parse$9(options) {
  var settings = immutable(options, this.data('settings'));
  var position = typeof settings.position === 'boolean' ? settings.position : true;
  var parse5 = new parser$2({ locationInfo: position });

  this.Parser = parser;

  function parser(doc, file) {
    var fn = settings.fragment ? 'parseFragment' : 'parse';

    return hastUtilFromParse5(parse5[fn](String(file)), {
      file: file,
      verbose: settings.verbose
    });
  }
}

function parseMathHtml(html) {
  return unified_1().use(rehypeParse, {
    fragment: true,
    position: false
  }).parse(html);
}

function hasClass(element, className) {
  return element.properties.className && element.properties.className.includes(className);
}

function isTag(element, tag) {
  return element.tagName === tag;
}

var rehypeKatex = function plugin() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (opts.throwOnError == null) opts.throwOnError = false;
  if (opts.errorColor == null) opts.errorColor = '#cc0000';
  if (opts.macros == null) opts.macros = {};
  return function transform(node, file) {
    unistUtilVisit(node, 'element', function (element) {
      var isInlineMath = isTag(element, 'span') && hasClass(element, 'inlineMath');
      var isMath = opts.inlineMathDoubleDisplay && hasClass(element, 'inlineMathDouble') || isTag(element, 'div') && hasClass(element, 'math');

      if (isInlineMath || isMath) {
        var renderedValue = void 0;
        try {
          renderedValue = katex.renderToString(element.children[0].value, {
            displayMode: isMath,
            macros: opts.macros
          });
        } catch (err) {
          if (opts.throwOnError) {
            throw err;
          } else {
            file.message(err.message, unistUtilPosition.start(element));
            try {
              renderedValue = katex.renderToString(element.children[0].value, {
                displayMode: isMath,
                macros: opts.macros,
                throwOnError: false,
                errorColor: opts.errorColor
              });
            } catch (err) {
              renderedValue = '<code class="katex" style="color: ' + opts.errorColor + '">' + element.children[0].value + '</code>';
            }
          }
        }

        var inlineMathAst = parseMathHtml(renderedValue).children[0];

        Object.assign(element.properties, { className: element.properties.className });
        element.children = [inlineMathAst];
      }
    });
    return node;
  };
};

function plugin$8() {
  var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  function transformer(tree) {
    unistUtilVisit(tree, 'element', visitor);
  }

  function visitor(node, index, parent) {
    if (node.tagName === 'a' && node.properties.className && node.properties.className.includes('footnote-backref')) {
      var identifier = parent.properties.id.slice(3);
      var placeholderIndex = title.indexOf('$id');
      var thisTitle = void 0;
      if (placeholderIndex !== -1) {
        thisTitle = title.split('');
        thisTitle.splice(placeholderIndex, 3, identifier);
        thisTitle = thisTitle.join('');
      }
      if (!thisTitle) thisTitle = identifier;
      node.properties.title = thisTitle;
    }
  }
  return transformer;
}

var src$34 = plugin$8;

var rehypeLineNumbers_1 = createCommonjsModule(function (module) {
  var containerDiv = function containerDiv(children) {
    return {
      type: 'element',
      tagName: 'div',
      properties: { className: ['hljs-code-div'] },
      children: children
    };
  };

  var lineNumbersDiv = function lineNumbersDiv(children) {
    return {
      type: 'element',
      tagName: 'div',
      properties: { className: ['hljs-line-numbers'] },
      children: children
    };
  };

  var lineNumber = {
    type: 'element',
    tagName: 'span',
    properties: {},
    children: []
  };

  var rehypeLineNumbers = function rehypeLineNumbers() {
    return function (tree) {
      unistUtilVisit(tree, 'element', function (node, index, parent) {
        var preNode = node;
        var codeNode = preNode.children.length && node.children[0];

        if (!codeNode) return;
        if (node.tagName !== 'pre' || codeNode.tagName !== 'code') return;

        var sourceNode = codeNode.children.length && codeNode.children[0];
        var source = sourceNode.value;

        var lines = source.split('\n').slice(0, -1);

        var columnNodes = [lineNumbersDiv(lines.map(function () {
          return lineNumber;
        })), preNode];

        parent.children[index] = containerDiv(columnNodes);
      });
    };
  };

  module.exports = rehypeLineNumbers;
});

var highlight = createCommonjsModule(function (module, exports) {
  /*
  Syntax highlighting with language autodetection.
  https://highlightjs.org/
  */

  (function (factory) {

    // Find the global object for export to both the browser and web workers.
    var globalObject = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window || (typeof self === 'undefined' ? 'undefined' : _typeof(self)) === 'object' && self;

    // Setup highlight.js for different environments. First is Node.js or
    // CommonJS.
    {
      factory(exports);
    }
  })(function (hljs) {
    // Convenience variables for build-in objects
    var ArrayProto = [],
        objectKeys = Object.keys;

    // Global internal variables used within the highlight.js library.
    var languages = {},
        aliases = {};

    // Regular expressions used throughout the highlight.js library.
    var noHighlightRe = /^(no-?highlight|plain|text)$/i,
        languagePrefixRe = /\blang(?:uage)?-([\w-]+)\b/i,
        fixMarkupRe = /((^(<[^>]+>|\t|)+|(?:\n)))/gm;

    var spanEndTag = '</span>';

    // Global options used when within external APIs. This is modified when
    // calling the `hljs.configure` function.
    var options = {
      classPrefix: 'hljs-',
      tabReplace: null,
      useBR: false,
      languages: undefined
    };

    /* Utility functions */

    function escape(value) {
      return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }

    function tag(node) {
      return node.nodeName.toLowerCase();
    }

    function testRe(re, lexeme) {
      var match = re && re.exec(lexeme);
      return match && match.index === 0;
    }

    function isNotHighlighted(language) {
      return noHighlightRe.test(language);
    }

    function blockLanguage(block) {
      var i, match, length, _class;
      var classes = block.className + ' ';

      classes += block.parentNode ? block.parentNode.className : '';

      // language-* takes precedence over non-prefixed class names.
      match = languagePrefixRe.exec(classes);
      if (match) {
        return getLanguage(match[1]) ? match[1] : 'no-highlight';
      }

      classes = classes.split(/\s+/);

      for (i = 0, length = classes.length; i < length; i++) {
        _class = classes[i];

        if (isNotHighlighted(_class) || getLanguage(_class)) {
          return _class;
        }
      }
    }

    function inherit(parent) {
      // inherit(parent, override_obj, override_obj, ...)
      var key;
      var result = {};
      var objects = Array.prototype.slice.call(arguments, 1);

      for (key in parent) {
        result[key] = parent[key];
      }objects.forEach(function (obj) {
        for (key in obj) {
          result[key] = obj[key];
        }
      });
      return result;
    }

    /* Stream merging */

    function nodeStream(node) {
      var result = [];
      (function _nodeStream(node, offset) {
        for (var child = node.firstChild; child; child = child.nextSibling) {
          if (child.nodeType === 3) offset += child.nodeValue.length;else if (child.nodeType === 1) {
            result.push({
              event: 'start',
              offset: offset,
              node: child
            });
            offset = _nodeStream(child, offset);
            // Prevent void elements from having an end tag that would actually
            // double them in the output. There are more void elements in HTML
            // but we list only those realistically expected in code display.
            if (!tag(child).match(/br|hr|img|input/)) {
              result.push({
                event: 'stop',
                offset: offset,
                node: child
              });
            }
          }
        }
        return offset;
      })(node, 0);
      return result;
    }

    function mergeStreams(original, highlighted, value) {
      var processed = 0;
      var result = '';
      var nodeStack = [];

      function selectStream() {
        if (!original.length || !highlighted.length) {
          return original.length ? original : highlighted;
        }
        if (original[0].offset !== highlighted[0].offset) {
          return original[0].offset < highlighted[0].offset ? original : highlighted;
        }

        /*
        To avoid starting the stream just before it should stop the order is
        ensured that original always starts first and closes last:
         if (event1 == 'start' && event2 == 'start')
          return original;
        if (event1 == 'start' && event2 == 'stop')
          return highlighted;
        if (event1 == 'stop' && event2 == 'start')
          return original;
        if (event1 == 'stop' && event2 == 'stop')
          return highlighted;
         ... which is collapsed to:
        */
        return highlighted[0].event === 'start' ? original : highlighted;
      }

      function open(node) {
        function attr_str(a) {
          return ' ' + a.nodeName + '="' + escape(a.value).replace('"', '&quot;') + '"';
        }
        result += '<' + tag(node) + ArrayProto.map.call(node.attributes, attr_str).join('') + '>';
      }

      function close(node) {
        result += '</' + tag(node) + '>';
      }

      function render(event) {
        (event.event === 'start' ? open : close)(event.node);
      }

      while (original.length || highlighted.length) {
        var stream = selectStream();
        result += escape(value.substring(processed, stream[0].offset));
        processed = stream[0].offset;
        if (stream === original) {
          /*
          On any opening or closing tag of the original markup we first close
          the entire highlighted node stack, then render the original tag along
          with all the following original tags at the same offset and then
          reopen all the tags on the highlighted stack.
          */
          nodeStack.reverse().forEach(close);
          do {
            render(stream.splice(0, 1)[0]);
            stream = selectStream();
          } while (stream === original && stream.length && stream[0].offset === processed);
          nodeStack.reverse().forEach(open);
        } else {
          if (stream[0].event === 'start') {
            nodeStack.push(stream[0].node);
          } else {
            nodeStack.pop();
          }
          render(stream.splice(0, 1)[0]);
        }
      }
      return result + escape(value.substr(processed));
    }

    /* Initialization */

    function expand_mode(mode) {
      if (mode.variants && !mode.cached_variants) {
        mode.cached_variants = mode.variants.map(function (variant) {
          return inherit(mode, { variants: null }, variant);
        });
      }
      return mode.cached_variants || mode.endsWithParent && [inherit(mode)] || [mode];
    }

    function compileLanguage(language) {

      function reStr(re) {
        return re && re.source || re;
      }

      function langRe(value, global) {
        return new RegExp(reStr(value), 'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : ''));
      }

      function compileMode(mode, parent) {
        if (mode.compiled) return;
        mode.compiled = true;

        mode.keywords = mode.keywords || mode.beginKeywords;
        if (mode.keywords) {
          var compiled_keywords = {};

          var flatten = function flatten(className, str) {
            if (language.case_insensitive) {
              str = str.toLowerCase();
            }
            str.split(' ').forEach(function (kw) {
              var pair = kw.split('|');
              compiled_keywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];
            });
          };

          if (typeof mode.keywords === 'string') {
            // string
            flatten('keyword', mode.keywords);
          } else {
            objectKeys(mode.keywords).forEach(function (className) {
              flatten(className, mode.keywords[className]);
            });
          }
          mode.keywords = compiled_keywords;
        }
        mode.lexemesRe = langRe(mode.lexemes || /\w+/, true);

        if (parent) {
          if (mode.beginKeywords) {
            mode.begin = '\\b(' + mode.beginKeywords.split(' ').join('|') + ')\\b';
          }
          if (!mode.begin) mode.begin = /\B|\b/;
          mode.beginRe = langRe(mode.begin);
          if (!mode.end && !mode.endsWithParent) mode.end = /\B|\b/;
          if (mode.end) mode.endRe = langRe(mode.end);
          mode.terminator_end = reStr(mode.end) || '';
          if (mode.endsWithParent && parent.terminator_end) mode.terminator_end += (mode.end ? '|' : '') + parent.terminator_end;
        }
        if (mode.illegal) mode.illegalRe = langRe(mode.illegal);
        if (mode.relevance == null) mode.relevance = 1;
        if (!mode.contains) {
          mode.contains = [];
        }
        mode.contains = Array.prototype.concat.apply([], mode.contains.map(function (c) {
          return expand_mode(c === 'self' ? mode : c);
        }));
        mode.contains.forEach(function (c) {
          compileMode(c, mode);
        });

        if (mode.starts) {
          compileMode(mode.starts, parent);
        }

        var terminators = mode.contains.map(function (c) {
          return c.beginKeywords ? '\\.?(' + c.begin + ')\\.?' : c.begin;
        }).concat([mode.terminator_end, mode.illegal]).map(reStr).filter(Boolean);
        mode.terminators = terminators.length ? langRe(terminators.join('|'), true) : { exec: function exec() /*s*/{
            return null;
          } };
      }

      compileMode(language);
    }

    /*
    Core highlighting function. Accepts a language name, or an alias, and a
    string with the code to highlight. Returns an object with the following
    properties:
     - relevance (int)
    - value (an HTML string with highlighting markup)
     */
    function highlight(name, value, ignore_illegals, continuation) {

      function subMode(lexeme, mode) {
        var i, length;

        for (i = 0, length = mode.contains.length; i < length; i++) {
          if (testRe(mode.contains[i].beginRe, lexeme)) {
            return mode.contains[i];
          }
        }
      }

      function endOfMode(mode, lexeme) {
        if (testRe(mode.endRe, lexeme)) {
          while (mode.endsParent && mode.parent) {
            mode = mode.parent;
          }
          return mode;
        }
        if (mode.endsWithParent) {
          return endOfMode(mode.parent, lexeme);
        }
      }

      function isIllegal(lexeme, mode) {
        return !ignore_illegals && testRe(mode.illegalRe, lexeme);
      }

      function keywordMatch(mode, match) {
        var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0];
        return mode.keywords.hasOwnProperty(match_str) && mode.keywords[match_str];
      }

      function buildSpan(classname, insideSpan, leaveOpen, noPrefix) {
        var classPrefix = noPrefix ? '' : options.classPrefix,
            openSpan = '<span class="' + classPrefix,
            closeSpan = leaveOpen ? '' : spanEndTag;

        openSpan += classname + '">';

        return openSpan + insideSpan + closeSpan;
      }

      function processKeywords() {
        var keyword_match, last_index, match, result;

        if (!top.keywords) return escape(mode_buffer);

        result = '';
        last_index = 0;
        top.lexemesRe.lastIndex = 0;
        match = top.lexemesRe.exec(mode_buffer);

        while (match) {
          result += escape(mode_buffer.substring(last_index, match.index));
          keyword_match = keywordMatch(top, match);
          if (keyword_match) {
            relevance += keyword_match[1];
            result += buildSpan(keyword_match[0], escape(match[0]));
          } else {
            result += escape(match[0]);
          }
          last_index = top.lexemesRe.lastIndex;
          match = top.lexemesRe.exec(mode_buffer);
        }
        return result + escape(mode_buffer.substr(last_index));
      }

      function processSubLanguage() {
        var explicit = typeof top.subLanguage === 'string';
        if (explicit && !languages[top.subLanguage]) {
          return escape(mode_buffer);
        }

        var result = explicit ? highlight(top.subLanguage, mode_buffer, true, continuations[top.subLanguage]) : highlightAuto(mode_buffer, top.subLanguage.length ? top.subLanguage : undefined);

        // Counting embedded language score towards the host language may be disabled
        // with zeroing the containing mode relevance. Usecase in point is Markdown that
        // allows XML everywhere and makes every XML snippet to have a much larger Markdown
        // score.
        if (top.relevance > 0) {
          relevance += result.relevance;
        }
        if (explicit) {
          continuations[top.subLanguage] = result.top;
        }
        return buildSpan(result.language, result.value, false, true);
      }

      function processBuffer() {
        result += top.subLanguage != null ? processSubLanguage() : processKeywords();
        mode_buffer = '';
      }

      function startNewMode(mode) {
        result += mode.className ? buildSpan(mode.className, '', true) : '';
        top = Object.create(mode, { parent: { value: top } });
      }

      function processLexeme(buffer, lexeme) {

        mode_buffer += buffer;

        if (lexeme == null) {
          processBuffer();
          return 0;
        }

        var new_mode = subMode(lexeme, top);
        if (new_mode) {
          if (new_mode.skip) {
            mode_buffer += lexeme;
          } else {
            if (new_mode.excludeBegin) {
              mode_buffer += lexeme;
            }
            processBuffer();
            if (!new_mode.returnBegin && !new_mode.excludeBegin) {
              mode_buffer = lexeme;
            }
          }
          startNewMode(new_mode, lexeme);
          return new_mode.returnBegin ? 0 : lexeme.length;
        }

        var end_mode = endOfMode(top, lexeme);
        if (end_mode) {
          var origin = top;
          if (origin.skip) {
            mode_buffer += lexeme;
          } else {
            if (!(origin.returnEnd || origin.excludeEnd)) {
              mode_buffer += lexeme;
            }
            processBuffer();
            if (origin.excludeEnd) {
              mode_buffer = lexeme;
            }
          }
          do {
            if (top.className) {
              result += spanEndTag;
            }
            if (!top.skip) {
              relevance += top.relevance;
            }
            top = top.parent;
          } while (top !== end_mode.parent);
          if (end_mode.starts) {
            startNewMode(end_mode.starts, '');
          }
          return origin.returnEnd ? 0 : lexeme.length;
        }

        if (isIllegal(lexeme, top)) throw new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.className || '<unnamed>') + '"');

        /*
        Parser should not reach this point as all types of lexemes should be caught
        earlier, but if it does due to some bug make sure it advances at least one
        character forward to prevent infinite looping.
        */
        mode_buffer += lexeme;
        return lexeme.length || 1;
      }

      var language = getLanguage(name);
      if (!language) {
        throw new Error('Unknown language: "' + name + '"');
      }

      compileLanguage(language);
      var top = continuation || language;
      var continuations = {}; // keep continuations for sub-languages
      var result = '',
          current;
      for (current = top; current !== language; current = current.parent) {
        if (current.className) {
          result = buildSpan(current.className, '', true) + result;
        }
      }
      var mode_buffer = '';
      var relevance = 0;
      try {
        var match,
            count,
            index = 0;
        while (true) {
          top.terminators.lastIndex = index;
          match = top.terminators.exec(value);
          if (!match) break;
          count = processLexeme(value.substring(index, match.index), match[0]);
          index = match.index + count;
        }
        processLexeme(value.substr(index));
        for (current = top; current.parent; current = current.parent) {
          // close dangling modes
          if (current.className) {
            result += spanEndTag;
          }
        }
        return {
          relevance: relevance,
          value: result,
          language: name,
          top: top
        };
      } catch (e) {
        if (e.message && e.message.indexOf('Illegal') !== -1) {
          return {
            relevance: 0,
            value: escape(value)
          };
        } else {
          throw e;
        }
      }
    }

    /*
    Highlighting with language detection. Accepts a string with the code to
    highlight. Returns an object with the following properties:
     - language (detected language)
    - relevance (int)
    - value (an HTML string with highlighting markup)
    - second_best (object with the same structure for second-best heuristically
      detected language, may be absent)
     */
    function highlightAuto(text, languageSubset) {
      languageSubset = languageSubset || options.languages || objectKeys(languages);
      var result = {
        relevance: 0,
        value: escape(text)
      };
      var second_best = result;
      languageSubset.filter(getLanguage).forEach(function (name) {
        var current = highlight(name, text, false);
        current.language = name;
        if (current.relevance > second_best.relevance) {
          second_best = current;
        }
        if (current.relevance > result.relevance) {
          second_best = result;
          result = current;
        }
      });
      if (second_best.language) {
        result.second_best = second_best;
      }
      return result;
    }

    /*
    Post-processing of the highlighted markup:
     - replace TABs with something more useful
    - replace real line-breaks with '<br>' for non-pre containers
     */
    function fixMarkup(value) {
      return !(options.tabReplace || options.useBR) ? value : value.replace(fixMarkupRe, function (match, p1) {
        if (options.useBR && match === '\n') {
          return '<br>';
        } else if (options.tabReplace) {
          return p1.replace(/\t/g, options.tabReplace);
        }
        return '';
      });
    }

    function buildClassName(prevClassName, currentLang, resultLang) {
      var language = currentLang ? aliases[currentLang] : resultLang,
          result = [prevClassName.trim()];

      if (!prevClassName.match(/\bhljs\b/)) {
        result.push('hljs');
      }

      if (prevClassName.indexOf(language) === -1) {
        result.push(language);
      }

      return result.join(' ').trim();
    }

    /*
    Applies highlighting to a DOM node containing code. Accepts a DOM node and
    two optional parameters for fixMarkup.
    */
    function highlightBlock(block) {
      var node, originalStream, result, resultNode, text;
      var language = blockLanguage(block);

      if (isNotHighlighted(language)) return;

      if (options.useBR) {
        node = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
        node.innerHTML = block.innerHTML.replace(/\n/g, '').replace(/<br[ \/]*>/g, '\n');
      } else {
        node = block;
      }
      text = node.textContent;
      result = language ? highlight(language, text, true) : highlightAuto(text);

      originalStream = nodeStream(node);
      if (originalStream.length) {
        resultNode = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
        resultNode.innerHTML = result.value;
        result.value = mergeStreams(originalStream, nodeStream(resultNode), text);
      }
      result.value = fixMarkup(result.value);

      block.innerHTML = result.value;
      block.className = buildClassName(block.className, language, result.language);
      block.result = {
        language: result.language,
        re: result.relevance
      };
      if (result.second_best) {
        block.second_best = {
          language: result.second_best.language,
          re: result.second_best.relevance
        };
      }
    }

    /*
    Updates highlight.js global options with values passed in the form of an object.
    */
    function configure(user_options) {
      options = inherit(options, user_options);
    }

    /*
    Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
    */
    function initHighlighting() {
      if (initHighlighting.called) return;
      initHighlighting.called = true;

      var blocks = document.querySelectorAll('pre code');
      ArrayProto.forEach.call(blocks, highlightBlock);
    }

    /*
    Attaches highlighting to the page load event.
    */
    function initHighlightingOnLoad() {
      addEventListener('DOMContentLoaded', initHighlighting, false);
      addEventListener('load', initHighlighting, false);
    }

    function registerLanguage(name, language) {
      var lang = languages[name] = language(hljs);
      if (lang.aliases) {
        lang.aliases.forEach(function (alias) {
          aliases[alias] = name;
        });
      }
    }

    function listLanguages() {
      return objectKeys(languages);
    }

    function getLanguage(name) {
      name = (name || '').toLowerCase();
      return languages[name] || languages[aliases[name]];
    }

    /* Interface definition */

    hljs.highlight = highlight;
    hljs.highlightAuto = highlightAuto;
    hljs.fixMarkup = fixMarkup;
    hljs.highlightBlock = highlightBlock;
    hljs.configure = configure;
    hljs.initHighlighting = initHighlighting;
    hljs.initHighlightingOnLoad = initHighlightingOnLoad;
    hljs.registerLanguage = registerLanguage;
    hljs.listLanguages = listLanguages;
    hljs.getLanguage = getLanguage;
    hljs.inherit = inherit;

    // Common regexps
    hljs.IDENT_RE = '[a-zA-Z]\\w*';
    hljs.UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\w*';
    hljs.NUMBER_RE = '\\b\\d+(\\.\\d+)?';
    hljs.C_NUMBER_RE = '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)'; // 0x..., 0..., decimal, float
    hljs.BINARY_NUMBER_RE = '\\b(0b[01]+)'; // 0b...
    hljs.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';

    // Common modes
    hljs.BACKSLASH_ESCAPE = {
      begin: '\\\\[\\s\\S]', relevance: 0
    };
    hljs.APOS_STRING_MODE = {
      className: 'string',
      begin: '\'', end: '\'',
      illegal: '\\n',
      contains: [hljs.BACKSLASH_ESCAPE]
    };
    hljs.QUOTE_STRING_MODE = {
      className: 'string',
      begin: '"', end: '"',
      illegal: '\\n',
      contains: [hljs.BACKSLASH_ESCAPE]
    };
    hljs.PHRASAL_WORDS_MODE = {
      begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
    };
    hljs.COMMENT = function (begin, end, inherits$$1) {
      var mode = hljs.inherit({
        className: 'comment',
        begin: begin, end: end,
        contains: []
      }, inherits$$1 || {});
      mode.contains.push(hljs.PHRASAL_WORDS_MODE);
      mode.contains.push({
        className: 'doctag',
        begin: '(?:TODO|FIXME|NOTE|BUG|XXX):',
        relevance: 0
      });
      return mode;
    };
    hljs.C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$');
    hljs.C_BLOCK_COMMENT_MODE = hljs.COMMENT('/\\*', '\\*/');
    hljs.HASH_COMMENT_MODE = hljs.COMMENT('#', '$');
    hljs.NUMBER_MODE = {
      className: 'number',
      begin: hljs.NUMBER_RE,
      relevance: 0
    };
    hljs.C_NUMBER_MODE = {
      className: 'number',
      begin: hljs.C_NUMBER_RE,
      relevance: 0
    };
    hljs.BINARY_NUMBER_MODE = {
      className: 'number',
      begin: hljs.BINARY_NUMBER_RE,
      relevance: 0
    };
    hljs.CSS_NUMBER_MODE = {
      className: 'number',
      begin: hljs.NUMBER_RE + '(' + '%|em|ex|ch|rem' + '|vw|vh|vmin|vmax' + '|cm|mm|in|pt|pc|px' + '|deg|grad|rad|turn' + '|s|ms' + '|Hz|kHz' + '|dpi|dpcm|dppx' + ')?',
      relevance: 0
    };
    hljs.REGEXP_MODE = {
      className: 'regexp',
      begin: /\//, end: /\/[gimuy]*/,
      illegal: /\n/,
      contains: [hljs.BACKSLASH_ESCAPE, {
        begin: /\[/, end: /\]/,
        relevance: 0,
        contains: [hljs.BACKSLASH_ESCAPE]
      }]
    };
    hljs.TITLE_MODE = {
      className: 'title',
      begin: hljs.IDENT_RE,
      relevance: 0
    };
    hljs.UNDERSCORE_TITLE_MODE = {
      className: 'title',
      begin: hljs.UNDERSCORE_IDENT_RE,
      relevance: 0
    };
    hljs.METHOD_GUARD = {
      // excludes method names from keyword processing
      begin: '\\.\\s*' + hljs.UNDERSCORE_IDENT_RE,
      relevance: 0
    };

    return hljs;
  });
});

/* The lowlight interface, which has to be compatible
 * with highlight.js, as this object is passed to
 * highlight.js syntaxes. */

function High() {}

High.prototype = highlight;

/* Expose. */
var low = new High(); // Ha!

var core$2 = low;

low.highlight = highlight$2;
low.highlightAuto = autoHighlight;
low.registerLanguage = registerLanguage;
low.getLanguage = getLanguage;

var inherit = highlight.inherit;
var own$7 = {}.hasOwnProperty;

var DEFAULT_PREFIX = 'hljs-';
var KEY_INSENSITIVE = 'case_insensitive';
var KEY_CACHED_VARIANTS = 'cached_variants';
var EMPTY$1 = '';

var C_SPACE$14 = ' ';
var C_PIPE$2 = '|';

var T_ELEMENT = 'element';
var T_TEXT = 'text';
var T_SPAN = 'span';

/* Maps of syntaxes. */
var languageNames = [];
var languages = {};
var aliases = {};

/* Highlighting with language detection.  Accepts a string
 * with the code to highlight.  Returns an object with the
 * following properties:
 *
 * - language (detected language)
 * - relevance (int)
 * - value (an HTML string with highlighting markup)
 * - secondBest (object with the same structure for
 *   second-best heuristically detected language, may
 *   be absent) */
function autoHighlight(value, options) {
  var settings = options || {};
  var prefix = settings.prefix;
  var subset = settings.subset || languageNames;
  var length = subset.length;
  var index = -1;
  var result;
  var secondBest;
  var current;
  var name;

  if (prefix === null || prefix === undefined) {
    prefix = DEFAULT_PREFIX;
  }

  if (typeof value !== 'string') {
    throw new Error('Expected `string` for value, got `' + value + '`');
  }

  secondBest = normalize$4({});
  result = normalize$4({});

  while (++index < length) {
    name = subset[index];

    if (!getLanguage(name)) {
      continue;
    }

    current = normalize$4(coreHighlight(name, value, false, prefix));

    current.language = name;

    if (current.relevance > secondBest.relevance) {
      secondBest = current;
    }

    if (current.relevance > result.relevance) {
      secondBest = result;
      result = current;
    }
  }

  if (secondBest.language) {
    result.secondBest = secondBest;
  }

  return result;
}

/* Highlighting `value` in the language `language`. */
function highlight$2(language, value, options) {
  var settings = options || {};
  var prefix = settings.prefix;

  if (prefix === null || prefix === undefined) {
    prefix = DEFAULT_PREFIX;
  }

  return normalize$4(coreHighlight(language, value, true, prefix));
}

/* Register a language. */
function registerLanguage(name, syntax) {
  var lang = languages[name] = syntax(low);
  var values = lang.aliases;
  var length = values && values.length;
  var index = -1;

  languageNames.push(name);

  while (++index < length) {
    aliases[values[index]] = name;
  }
}

/* Core highlighting function.  Accepts a language name, or
 * an alias, and a string with the code to highlight.
 * Returns an object with the following properties: */
function coreHighlight(name, value, ignore, prefix, continuation) {
  var continuations = {};
  var stack = [];
  var modeBuffer = EMPTY$1;
  var relevance = 0;
  var language;
  var top;
  var current;
  var currentChildren;
  var offset;
  var count;
  var match;
  var children;

  if (typeof name !== 'string') {
    throw new Error('Expected `string` for name, got `' + name + '`');
  }

  if (typeof value !== 'string') {
    throw new Error('Expected `string` for value, got `' + value + '`');
  }

  language = getLanguage(name);
  current = top = continuation || language;
  currentChildren = children = [];

  if (!language) {
    throw new Error('Unknown language: `' + name + '` is not registered');
  }

  compileLanguage(language);

  try {
    offset = top.terminators.lastIndex = 0;
    match = top.terminators.exec(value);

    while (match) {
      count = processLexeme(value.substring(offset, match.index), match[0]);
      offset = top.terminators.lastIndex = match.index + count;
      match = top.terminators.exec(value);
    }

    processLexeme(value.substr(offset));
    current = top;

    while (current.parent) {
      if (current.className) {
        pop();
      }

      current = current.parent;
    }

    return {
      relevance: relevance,
      value: currentChildren,
      language: name,
      top: top
    };
  } catch (err) {
    /* istanbul ignore if - Catch-all  */
    if (err.message.indexOf('Illegal') === -1) {
      throw err;
    }

    return { relevance: 0, value: addText(value, []) };
  }

  /* Process a lexeme.  Returns next position. */
  function processLexeme(buffer, lexeme) {
    var newMode;
    var endMode;
    var origin;

    modeBuffer += buffer;

    if (lexeme === undefined) {
      addSiblings(processBuffer(), currentChildren);

      return 0;
    }

    newMode = subMode(lexeme, top);

    if (newMode) {
      addSiblings(processBuffer(), currentChildren);

      startNewMode(newMode, lexeme);

      return newMode.returnBegin ? 0 : lexeme.length;
    }

    endMode = endOfMode(top, lexeme);

    if (endMode) {
      origin = top;

      if (!(origin.returnEnd || origin.excludeEnd)) {
        modeBuffer += lexeme;
      }

      addSiblings(processBuffer(), currentChildren);

      /* Close open modes. */
      do {
        if (top.className) {
          pop();
        }

        relevance += top.relevance;
        top = top.parent;
      } while (top !== endMode.parent);

      if (origin.excludeEnd) {
        addText(lexeme, currentChildren);
      }

      modeBuffer = EMPTY$1;

      if (endMode.starts) {
        startNewMode(endMode.starts, EMPTY$1);
      }

      return origin.returnEnd ? 0 : lexeme.length;
    }

    if (isIllegal(lexeme, top)) {
      throw new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.className || '<unnamed>') + '"');
    }

    /* Parser should not reach this point as all
     * types of lexemes should be caught earlier,
     * but if it does due to some bug make sure it
     * advances at least one character forward to
     * prevent infinite looping. */
    modeBuffer += lexeme;

    return lexeme.length || /* istanbul ignore next */1;
  }

  /* Start a new mode with a `lexeme` to process. */
  function startNewMode(mode, lexeme) {
    var node;

    if (mode.className) {
      node = build(mode.className, []);
    }

    if (mode.returnBegin) {
      modeBuffer = EMPTY$1;
    } else if (mode.excludeBegin) {
      addText(lexeme, currentChildren);

      modeBuffer = EMPTY$1;
    } else {
      modeBuffer = lexeme;
    }

    /* Enter a new mode. */
    if (node) {
      currentChildren.push(node);
      stack.push(currentChildren);
      currentChildren = node.children;
    }

    top = Object.create(mode, { parent: { value: top } });
  }

  /* Process the buffer. */
  function processBuffer() {
    var result = top.subLanguage === undefined ? processKeywords() : processSubLanguage();
    modeBuffer = EMPTY$1;
    return result;
  }

  /* Process a sublanguage (returns a list of nodes). */
  function processSubLanguage() {
    var explicit = typeof top.subLanguage === 'string';
    var subvalue;

    /* istanbul ignore if - support non-loaded sublanguages */
    if (explicit && !languages[top.subLanguage]) {
      return addText(modeBuffer, []);
    }

    if (explicit) {
      subvalue = coreHighlight(top.subLanguage, modeBuffer, true, prefix, continuations[top.subLanguage]);
    } else {
      subvalue = autoHighlight(modeBuffer, {
        subset: top.subLanguage.length ? top.subLanguage : undefined,
        prefix: prefix
      });
    }

    /* Counting embedded language score towards the
     * host language may be disabled with zeroing the
     * containing mode relevance.  Usecase in point is
     * Markdown that allows XML everywhere and makes
     * every XML snippet to have a much larger Markdown
     * score. */
    if (top.relevance > 0) {
      relevance += subvalue.relevance;
    }

    if (explicit) {
      continuations[top.subLanguage] = subvalue.top;
    }

    return [build(subvalue.language, subvalue.value, true)];
  }

  /* Process keywords. Returns nodes. */
  function processKeywords() {
    var nodes = [];
    var lastIndex;
    var keyword;
    var node;
    var submatch;

    if (!top.keywords) {
      return addText(modeBuffer, nodes);
    }

    lastIndex = 0;

    top.lexemesRe.lastIndex = 0;

    keyword = top.lexemesRe.exec(modeBuffer);

    while (keyword) {
      addText(modeBuffer.substring(lastIndex, keyword.index), nodes);

      submatch = keywordMatch(top, keyword);

      if (submatch) {
        relevance += submatch[1];

        node = build(submatch[0], []);

        nodes.push(node);

        addText(keyword[0], node.children);
      } else {
        addText(keyword[0], nodes);
      }

      lastIndex = top.lexemesRe.lastIndex;
      keyword = top.lexemesRe.exec(modeBuffer);
    }

    addText(modeBuffer.substr(lastIndex), nodes);

    return nodes;
  }

  /* Add siblings. */
  function addSiblings(siblings, nodes) {
    var length = siblings.length;
    var index = -1;
    var sibling;

    while (++index < length) {
      sibling = siblings[index];

      if (sibling.type === T_TEXT) {
        addText(sibling.value, nodes);
      } else {
        nodes.push(sibling);
      }
    }
  }

  /* Add a text. */
  function addText(value, nodes) {
    var tail;

    if (value) {
      tail = nodes[nodes.length - 1];

      if (tail && tail.type === T_TEXT) {
        tail.value += value;
      } else {
        nodes.push(buildText(value));
      }
    }

    return nodes;
  }

  /* Build a text. */
  function buildText(value) {
    return { type: T_TEXT, value: value };
  }

  /* Build a span. */
  function build(name, contents, noPrefix) {
    return {
      type: T_ELEMENT,
      tagName: T_SPAN,
      properties: {
        className: [(noPrefix ? EMPTY$1 : prefix) + name]
      },
      children: contents
    };
  }

  /* Check if the first word in `keywords` is a keyword. */
  function keywordMatch(mode, keywords) {
    var keyword = keywords[0];

    if (language[KEY_INSENSITIVE]) {
      keyword = keyword.toLowerCase();
    }

    return own$7.call(mode.keywords, keyword) && mode.keywords[keyword];
  }

  /* Check if `lexeme` is illegal according to `mode`. */
  function isIllegal(lexeme, mode) {
    return !ignore && test$2(mode.illegalRe, lexeme);
  }

  /* Check if `lexeme` ends `mode`. */
  function endOfMode(mode, lexeme) {
    if (test$2(mode.endRe, lexeme)) {
      while (mode.endsParent && mode.parent) {
        mode = mode.parent;
      }
      return mode;
    }

    if (mode.endsWithParent) {
      return endOfMode(mode.parent, lexeme);
    }
  }

  /* Check a sub-mode. */
  function subMode(lexeme, mode) {
    var values = mode.contains;
    var length = values.length;
    var index = -1;

    while (++index < length) {
      if (test$2(values[index].beginRe, lexeme)) {
        return values[index];
      }
    }
  }

  /* Exit the current context. */
  function pop() {
    /* istanbul ignore next - removed in hljs 9.3 */
    currentChildren = stack.pop() || children;
  }
}

function expandMode(mode) {
  if (mode.variants && !mode[KEY_CACHED_VARIANTS]) {
    mode[KEY_CACHED_VARIANTS] = mode.variants.map(function (variant) {
      return inherit(mode, { variants: null }, variant);
    });
  }

  return mode[KEY_CACHED_VARIANTS] || mode.endsWithParent && [inherit(mode)] || [mode];
}

/* Compile a language. */
function compileLanguage(language) {
  compileMode(language);

  /* Compile a language mode, optionally with a parent. */
  function compileMode(mode, parent) {
    var compiledKeywords = {};
    var terminators;

    if (mode.compiled) {
      return;
    }

    mode.compiled = true;

    mode.keywords = mode.keywords || mode.beginKeywords;

    if (mode.keywords) {
      if (typeof mode.keywords === 'string') {
        flatten('keyword', mode.keywords);
      } else {
        Object.keys(mode.keywords).forEach(function (className) {
          flatten(className, mode.keywords[className]);
        });
      }

      mode.keywords = compiledKeywords;
    }

    mode.lexemesRe = langRe(mode.lexemes || /\w+/, true);

    if (parent) {
      if (mode.beginKeywords) {
        mode.begin = '\\b(' + mode.beginKeywords.split(C_SPACE$14).join(C_PIPE$2) + ')\\b';
      }

      if (!mode.begin) {
        mode.begin = /\B|\b/;
      }

      mode.beginRe = langRe(mode.begin);

      if (!mode.end && !mode.endsWithParent) {
        mode.end = /\B|\b/;
      }

      if (mode.end) {
        mode.endRe = langRe(mode.end);
      }

      mode.terminatorEnd = source(mode.end) || EMPTY$1;

      if (mode.endsWithParent && parent.terminatorEnd) {
        mode.terminatorEnd += (mode.end ? C_PIPE$2 : EMPTY$1) + parent.terminatorEnd;
      }
    }

    if (mode.illegal) {
      mode.illegalRe = langRe(mode.illegal);
    }

    if (mode.relevance === undefined) {
      mode.relevance = 1;
    }

    if (!mode.contains) {
      mode.contains = [];
    }

    mode.contains = Array.prototype.concat.apply([], mode.contains.map(function (c) {
      return expandMode(c === 'self' ? mode : c);
    }));

    mode.contains.forEach(function (c) {
      compileMode(c, mode);
    });

    if (mode.starts) {
      compileMode(mode.starts, parent);
    }

    terminators = mode.contains.map(function (c) {
      return c.beginKeywords ? '\\.?(' + c.begin + ')\\.?' : c.begin;
    }).concat([mode.terminatorEnd, mode.illegal]).map(source).filter(Boolean);

    mode.terminators = terminators.length ? langRe(terminators.join(C_PIPE$2), true) : { exec: execNoop };

    /* Flatten a classname. */
    function flatten(className, value) {
      var pairs;
      var pair;
      var index;
      var length;

      if (language[KEY_INSENSITIVE]) {
        value = value.toLowerCase();
      }

      pairs = value.split(C_SPACE$14);
      length = pairs.length;
      index = -1;

      while (++index < length) {
        pair = pairs[index].split(C_PIPE$2);

        compiledKeywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];
      }
    }
  }

  /* Create a regex for `value`. */
  function langRe(value, global) {
    return new RegExp(source(value), 'm' + (language[KEY_INSENSITIVE] ? 'i' : '') + (global ? 'g' : ''));
  }

  /* Get the source of an expression or string. */
  function source(re) {
    return re && re.source || re;
  }
}

/* Normalize a syntax result. */
function normalize$4(result) {
  return {
    relevance: result.relevance || 0,
    language: result.language || null,
    value: result.value || []
  };
}

/* Check if `expression` matches `lexeme`. */
function test$2(expression, lexeme) {
  var match = expression && expression.exec(lexeme);
  return match && match.index === 0;
}

/* No-op exec. */
function execNoop() {
  return null;
}

/* Get a language by `name`. */
function getLanguage(name) {
  name = name.toLowerCase();

  return languages[name] || languages[aliases[name]];
}

var _1c = function _1c(hljs) {

  // общий паттерн для определения идентификаторов
  var UNDERSCORE_IDENT_RE = '[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]+';

  // v7 уникальные ключевые слова, отсутствующие в v8 ==> keyword
  var v7_keywords = 'далее ';

  // v8 ключевые слова ==> keyword
  var v8_keywords = 'возврат вызватьисключение выполнить для если и из или иначе иначеесли исключение каждого конецесли ' + 'конецпопытки конеццикла не новый перейти перем по пока попытка прервать продолжить тогда цикл экспорт ';

  // keyword : ключевые слова
  var KEYWORD = v7_keywords + v8_keywords;

  // v7 уникальные директивы, отсутствующие в v8 ==> meta-keyword
  var v7_meta_keywords = 'загрузитьизфайла ';

  // v8 ключевые слова в инструкциях препроцессора, директивах компиляции, аннотациях ==> meta-keyword
  var v8_meta_keywords = 'вебклиент вместо внешнеесоединение клиент конецобласти мобильноеприложениеклиент мобильноеприложениесервер ' + 'наклиенте наклиентенасервере наклиентенасерверебезконтекста насервере насерверебезконтекста область перед ' + 'после сервер толстыйклиентобычноеприложение толстыйклиентуправляемоеприложение тонкийклиент ';

  // meta-keyword : ключевые слова в инструкциях препроцессора, директивах компиляции, аннотациях
  var METAKEYWORD = v7_meta_keywords + v8_meta_keywords;

  // v7 системные константы ==> built_in
  var v7_system_constants = 'разделительстраниц разделительстрок символтабуляции ';

  // v7 уникальные методы глобального контекста, отсутствующие в v8 ==> built_in
  var v7_global_context_methods = 'ansitooem oemtoansi ввестивидсубконто ввестиперечисление ввестипериод ввестиплансчетов выбранныйплансчетов ' + 'датагод датамесяц датачисло заголовоксистемы значениевстроку значениеизстроки каталогиб каталогпользователя ' + 'кодсимв конгода конецпериодаби конецрассчитанногопериодаби конецстандартногоинтервала конквартала конмесяца ' + 'коннедели лог лог10 максимальноеколичествосубконто названиеинтерфейса названиенабораправ назначитьвид ' + 'назначитьсчет найтиссылки началопериодаби началостандартногоинтервала начгода начквартала начмесяца ' + 'начнедели номерднягода номерднянедели номернеделигода обработкаожидания основнойжурналрасчетов ' + 'основнойплансчетов основнойязык очиститьокносообщений периодстр получитьвремята получитьдатута ' + 'получитьдокументта получитьзначенияотбора получитьпозициюта получитьпустоезначение получитьта ' + 'префиксавтонумерации пропись пустоезначение разм разобратьпозициюдокумента рассчитатьрегистрына ' + 'рассчитатьрегистрыпо симв создатьобъект статусвозврата стрколичествострок сформироватьпозициюдокумента ' + 'счетпокоду текущеевремя типзначения типзначениястр установитьтана установитьтапо фиксшаблон шаблон ';

  // v8 методы глобального контекста ==> built_in
  var v8_global_context_methods = 'acos asin atan base64значение base64строка cos exp log log10 pow sin sqrt tan xmlзначение xmlстрока ' + 'xmlтип xmlтипзнч активноеокно безопасныйрежим безопасныйрежимразделенияданных булево ввестидату ввестизначение ' + 'ввестистроку ввестичисло возможностьчтенияxml вопрос восстановитьзначение врег выгрузитьжурналрегистрации ' + 'выполнитьобработкуоповещения выполнитьпроверкуправдоступа вычислить год данныеформывзначение дата день деньгода ' + 'деньнедели добавитьмесяц заблокироватьданныедляредактирования заблокироватьработупользователя завершитьработусистемы ' + 'загрузитьвнешнююкомпоненту закрытьсправку записатьjson записатьxml записатьдатуjson записьжурналарегистрации ' + 'заполнитьзначениясвойств запроситьразрешениепользователя запуститьприложение запуститьсистему зафиксироватьтранзакцию ' + 'значениевданныеформы значениевстрокувнутр значениевфайл значениезаполнено значениеизстрокивнутр значениеизфайла ' + 'изxmlтипа импортмоделиxdto имякомпьютера имяпользователя инициализироватьпредопределенныеданные информацияобошибке ' + 'каталогбиблиотекимобильногоустройства каталогвременныхфайлов каталогдокументов каталогпрограммы кодироватьстроку ' + 'кодлокализацииинформационнойбазы кодсимвола командасистемы конецгода конецдня конецквартала конецмесяца конецминуты ' + 'конецнедели конецчаса конфигурациябазыданныхизмененадинамически конфигурацияизменена копироватьданныеформы ' + 'копироватьфайл краткоепредставлениеошибки лев макс местноевремя месяц мин минута монопольныйрежим найти ' + 'найтинедопустимыесимволыxml найтиокнопонавигационнойссылке найтипомеченныенаудаление найтипоссылкам найтифайлы ' + 'началогода началодня началоквартала началомесяца началоминуты началонедели началочаса начатьзапросразрешенияпользователя ' + 'начатьзапускприложения начатькопированиефайла начатьперемещениефайла начатьподключениевнешнейкомпоненты ' + 'начатьподключениерасширенияработыскриптографией начатьподключениерасширенияработысфайлами начатьпоискфайлов ' + 'начатьполучениекаталогавременныхфайлов начатьполучениекаталогадокументов начатьполучениерабочегокаталогаданныхпользователя ' + 'начатьполучениефайлов начатьпомещениефайла начатьпомещениефайлов начатьсозданиедвоичныхданныхизфайла начатьсозданиекаталога ' + 'начатьтранзакцию начатьудалениефайлов начатьустановкувнешнейкомпоненты начатьустановкурасширенияработыскриптографией ' + 'начатьустановкурасширенияработысфайлами неделягода необходимостьзавершениясоединения номерсеансаинформационнойбазы ' + 'номерсоединенияинформационнойбазы нрег нстр обновитьинтерфейс обновитьнумерациюобъектов обновитьповторноиспользуемыезначения ' + 'обработкапрерыванияпользователя объединитьфайлы окр описаниеошибки оповестить оповеститьобизменении ' + 'отключитьобработчикзапросанастроекклиенталицензирования отключитьобработчикожидания отключитьобработчикоповещения ' + 'открытьзначение открытьиндекссправки открытьсодержаниесправки открытьсправку открытьформу открытьформумодально ' + 'отменитьтранзакцию очиститьжурналрегистрации очиститьнастройкипользователя очиститьсообщения параметрыдоступа ' + 'перейтипонавигационнойссылке переместитьфайл подключитьвнешнююкомпоненту ' + 'подключитьобработчикзапросанастроекклиенталицензирования подключитьобработчикожидания подключитьобработчикоповещения ' + 'подключитьрасширениеработыскриптографией подключитьрасширениеработысфайлами подробноепредставлениеошибки ' + 'показатьвводдаты показатьвводзначения показатьвводстроки показатьвводчисла показатьвопрос показатьзначение ' + 'показатьинформациюобошибке показатьнакарте показатьоповещениепользователя показатьпредупреждение полноеимяпользователя ' + 'получитьcomобъект получитьxmlтип получитьадреспоместоположению получитьблокировкусеансов получитьвремязавершенияспящегосеанса ' + 'получитьвремязасыпанияпассивногосеанса получитьвремяожиданияблокировкиданных получитьданныевыбора ' + 'получитьдополнительныйпараметрклиенталицензирования получитьдопустимыекодылокализации получитьдопустимыечасовыепояса ' + 'получитьзаголовокклиентскогоприложения получитьзаголовоксистемы получитьзначенияотборажурналарегистрации ' + 'получитьидентификаторконфигурации получитьизвременногохранилища получитьимявременногофайла ' + 'получитьимяклиенталицензирования получитьинформациюэкрановклиента получитьиспользованиежурналарегистрации ' + 'получитьиспользованиесобытияжурналарегистрации получитькраткийзаголовокприложения получитьмакетоформления ' + 'получитьмаскувсефайлы получитьмаскувсефайлыклиента получитьмаскувсефайлысервера получитьместоположениепоадресу ' + 'получитьминимальнуюдлинупаролейпользователей получитьнавигационнуюссылку получитьнавигационнуюссылкуинформационнойбазы ' + 'получитьобновлениеконфигурациибазыданных получитьобновлениепредопределенныхданныхинформационнойбазы получитьобщиймакет ' + 'получитьобщуюформу получитьокна получитьоперативнуюотметкувремени получитьотключениебезопасногорежима ' + 'получитьпараметрыфункциональныхопцийинтерфейса получитьполноеимяпредопределенногозначения ' + 'получитьпредставлениянавигационныхссылок получитьпроверкусложностипаролейпользователей получитьразделительпути ' + 'получитьразделительпутиклиента получитьразделительпутисервера получитьсеансыинформационнойбазы ' + 'получитьскоростьклиентскогосоединения получитьсоединенияинформационнойбазы получитьсообщенияпользователю ' + 'получитьсоответствиеобъектаиформы получитьсоставстандартногоинтерфейсаodata получитьструктурухранениябазыданных ' + 'получитьтекущийсеансинформационнойбазы получитьфайл получитьфайлы получитьформу получитьфункциональнуюопцию ' + 'получитьфункциональнуюопциюинтерфейса получитьчасовойпоясинформационнойбазы пользователиос поместитьвовременноехранилище ' + 'поместитьфайл поместитьфайлы прав праводоступа предопределенноезначение представлениекодалокализации представлениепериода ' + 'представлениеправа представлениеприложения представлениесобытияжурналарегистрации представлениечасовогопояса предупреждение ' + 'прекратитьработусистемы привилегированныйрежим продолжитьвызов прочитатьjson прочитатьxml прочитатьдатуjson пустаястрока ' + 'рабочийкаталогданныхпользователя разблокироватьданныедляредактирования разделитьфайл разорватьсоединениесвнешнимисточникомданных ' + 'раскодироватьстроку рольдоступна секунда сигнал символ скопироватьжурналрегистрации смещениелетнеговремени ' + 'смещениестандартноговремени соединитьбуферыдвоичныхданных создатькаталог создатьфабрикуxdto сокрл сокрлп сокрп сообщить ' + 'состояние сохранитьзначение сохранитьнастройкипользователя сред стрдлина стрзаканчиваетсяна стрзаменить стрнайти стрначинаетсяс ' + 'строка строкасоединенияинформационнойбазы стрполучитьстроку стрразделить стрсоединить стрсравнить стрчисловхождений ' + 'стрчислострок стршаблон текущаядата текущаядатасеанса текущаяуниверсальнаядата текущаяуниверсальнаядатавмиллисекундах ' + 'текущийвариантинтерфейсаклиентскогоприложения текущийвариантосновногошрифтаклиентскогоприложения текущийкодлокализации ' + 'текущийрежимзапуска текущийязык текущийязыксистемы тип типзнч транзакцияактивна трег удалитьданныеинформационнойбазы ' + 'удалитьизвременногохранилища удалитьобъекты удалитьфайлы универсальноевремя установитьбезопасныйрежим ' + 'установитьбезопасныйрежимразделенияданных установитьблокировкусеансов установитьвнешнююкомпоненту ' + 'установитьвремязавершенияспящегосеанса установитьвремязасыпанияпассивногосеанса установитьвремяожиданияблокировкиданных ' + 'установитьзаголовокклиентскогоприложения установитьзаголовоксистемы установитьиспользованиежурналарегистрации ' + 'установитьиспользованиесобытияжурналарегистрации установитькраткийзаголовокприложения ' + 'установитьминимальнуюдлинупаролейпользователей установитьмонопольныйрежим установитьнастройкиклиенталицензирования ' + 'установитьобновлениепредопределенныхданныхинформационнойбазы установитьотключениебезопасногорежима ' + 'установитьпараметрыфункциональныхопцийинтерфейса установитьпривилегированныйрежим ' + 'установитьпроверкусложностипаролейпользователей установитьрасширениеработыскриптографией ' + 'установитьрасширениеработысфайлами установитьсоединениесвнешнимисточникомданных установитьсоответствиеобъектаиформы ' + 'установитьсоставстандартногоинтерфейсаodata установитьчасовойпоясинформационнойбазы установитьчасовойпояссеанса ' + 'формат цел час часовойпояс часовойпояссеанса число числопрописью этоадресвременногохранилища ';

  // v8 свойства глобального контекста ==> built_in
  var v8_global_context_property = 'wsссылки библиотекакартинок библиотекамакетовоформлениякомпоновкиданных библиотекастилей бизнеспроцессы ' + 'внешниеисточникиданных внешниеобработки внешниеотчеты встроенныепокупки главныйинтерфейс главныйстиль ' + 'документы доставляемыеуведомления журналыдокументов задачи информацияобинтернетсоединении использованиерабочейдаты ' + 'историяработыпользователя константы критерииотбора метаданные обработки отображениерекламы отправкадоставляемыхуведомлений ' + 'отчеты панельзадачос параметрзапуска параметрысеанса перечисления планывидоврасчета планывидовхарактеристик ' + 'планыобмена планысчетов полнотекстовыйпоиск пользователиинформационнойбазы последовательности проверкавстроенныхпокупок ' + 'рабочаядата расширенияконфигурации регистрыбухгалтерии регистрынакопления регистрырасчета регистрысведений ' + 'регламентныезадания сериализаторxdto справочники средствагеопозиционирования средствакриптографии средствамультимедиа ' + 'средстваотображениярекламы средствапочты средствателефонии фабрикаxdto файловыепотоки фоновыезадания хранилищанастроек ' + 'хранилищевариантовотчетов хранилищенастроекданныхформ хранилищеобщихнастроек хранилищепользовательскихнастроекдинамическихсписков ' + 'хранилищепользовательскихнастроекотчетов хранилищесистемныхнастроек ';

  // built_in : встроенные или библиотечные объекты (константы, классы, функции)
  var BUILTIN = v7_system_constants + v7_global_context_methods + v8_global_context_methods + v8_global_context_property;

  // v8 системные наборы значений ==> class
  var v8_system_sets_of_values = 'webцвета windowsцвета windowsшрифты библиотекакартинок рамкистиля символы цветастиля шрифтыстиля ';

  // v8 системные перечисления - интерфейсные ==> class
  var v8_system_enums_interface = 'автоматическоесохранениеданныхформывнастройках автонумерациявформе автораздвижениесерий ' + 'анимациядиаграммы вариантвыравниванияэлементовизаголовков вариантуправлениявысотойтаблицы ' + 'вертикальнаяпрокруткаформы вертикальноеположение вертикальноеположениеэлемента видгруппыформы ' + 'виддекорацииформы виддополненияэлементаформы видизмененияданных видкнопкиформы видпереключателя ' + 'видподписейкдиаграмме видполяформы видфлажка влияниеразмеранапузырекдиаграммы горизонтальноеположение ' + 'горизонтальноеположениеэлемента группировкаколонок группировкаподчиненныхэлементовформы ' + 'группыиэлементы действиеперетаскивания дополнительныйрежимотображения допустимыедействияперетаскивания ' + 'интервалмеждуэлементамиформы использованиевывода использованиеполосыпрокрутки ' + 'используемоезначениеточкибиржевойдиаграммы историявыборапривводе источникзначенийоситочекдиаграммы ' + 'источникзначенияразмерапузырькадиаграммы категориягруппыкоманд максимумсерий начальноеотображениедерева ' + 'начальноеотображениесписка обновлениетекстаредактирования ориентациядендрограммы ориентациядиаграммы ' + 'ориентацияметокдиаграммы ориентацияметоксводнойдиаграммы ориентацияэлементаформы отображениевдиаграмме ' + 'отображениевлегендедиаграммы отображениегруппыкнопок отображениезаголовкашкалыдиаграммы ' + 'отображениезначенийсводнойдиаграммы отображениезначенияизмерительнойдиаграммы ' + 'отображениеинтерваладиаграммыганта отображениекнопки отображениекнопкивыбора отображениеобсужденийформы ' + 'отображениеобычнойгруппы отображениеотрицательныхзначенийпузырьковойдиаграммы отображениепанелипоиска ' + 'отображениеподсказки отображениепредупрежденияприредактировании отображениеразметкиполосырегулирования ' + 'отображениестраницформы отображениетаблицы отображениетекстазначениядиаграммыганта ' + 'отображениеуправленияобычнойгруппы отображениефигурыкнопки палитрацветовдиаграммы поведениеобычнойгруппы ' + 'поддержкамасштабадендрограммы поддержкамасштабадиаграммыганта поддержкамасштабасводнойдиаграммы ' + 'поисквтаблицепривводе положениезаголовкаэлементаформы положениекартинкикнопкиформы ' + 'положениекартинкиэлементаграфическойсхемы положениекоманднойпанелиформы положениекоманднойпанелиэлементаформы ' + 'положениеопорнойточкиотрисовки положениеподписейкдиаграмме положениеподписейшкалызначенийизмерительнойдиаграммы ' + 'положениесостоянияпросмотра положениестрокипоиска положениетекстасоединительнойлинии положениеуправленияпоиском ' + 'положениешкалывремени порядокотображенияточекгоризонтальнойгистограммы порядоксерийвлегендедиаграммы ' + 'размеркартинки расположениезаголовкашкалыдиаграммы растягиваниеповертикалидиаграммыганта ' + 'режимавтоотображениясостояния режимвводастроктаблицы режимвыборанезаполненного режимвыделениядаты ' + 'режимвыделениястрокитаблицы режимвыделениятаблицы режимизмененияразмера режимизменениясвязанногозначения ' + 'режимиспользованиядиалогапечати режимиспользованияпараметракоманды режиммасштабированияпросмотра ' + 'режимосновногоокнаклиентскогоприложения режимоткрытияокнаформы режимотображениявыделения ' + 'режимотображениягеографическойсхемы режимотображениязначенийсерии режимотрисовкисеткиграфическойсхемы ' + 'режимполупрозрачностидиаграммы режимпробеловдиаграммы режимразмещениянастранице режимредактированияколонки ' + 'режимсглаживаниядиаграммы режимсглаживанияиндикатора режимсписказадач сквозноевыравнивание ' + 'сохранениеданныхформывнастройках способзаполнениятекстазаголовкашкалыдиаграммы ' + 'способопределенияограничивающегозначениядиаграммы стандартнаягруппакоманд стандартноеоформление ' + 'статусоповещенияпользователя стильстрелки типаппроксимациилиниитрендадиаграммы типдиаграммы ' + 'типединицышкалывремени типимпортасерийслоягеографическойсхемы типлиниигеографическойсхемы типлиниидиаграммы ' + 'типмаркерагеографическойсхемы типмаркерадиаграммы типобластиоформления ' + 'типорганизацииисточникаданныхгеографическойсхемы типотображениясериислоягеографическойсхемы ' + 'типотображенияточечногообъектагеографическойсхемы типотображенияшкалыэлементалегендыгеографическойсхемы ' + 'типпоискаобъектовгеографическойсхемы типпроекциигеографическойсхемы типразмещенияизмерений ' + 'типразмещенияреквизитовизмерений типрамкиэлементауправления типсводнойдиаграммы ' + 'типсвязидиаграммыганта типсоединениязначенийпосериямдиаграммы типсоединенияточекдиаграммы ' + 'типсоединительнойлинии типстороныэлементаграфическойсхемы типформыотчета типшкалырадарнойдиаграммы ' + 'факторлиниитрендадиаграммы фигуракнопки фигурыграфическойсхемы фиксациявтаблице форматдняшкалывремени ' + 'форматкартинки ширинаподчиненныхэлементовформы ';

  // v8 системные перечисления - свойства прикладных объектов ==> class
  var v8_system_enums_objects_properties = 'виддвижениябухгалтерии виддвижениянакопления видпериодарегистрарасчета видсчета видточкимаршрутабизнеспроцесса ' + 'использованиеагрегатарегистранакопления использованиегруппиэлементов использованиережимапроведения ' + 'использованиесреза периодичностьагрегатарегистранакопления режимавтовремя режимзаписидокумента режимпроведениядокумента ';

  // v8 системные перечисления - планы обмена ==> class
  var v8_system_enums_exchange_plans = 'авторегистрацияизменений допустимыйномерсообщения отправкаэлементаданных получениеэлементаданных ';

  // v8 системные перечисления - табличный документ ==> class
  var v8_system_enums_tabular_document = 'использованиерасшифровкитабличногодокумента ориентациястраницы положениеитоговколоноксводнойтаблицы ' + 'положениеитоговстроксводнойтаблицы положениетекстаотносительнокартинки расположениезаголовкагруппировкитабличногодокумента ' + 'способчтениязначенийтабличногодокумента типдвустороннейпечати типзаполненияобластитабличногодокумента ' + 'типкурсоровтабличногодокумента типлиниирисункатабличногодокумента типлинииячейкитабличногодокумента ' + 'типнаправленияпереходатабличногодокумента типотображениявыделениятабличногодокумента типотображениялинийсводнойтаблицы ' + 'типразмещениятекстатабличногодокумента типрисункатабличногодокумента типсмещениятабличногодокумента ' + 'типузоратабличногодокумента типфайлатабличногодокумента точностьпечати чередованиерасположениястраниц ';

  // v8 системные перечисления - планировщик ==> class
  var v8_system_enums_sheduler = 'отображениевремениэлементовпланировщика ';

  // v8 системные перечисления - форматированный документ ==> class
  var v8_system_enums_formatted_document = 'типфайлаформатированногодокумента ';

  // v8 системные перечисления - запрос ==> class
  var v8_system_enums_query = 'обходрезультатазапроса типзаписизапроса ';

  // v8 системные перечисления - построитель отчета ==> class
  var v8_system_enums_report_builder = 'видзаполнениярасшифровкипостроителяотчета типдобавленияпредставлений типизмеренияпостроителяотчета типразмещенияитогов ';

  // v8 системные перечисления - работа с файлами ==> class
  var v8_system_enums_files = 'доступкфайлу режимдиалогавыборафайла режимоткрытияфайла ';

  // v8 системные перечисления - построитель запроса ==> class
  var v8_system_enums_query_builder = 'типизмеренияпостроителязапроса ';

  // v8 системные перечисления - анализ данных ==> class
  var v8_system_enums_data_analysis = 'видданныханализа методкластеризации типединицыинтервалавременианализаданных типзаполнениятаблицырезультатаанализаданных ' + 'типиспользованиячисловыхзначенийанализаданных типисточникаданныхпоискаассоциаций типколонкианализаданныхдереворешений ' + 'типколонкианализаданныхкластеризация типколонкианализаданныхобщаястатистика типколонкианализаданныхпоискассоциаций ' + 'типколонкианализаданныхпоискпоследовательностей типколонкимоделипрогноза типмерырасстоянияанализаданных ' + 'типотсеченияправилассоциации типполяанализаданных типстандартизациианализаданных типупорядочиванияправилассоциациианализаданных ' + 'типупорядочиванияшаблоновпоследовательностейанализаданных типупрощениядереварешений ';

  // v8 системные перечисления - xml, json, xs, dom, xdto, web-сервисы ==> class
  var v8_system_enums_xml_json_xs_dom_xdto_ws = 'wsнаправлениепараметра вариантxpathxs вариантзаписидатыjson вариантпростоготипаxs видгруппымоделиxs видфасетаxdto ' + 'действиепостроителяdom завершенностьпростоготипаxs завершенностьсоставноготипаxs завершенностьсхемыxs запрещенныеподстановкиxs ' + 'исключениягруппподстановкиxs категорияиспользованияатрибутаxs категорияограниченияидентичностиxs категорияограниченияпространствименxs ' + 'методнаследованияxs модельсодержимогоxs назначениетипаxml недопустимыеподстановкиxs обработкапробельныхсимволовxs обработкасодержимогоxs ' + 'ограничениезначенияxs параметрыотбораузловdom переносстрокjson позициявдокументеdom пробельныесимволыxml типатрибутаxml типзначенияjson ' + 'типканоническогоxml типкомпонентыxs типпроверкиxml типрезультатаdomxpath типузлаdom типузлаxml формаxml формапредставленияxs ' + 'форматдатыjson экранированиесимволовjson ';

  // v8 системные перечисления - система компоновки данных ==> class
  var v8_system_enums_data_composition_system = 'видсравнениякомпоновкиданных действиеобработкирасшифровкикомпоновкиданных направлениесортировкикомпоновкиданных ' + 'расположениевложенныхэлементоврезультатакомпоновкиданных расположениеитоговкомпоновкиданных расположениегруппировкикомпоновкиданных ' + 'расположениеполейгруппировкикомпоновкиданных расположениеполякомпоновкиданных расположениереквизитовкомпоновкиданных ' + 'расположениересурсовкомпоновкиданных типбухгалтерскогоостаткакомпоновкиданных типвыводатекстакомпоновкиданных ' + 'типгруппировкикомпоновкиданных типгруппыэлементовотборакомпоновкиданных типдополненияпериодакомпоновкиданных ' + 'типзаголовкаполейкомпоновкиданных типмакетагруппировкикомпоновкиданных типмакетаобластикомпоновкиданных типостаткакомпоновкиданных ' + 'типпериодакомпоновкиданных типразмещениятекстакомпоновкиданных типсвязинаборовданныхкомпоновкиданных типэлементарезультатакомпоновкиданных ' + 'расположениелегендыдиаграммыкомпоновкиданных типпримененияотборакомпоновкиданных режимотображенияэлементанастройкикомпоновкиданных ' + 'режимотображениянастроеккомпоновкиданных состояниеэлементанастройкикомпоновкиданных способвосстановлениянастроеккомпоновкиданных ' + 'режимкомпоновкирезультата использованиепараметракомпоновкиданных автопозицияресурсовкомпоновкиданных ' + 'вариантиспользованиягруппировкикомпоновкиданных расположениересурсоввдиаграммекомпоновкиданных фиксациякомпоновкиданных ' + 'использованиеусловногооформлениякомпоновкиданных ';

  // v8 системные перечисления - почта ==> class
  var v8_system_enums_email = 'важностьинтернетпочтовогосообщения обработкатекстаинтернетпочтовогосообщения способкодированияинтернетпочтовоговложения ' + 'способкодированиянеasciiсимволовинтернетпочтовогосообщения типтекстапочтовогосообщения протоколинтернетпочты ' + 'статусразборапочтовогосообщения ';

  // v8 системные перечисления - журнал регистрации ==> class
  var v8_system_enums_logbook = 'режимтранзакциизаписижурналарегистрации статустранзакциизаписижурналарегистрации уровеньжурналарегистрации ';

  // v8 системные перечисления - криптография ==> class
  var v8_system_enums_cryptography = 'расположениехранилищасертификатовкриптографии режимвключениясертификатовкриптографии режимпроверкисертификатакриптографии ' + 'типхранилищасертификатовкриптографии ';

  // v8 системные перечисления - ZIP ==> class
  var v8_system_enums_zip = 'кодировкаименфайловвzipфайле методсжатияzip методшифрованияzip режимвосстановленияпутейфайловzip режимобработкиподкаталоговzip ' + 'режимсохраненияпутейzip уровеньсжатияzip ';

  // v8 системные перечисления - 
  // Блокировка данных, Фоновые задания, Автоматизированное тестирование,
  // Доставляемые уведомления, Встроенные покупки, Интернет, Работа с двоичными данными ==> class
  var v8_system_enums_other = 'звуковоеоповещение направлениепереходакстроке позициявпотоке порядокбайтов режимблокировкиданных режимуправленияблокировкойданных ' + 'сервисвстроенныхпокупок состояниефоновогозадания типподписчикадоставляемыхуведомлений уровеньиспользованиязащищенногосоединенияftp ';

  // v8 системные перечисления - схема запроса ==> class
  var v8_system_enums_request_schema = 'направлениепорядкасхемызапроса типдополненияпериодамисхемызапроса типконтрольнойточкисхемызапроса типобъединениясхемызапроса ' + 'типпараметрадоступнойтаблицысхемызапроса типсоединениясхемызапроса ';

  // v8 системные перечисления - свойства объектов метаданных ==> class
  var v8_system_enums_properties_of_metadata_objects = 'httpметод автоиспользованиеобщегореквизита автопрефиксномеразадачи вариантвстроенногоязыка видиерархии видрегистранакопления ' + 'видтаблицывнешнегоисточникаданных записьдвиженийприпроведении заполнениепоследовательностей индексирование ' + 'использованиебазыпланавидоврасчета использованиебыстроговыбора использованиеобщегореквизита использованиеподчинения ' + 'использованиеполнотекстовогопоиска использованиеразделяемыхданныхобщегореквизита использованиереквизита ' + 'назначениеиспользованияприложения назначениерасширенияконфигурации направлениепередачи обновлениепредопределенныхданных ' + 'оперативноепроведение основноепредставлениевидарасчета основноепредставлениевидахарактеристики основноепредставлениезадачи ' + 'основноепредставлениепланаобмена основноепредставлениесправочника основноепредставлениесчета перемещениеграницыприпроведении ' + 'периодичностьномерабизнеспроцесса периодичностьномерадокумента периодичностьрегистрарасчета периодичностьрегистрасведений ' + 'повторноеиспользованиевозвращаемыхзначений полнотекстовыйпоискпривводепостроке принадлежностьобъекта проведение ' + 'разделениеаутентификацииобщегореквизита разделениеданныхобщегореквизита разделениерасширенийконфигурацииобщегореквизита ' + 'режимавтонумерацииобъектов режимзаписирегистра режимиспользованиямодальности ' + 'режимиспользованиясинхронныхвызововрасширенийплатформыивнешнихкомпонент режимповторногоиспользованиясеансов ' + 'режимполученияданныхвыборапривводепостроке режимсовместимости режимсовместимостиинтерфейса ' + 'режимуправленияблокировкойданныхпоумолчанию сериикодовпланавидовхарактеристик сериикодовпланасчетов ' + 'сериикодовсправочника созданиепривводе способвыбора способпоискастрокипривводепостроке способредактирования ' + 'типданныхтаблицывнешнегоисточникаданных типкодапланавидоврасчета типкодасправочника типмакета типномерабизнеспроцесса ' + 'типномерадокумента типномеразадачи типформы удалениедвижений ';

  // v8 системные перечисления - разные ==> class
  var v8_system_enums_differents = 'важностьпроблемыприменениярасширенияконфигурации вариантинтерфейсаклиентскогоприложения вариантмасштабаформклиентскогоприложения ' + 'вариантосновногошрифтаклиентскогоприложения вариантстандартногопериода вариантстандартнойдатыначала видграницы видкартинки ' + 'видотображенияполнотекстовогопоиска видрамки видсравнения видцвета видчисловогозначения видшрифта допустимаядлина допустимыйзнак ' + 'использованиеbyteordermark использованиеметаданныхполнотекстовогопоиска источникрасширенийконфигурации клавиша кодвозвратадиалога ' + 'кодировкаxbase кодировкатекста направлениепоиска направлениесортировки обновлениепредопределенныхданных обновлениеприизмененииданных ' + 'отображениепанелиразделов проверказаполнения режимдиалогавопрос режимзапускаклиентскогоприложения режимокругления режимоткрытияформприложения ' + 'режимполнотекстовогопоиска скоростьклиентскогосоединения состояниевнешнегоисточникаданных состояниеобновленияконфигурациибазыданных ' + 'способвыборасертификатаwindows способкодированиястроки статуссообщения типвнешнейкомпоненты типплатформы типповеденияклавишиenter ' + 'типэлементаинформацииовыполненииобновленияконфигурациибазыданных уровеньизоляциитранзакций хешфункция частидаты';

  // class: встроенные наборы значений, системные перечисления (содержат дочерние значения, обращения к которым через разыменование)
  var CLASS = v8_system_sets_of_values + v8_system_enums_interface + v8_system_enums_objects_properties + v8_system_enums_exchange_plans + v8_system_enums_tabular_document + v8_system_enums_sheduler + v8_system_enums_formatted_document + v8_system_enums_query + v8_system_enums_report_builder + v8_system_enums_files + v8_system_enums_query_builder + v8_system_enums_data_analysis + v8_system_enums_xml_json_xs_dom_xdto_ws + v8_system_enums_data_composition_system + v8_system_enums_email + v8_system_enums_logbook + v8_system_enums_cryptography + v8_system_enums_zip + v8_system_enums_other + v8_system_enums_request_schema + v8_system_enums_properties_of_metadata_objects + v8_system_enums_differents;

  // v8 общие объекты (у объектов есть конструктор, экземпляры создаются методом НОВЫЙ) ==> type
  var v8_shared_object = 'comобъект ftpсоединение httpзапрос httpсервисответ httpсоединение wsопределения wsпрокси xbase анализданных аннотацияxs ' + 'блокировкаданных буфердвоичныхданных включениеxs выражениекомпоновкиданных генераторслучайныхчисел географическаясхема ' + 'географическиекоординаты графическаясхема группамоделиxs данныерасшифровкикомпоновкиданных двоичныеданные дендрограмма ' + 'диаграмма диаграммаганта диалогвыборафайла диалогвыборацвета диалогвыборашрифта диалограсписаниярегламентногозадания ' + 'диалогредактированиястандартногопериода диапазон документdom документhtml документацияxs доставляемоеуведомление ' + 'записьdom записьfastinfoset записьhtml записьjson записьxml записьzipфайла записьданных записьтекста записьузловdom ' + 'запрос защищенноесоединениеopenssl значенияполейрасшифровкикомпоновкиданных извлечениетекста импортxs интернетпочта ' + 'интернетпочтовоесообщение интернетпочтовыйпрофиль интернетпрокси интернетсоединение информациядляприложенияxs ' + 'использованиеатрибутаxs использованиесобытияжурналарегистрации источникдоступныхнастроеккомпоновкиданных ' + 'итераторузловdom картинка квалификаторыдаты квалификаторыдвоичныхданных квалификаторыстроки квалификаторычисла ' + 'компоновщикмакетакомпоновкиданных компоновщикнастроеккомпоновкиданных конструктормакетаоформлениякомпоновкиданных ' + 'конструкторнастроеккомпоновкиданных конструкторформатнойстроки линия макеткомпоновкиданных макетобластикомпоновкиданных ' + 'макетоформлениякомпоновкиданных маскаxs менеджеркриптографии наборсхемxml настройкикомпоновкиданных настройкисериализацииjson ' + 'обработкакартинок обработкарасшифровкикомпоновкиданных обходдереваdom объявлениеатрибутаxs объявлениенотацииxs ' + 'объявлениеэлементаxs описаниеиспользованиясобытиядоступжурналарегистрации ' + 'описаниеиспользованиясобытияотказвдоступежурналарегистрации описаниеобработкирасшифровкикомпоновкиданных ' + 'описаниепередаваемогофайла описаниетипов определениегруппыатрибутовxs определениегруппымоделиxs ' + 'определениеограниченияидентичностиxs определениепростоготипаxs определениесоставноготипаxs определениетипадокументаdom ' + 'определенияxpathxs отборкомпоновкиданных пакетотображаемыхдокументов параметрвыбора параметркомпоновкиданных ' + 'параметрызаписиjson параметрызаписиxml параметрычтенияxml переопределениеxs планировщик полеанализаданных ' + 'полекомпоновкиданных построительdom построительзапроса построительотчета построительотчетаанализаданных ' + 'построительсхемxml поток потоквпамяти почта почтовоесообщение преобразованиеxsl преобразованиекканоническомуxml ' + 'процессорвыводарезультатакомпоновкиданныхвколлекциюзначений процессорвыводарезультатакомпоновкиданныхвтабличныйдокумент ' + 'процессоркомпоновкиданных разыменовательпространствименdom рамка расписаниерегламентногозадания расширенноеимяxml ' + 'результатчтенияданных своднаядиаграмма связьпараметравыбора связьпотипу связьпотипукомпоновкиданных сериализаторxdto ' + 'сертификатклиентаwindows сертификатклиентафайл сертификаткриптографии сертификатыудостоверяющихцентровwindows ' + 'сертификатыудостоверяющихцентровфайл сжатиеданных системнаяинформация сообщениепользователю сочетаниеклавиш ' + 'сравнениезначений стандартнаядатаначала стандартныйпериод схемаxml схемакомпоновкиданных табличныйдокумент ' + 'текстовыйдокумент тестируемоеприложение типданныхxml уникальныйидентификатор фабрикаxdto файл файловыйпоток ' + 'фасетдлиныxs фасетколичестваразрядовдробнойчастиxs фасетмаксимальноговключающегозначенияxs ' + 'фасетмаксимальногоисключающегозначенияxs фасетмаксимальнойдлиныxs фасетминимальноговключающегозначенияxs ' + 'фасетминимальногоисключающегозначенияxs фасетминимальнойдлиныxs фасетобразцаxs фасетобщегоколичестваразрядовxs ' + 'фасетперечисленияxs фасетпробельныхсимволовxs фильтрузловdom форматированнаястрока форматированныйдокумент ' + 'фрагментxs хешированиеданных хранилищезначения цвет чтениеfastinfoset чтениеhtml чтениеjson чтениеxml чтениеzipфайла ' + 'чтениеданных чтениетекста чтениеузловdom шрифт элементрезультатакомпоновкиданных ';

  // v8 универсальные коллекции значений ==> type
  var v8_universal_collection = 'comsafearray деревозначений массив соответствие списокзначений структура таблицазначений фиксированнаяструктура ' + 'фиксированноесоответствие фиксированныймассив ';

  // type : встроенные типы
  var TYPE = v8_shared_object + v8_universal_collection;

  // literal : примитивные типы
  var LITERAL = 'null истина ложь неопределено';

  // number : числа
  var NUMBERS = hljs.inherit(hljs.NUMBER_MODE);

  // string : строки
  var STRINGS = {
    className: 'string',
    begin: '"|\\|', end: '"|$',
    contains: [{ begin: '""' }]
  };

  // number : даты
  var DATE = {
    begin: "'", end: "'", excludeBegin: true, excludeEnd: true,
    contains: [{
      className: 'number',
      begin: '\\d{4}([\\.\\\\/:-]?\\d{2}){0,5}'
    }]
  };

  // comment : комментарии
  var COMMENTS = hljs.inherit(hljs.C_LINE_COMMENT_MODE);

  // meta : инструкции препроцессора, директивы компиляции
  var META = {
    className: 'meta',
    lexemes: UNDERSCORE_IDENT_RE,
    begin: '#|&', end: '$',
    keywords: { 'meta-keyword': KEYWORD + METAKEYWORD },
    contains: [COMMENTS]
  };

  // symbol : метка goto
  var SYMBOL = {
    className: 'symbol',
    begin: '~', end: ';|:', excludeEnd: true
  };

  // function : объявление процедур и функций
  var FUNCTION = {
    className: 'function',
    lexemes: UNDERSCORE_IDENT_RE,
    variants: [{ begin: 'процедура|функция', end: '\\)', keywords: 'процедура функция' }, { begin: 'конецпроцедуры|конецфункции', keywords: 'конецпроцедуры конецфункции' }],
    contains: [{
      begin: '\\(', end: '\\)', endsParent: true,
      contains: [{
        className: 'params',
        lexemes: UNDERSCORE_IDENT_RE,
        begin: UNDERSCORE_IDENT_RE, end: ',', excludeEnd: true, endsWithParent: true,
        keywords: {
          keyword: 'знач',
          literal: LITERAL
        },
        contains: [NUMBERS, STRINGS, DATE]
      }, COMMENTS]
    }, hljs.inherit(hljs.TITLE_MODE, { begin: UNDERSCORE_IDENT_RE })]
  };

  return {
    case_insensitive: true,
    lexemes: UNDERSCORE_IDENT_RE,
    keywords: {
      keyword: KEYWORD,
      built_in: BUILTIN,
      class: CLASS,
      type: TYPE,
      literal: LITERAL
    },
    contains: [META, FUNCTION, COMMENTS, SYMBOL, NUMBERS, STRINGS, DATE]
  };
};

var abnf = function abnf(hljs) {
    var regexes = {
        ruleDeclaration: "^[a-zA-Z][a-zA-Z0-9-]*",
        unexpectedChars: "[!@#$^&',?+~`|:]"
    };

    var keywords = ["ALPHA", "BIT", "CHAR", "CR", "CRLF", "CTL", "DIGIT", "DQUOTE", "HEXDIG", "HTAB", "LF", "LWSP", "OCTET", "SP", "VCHAR", "WSP"];

    var commentMode = hljs.COMMENT(";", "$");

    var terminalBinaryMode = {
        className: "symbol",
        begin: /%b[0-1]+(-[0-1]+|(\.[0-1]+)+){0,1}/
    };

    var terminalDecimalMode = {
        className: "symbol",
        begin: /%d[0-9]+(-[0-9]+|(\.[0-9]+)+){0,1}/
    };

    var terminalHexadecimalMode = {
        className: "symbol",
        begin: /%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+){0,1}/
    };

    var caseSensitivityIndicatorMode = {
        className: "symbol",
        begin: /%[si]/
    };

    var ruleDeclarationMode = {
        begin: regexes.ruleDeclaration + '\\s*=',
        returnBegin: true,
        end: /=/,
        relevance: 0,
        contains: [{ className: "attribute", begin: regexes.ruleDeclaration }]
    };

    return {
        illegal: regexes.unexpectedChars,
        keywords: keywords.join(" "),
        contains: [ruleDeclarationMode, commentMode, terminalBinaryMode, terminalDecimalMode, terminalHexadecimalMode, caseSensitivityIndicatorMode, hljs.QUOTE_STRING_MODE, hljs.NUMBER_MODE]
    };
};

var accesslog = function accesslog(hljs) {
  return {
    contains: [
    // IP
    {
      className: 'number',
      begin: '\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b'
    },
    // Other numbers
    {
      className: 'number',
      begin: '\\b\\d+\\b',
      relevance: 0
    },
    // Requests
    {
      className: 'string',
      begin: '"(GET|POST|HEAD|PUT|DELETE|CONNECT|OPTIONS|PATCH|TRACE)', end: '"',
      keywords: 'GET POST HEAD PUT DELETE CONNECT OPTIONS PATCH TRACE',
      illegal: '\\n',
      relevance: 10
    },
    // Dates
    {
      className: 'string',
      begin: /\[/, end: /\]/,
      illegal: '\\n'
    },
    // Strings
    {
      className: 'string',
      begin: '"', end: '"',
      illegal: '\\n'
    }]
  };
};

var actionscript = function actionscript(hljs) {
  var IDENT_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';
  var IDENT_FUNC_RETURN_TYPE_RE = '([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)';

  var AS3_REST_ARG_MODE = {
    className: 'rest_arg',
    begin: '[.]{3}', end: IDENT_RE,
    relevance: 10
  };

  return {
    aliases: ['as'],
    keywords: {
      keyword: 'as break case catch class const continue default delete do dynamic each ' + 'else extends final finally for function get if implements import in include ' + 'instanceof interface internal is namespace native new override package private ' + 'protected public return set static super switch this throw try typeof use var void ' + 'while with',
      literal: 'true false null undefined'
    },
    contains: [hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.C_NUMBER_MODE, {
      className: 'class',
      beginKeywords: 'package', end: '{',
      contains: [hljs.TITLE_MODE]
    }, {
      className: 'class',
      beginKeywords: 'class interface', end: '{', excludeEnd: true,
      contains: [{
        beginKeywords: 'extends implements'
      }, hljs.TITLE_MODE]
    }, {
      className: 'meta',
      beginKeywords: 'import include', end: ';',
      keywords: { 'meta-keyword': 'import include' }
    }, {
      className: 'function',
      beginKeywords: 'function', end: '[{;]', excludeEnd: true,
      illegal: '\\S',
      contains: [hljs.TITLE_MODE, {
        className: 'params',
        begin: '\\(', end: '\\)',
        contains: [hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, AS3_REST_ARG_MODE]
      }, {
        begin: ':\\s*' + IDENT_FUNC_RETURN_TYPE_RE
      }]
    }, hljs.METHOD_GUARD],
    illegal: /#/
  };
};

var ada = // We try to support full Ada2012
//
// We highlight all appearances of types, keywords, literals (string, char, number, bool)
// and titles (user defined function/procedure/package)
// CSS classes are set accordingly
//
// Languages causing problems for language detection:
// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)
// sql (ada default.txt has a lot of sql keywords)

function ada(hljs) {
    // Regular expression for Ada numeric literals.
    // stolen form the VHDL highlighter

    // Decimal literal:
    var INTEGER_RE = '\\d(_|\\d)*';
    var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;
    var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';

    // Based literal:
    var BASED_INTEGER_RE = '\\w+';
    var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';

    var NUMBER_RE = '\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';

    // Identifier regex
    var ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';

    // bad chars, only allowed in literals
    var BAD_CHARS = '[]{}%#\'\"';

    // Ada doesn't have block comments, only line comments
    var COMMENTS = hljs.COMMENT('--', '$');

    // variable declarations of the form
    // Foo : Bar := Baz;
    // where only Bar will be highlighted
    var VAR_DECLS = {
        // TODO: These spaces are not required by the Ada syntax
        // however, I have yet to see handwritten Ada code where
        // someone does not put spaces around :
        begin: '\\s+:\\s+', end: '\\s*(:=|;|\\)|=>|$)',
        // endsWithParent: true,
        // returnBegin: true,
        illegal: BAD_CHARS,
        contains: [{
            // workaround to avoid highlighting
            // named loops and declare blocks
            beginKeywords: 'loop for declare others',
            endsParent: true
        }, {
            // properly highlight all modifiers
            className: 'keyword',
            beginKeywords: 'not null constant access function procedure in out aliased exception'
        }, {
            className: 'type',
            begin: ID_REGEX,
            endsParent: true,
            relevance: 0
        }]
    };

    return {
        case_insensitive: true,
        keywords: {
            keyword: 'abort else new return abs elsif not reverse abstract end ' + 'accept entry select access exception of separate aliased exit or some ' + 'all others subtype and for out synchronized array function overriding ' + 'at tagged generic package task begin goto pragma terminate ' + 'body private then if procedure type case in protected constant interface ' + 'is raise use declare range delay limited record when delta loop rem while ' + 'digits renames with do mod requeue xor',
            literal: 'True False'
        },
        contains: [COMMENTS,
        // strings "foobar"
        {
            className: 'string',
            begin: /"/, end: /"/,
            contains: [{ begin: /""/, relevance: 0 }]
        },
        // characters ''
        {
            // character literals always contain one char
            className: 'string',
            begin: /'.'/
        }, {
            // number literals
            className: 'number',
            begin: NUMBER_RE,
            relevance: 0
        }, {
            // Attributes
            className: 'symbol',
            begin: "'" + ID_REGEX
        }, {
            // package definition, maybe inside generic
            className: 'title',
            begin: '(\\bwith\\s+)?(\\bprivate\\s+)?\\bpackage\\s+(\\bbody\\s+)?', end: '(is|$)',
            keywords: 'package body',
            excludeBegin: true,
            excludeEnd: true,
            illegal: BAD_CHARS
        }, {
            // function/procedure declaration/definition
            // maybe inside generic
            begin: '(\\b(with|overriding)\\s+)?\\b(function|procedure)\\s+', end: '(\\bis|\\bwith|\\brenames|\\)\\s*;)',
            keywords: 'overriding function procedure with is renames return',
            // we need to re-match the 'function' keyword, so that
            // the title mode below matches only exactly once
            returnBegin: true,
            contains: [COMMENTS, {
                // name of the function/procedure
                className: 'title',
                begin: '(\\bwith\\s+)?\\b(function|procedure)\\s+',
                end: '(\\(|\\s+|$)',
                excludeBegin: true,
                excludeEnd: true,
                illegal: BAD_CHARS
            },
            // 'self'
            // // parameter types
            VAR_DECLS, {
                // return type
                className: 'type',
                begin: '\\breturn\\s+', end: '(\\s+|;|$)',
                keywords: 'return',
                excludeBegin: true,
                excludeEnd: true,
                // we are done with functions
                endsParent: true,
                illegal: BAD_CHARS

            }]
        }, {
            // new type declarations
            // maybe inside generic
            className: 'type',
            begin: '\\b(sub)?type\\s+', end: '\\s+',
            keywords: 'type',
            excludeBegin: true,
            illegal: BAD_CHARS
        },

        // see comment above the definition
        VAR_DECLS]
    };
};

var apache = function apache(hljs) {
  var NUMBER = { className: 'number', begin: '[\\$%]\\d+' };
  return {
    aliases: ['apacheconf'],
    case_insensitive: true,
    contains: [hljs.HASH_COMMENT_MODE, { className: 'section', begin: '</?', end: '>' }, {
      className: 'attribute',
      begin: /\w+/,
      relevance: 0,
      // keywords aren’t needed for highlighting per se, they only boost relevance
      // for a very generally defined mode (starts with a word, ends with line-end
      keywords: {
        nomarkup: 'order deny allow setenv rewriterule rewriteengine rewritecond documentroot ' + 'sethandler errordocument loadmodule options header listen serverroot ' + 'servername'
      },
      starts: {
        end: /$/,
        relevance: 0,
        keywords: {
          literal: 'on off all'
        },
        contains: [{
          className: 'meta',
          begin: '\\s\\[', end: '\\]$'
        }, {
          className: 'variable',
          begin: '[\\$%]\\{', end: '\\}',
          contains: ['self', NUMBER]
        }, NUMBER, hljs.QUOTE_STRING_MODE]
      }
    }],
    illegal: /\S/
  };
};

var applescript = function applescript(hljs) {
  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: '' });
  var PARAMS = {
    className: 'params',
    begin: '\\(', end: '\\)',
    contains: ['self', hljs.C_NUMBER_MODE, STRING]
  };
  var COMMENT_MODE_1 = hljs.COMMENT('--', '$');
  var COMMENT_MODE_2 = hljs.COMMENT('\\(\\*', '\\*\\)', {
    contains: ['self', COMMENT_MODE_1] //allow nesting
  });
  var COMMENTS = [COMMENT_MODE_1, COMMENT_MODE_2, hljs.HASH_COMMENT_MODE];

  return {
    aliases: ['osascript'],
    keywords: {
      keyword: 'about above after against and around as at back before beginning ' + 'behind below beneath beside between but by considering ' + 'contain contains continue copy div does eighth else end equal ' + 'equals error every exit fifth first for fourth from front ' + 'get given global if ignoring in into is it its last local me ' + 'middle mod my ninth not of on onto or over prop property put ref ' + 'reference repeat returning script second set seventh since ' + 'sixth some tell tenth that the|0 then third through thru ' + 'timeout times to transaction try until where while whose with ' + 'without',
      literal: 'AppleScript false linefeed return pi quote result space tab true',
      built_in: 'alias application boolean class constant date file integer list ' + 'number real record string text ' + 'activate beep count delay launch log offset read round ' + 'run say summarize write ' + 'character characters contents day frontmost id item length ' + 'month name paragraph paragraphs rest reverse running time version ' + 'weekday word words year'
    },
    contains: [STRING, hljs.C_NUMBER_MODE, {
      className: 'built_in',
      begin: '\\b(clipboard info|the clipboard|info for|list (disks|folder)|' + 'mount volume|path to|(close|open for) access|(get|set) eof|' + 'current date|do shell script|get volume settings|random number|' + 'set volume|system attribute|system info|time to GMT|' + '(load|run|store) script|scripting components|' + 'ASCII (character|number)|localized string|' + 'choose (application|color|file|file name|' + 'folder|from list|remote application|URL)|' + 'display (alert|dialog))\\b|^\\s*return\\b'
    }, {
      className: 'literal',
      begin: '\\b(text item delimiters|current application|missing value)\\b'
    }, {
      className: 'keyword',
      begin: '\\b(apart from|aside from|instead of|out of|greater than|' + "isn't|(doesn't|does not) (equal|come before|come after|contain)|" + '(greater|less) than( or equal)?|(starts?|ends|begins?) with|' + 'contained by|comes (before|after)|a (ref|reference)|POSIX file|' + 'POSIX path|(date|time) string|quoted form)\\b'
    }, {
      beginKeywords: 'on',
      illegal: '[${=;\\n]',
      contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]
    }].concat(COMMENTS),
    illegal: '//|->|=>|\\[\\['
  };
};

var cpp = function cpp(hljs) {
  var CPP_PRIMITIVE_TYPES = {
    className: 'keyword',
    begin: '\\b[a-z\\d_]*_t\\b'
  };

  var STRINGS = {
    className: 'string',
    variants: [{
      begin: '(u8?|U)?L?"', end: '"',
      illegal: '\\n',
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      begin: '(u8?|U)?R"', end: '"',
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      begin: '\'\\\\?.', end: '\'',
      illegal: '.'
    }]
  };

  var NUMBERS = {
    className: 'number',
    variants: [{ begin: '\\b(0b[01\']+)' }, { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)(u|U|l|L|ul|UL|f|F|b|B)' }, { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }],
    relevance: 0
  };

  var PREPROCESSOR = {
    className: 'meta',
    begin: /#\s*[a-z]+\b/, end: /$/,
    keywords: {
      'meta-keyword': 'if else elif endif define undef warning error line ' + 'pragma ifdef ifndef include'
    },
    contains: [{
      begin: /\\\n/, relevance: 0
    }, hljs.inherit(STRINGS, { className: 'meta-string' }), {
      className: 'meta-string',
      begin: /<[^\n>]*>/, end: /$/,
      illegal: '\\n'
    }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
  };

  var FUNCTION_TITLE = hljs.IDENT_RE + '\\s*\\(';

  var CPP_KEYWORDS = {
    keyword: 'int float while private char catch import module export virtual operator sizeof ' + 'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' + 'unsigned long volatile static protected bool template mutable if public friend ' + 'do goto auto void enum else break extern using asm case typeid ' + 'short reinterpret_cast|10 default double register explicit signed typename try this ' + 'switch continue inline delete alignof constexpr decltype ' + 'noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary ' + 'atomic_bool atomic_char atomic_schar ' + 'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' + 'atomic_ullong new throw return ' + 'and or not',
    built_in: 'std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' + 'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' + 'unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos ' + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' + 'fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr',
    literal: 'true false nullptr NULL'
  };

  var EXPRESSION_CONTAINS = [CPP_PRIMITIVE_TYPES, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS];

  return {
    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp'],
    keywords: CPP_KEYWORDS,
    illegal: '</',
    contains: EXPRESSION_CONTAINS.concat([PREPROCESSOR, {
      begin: '\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<', end: '>',
      keywords: CPP_KEYWORDS,
      contains: ['self', CPP_PRIMITIVE_TYPES]
    }, {
      begin: hljs.IDENT_RE + '::',
      keywords: CPP_KEYWORDS
    }, {
      // This mode covers expression context where we can't expect a function
      // definition and shouldn't highlight anything that looks like one:
      // `return some()`, `else if()`, `(x*sum(1, 2))`
      variants: [{ begin: /=/, end: /;/ }, { begin: /\(/, end: /\)/ }, { beginKeywords: 'new throw return else', end: /;/ }],
      keywords: CPP_KEYWORDS,
      contains: EXPRESSION_CONTAINS.concat([{
        begin: /\(/, end: /\)/,
        keywords: CPP_KEYWORDS,
        contains: EXPRESSION_CONTAINS.concat(['self']),
        relevance: 0
      }]),
      relevance: 0
    }, {
      className: 'function',
      begin: '(' + hljs.IDENT_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
      returnBegin: true, end: /[{;=]/,
      excludeEnd: true,
      keywords: CPP_KEYWORDS,
      illegal: /[^\w\s\*&]/,
      contains: [{
        begin: FUNCTION_TITLE, returnBegin: true,
        contains: [hljs.TITLE_MODE],
        relevance: 0
      }, {
        className: 'params',
        begin: /\(/, end: /\)/,
        keywords: CPP_KEYWORDS,
        relevance: 0,
        contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES]
      }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, PREPROCESSOR]
    }, {
      className: 'class',
      beginKeywords: 'class struct', end: /[{;:]/,
      contains: [{ begin: /</, end: />/, contains: ['self'] }, // skip generic stuff
      hljs.TITLE_MODE]
    }]),
    exports: {
      preprocessor: PREPROCESSOR,
      strings: STRINGS,
      keywords: CPP_KEYWORDS
    }
  };
};

var arduino = function arduino(hljs) {
  var CPP = hljs.getLanguage('cpp').exports;
  return {
    keywords: {
      keyword: 'boolean byte word string String array ' + CPP.keywords.keyword,
      built_in: 'setup loop while catch for if do goto try switch case else ' + 'default break continue return ' + 'KeyboardController MouseController SoftwareSerial ' + 'EthernetServer EthernetClient LiquidCrystal ' + 'RobotControl GSMVoiceCall EthernetUDP EsploraTFT ' + 'HttpClient RobotMotor WiFiClient GSMScanner ' + 'FileSystem Scheduler GSMServer YunClient YunServer ' + 'IPAddress GSMClient GSMModem Keyboard Ethernet ' + 'Console GSMBand Esplora Stepper Process ' + 'WiFiUDP GSM_SMS Mailbox USBHost Firmata PImage ' + 'Client Server GSMPIN FileIO Bridge Serial ' + 'EEPROM Stream Mouse Audio Servo File Task ' + 'GPRS WiFi Wire TFT GSM SPI SD ' + 'runShellCommandAsynchronously analogWriteResolution ' + 'retrieveCallingNumber printFirmwareVersion ' + 'analogReadResolution sendDigitalPortPair ' + 'noListenOnLocalhost readJoystickButton setFirmwareVersion ' + 'readJoystickSwitch scrollDisplayRight getVoiceCallStatus ' + 'scrollDisplayLeft writeMicroseconds delayMicroseconds ' + 'beginTransmission getSignalStrength runAsynchronously ' + 'getAsynchronously listenOnLocalhost getCurrentCarrier ' + 'readAccelerometer messageAvailable sendDigitalPorts ' + 'lineFollowConfig countryNameWrite runShellCommand ' + 'readStringUntil rewindDirectory readTemperature ' + 'setClockDivider readLightSensor endTransmission ' + 'analogReference detachInterrupt countryNameRead ' + 'attachInterrupt encryptionType readBytesUntil ' + 'robotNameWrite readMicrophone robotNameRead cityNameWrite ' + 'userNameWrite readJoystickY readJoystickX mouseReleased ' + 'openNextFile scanNetworks noInterrupts digitalWrite ' + 'beginSpeaker mousePressed isActionDone mouseDragged ' + 'displayLogos noAutoscroll addParameter remoteNumber ' + 'getModifiers keyboardRead userNameRead waitContinue ' + 'processInput parseCommand printVersion readNetworks ' + 'writeMessage blinkVersion cityNameRead readMessage ' + 'setDataMode parsePacket isListening setBitOrder ' + 'beginPacket isDirectory motorsWrite drawCompass ' + 'digitalRead clearScreen serialEvent rightToLeft ' + 'setTextSize leftToRight requestFrom keyReleased ' + 'compassRead analogWrite interrupts WiFiServer ' + 'disconnect playMelody parseFloat autoscroll ' + 'getPINUsed setPINUsed setTimeout sendAnalog ' + 'readSlider analogRead beginWrite createChar ' + 'motorsStop keyPressed tempoWrite readButton ' + 'subnetMask debugPrint macAddress writeGreen ' + 'randomSeed attachGPRS readString sendString ' + 'remotePort releaseAll mouseMoved background ' + 'getXChange getYChange answerCall getResult ' + 'voiceCall endPacket constrain getSocket writeJSON ' + 'getButton available connected findUntil readBytes ' + 'exitValue readGreen writeBlue startLoop IPAddress ' + 'isPressed sendSysex pauseMode gatewayIP setCursor ' + 'getOemKey tuneWrite noDisplay loadImage switchPIN ' + 'onRequest onReceive changePIN playFile noBuffer ' + 'parseInt overflow checkPIN knobRead beginTFT ' + 'bitClear updateIR bitWrite position writeRGB ' + 'highByte writeRed setSpeed readBlue noStroke ' + 'remoteIP transfer shutdown hangCall beginSMS ' + 'endWrite attached maintain noCursor checkReg ' + 'checkPUK shiftOut isValid shiftIn pulseIn ' + 'connect println localIP pinMode getIMEI ' + 'display noBlink process getBand running beginSD ' + 'drawBMP lowByte setBand release bitRead prepare ' + 'pointTo readRed setMode noFill remove listen ' + 'stroke detach attach noTone exists buffer ' + 'height bitSet circle config cursor random ' + 'IRread setDNS endSMS getKey micros ' + 'millis begin print write ready flush width ' + 'isPIN blink clear press mkdir rmdir close ' + 'point yield image BSSID click delay ' + 'read text move peek beep rect line open ' + 'seek fill size turn stop home find ' + 'step tone sqrt RSSI SSID ' + 'end bit tan cos sin pow map abs max ' + 'min get run put',
      literal: 'DIGITAL_MESSAGE FIRMATA_STRING ANALOG_MESSAGE ' + 'REPORT_DIGITAL REPORT_ANALOG INPUT_PULLUP ' + 'SET_PIN_MODE INTERNAL2V56 SYSTEM_RESET LED_BUILTIN ' + 'INTERNAL1V1 SYSEX_START INTERNAL EXTERNAL ' + 'DEFAULT OUTPUT INPUT HIGH LOW'
    },
    contains: [CPP.preprocessor, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE]
  };
};

var armasm = function armasm(hljs) {
  //local labels: %?[FB]?[AT]?\d{1,2}\w+
  return {
    case_insensitive: true,
    aliases: ['arm'],
    lexemes: '\\.?' + hljs.IDENT_RE,
    keywords: {
      meta:
      //GNU preprocs
      '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg ' +
      //ARM directives
      'ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ',
      built_in: 'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 ' + //standard registers
      'pc lr sp ip sl sb fp ' + //typical regs plus backward compatibility
      'a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 ' + //more regs and fp
      'p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 ' + //coprocessor regs
      'c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 ' + //more coproc
      'q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 ' + //advanced SIMD NEON regs

      //program status registers
      'cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf ' + 'spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf ' +

      //NEON and VFP registers
      's0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 ' + 's16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 ' + 'd0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 ' + 'd16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 ' + '{PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @'
    },
    contains: [{
      className: 'keyword',
      begin: '\\b(' + //mnemonics
      'adc|' + '(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|' + 'and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|' + 'bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|' + 'setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|' + 'ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|' + 'mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|' + 'mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|' + 'mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|' + 'rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|' + 'stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|' + '[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|' + 'wfe|wfi|yield' + ')' + '(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?' + //condition codes
      '[sptrx]?', //legal postfixes
      end: '\\s'
    }, hljs.COMMENT('[;@]', '$', { relevance: 0 }), hljs.C_BLOCK_COMMENT_MODE, hljs.QUOTE_STRING_MODE, {
      className: 'string',
      begin: '\'',
      end: '[^\\\\]\'',
      relevance: 0
    }, {
      className: 'title',
      begin: '\\|', end: '\\|',
      illegal: '\\n',
      relevance: 0
    }, {
      className: 'number',
      variants: [{ begin: '[#$=]?0x[0-9a-f]+' }, //hex
      { begin: '[#$=]?0b[01]+' }, //bin
      { begin: '[#$=]\\d+' }, //literal
      { begin: '\\b\\d+' //bare number
      }],
      relevance: 0
    }, {
      className: 'symbol',
      variants: [{ begin: '^[a-z_\\.\\$][a-z0-9_\\.\\$]+' }, //ARM syntax
      { begin: '^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:' }, //GNU ARM syntax
      { begin: '[=#]\\w+' //label reference
      }],
      relevance: 0
    }]
  };
};

var xml = function xml(hljs) {
  var XML_IDENT_RE = '[A-Za-z0-9\\._:-]+';
  var TAG_INTERNALS = {
    endsWithParent: true,
    illegal: /</,
    relevance: 0,
    contains: [{
      className: 'attr',
      begin: XML_IDENT_RE,
      relevance: 0
    }, {
      begin: /=\s*/,
      relevance: 0,
      contains: [{
        className: 'string',
        endsParent: true,
        variants: [{ begin: /"/, end: /"/ }, { begin: /'/, end: /'/ }, { begin: /[^\s"'=<>`]+/ }]
      }]
    }]
  };
  return {
    aliases: ['html', 'xhtml', 'rss', 'atom', 'xjb', 'xsd', 'xsl', 'plist'],
    case_insensitive: true,
    contains: [{
      className: 'meta',
      begin: '<!DOCTYPE', end: '>',
      relevance: 10,
      contains: [{ begin: '\\[', end: '\\]' }]
    }, hljs.COMMENT('<!--', '-->', {
      relevance: 10
    }), {
      begin: '<\\!\\[CDATA\\[', end: '\\]\\]>',
      relevance: 10
    }, {
      begin: /<\?(php)?/, end: /\?>/,
      subLanguage: 'php',
      contains: [{ begin: '/\\*', end: '\\*/', skip: true }]
    }, {
      className: 'tag',
      /*
      The lookahead pattern (?=...) ensures that 'begin' only matches
      '<style' as a single word, followed by a whitespace or an
      ending braket. The '$' is needed for the lexeme to be recognized
      by hljs.subMode() that tests lexemes outside the stream.
      */
      begin: '<style(?=\\s|>|$)', end: '>',
      keywords: { name: 'style' },
      contains: [TAG_INTERNALS],
      starts: {
        end: '</style>', returnEnd: true,
        subLanguage: ['css', 'xml']
      }
    }, {
      className: 'tag',
      // See the comment in the <style tag about the lookahead pattern
      begin: '<script(?=\\s|>|$)', end: '>',
      keywords: { name: 'script' },
      contains: [TAG_INTERNALS],
      starts: {
        end: '\<\/script\>', returnEnd: true,
        subLanguage: ['actionscript', 'javascript', 'handlebars', 'xml']
      }
    }, {
      className: 'meta',
      variants: [{ begin: /<\?xml/, end: /\?>/, relevance: 10 }, { begin: /<\?\w+/, end: /\?>/ }]
    }, {
      className: 'tag',
      begin: '</?', end: '/?>',
      contains: [{
        className: 'name', begin: /[^\/><\s]+/, relevance: 0
      }, TAG_INTERNALS]
    }]
  };
};

var asciidoc = function asciidoc(hljs) {
  return {
    aliases: ['adoc'],
    contains: [
    // block comment
    hljs.COMMENT('^/{4,}\\n', '\\n/{4,}$',
    // can also be done as...
    //'^/{4,}$',
    //'^/{4,}$',
    {
      relevance: 10
    }),
    // line comment
    hljs.COMMENT('^//', '$', {
      relevance: 0
    }),
    // title
    {
      className: 'title',
      begin: '^\\.\\w.*$'
    },
    // example, admonition & sidebar blocks
    {
      begin: '^[=\\*]{4,}\\n',
      end: '\\n^[=\\*]{4,}$',
      relevance: 10
    },
    // headings
    {
      className: 'section',
      relevance: 10,
      variants: [{ begin: '^(={1,5}) .+?( \\1)?$' }, { begin: '^[^\\[\\]\\n]+?\\n[=\\-~\\^\\+]{2,}$' }]
    },
    // document attributes
    {
      className: 'meta',
      begin: '^:.+?:',
      end: '\\s',
      excludeEnd: true,
      relevance: 10
    },
    // block attributes
    {
      className: 'meta',
      begin: '^\\[.+?\\]$',
      relevance: 0
    },
    // quoteblocks
    {
      className: 'quote',
      begin: '^_{4,}\\n',
      end: '\\n_{4,}$',
      relevance: 10
    },
    // listing and literal blocks
    {
      className: 'code',
      begin: '^[\\-\\.]{4,}\\n',
      end: '\\n[\\-\\.]{4,}$',
      relevance: 10
    },
    // passthrough blocks
    {
      begin: '^\\+{4,}\\n',
      end: '\\n\\+{4,}$',
      contains: [{
        begin: '<', end: '>',
        subLanguage: 'xml',
        relevance: 0
      }],
      relevance: 10
    },
    // lists (can only capture indicators)
    {
      className: 'bullet',
      begin: '^(\\*+|\\-+|\\.+|[^\\n]+?::)\\s+'
    },
    // admonition
    {
      className: 'symbol',
      begin: '^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\s+',
      relevance: 10
    },
    // inline strong
    {
      className: 'strong',
      // must not follow a word character or be followed by an asterisk or space
      begin: '\\B\\*(?![\\*\\s])',
      end: '(\\n{2}|\\*)',
      // allow escaped asterisk followed by word char
      contains: [{
        begin: '\\\\*\\w',
        relevance: 0
      }]
    },
    // inline emphasis
    {
      className: 'emphasis',
      // must not follow a word character or be followed by a single quote or space
      begin: '\\B\'(?![\'\\s])',
      end: '(\\n{2}|\')',
      // allow escaped single quote followed by word char
      contains: [{
        begin: '\\\\\'\\w',
        relevance: 0
      }],
      relevance: 0
    },
    // inline emphasis (alt)
    {
      className: 'emphasis',
      // must not follow a word character or be followed by an underline or space
      begin: '_(?![_\\s])',
      end: '(\\n{2}|_)',
      relevance: 0
    },
    // inline smart quotes
    {
      className: 'string',
      variants: [{ begin: "``.+?''" }, { begin: "`.+?'" }]
    },
    // inline code snippets (TODO should get same treatment as strong and emphasis)
    {
      className: 'code',
      begin: '(`.+?`|\\+.+?\\+)',
      relevance: 0
    },
    // indented literal block
    {
      className: 'code',
      begin: '^[ \\t]',
      end: '$',
      relevance: 0
    },
    // horizontal rules
    {
      begin: '^\'{3,}[ \\t]*$',
      relevance: 10
    },
    // images and links
    {
      begin: '(link:)?(http|https|ftp|file|irc|image:?):\\S+\\[.*?\\]',
      returnBegin: true,
      contains: [{
        begin: '(link|image:?):',
        relevance: 0
      }, {
        className: 'link',
        begin: '\\w',
        end: '[^\\[]+',
        relevance: 0
      }, {
        className: 'string',
        begin: '\\[',
        end: '\\]',
        excludeBegin: true,
        excludeEnd: true,
        relevance: 0
      }],
      relevance: 10
    }]
  };
};

var aspectj = function aspectj(hljs) {
  var KEYWORDS = 'false synchronized int abstract float private char boolean static null if const ' + 'for true while long throw strictfp finally protected import native final return void ' + 'enum else extends implements break transient new catch instanceof byte super volatile case ' + 'assert short package default double public try this switch continue throws privileged ' + 'aspectOf adviceexecution proceed cflowbelow cflow initialization preinitialization ' + 'staticinitialization withincode target within execution getWithinTypeName handler ' + 'thisJoinPoint thisJoinPointStaticPart thisEnclosingJoinPointStaticPart declare parents ' + 'warning error soft precedence thisAspectInstance';
  var SHORTKEYS = 'get set args call';
  return {
    keywords: KEYWORDS,
    illegal: /<\/|#/,
    contains: [hljs.COMMENT('/\\*\\*', '\\*/', {
      relevance: 0,
      contains: [{
        // eat up @'s in emails to prevent them to be recognized as doctags
        begin: /\w+@/, relevance: 0
      }, {
        className: 'doctag',
        begin: '@[A-Za-z]+'
      }]
    }), hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, {
      className: 'class',
      beginKeywords: 'aspect',
      end: /[{;=]/,
      excludeEnd: true,
      illegal: /[:;"\[\]]/,
      contains: [{
        beginKeywords: 'extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton'
      }, hljs.UNDERSCORE_TITLE_MODE, {
        begin: /\([^\)]*/,
        end: /[)]+/,
        keywords: KEYWORDS + ' ' + SHORTKEYS,
        excludeEnd: false
      }]
    }, {
      className: 'class',
      beginKeywords: 'class interface',
      end: /[{;=]/,
      excludeEnd: true,
      relevance: 0,
      keywords: 'class interface',
      illegal: /[:"\[\]]/,
      contains: [{ beginKeywords: 'extends implements' }, hljs.UNDERSCORE_TITLE_MODE]
    }, {
      // AspectJ Constructs
      beginKeywords: 'pointcut after before around throwing returning',
      end: /[)]/,
      excludeEnd: false,
      illegal: /["\[\]]/,
      contains: [{
        begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
        returnBegin: true,
        contains: [hljs.UNDERSCORE_TITLE_MODE]
      }]
    }, {
      begin: /[:]/,
      returnBegin: true,
      end: /[{;]/,
      relevance: 0,
      excludeEnd: false,
      keywords: KEYWORDS,
      illegal: /["\[\]]/,
      contains: [{
        begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
        keywords: KEYWORDS + ' ' + SHORTKEYS,
        relevance: 0
      }, hljs.QUOTE_STRING_MODE]
    }, {
      // this prevents 'new Name(...), or throw ...' from being recognized as a function definition
      beginKeywords: 'new throw',
      relevance: 0
    }, {
      // the function class is a bit different for AspectJ compared to the Java language
      className: 'function',
      begin: /\w+ +\w+(\.)?\w+\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;]/,
      returnBegin: true,
      end: /[{;=]/,
      keywords: KEYWORDS,
      excludeEnd: true,
      contains: [{
        begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
        returnBegin: true,
        relevance: 0,
        contains: [hljs.UNDERSCORE_TITLE_MODE]
      }, {
        className: 'params',
        begin: /\(/, end: /\)/,
        relevance: 0,
        keywords: KEYWORDS,
        contains: [hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE, hljs.C_BLOCK_COMMENT_MODE]
      }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
    }, hljs.C_NUMBER_MODE, {
      // annotation is also used in this language
      className: 'meta',
      begin: '@[A-Za-z]+'
    }]
  };
};

var autohotkey = function autohotkey(hljs) {
  var BACKTICK_ESCAPE = {
    begin: '`[\\s\\S]'
  };

  return {
    case_insensitive: true,
    aliases: ['ahk'],
    keywords: {
      keyword: 'Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group',
      literal: 'A|0 true false NOT AND OR',
      built_in: 'ComSpec Clipboard ClipboardAll ErrorLevel'
    },
    contains: [{
      className: 'built_in',
      begin: 'A_[a-zA-Z0-9]+'
    }, BACKTICK_ESCAPE, hljs.inherit(hljs.QUOTE_STRING_MODE, { contains: [BACKTICK_ESCAPE] }), hljs.COMMENT(';', '$', { relevance: 0 }), hljs.C_BLOCK_COMMENT_MODE, {
      className: 'number',
      begin: hljs.NUMBER_RE,
      relevance: 0
    }, {
      className: 'subst', // FIXED
      begin: '%(?=[a-zA-Z0-9#_$@])', end: '%',
      illegal: '[^a-zA-Z0-9#_$@]'
    }, {
      className: 'built_in',
      begin: '^\\s*\\w+\\s*,'
      //I don't really know if this is totally relevant
    }, {
      className: 'meta',
      begin: '^\\s*#\w+', end: '$',
      relevance: 0
    }, {
      className: 'symbol',
      contains: [BACKTICK_ESCAPE],
      variants: [{ begin: '^[^\\n";]+::(?!=)' }, { begin: '^[^\\n";]+:(?!=)', relevance: 0 // zero relevance as it catches a lot of things
        // followed by a single ':' in many languages
      }]
    }, {
      // consecutive commas, not for highlighting but just for relevance
      begin: ',\\s*,'
    }]
  };
};

var autoit = function autoit(hljs) {
    var KEYWORDS = 'ByRef Case Const ContinueCase ContinueLoop ' + 'Default Dim Do Else ElseIf EndFunc EndIf EndSelect ' + 'EndSwitch EndWith Enum Exit ExitLoop For Func ' + 'Global If In Local Next ReDim Return Select Static ' + 'Step Switch Then To Until Volatile WEnd While With',
        LITERAL = 'True False And Null Not Or',
        BUILT_IN = 'Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait',
        COMMENT = {
        variants: [hljs.COMMENT(';', '$', { relevance: 0 }), hljs.COMMENT('#cs', '#ce'), hljs.COMMENT('#comments-start', '#comments-end')]
    },
        VARIABLE = {
        begin: '\\$[A-z0-9_]+'
    },
        STRING = {
        className: 'string',
        variants: [{
            begin: /"/,
            end: /"/,
            contains: [{
                begin: /""/,
                relevance: 0
            }]
        }, {
            begin: /'/,
            end: /'/,
            contains: [{
                begin: /''/,
                relevance: 0
            }]
        }]
    },
        NUMBER = {
        variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]
    },
        PREPROCESSOR = {
        className: 'meta',
        begin: '#',
        end: '$',
        keywords: { 'meta-keyword': 'comments include include-once NoTrayIcon OnAutoItStartRegister pragma compile RequireAdmin' },
        contains: [{
            begin: /\\\n/,
            relevance: 0
        }, {
            beginKeywords: 'include',
            keywords: { 'meta-keyword': 'include' },
            end: '$',
            contains: [STRING, {
                className: 'meta-string',
                variants: [{
                    begin: '<',
                    end: '>'
                }, {
                    begin: /"/,
                    end: /"/,
                    contains: [{
                        begin: /""/,
                        relevance: 0
                    }]
                }, {
                    begin: /'/,
                    end: /'/,
                    contains: [{
                        begin: /''/,
                        relevance: 0
                    }]
                }]
            }]
        }, STRING, COMMENT]
    },
        CONSTANT = {
        className: 'symbol',
        // begin: '@',
        // end: '$',
        // keywords: 'AppDataCommonDir AppDataDir AutoItExe AutoItPID AutoItVersion AutoItX64 COM_EventObj CommonFilesDir Compiled ComputerName ComSpec CPUArch CR CRLF DesktopCommonDir DesktopDepth DesktopDir DesktopHeight DesktopRefresh DesktopWidth DocumentsCommonDir error exitCode exitMethod extended FavoritesCommonDir FavoritesDir GUI_CtrlHandle GUI_CtrlId GUI_DragFile GUI_DragId GUI_DropId GUI_WinHandle HomeDrive HomePath HomeShare HotKeyPressed HOUR IPAddress1 IPAddress2 IPAddress3 IPAddress4 KBLayout LF LocalAppDataDir LogonDNSDomain LogonDomain LogonServer MDAY MIN MON MSEC MUILang MyDocumentsDir NumParams OSArch OSBuild OSLang OSServicePack OSType OSVersion ProgramFilesDir ProgramsCommonDir ProgramsDir ScriptDir ScriptFullPath ScriptLineNumber ScriptName SEC StartMenuCommonDir StartMenuDir StartupCommonDir StartupDir SW_DISABLE SW_ENABLE SW_HIDE SW_LOCK SW_MAXIMIZE SW_MINIMIZE SW_RESTORE SW_SHOW SW_SHOWDEFAULT SW_SHOWMAXIMIZED SW_SHOWMINIMIZED SW_SHOWMINNOACTIVE SW_SHOWNA SW_SHOWNOACTIVATE SW_SHOWNORMAL SW_UNLOCK SystemDir TAB TempDir TRAY_ID TrayIconFlashing TrayIconVisible UserName UserProfileDir WDAY WindowsDir WorkingDir YDAY YEAR',
        // relevance: 5
        begin: '@[A-z0-9_]+'
    },
        FUNCTION = {
        className: 'function',
        beginKeywords: 'Func',
        end: '$',
        illegal: '\\$|\\[|%',
        contains: [hljs.UNDERSCORE_TITLE_MODE, {
            className: 'params',
            begin: '\\(',
            end: '\\)',
            contains: [VARIABLE, STRING, NUMBER]
        }]
    };

    return {
        case_insensitive: true,
        illegal: /\/\*/,
        keywords: {
            keyword: KEYWORDS,
            built_in: BUILT_IN,
            literal: LITERAL
        },
        contains: [COMMENT, VARIABLE, STRING, NUMBER, PREPROCESSOR, CONSTANT, FUNCTION]
    };
};

var avrasm = function avrasm(hljs) {
  return {
    case_insensitive: true,
    lexemes: '\\.?' + hljs.IDENT_RE,
    keywords: {
      keyword:
      /* mnemonic */
      'adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs ' + 'brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr ' + 'clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor ' + 'fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul ' + 'muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs ' + 'sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub ' + 'subi swap tst wdr',
      built_in:
      /* general purpose registers */
      'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 ' + 'r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ' +
      /* IO Registers (ATMega128) */
      'ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h ' + 'tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ' + 'ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ' + 'ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk ' + 'tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ' + 'ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr ' + 'porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ' + 'ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf',
      meta: '.byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list ' + '.listmac .macro .nolist .org .set'
    },
    contains: [hljs.C_BLOCK_COMMENT_MODE, hljs.COMMENT(';', '$', {
      relevance: 0
    }), hljs.C_NUMBER_MODE, // 0x..., decimal, float
    hljs.BINARY_NUMBER_MODE, // 0b...
    {
      className: 'number',
      begin: '\\b(\\$[a-zA-Z0-9]+|0o[0-7]+)' // $..., 0o...
    }, hljs.QUOTE_STRING_MODE, {
      className: 'string',
      begin: '\'', end: '[^\\\\]\'',
      illegal: '[^\\\\][^\']'
    }, { className: 'symbol', begin: '^[A-Za-z0-9_.$]+:' }, { className: 'meta', begin: '#', end: '$' }, { // подстановка в «.macro»
      className: 'subst',
      begin: '@[0-9]+'
    }]
  };
};

var awk = function awk(hljs) {
  var VARIABLE = {
    className: 'variable',
    variants: [{ begin: /\$[\w\d#@][\w\d_]*/ }, { begin: /\$\{(.*?)}/ }]
  };
  var KEYWORDS = 'BEGIN END if else while do for in break continue delete next nextfile function func exit|10';
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE],
    variants: [{
      begin: /(u|b)?r?'''/, end: /'''/,
      relevance: 10
    }, {
      begin: /(u|b)?r?"""/, end: /"""/,
      relevance: 10
    }, {
      begin: /(u|r|ur)'/, end: /'/,
      relevance: 10
    }, {
      begin: /(u|r|ur)"/, end: /"/,
      relevance: 10
    }, {
      begin: /(b|br)'/, end: /'/
    }, {
      begin: /(b|br)"/, end: /"/
    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE]
  };
  return {
    keywords: {
      keyword: KEYWORDS
    },
    contains: [VARIABLE, STRING, hljs.REGEXP_MODE, hljs.HASH_COMMENT_MODE, hljs.NUMBER_MODE]
  };
};

var axapta = function axapta(hljs) {
  return {
    keywords: 'false int abstract private char boolean static null if for true ' + 'while long throw finally protected final return void enum else ' + 'break new catch byte super case short default double public try this switch ' + 'continue reverse firstfast firstonly forupdate nofetch sum avg minof maxof count ' + 'order group by asc desc index hint like dispaly edit client server ttsbegin ' + 'ttscommit str real date container anytype common div mod',
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE, {
      className: 'meta',
      begin: '#', end: '$'
    }, {
      className: 'class',
      beginKeywords: 'class interface', end: '{', excludeEnd: true,
      illegal: ':',
      contains: [{ beginKeywords: 'extends implements' }, hljs.UNDERSCORE_TITLE_MODE]
    }]
  };
};

var bash = function bash(hljs) {
  var VAR = {
    className: 'variable',
    variants: [{ begin: /\$[\w\d#@][\w\d_]*/ }, { begin: /\$\{(.*?)}/ }]
  };
  var QUOTE_STRING = {
    className: 'string',
    begin: /"/, end: /"/,
    contains: [hljs.BACKSLASH_ESCAPE, VAR, {
      className: 'variable',
      begin: /\$\(/, end: /\)/,
      contains: [hljs.BACKSLASH_ESCAPE]
    }]
  };
  var APOS_STRING = {
    className: 'string',
    begin: /'/, end: /'/
  };

  return {
    aliases: ['sh', 'zsh'],
    lexemes: /\b-?[a-z\._]+\b/,
    keywords: {
      keyword: 'if then else elif fi for while in do done case esac function',
      literal: 'true false',
      built_in:
      // Shell built-ins
      // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
      'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' + 'trap umask unset ' +
      // Bash built-ins
      'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' + 'read readarray source type typeset ulimit unalias ' +
      // Shell modifiers
      'set shopt ' +
      // Zsh built-ins
      'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' + 'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' + 'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' + 'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' + 'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' + 'zpty zregexparse zsocket zstyle ztcp',
      _: '-ne -eq -lt -gt -f -d -e -s -l -a' // relevance booster
    },
    contains: [{
      className: 'meta',
      begin: /^#![^\n]+sh\s*$/,
      relevance: 10
    }, {
      className: 'function',
      begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
      returnBegin: true,
      contains: [hljs.inherit(hljs.TITLE_MODE, { begin: /\w[\w\d_]*/ })],
      relevance: 0
    }, hljs.HASH_COMMENT_MODE, QUOTE_STRING, APOS_STRING, VAR]
  };
};

var basic = function basic(hljs) {
  return {
    case_insensitive: true,
    illegal: '^\.',
    // Support explicitely typed variables that end with $%! or #.
    lexemes: '[a-zA-Z][a-zA-Z0-9_\$\%\!\#]*',
    keywords: {
      keyword: 'ABS ASC AND ATN AUTO|0 BEEP BLOAD|10 BSAVE|10 CALL CALLS CDBL CHAIN CHDIR CHR$|10 CINT CIRCLE ' + 'CLEAR CLOSE CLS COLOR COM COMMON CONT COS CSNG CSRLIN CVD CVI CVS DATA DATE$ ' + 'DEFDBL DEFINT DEFSNG DEFSTR DEF|0 SEG USR DELETE DIM DRAW EDIT END ENVIRON ENVIRON$ ' + 'EOF EQV ERASE ERDEV ERDEV$ ERL ERR ERROR EXP FIELD FILES FIX FOR|0 FRE GET GOSUB|10 GOTO ' + 'HEX$ IF|0 THEN ELSE|0 INKEY$ INP INPUT INPUT# INPUT$ INSTR IMP INT IOCTL IOCTL$ KEY ON ' + 'OFF LIST KILL LEFT$ LEN LET LINE LLIST LOAD LOC LOCATE LOF LOG LPRINT USING LSET ' + 'MERGE MID$ MKDIR MKD$ MKI$ MKS$ MOD NAME NEW NEXT NOISE NOT OCT$ ON OR PEN PLAY STRIG OPEN OPTION ' + 'BASE OUT PAINT PALETTE PCOPY PEEK PMAP POINT POKE POS PRINT PRINT] PSET PRESET ' + 'PUT RANDOMIZE READ REM RENUM RESET|0 RESTORE RESUME RETURN|0 RIGHT$ RMDIR RND RSET ' + 'RUN SAVE SCREEN SGN SHELL SIN SOUND SPACE$ SPC SQR STEP STICK STOP STR$ STRING$ SWAP ' + 'SYSTEM TAB TAN TIME$ TIMER TROFF TRON TO USR VAL VARPTR VARPTR$ VIEW WAIT WHILE ' + 'WEND WIDTH WINDOW WRITE XOR'
    },
    contains: [hljs.QUOTE_STRING_MODE, hljs.COMMENT('REM', '$', { relevance: 10 }), hljs.COMMENT('\'', '$', { relevance: 0 }), {
      // Match line numbers
      className: 'symbol',
      begin: '^[0-9]+\ ',
      relevance: 10
    }, {
      // Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)
      className: 'number',
      begin: '\\b([0-9]+[0-9edED\.]*[#\!]?)',
      relevance: 0
    }, {
      // Match hexadecimal numbers (&Hxxxx)
      className: 'number',
      begin: '(\&[hH][0-9a-fA-F]{1,4})'
    }, {
      // Match octal numbers (&Oxxxxxx)
      className: 'number',
      begin: '(\&[oO][0-7]{1,6})'
    }]
  };
};

var bnf = function bnf(hljs) {
  return {
    contains: [
    // Attribute
    {
      className: 'attribute',
      begin: /</, end: />/
    },
    // Specific
    {
      begin: /::=/,
      starts: {
        end: /$/,
        contains: [{
          begin: /</, end: />/
        },
        // Common
        hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE]
      }
    }]
  };
};

var brainfuck = function brainfuck(hljs) {
  var LITERAL = {
    className: 'literal',
    begin: '[\\+\\-]',
    relevance: 0
  };
  return {
    aliases: ['bf'],
    contains: [hljs.COMMENT('[^\\[\\]\\.,\\+\\-<> \r\n]', '[\\[\\]\\.,\\+\\-<> \r\n]', {
      returnEnd: true,
      relevance: 0
    }), {
      className: 'title',
      begin: '[\\[\\]]',
      relevance: 0
    }, {
      className: 'string',
      begin: '[\\.,]',
      relevance: 0
    }, {
      // this mode works as the only relevance counter
      begin: /\+\+|\-\-/, returnBegin: true,
      contains: [LITERAL]
    }, LITERAL]
  };
};

var cal = function cal(hljs) {
  var KEYWORDS = 'div mod in and or not xor asserterror begin case do downto else end exit for if of repeat then to ' + 'until while with var';
  var LITERALS = 'false true';
  var COMMENT_MODES = [hljs.C_LINE_COMMENT_MODE, hljs.COMMENT(/\{/, /\}/, {
    relevance: 0
  }), hljs.COMMENT(/\(\*/, /\*\)/, {
    relevance: 10
  })];
  var STRING = {
    className: 'string',
    begin: /'/, end: /'/,
    contains: [{ begin: /''/ }]
  };
  var CHAR_STRING = {
    className: 'string', begin: /(#\d+)+/
  };
  var DATE = {
    className: 'number',
    begin: '\\b\\d+(\\.\\d+)?(DT|D|T)',
    relevance: 0
  };
  var DBL_QUOTED_VARIABLE = {
    className: 'string', // not a string technically but makes sense to be highlighted in the same style
    begin: '"',
    end: '"'
  };

  var PROCEDURE = {
    className: 'function',
    beginKeywords: 'procedure', end: /[:;]/,
    keywords: 'procedure|10',
    contains: [hljs.TITLE_MODE, {
      className: 'params',
      begin: /\(/, end: /\)/,
      keywords: KEYWORDS,
      contains: [STRING, CHAR_STRING]
    }].concat(COMMENT_MODES)
  };

  var OBJECT = {
    className: 'class',
    begin: 'OBJECT (Table|Form|Report|Dataport|Codeunit|XMLport|MenuSuite|Page|Query) (\\d+) ([^\\r\\n]+)',
    returnBegin: true,
    contains: [hljs.TITLE_MODE, PROCEDURE]
  };

  return {
    case_insensitive: true,
    keywords: { keyword: KEYWORDS, literal: LITERALS },
    illegal: /\/\*/,
    contains: [STRING, CHAR_STRING, DATE, DBL_QUOTED_VARIABLE, hljs.NUMBER_MODE, OBJECT, PROCEDURE]
  };
};

var capnproto = function capnproto(hljs) {
  return {
    aliases: ['capnp'],
    keywords: {
      keyword: 'struct enum interface union group import using const annotation extends in of on as with from fixed',
      built_in: 'Void Bool Int8 Int16 Int32 Int64 UInt8 UInt16 UInt32 UInt64 Float32 Float64 ' + 'Text Data AnyPointer AnyStruct Capability List',
      literal: 'true false'
    },
    contains: [hljs.QUOTE_STRING_MODE, hljs.NUMBER_MODE, hljs.HASH_COMMENT_MODE, {
      className: 'meta',
      begin: /@0x[\w\d]{16};/,
      illegal: /\n/
    }, {
      className: 'symbol',
      begin: /@\d+\b/
    }, {
      className: 'class',
      beginKeywords: 'struct enum', end: /\{/,
      illegal: /\n/,
      contains: [hljs.inherit(hljs.TITLE_MODE, {
        starts: { endsWithParent: true, excludeEnd: true // hack: eating everything after the first title
        } })]
    }, {
      className: 'class',
      beginKeywords: 'interface', end: /\{/,
      illegal: /\n/,
      contains: [hljs.inherit(hljs.TITLE_MODE, {
        starts: { endsWithParent: true, excludeEnd: true // hack: eating everything after the first title
        } })]
    }]
  };
};

var ceylon = function ceylon(hljs) {
  // 2.3. Identifiers and keywords
  var KEYWORDS = 'assembly module package import alias class interface object given value ' + 'assign void function new of extends satisfies abstracts in out return ' + 'break continue throw assert dynamic if else switch case for while try ' + 'catch finally then let this outer super is exists nonempty';
  // 7.4.1 Declaration Modifiers
  var DECLARATION_MODIFIERS = 'shared abstract formal default actual variable late native deprecated' + 'final sealed annotation suppressWarnings small';
  // 7.4.2 Documentation
  var DOCUMENTATION = 'doc by license see throws tagged';
  var SUBST = {
    className: 'subst', excludeBegin: true, excludeEnd: true,
    begin: /``/, end: /``/,
    keywords: KEYWORDS,
    relevance: 10
  };
  var EXPRESSIONS = [{
    // verbatim string
    className: 'string',
    begin: '"""',
    end: '"""',
    relevance: 10
  }, {
    // string literal or template
    className: 'string',
    begin: '"', end: '"',
    contains: [SUBST]
  }, {
    // character literal
    className: 'string',
    begin: "'",
    end: "'"
  }, {
    // numeric literal
    className: 'number',
    begin: '#[0-9a-fA-F_]+|\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?',
    relevance: 0
  }];
  SUBST.contains = EXPRESSIONS;

  return {
    keywords: {
      keyword: KEYWORDS + ' ' + DECLARATION_MODIFIERS,
      meta: DOCUMENTATION
    },
    illegal: '\\$[^01]|#[^0-9a-fA-F]',
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.COMMENT('/\\*', '\\*/', { contains: ['self'] }), {
      // compiler annotation
      className: 'meta',
      begin: '@[a-z]\\w*(?:\\:\"[^\"]*\")?'
    }].concat(EXPRESSIONS)
  };
};

var clean = function clean(hljs) {
  return {
    aliases: ['clean', 'icl', 'dcl'],
    keywords: {
      keyword: 'if let in with where case of class instance otherwise ' + 'implementation definition system module from import qualified as ' + 'special code inline foreign export ccall stdcall generic derive ' + 'infix infixl infixr',
      literal: 'True False'
    },
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE, { begin: '->|<-[|:]?|::|#!?|>>=|\\{\\||\\|\\}|:==|=:|\\.\\.|<>|`' // relevance booster
    }]
  };
};

var clojure = function clojure(hljs) {
  var keywords = {
    'builtin-name':
    // Clojure keywords
    'def defonce cond apply if-not if-let if not not= = < > <= >= == + / * - rem ' + 'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? ' + 'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? ' + 'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? ' + 'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . ' + 'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last ' + 'drop-while while intern condp case reduced cycle split-at split-with repeat replicate ' + 'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext ' + 'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends ' + 'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler ' + 'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter ' + 'monitor-exit defmacro defn defn- macroexpand macroexpand-1 for dosync and or ' + 'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert ' + 'peek pop doto proxy defstruct first rest cons defprotocol cast coll deftype defrecord last butlast ' + 'sigs reify second ffirst fnext nfirst nnext defmulti defmethod meta with-meta ns in-ns create-ns import ' + 'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! ' + 'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger ' + 'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline ' + 'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking ' + 'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! ' + 'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! ' + 'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty ' + 'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list ' + 'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer ' + 'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate ' + 'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta ' + 'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'
  };

  var SYMBOLSTART = 'a-zA-Z_\\-!.?+*=<>&#\'';
  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';
  var SIMPLE_NUMBER_RE = '[-+]?\\d+(\\.\\d+)?';

  var SYMBOL = {
    begin: SYMBOL_RE,
    relevance: 0
  };
  var NUMBER = {
    className: 'number', begin: SIMPLE_NUMBER_RE,
    relevance: 0
  };
  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
  var COMMENT = hljs.COMMENT(';', '$', {
    relevance: 0
  });
  var LITERAL = {
    className: 'literal',
    begin: /\b(true|false|nil)\b/
  };
  var COLLECTION = {
    begin: '[\\[\\{]', end: '[\\]\\}]'
  };
  var HINT = {
    className: 'comment',
    begin: '\\^' + SYMBOL_RE
  };
  var HINT_COL = hljs.COMMENT('\\^\\{', '\\}');
  var KEY = {
    className: 'symbol',
    begin: '[:]{1,2}' + SYMBOL_RE
  };
  var LIST = {
    begin: '\\(', end: '\\)'
  };
  var BODY = {
    endsWithParent: true,
    relevance: 0
  };
  var NAME = {
    keywords: keywords,
    lexemes: SYMBOL_RE,
    className: 'name', begin: SYMBOL_RE,
    starts: BODY
  };
  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];

  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];
  BODY.contains = DEFAULT_CONTAINS;
  COLLECTION.contains = DEFAULT_CONTAINS;
  HINT_COL.contains = [COLLECTION];

  return {
    aliases: ['clj'],
    illegal: /\S/,
    contains: [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]
  };
};

var clojureRepl = function clojureRepl(hljs) {
  return {
    contains: [{
      className: 'meta',
      begin: /^([\w.-]+|\s*#_)=>/,
      starts: {
        end: /$/,
        subLanguage: 'clojure'
      }
    }]
  };
};

var cmake = function cmake(hljs) {
  return {
    aliases: ['cmake.in'],
    case_insensitive: true,
    keywords: {
      keyword: 'add_custom_command add_custom_target add_definitions add_dependencies ' + 'add_executable add_library add_subdirectory add_test aux_source_directory ' + 'break build_command cmake_minimum_required cmake_policy configure_file ' + 'create_test_sourcelist define_property else elseif enable_language enable_testing ' + 'endforeach endfunction endif endmacro endwhile execute_process export find_file ' + 'find_library find_package find_path find_program fltk_wrap_ui foreach function ' + 'get_cmake_property get_directory_property get_filename_component get_property ' + 'get_source_file_property get_target_property get_test_property if include ' + 'include_directories include_external_msproject include_regular_expression install ' + 'link_directories load_cache load_command macro mark_as_advanced message option ' + 'output_required_files project qt_wrap_cpp qt_wrap_ui remove_definitions return ' + 'separate_arguments set set_directory_properties set_property ' + 'set_source_files_properties set_target_properties set_tests_properties site_name ' + 'source_group string target_link_libraries try_compile try_run unset variable_watch ' + 'while build_name exec_program export_library_dependencies install_files ' + 'install_programs install_targets link_libraries make_directory remove subdir_depends ' + 'subdirs use_mangled_mesa utility_source variable_requires write_file ' + 'qt5_use_modules qt5_use_package qt5_wrap_cpp on off true false and or ' + 'equal less greater strless strgreater strequal matches'
    },
    contains: [{
      className: 'variable',
      begin: '\\${', end: '}'
    }, hljs.HASH_COMMENT_MODE, hljs.QUOTE_STRING_MODE, hljs.NUMBER_MODE]
  };
};

var coffeescript = function coffeescript(hljs) {
  var KEYWORDS = {
    keyword:
    // JS keywords
    'in if for while finally new do return else break catch instanceof throw try this ' + 'switch continue typeof delete debugger super yield import export from as default await ' +
    // Coffee keywords
    'then unless until loop of by when and or is isnt not',
    literal:
    // JS literals
    'true false null undefined ' +
    // Coffee literals
    'yes no on off',
    built_in: 'npm require console print module global window document'
  };
  var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
  var SUBST = {
    className: 'subst',
    begin: /#\{/, end: /}/,
    keywords: KEYWORDS
  };
  var EXPRESSIONS = [hljs.BINARY_NUMBER_MODE, hljs.inherit(hljs.C_NUMBER_MODE, { starts: { end: '(\\s*/)?', relevance: 0 } }), // a number tries to eat the following slash to prevent treating it as a regexp
  {
    className: 'string',
    variants: [{
      begin: /'''/, end: /'''/,
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      begin: /'/, end: /'/,
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      begin: /"""/, end: /"""/,
      contains: [hljs.BACKSLASH_ESCAPE, SUBST]
    }, {
      begin: /"/, end: /"/,
      contains: [hljs.BACKSLASH_ESCAPE, SUBST]
    }]
  }, {
    className: 'regexp',
    variants: [{
      begin: '///', end: '///',
      contains: [SUBST, hljs.HASH_COMMENT_MODE]
    }, {
      begin: '//[gim]*',
      relevance: 0
    }, {
      // regex can't start with space to parse x / 2 / 3 as two divisions
      // regex can't start with *, and it supports an "illegal" in the main mode
      begin: /\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/
    }]
  }, {
    begin: '@' + JS_IDENT_RE // relevance booster
  }, {
    subLanguage: 'javascript',
    excludeBegin: true, excludeEnd: true,
    variants: [{
      begin: '```', end: '```'
    }, {
      begin: '`', end: '`'
    }]
  }];
  SUBST.contains = EXPRESSIONS;

  var TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
  var PARAMS_RE = '(\\(.*\\))?\\s*\\B[-=]>';
  var PARAMS = {
    className: 'params',
    begin: '\\([^\\(]', returnBegin: true,
    /* We need another contained nameless mode to not have every nested
    pair of parens to be called "params" */
    contains: [{
      begin: /\(/, end: /\)/,
      keywords: KEYWORDS,
      contains: ['self'].concat(EXPRESSIONS)
    }]
  };

  return {
    aliases: ['coffee', 'cson', 'iced'],
    keywords: KEYWORDS,
    illegal: /\/\*/,
    contains: EXPRESSIONS.concat([hljs.COMMENT('###', '###'), hljs.HASH_COMMENT_MODE, {
      className: 'function',
      begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + PARAMS_RE, end: '[-=]>',
      returnBegin: true,
      contains: [TITLE, PARAMS]
    }, {
      // anonymous function start
      begin: /[:\(,=]\s*/,
      relevance: 0,
      contains: [{
        className: 'function',
        begin: PARAMS_RE, end: '[-=]>',
        returnBegin: true,
        contains: [PARAMS]
      }]
    }, {
      className: 'class',
      beginKeywords: 'class',
      end: '$',
      illegal: /[:="\[\]]/,
      contains: [{
        beginKeywords: 'extends',
        endsWithParent: true,
        illegal: /[:="\[\]]/,
        contains: [TITLE]
      }, TITLE]
    }, {
      begin: JS_IDENT_RE + ':', end: ':',
      returnBegin: true, returnEnd: true,
      relevance: 0
    }])
  };
};

var coq = function coq(hljs) {
  return {
    keywords: {
      keyword: '_ as at cofix else end exists exists2 fix for forall fun if IF in let ' + 'match mod Prop return Set then Type using where with ' + 'Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo ' + 'Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion ' + 'Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture ' + 'Conjectures Constant constr Constraint Constructors Context Corollary ' + 'CreateHintDb Cut Declare Defined Definition Delimit Dependencies Dependent' + 'Derive Drop eauto End Equality Eval Example Existential Existentials ' + 'Existing Export exporting Extern Extract Extraction Fact Field Fields File ' + 'Fixpoint Focus for From Function Functional Generalizable Global Goal Grab ' + 'Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident ' + 'Identity If Immediate Implicit Import Include Inductive Infix Info Initial ' + 'Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear ' + 'Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML ' + 'Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation ' + 'Obligations Opaque Open Optimize Options Parameter Parameters Parametric ' + 'Path Paths pattern Polymorphic Preterm Print Printing Program Projections ' + 'Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark ' + 'Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save ' + 'Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern ' + 'SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies ' + 'Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time ' + 'Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused ' + 'Unfold Universe Universes Unset Unshelve using Variable Variables Variant ' + 'Verbose Visibility where with',
      built_in: 'abstract absurd admit after apply as assert assumption at auto autorewrite ' + 'autounfold before bottom btauto by case case_eq cbn cbv change ' + 'classical_left classical_right clear clearbody cofix compare compute ' + 'congruence constr_eq constructor contradict contradiction cut cutrewrite ' + 'cycle decide decompose dependent destruct destruction dintuition ' + 'discriminate discrR do double dtauto eapply eassumption eauto ecase ' + 'econstructor edestruct ediscriminate eelim eexact eexists einduction ' + 'einjection eleft elim elimtype enough equality erewrite eright ' + 'esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail ' + 'field field_simplify field_simplify_eq first firstorder fix fold fourier ' + 'functional generalize generalizing gfail give_up has_evar hnf idtac in ' + 'induction injection instantiate intro intro_pattern intros intuition ' + 'inversion inversion_clear is_evar is_var lapply lazy left lia lra move ' + 'native_compute nia nsatz omega once pattern pose progress proof psatz quote ' + 'record red refine reflexivity remember rename repeat replace revert ' + 'revgoals rewrite rewrite_strat right ring ring_simplify rtauto set ' + 'setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry ' + 'setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve ' + 'specialize split split_Rabs split_Rmult stepl stepr subst sum swap ' + 'symmetry tactic tauto time timeout top transitivity trivial try tryif ' + 'unfold unify until using vm_compute with'
    },
    contains: [hljs.QUOTE_STRING_MODE, hljs.COMMENT('\\(\\*', '\\*\\)'), hljs.C_NUMBER_MODE, {
      className: 'type',
      excludeBegin: true,
      begin: '\\|\\s*',
      end: '\\w+'
    }, { begin: /[-=]>/ // relevance booster
    }]
  };
};

var cos = function cos(hljs) {

  var STRINGS = {
    className: 'string',
    variants: [{
      begin: '"',
      end: '"',
      contains: [{ // escaped
        begin: "\"\"",
        relevance: 0
      }]
    }]
  };

  var NUMBERS = {
    className: "number",
    begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)",
    relevance: 0
  };

  var COS_KEYWORDS = 'property parameter class classmethod clientmethod extends as break ' + 'catch close continue do d|0 else elseif for goto halt hang h|0 if job ' + 'j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 ' + 'tcommit throw trollback try tstart use view while write w|0 xecute x|0 ' + 'zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert ' + 'zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit ' + 'zsync ascii';

  // registered function - no need in them due to all functions are highlighted,
  // but I'll just leave this here.

  //"$bit", "$bitcount",
  //"$bitfind", "$bitlogic", "$case", "$char", "$classmethod", "$classname",
  //"$compile", "$data", "$decimal", "$double", "$extract", "$factor",
  //"$find", "$fnumber", "$get", "$increment", "$inumber", "$isobject",
  //"$isvaliddouble", "$isvalidnum", "$justify", "$length", "$list",
  //"$listbuild", "$listdata", "$listfind", "$listfromstring", "$listget",
  //"$listlength", "$listnext", "$listsame", "$listtostring", "$listvalid",
  //"$locate", "$match", "$method", "$name", "$nconvert", "$next",
  //"$normalize", "$now", "$number", "$order", "$parameter", "$piece",
  //"$prefetchoff", "$prefetchon", "$property", "$qlength", "$qsubscript",
  //"$query", "$random", "$replace", "$reverse", "$sconvert", "$select",
  //"$sortbegin", "$sortend", "$stack", "$text", "$translate", "$view",
  //"$wascii", "$wchar", "$wextract", "$wfind", "$wiswide", "$wlength",
  //"$wreverse", "$xecute", "$zabs", "$zarccos", "$zarcsin", "$zarctan",
  //"$zcos", "$zcot", "$zcsc", "$zdate", "$zdateh", "$zdatetime",
  //"$zdatetimeh", "$zexp", "$zhex", "$zln", "$zlog", "$zpower", "$zsec",
  //"$zsin", "$zsqr", "$ztan", "$ztime", "$ztimeh", "$zboolean",
  //"$zconvert", "$zcrc", "$zcyc", "$zdascii", "$zdchar", "$zf",
  //"$ziswide", "$zlascii", "$zlchar", "$zname", "$zposition", "$zqascii",
  //"$zqchar", "$zsearch", "$zseek", "$zstrip", "$zwascii", "$zwchar",
  //"$zwidth", "$zwpack", "$zwbpack", "$zwunpack", "$zwbunpack", "$zzenkaku",
  //"$change", "$mv", "$mvat", "$mvfmt", "$mvfmts", "$mviconv",
  //"$mviconvs", "$mvinmat", "$mvlover", "$mvoconv", "$mvoconvs", "$mvraise",
  //"$mvtrans", "$mvv", "$mvname", "$zbitand", "$zbitcount", "$zbitfind",
  //"$zbitget", "$zbitlen", "$zbitnot", "$zbitor", "$zbitset", "$zbitstr",
  //"$zbitxor", "$zincrement", "$znext", "$zorder", "$zprevious", "$zsort",
  //"device", "$ecode", "$estack", "$etrap", "$halt", "$horolog",
  //"$io", "$job", "$key", "$namespace", "$principal", "$quit", "$roles",
  //"$storage", "$system", "$test", "$this", "$tlevel", "$username",
  //"$x", "$y", "$za", "$zb", "$zchild", "$zeof", "$zeos", "$zerror",
  //"$zhorolog", "$zio", "$zjob", "$zmode", "$znspace", "$zparent", "$zpi",
  //"$zpos", "$zreference", "$zstorage", "$ztimestamp", "$ztimezone",
  //"$ztrap", "$zversion"

  return {
    case_insensitive: true,
    aliases: ["cos", "cls"],
    keywords: COS_KEYWORDS,
    contains: [NUMBERS, STRINGS, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, {
      className: "comment",
      begin: /;/, end: "$",
      relevance: 0
    }, { // Functions and user-defined functions: write $ztime(60*60*3), $$myFunc(10), $$^Val(1)
      className: "built_in",
      begin: /(?:\$\$?|\.\.)\^?[a-zA-Z]+/
    }, { // Macro command: quit $$$OK
      className: "built_in",
      begin: /\$\$\$[a-zA-Z]+/
    }, { // Special (global) variables: write %request.Content; Built-in classes: %Library.Integer
      className: "built_in",
      begin: /%[a-z]+(?:\.[a-z]+)*/
    }, { // Global variable: set ^globalName = 12 write ^globalName
      className: "symbol",
      begin: /\^%?[a-zA-Z][\w]*/
    }, { // Some control constructions: do ##class(Package.ClassName).Method(), ##super()
      className: "keyword",
      begin: /##class|##super|#define|#dim/
    },

    // sub-languages: are not fully supported by hljs by 11/15/2015
    // left for the future implementation.
    {
      begin: /&sql\(/, end: /\)/,
      excludeBegin: true, excludeEnd: true,
      subLanguage: "sql"
    }, {
      begin: /&(js|jscript|javascript)</, end: />/,
      excludeBegin: true, excludeEnd: true,
      subLanguage: "javascript"
    }, {
      // this brakes first and last tag, but this is the only way to embed a valid html
      begin: /&html<\s*</, end: />\s*>/,
      subLanguage: "xml"
    }]
  };
};

var crmsh = function crmsh(hljs) {
  var RESOURCES = 'primitive rsc_template';

  var COMMANDS = 'group clone ms master location colocation order fencing_topology ' + 'rsc_ticket acl_target acl_group user role ' + 'tag xml';

  var PROPERTY_SETS = 'property rsc_defaults op_defaults';

  var KEYWORDS = 'params meta operations op rule attributes utilization';

  var OPERATORS = 'read write deny defined not_defined in_range date spec in ' + 'ref reference attribute type xpath version and or lt gt tag ' + 'lte gte eq ne \\';

  var TYPES = 'number string';

  var LITERALS = 'Master Started Slave Stopped start promote demote stop monitor true false';

  return {
    aliases: ['crm', 'pcmk'],
    case_insensitive: true,
    keywords: {
      keyword: KEYWORDS + ' ' + OPERATORS + ' ' + TYPES,
      literal: LITERALS
    },
    contains: [hljs.HASH_COMMENT_MODE, {
      beginKeywords: 'node',
      starts: {
        end: '\\s*([\\w_-]+:)?',
        starts: {
          className: 'title',
          end: '\\s*[\\$\\w_][\\w_-]*'
        }
      }
    }, {
      beginKeywords: RESOURCES,
      starts: {
        className: 'title',
        end: '\\s*[\\$\\w_][\\w_-]*',
        starts: {
          end: '\\s*@?[\\w_][\\w_\\.:-]*'
        }
      }
    }, {
      begin: '\\b(' + COMMANDS.split(' ').join('|') + ')\\s+',
      keywords: COMMANDS,
      starts: {
        className: 'title',
        end: '[\\$\\w_][\\w_-]*'
      }
    }, {
      beginKeywords: PROPERTY_SETS,
      starts: {
        className: 'title',
        end: '\\s*([\\w_-]+:)?'
      }
    }, hljs.QUOTE_STRING_MODE, {
      className: 'meta',
      begin: '(ocf|systemd|service|lsb):[\\w_:-]+',
      relevance: 0
    }, {
      className: 'number',
      begin: '\\b\\d+(\\.\\d+)?(ms|s|h|m)?',
      relevance: 0
    }, {
      className: 'literal',
      begin: '[-]?(infinity|inf)',
      relevance: 0
    }, {
      className: 'attr',
      begin: /([A-Za-z\$_\#][\w_-]+)=/,
      relevance: 0
    }, {
      className: 'tag',
      begin: '</?',
      end: '/?>',
      relevance: 0
    }]
  };
};

var crystal = function crystal(hljs) {
  var NUM_SUFFIX = '(_[uif](8|16|32|64))?';
  var CRYSTAL_IDENT_RE = '[a-zA-Z_]\\w*[!?=]?';
  var RE_STARTER = '!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|' + '>>|>|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';
  var CRYSTAL_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\][=?]?';
  var CRYSTAL_KEYWORDS = {
    keyword: 'abstract alias as as? asm begin break case class def do else elsif end ensure enum extend for fun if ' + 'include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? ' + 'return require select self sizeof struct super then type typeof union uninitialized unless until when while with yield ' + '__DIR__ __END_LINE__ __FILE__ __LINE__',
    literal: 'false nil true'
  };
  var SUBST = {
    className: 'subst',
    begin: '#{', end: '}',
    keywords: CRYSTAL_KEYWORDS
  };
  var EXPANSION = {
    className: 'template-variable',
    variants: [{ begin: '\\{\\{', end: '\\}\\}' }, { begin: '\\{%', end: '%\\}' }],
    keywords: CRYSTAL_KEYWORDS
  };

  function recursiveParen(begin, end) {
    var contains = [{ begin: begin, end: end }];
    contains[0].contains = contains;
    return contains;
  }
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE, SUBST],
    variants: [{ begin: /'/, end: /'/ }, { begin: /"/, end: /"/ }, { begin: /`/, end: /`/ }, { begin: '%w?\\(', end: '\\)', contains: recursiveParen('\\(', '\\)') }, { begin: '%w?\\[', end: '\\]', contains: recursiveParen('\\[', '\\]') }, { begin: '%w?{', end: '}', contains: recursiveParen('{', '}') }, { begin: '%w?<', end: '>', contains: recursiveParen('<', '>') }, { begin: '%w?/', end: '/' }, { begin: '%w?%', end: '%' }, { begin: '%w?-', end: '-' }, { begin: '%w?\\|', end: '\\|' }, { begin: /<<-\w+$/, end: /^\s*\w+$/ }],
    relevance: 0
  };
  var Q_STRING = {
    className: 'string',
    variants: [{ begin: '%q\\(', end: '\\)', contains: recursiveParen('\\(', '\\)') }, { begin: '%q\\[', end: '\\]', contains: recursiveParen('\\[', '\\]') }, { begin: '%q{', end: '}', contains: recursiveParen('{', '}') }, { begin: '%q<', end: '>', contains: recursiveParen('<', '>') }, { begin: '%q/', end: '/' }, { begin: '%q%', end: '%' }, { begin: '%q-', end: '-' }, { begin: '%q\\|', end: '\\|' }, { begin: /<<-'\w+'$/, end: /^\s*\w+$/ }],
    relevance: 0
  };
  var REGEXP = {
    begin: '(' + RE_STARTER + ')\\s*',
    contains: [{
      className: 'regexp',
      contains: [hljs.BACKSLASH_ESCAPE, SUBST],
      variants: [{ begin: '//[a-z]*', relevance: 0 }, { begin: '/', end: '/[a-z]*' }, { begin: '%r\\(', end: '\\)', contains: recursiveParen('\\(', '\\)') }, { begin: '%r\\[', end: '\\]', contains: recursiveParen('\\[', '\\]') }, { begin: '%r{', end: '}', contains: recursiveParen('{', '}') }, { begin: '%r<', end: '>', contains: recursiveParen('<', '>') }, { begin: '%r/', end: '/' }, { begin: '%r%', end: '%' }, { begin: '%r-', end: '-' }, { begin: '%r\\|', end: '\\|' }]
    }],
    relevance: 0
  };
  var REGEXP2 = {
    className: 'regexp',
    contains: [hljs.BACKSLASH_ESCAPE, SUBST],
    variants: [{ begin: '%r\\(', end: '\\)', contains: recursiveParen('\\(', '\\)') }, { begin: '%r\\[', end: '\\]', contains: recursiveParen('\\[', '\\]') }, { begin: '%r{', end: '}', contains: recursiveParen('{', '}') }, { begin: '%r<', end: '>', contains: recursiveParen('<', '>') }, { begin: '%r/', end: '/' }, { begin: '%r%', end: '%' }, { begin: '%r-', end: '-' }, { begin: '%r\\|', end: '\\|' }],
    relevance: 0
  };
  var ATTRIBUTE = {
    className: 'meta',
    begin: '@\\[', end: '\\]',
    contains: [hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'meta-string' })]
  };
  var CRYSTAL_DEFAULT_CONTAINS = [EXPANSION, STRING, Q_STRING, REGEXP, REGEXP2, ATTRIBUTE, hljs.HASH_COMMENT_MODE, {
    className: 'class',
    beginKeywords: 'class module struct', end: '$|;',
    illegal: /=/,
    contains: [hljs.HASH_COMMENT_MODE, hljs.inherit(hljs.TITLE_MODE, { begin: '[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?' }), { begin: '<' // relevance booster for inheritance
    }]
  }, {
    className: 'class',
    beginKeywords: 'lib enum union', end: '$|;',
    illegal: /=/,
    contains: [hljs.HASH_COMMENT_MODE, hljs.inherit(hljs.TITLE_MODE, { begin: '[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?' })],
    relevance: 10
  }, {
    className: 'function',
    beginKeywords: 'def', end: /\B\b/,
    contains: [hljs.inherit(hljs.TITLE_MODE, {
      begin: CRYSTAL_METHOD_RE,
      endsParent: true
    })]
  }, {
    className: 'function',
    beginKeywords: 'fun macro', end: /\B\b/,
    contains: [hljs.inherit(hljs.TITLE_MODE, {
      begin: CRYSTAL_METHOD_RE,
      endsParent: true
    })],
    relevance: 5
  }, {
    className: 'symbol',
    begin: hljs.UNDERSCORE_IDENT_RE + '(\\!|\\?)?:',
    relevance: 0
  }, {
    className: 'symbol',
    begin: ':',
    contains: [STRING, { begin: CRYSTAL_METHOD_RE }],
    relevance: 0
  }, {
    className: 'number',
    variants: [{ begin: '\\b0b([01_]*[01])' + NUM_SUFFIX }, { begin: '\\b0o([0-7_]*[0-7])' + NUM_SUFFIX }, { begin: '\\b0x([A-Fa-f0-9_]*[A-Fa-f0-9])' + NUM_SUFFIX }, { begin: '\\b(([0-9][0-9_]*[0-9]|[0-9])(\\.[0-9_]*[0-9])?([eE][+-]?[0-9_]*[0-9])?)' + NUM_SUFFIX }],
    relevance: 0
  }];
  SUBST.contains = CRYSTAL_DEFAULT_CONTAINS;
  EXPANSION.contains = CRYSTAL_DEFAULT_CONTAINS.slice(1); // without EXPANSION

  return {
    aliases: ['cr'],
    lexemes: CRYSTAL_IDENT_RE,
    keywords: CRYSTAL_KEYWORDS,
    contains: CRYSTAL_DEFAULT_CONTAINS
  };
};

var cs = function cs(hljs) {
  var KEYWORDS = {
    keyword:
    // Normal keywords.
    'abstract as base bool break byte case catch char checked const continue decimal ' + 'default delegate do double enum event explicit extern finally fixed float ' + 'for foreach goto if implicit in int interface internal is lock long nameof ' + 'object operator out override params private protected public readonly ref sbyte ' + 'sealed short sizeof stackalloc static string struct switch this try typeof ' + 'uint ulong unchecked unsafe ushort using virtual void volatile while ' +
    // Contextual keywords.
    'add alias ascending async await by descending dynamic equals from get global group into join ' + 'let on orderby partial remove select set value var where yield',
    literal: 'null false true'
  };

  var VERBATIM_STRING = {
    className: 'string',
    begin: '@"', end: '"',
    contains: [{ begin: '""' }]
  };
  var VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, { illegal: /\n/ });
  var SUBST = {
    className: 'subst',
    begin: '{', end: '}',
    keywords: KEYWORDS
  };
  var SUBST_NO_LF = hljs.inherit(SUBST, { illegal: /\n/ });
  var INTERPOLATED_STRING = {
    className: 'string',
    begin: /\$"/, end: '"',
    illegal: /\n/,
    contains: [{ begin: '{{' }, { begin: '}}' }, hljs.BACKSLASH_ESCAPE, SUBST_NO_LF]
  };
  var INTERPOLATED_VERBATIM_STRING = {
    className: 'string',
    begin: /\$@"/, end: '"',
    contains: [{ begin: '{{' }, { begin: '}}' }, { begin: '""' }, SUBST]
  };
  var INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {
    illegal: /\n/,
    contains: [{ begin: '{{' }, { begin: '}}' }, { begin: '""' }, SUBST_NO_LF]
  });
  SUBST.contains = [INTERPOLATED_VERBATIM_STRING, INTERPOLATED_STRING, VERBATIM_STRING, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE, hljs.C_BLOCK_COMMENT_MODE];
  SUBST_NO_LF.contains = [INTERPOLATED_VERBATIM_STRING_NO_LF, INTERPOLATED_STRING, VERBATIM_STRING_NO_LF, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE, hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, { illegal: /\n/ })];
  var STRING = {
    variants: [INTERPOLATED_VERBATIM_STRING, INTERPOLATED_STRING, VERBATIM_STRING, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE]
  };

  var TYPE_IDENT_RE = hljs.IDENT_RE + '(<' + hljs.IDENT_RE + '(\\s*,\\s*' + hljs.IDENT_RE + ')*>)?(\\[\\])?';

  return {
    aliases: ['csharp'],
    keywords: KEYWORDS,
    illegal: /::/,
    contains: [hljs.COMMENT('///', '$', {
      returnBegin: true,
      contains: [{
        className: 'doctag',
        variants: [{
          begin: '///', relevance: 0
        }, {
          begin: '<!--|-->'
        }, {
          begin: '</?', end: '>'
        }]
      }]
    }), hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, {
      className: 'meta',
      begin: '#', end: '$',
      keywords: {
        'meta-keyword': 'if else elif endif define undef warning error line region endregion pragma checksum'
      }
    }, STRING, hljs.C_NUMBER_MODE, {
      beginKeywords: 'class interface', end: /[{;=]/,
      illegal: /[^\s:]/,
      contains: [hljs.TITLE_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
    }, {
      beginKeywords: 'namespace', end: /[{;=]/,
      illegal: /[^\s:]/,
      contains: [hljs.inherit(hljs.TITLE_MODE, { begin: '[a-zA-Z](\\.?\\w)*' }), hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
    }, {
      // [Attributes("")]
      className: 'meta',
      begin: '^\\s*\\[', excludeBegin: true, end: '\\]', excludeEnd: true,
      contains: [{ className: 'meta-string', begin: /"/, end: /"/ }]
    }, {
      // Expression keywords prevent 'keyword Name(...)' from being
      // recognized as a function definition
      beginKeywords: 'new return throw await else',
      relevance: 0
    }, {
      className: 'function',
      begin: '(' + TYPE_IDENT_RE + '\\s+)+' + hljs.IDENT_RE + '\\s*\\(', returnBegin: true,
      end: /[{;=]/, excludeEnd: true,
      keywords: KEYWORDS,
      contains: [{
        begin: hljs.IDENT_RE + '\\s*\\(', returnBegin: true,
        contains: [hljs.TITLE_MODE],
        relevance: 0
      }, {
        className: 'params',
        begin: /\(/, end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
        keywords: KEYWORDS,
        relevance: 0,
        contains: [STRING, hljs.C_NUMBER_MODE, hljs.C_BLOCK_COMMENT_MODE]
      }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
    }]
  };
};

var csp = function csp(hljs) {
  return {
    case_insensitive: false,
    lexemes: '[a-zA-Z][a-zA-Z0-9_-]*',
    keywords: {
      keyword: 'base-uri child-src connect-src default-src font-src form-action' + ' frame-ancestors frame-src img-src media-src object-src plugin-types' + ' report-uri sandbox script-src style-src'
    },
    contains: [{
      className: 'string',
      begin: "'", end: "'"
    }, {
      className: 'attribute',
      begin: '^Content', end: ':', excludeEnd: true
    }]
  };
};

var css = function css(hljs) {
  var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
  var RULE = {
    begin: /[A-Z\_\.\-]+\s*:/, returnBegin: true, end: ';', endsWithParent: true,
    contains: [{
      className: 'attribute',
      begin: /\S/, end: ':', excludeEnd: true,
      starts: {
        endsWithParent: true, excludeEnd: true,
        contains: [{
          begin: /[\w-]+\(/, returnBegin: true,
          contains: [{
            className: 'built_in',
            begin: /[\w-]+/
          }, {
            begin: /\(/, end: /\)/,
            contains: [hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE]
          }]
        }, hljs.CSS_NUMBER_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, hljs.C_BLOCK_COMMENT_MODE, {
          className: 'number', begin: '#[0-9A-Fa-f]+'
        }, {
          className: 'meta', begin: '!important'
        }]
      }
    }]
  };

  return {
    case_insensitive: true,
    illegal: /[=\/|'\$]/,
    contains: [hljs.C_BLOCK_COMMENT_MODE, {
      className: 'selector-id', begin: /#[A-Za-z0-9_-]+/
    }, {
      className: 'selector-class', begin: /\.[A-Za-z0-9_-]+/
    }, {
      className: 'selector-attr',
      begin: /\[/, end: /\]/,
      illegal: '$'
    }, {
      className: 'selector-pseudo',
      begin: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/
    }, {
      begin: '@(font-face|page)',
      lexemes: '[a-z-]+',
      keywords: 'font-face page'
    }, {
      begin: '@', end: '[{;]', // at_rule eating first "{" is a good thing
      // because it doesn’t let it to be parsed as
      // a rule set but instead drops parser into
      // the default mode which is how it should be.
      illegal: /:/, // break on Less variables @var: ...
      contains: [{
        className: 'keyword',
        begin: /\w+/
      }, {
        begin: /\s/, endsWithParent: true, excludeEnd: true,
        relevance: 0,
        contains: [hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.CSS_NUMBER_MODE]
      }]
    }, {
      className: 'selector-tag', begin: IDENT_RE,
      relevance: 0
    }, {
      begin: '{', end: '}',
      illegal: /\S/,
      contains: [hljs.C_BLOCK_COMMENT_MODE, RULE]
    }]
  };
};

var d = /**
        * Known issues:
        *
        * - invalid hex string literals will be recognized as a double quoted strings
        *   but 'x' at the beginning of string will not be matched
        *
        * - delimited string literals are not checked for matching end delimiter
        *   (not possible to do with js regexp)
        *
        * - content of token string is colored as a string (i.e. no keyword coloring inside a token string)
        *   also, content of token string is not validated to contain only valid D tokens
        *
        * - special token sequence rule is not strictly following D grammar (anything following #line
        *   up to the end of line is matched as special token sequence)
        */

function d(hljs) {
  /**
   * Language keywords
   *
   * @type {Object}
   */
  var D_KEYWORDS = {
    keyword: 'abstract alias align asm assert auto body break byte case cast catch class ' + 'const continue debug default delete deprecated do else enum export extern final ' + 'finally for foreach foreach_reverse|10 goto if immutable import in inout int ' + 'interface invariant is lazy macro mixin module new nothrow out override package ' + 'pragma private protected public pure ref return scope shared static struct ' + 'super switch synchronized template this throw try typedef typeid typeof union ' + 'unittest version void volatile while with __FILE__ __LINE__ __gshared|10 ' + '__thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__',
    built_in: 'bool cdouble cent cfloat char creal dchar delegate double dstring float function ' + 'idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar ' + 'wstring',
    literal: 'false null true'
  };

  /**
   * Number literal regexps
   *
   * @type {String}
   */
  var decimal_integer_re = '(0|[1-9][\\d_]*)',
      decimal_integer_nosus_re = '(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)',
      binary_integer_re = '0[bB][01_]+',
      hexadecimal_digits_re = '([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)',
      hexadecimal_integer_re = '0[xX]' + hexadecimal_digits_re,
      decimal_exponent_re = '([eE][+-]?' + decimal_integer_nosus_re + ')',
      decimal_float_re = '(' + decimal_integer_nosus_re + '(\\.\\d*|' + decimal_exponent_re + ')|' + '\\d+\\.' + decimal_integer_nosus_re + decimal_integer_nosus_re + '|' + '\\.' + decimal_integer_re + decimal_exponent_re + '?' + ')',
      hexadecimal_float_re = '(0[xX](' + hexadecimal_digits_re + '\\.' + hexadecimal_digits_re + '|' + '\\.?' + hexadecimal_digits_re + ')[pP][+-]?' + decimal_integer_nosus_re + ')',
      integer_re = '(' + decimal_integer_re + '|' + binary_integer_re + '|' + hexadecimal_integer_re + ')',
      float_re = '(' + hexadecimal_float_re + '|' + decimal_float_re + ')';

  /**
   * Escape sequence supported in D string and character literals
   *
   * @type {String}
   */
  var escape_sequence_re = '\\\\(' + '[\'"\\?\\\\abfnrtv]|' + // common escapes
  'u[\\dA-Fa-f]{4}|' + // four hex digit unicode codepoint
  '[0-7]{1,3}|' + // one to three octal digit ascii char code
  'x[\\dA-Fa-f]{2}|' + // two hex digit ascii char code
  'U[\\dA-Fa-f]{8}' + // eight hex digit unicode codepoint
  ')|' + '&[a-zA-Z\\d]{2,};'; // named character entity

  /**
   * D integer number literals
   *
   * @type {Object}
   */
  var D_INTEGER_MODE = {
    className: 'number',
    begin: '\\b' + integer_re + '(L|u|U|Lu|LU|uL|UL)?',
    relevance: 0
  };

  /**
   * [D_FLOAT_MODE description]
   * @type {Object}
   */
  var D_FLOAT_MODE = {
    className: 'number',
    begin: '\\b(' + float_re + '([fF]|L|i|[fF]i|Li)?|' + integer_re + '(i|[fF]i|Li)' + ')',
    relevance: 0
  };

  /**
   * D character literal
   *
   * @type {Object}
   */
  var D_CHARACTER_MODE = {
    className: 'string',
    begin: '\'(' + escape_sequence_re + '|.)', end: '\'',
    illegal: '.'
  };

  /**
   * D string escape sequence
   *
   * @type {Object}
   */
  var D_ESCAPE_SEQUENCE = {
    begin: escape_sequence_re,
    relevance: 0
  };

  /**
   * D double quoted string literal
   *
   * @type {Object}
   */
  var D_STRING_MODE = {
    className: 'string',
    begin: '"',
    contains: [D_ESCAPE_SEQUENCE],
    end: '"[cwd]?'
  };

  /**
   * D wysiwyg and delimited string literals
   *
   * @type {Object}
   */
  var D_WYSIWYG_DELIMITED_STRING_MODE = {
    className: 'string',
    begin: '[rq]"',
    end: '"[cwd]?',
    relevance: 5
  };

  /**
   * D alternate wysiwyg string literal
   *
   * @type {Object}
   */
  var D_ALTERNATE_WYSIWYG_STRING_MODE = {
    className: 'string',
    begin: '`',
    end: '`[cwd]?'
  };

  /**
   * D hexadecimal string literal
   *
   * @type {Object}
   */
  var D_HEX_STRING_MODE = {
    className: 'string',
    begin: 'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',
    relevance: 10
  };

  /**
   * D delimited string literal
   *
   * @type {Object}
   */
  var D_TOKEN_STRING_MODE = {
    className: 'string',
    begin: 'q"\\{',
    end: '\\}"'
  };

  /**
   * Hashbang support
   *
   * @type {Object}
   */
  var D_HASHBANG_MODE = {
    className: 'meta',
    begin: '^#!',
    end: '$',
    relevance: 5
  };

  /**
   * D special token sequence
   *
   * @type {Object}
   */
  var D_SPECIAL_TOKEN_SEQUENCE_MODE = {
    className: 'meta',
    begin: '#(line)',
    end: '$',
    relevance: 5
  };

  /**
   * D attributes
   *
   * @type {Object}
   */
  var D_ATTRIBUTE_MODE = {
    className: 'keyword',
    begin: '@[a-zA-Z_][a-zA-Z_\\d]*'
  };

  /**
   * D nesting comment
   *
   * @type {Object}
   */
  var D_NESTING_COMMENT_MODE = hljs.COMMENT('\\/\\+', '\\+\\/', {
    contains: ['self'],
    relevance: 10
  });

  return {
    lexemes: hljs.UNDERSCORE_IDENT_RE,
    keywords: D_KEYWORDS,
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, D_NESTING_COMMENT_MODE, D_HEX_STRING_MODE, D_STRING_MODE, D_WYSIWYG_DELIMITED_STRING_MODE, D_ALTERNATE_WYSIWYG_STRING_MODE, D_TOKEN_STRING_MODE, D_FLOAT_MODE, D_INTEGER_MODE, D_CHARACTER_MODE, D_HASHBANG_MODE, D_SPECIAL_TOKEN_SEQUENCE_MODE, D_ATTRIBUTE_MODE]
  };
};

var markdown = function markdown(hljs) {
  return {
    aliases: ['md', 'mkdown', 'mkd'],
    contains: [
    // highlight headers
    {
      className: 'section',
      variants: [{ begin: '^#{1,6}', end: '$' }, { begin: '^.+?\\n[=-]{2,}$' }]
    },
    // inline html
    {
      begin: '<', end: '>',
      subLanguage: 'xml',
      relevance: 0
    },
    // lists (indicators only)
    {
      className: 'bullet',
      begin: '^([*+-]|(\\d+\\.))\\s+'
    },
    // strong segments
    {
      className: 'strong',
      begin: '[*_]{2}.+?[*_]{2}'
    },
    // emphasis segments
    {
      className: 'emphasis',
      variants: [{ begin: '\\*.+?\\*' }, { begin: '_.+?_',
        relevance: 0
      }]
    },
    // blockquotes
    {
      className: 'quote',
      begin: '^>\\s+', end: '$'
    },
    // code snippets
    {
      className: 'code',
      variants: [{
        begin: '^```\w*\s*$', end: '^```\s*$'
      }, {
        begin: '`.+?`'
      }, {
        begin: '^( {4}|\t)', end: '$',
        relevance: 0
      }]
    },
    // horizontal rules
    {
      begin: '^[-\\*]{3,}', end: '$'
    },
    // using links - title and link
    {
      begin: '\\[.+?\\][\\(\\[].*?[\\)\\]]',
      returnBegin: true,
      contains: [{
        className: 'string',
        begin: '\\[', end: '\\]',
        excludeBegin: true,
        returnEnd: true,
        relevance: 0
      }, {
        className: 'link',
        begin: '\\]\\(', end: '\\)',
        excludeBegin: true, excludeEnd: true
      }, {
        className: 'symbol',
        begin: '\\]\\[', end: '\\]',
        excludeBegin: true, excludeEnd: true
      }],
      relevance: 10
    }, {
      begin: /^\[[^\n]+\]:/,
      returnBegin: true,
      contains: [{
        className: 'symbol',
        begin: /\[/, end: /\]/,
        excludeBegin: true, excludeEnd: true
      }, {
        className: 'link',
        begin: /:\s*/, end: /$/,
        excludeBegin: true
      }]
    }]
  };
};

var dart = function dart(hljs) {
  var SUBST = {
    className: 'subst',
    begin: '\\$\\{', end: '}',
    keywords: 'true false null this is new super'
  };

  var STRING = {
    className: 'string',
    variants: [{
      begin: 'r\'\'\'', end: '\'\'\''
    }, {
      begin: 'r"""', end: '"""'
    }, {
      begin: 'r\'', end: '\'',
      illegal: '\\n'
    }, {
      begin: 'r"', end: '"',
      illegal: '\\n'
    }, {
      begin: '\'\'\'', end: '\'\'\'',
      contains: [hljs.BACKSLASH_ESCAPE, SUBST]
    }, {
      begin: '"""', end: '"""',
      contains: [hljs.BACKSLASH_ESCAPE, SUBST]
    }, {
      begin: '\'', end: '\'',
      illegal: '\\n',
      contains: [hljs.BACKSLASH_ESCAPE, SUBST]
    }, {
      begin: '"', end: '"',
      illegal: '\\n',
      contains: [hljs.BACKSLASH_ESCAPE, SUBST]
    }]
  };
  SUBST.contains = [hljs.C_NUMBER_MODE, STRING];

  var KEYWORDS = {
    keyword: 'assert async await break case catch class const continue default do else enum extends false final ' + 'finally for if in is new null rethrow return super switch sync this throw true try var void while with yield ' + 'abstract as dynamic export external factory get implements import library operator part set static typedef',
    built_in:
    // dart:core
    'print Comparable DateTime Duration Function Iterable Iterator List Map Match Null Object Pattern RegExp Set ' + 'Stopwatch String StringBuffer StringSink Symbol Type Uri bool double int num ' +
    // dart:html
    'document window querySelector querySelectorAll Element ElementList'
  };

  return {
    keywords: KEYWORDS,
    contains: [STRING, hljs.COMMENT('/\\*\\*', '\\*/', {
      subLanguage: 'markdown'
    }), hljs.COMMENT('///', '$', {
      subLanguage: 'markdown'
    }), hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, {
      className: 'class',
      beginKeywords: 'class interface', end: '{', excludeEnd: true,
      contains: [{
        beginKeywords: 'extends implements'
      }, hljs.UNDERSCORE_TITLE_MODE]
    }, hljs.C_NUMBER_MODE, {
      className: 'meta', begin: '@[A-Za-z]+'
    }, {
      begin: '=>' // No markup, just a relevance booster
    }]
  };
};

var delphi = function delphi(hljs) {
  var KEYWORDS = 'exports register file shl array record property for mod while set ally label uses raise not ' + 'stored class safecall var interface or private static exit index inherited to else stdcall ' + 'override shr asm far resourcestring finalization packed virtual out and protected library do ' + 'xorwrite goto near function end div overload object unit begin string on inline repeat until ' + 'destructor write message program with read initialization except default nil if case cdecl in ' + 'downto threadvar of try pascal const external constructor type public then implementation ' + 'finally published procedure absolute reintroduce operator as is abstract alias assembler ' + 'bitpacked break continue cppdecl cvar enumerator experimental platform deprecated ' + 'unimplemented dynamic export far16 forward generic helper implements interrupt iochecks ' + 'local name nodefault noreturn nostackframe oldfpccall otherwise saveregisters softfloat ' + 'specialize strict unaligned varargs ';
  var COMMENT_MODES = [hljs.C_LINE_COMMENT_MODE, hljs.COMMENT(/\{/, /\}/, { relevance: 0 }), hljs.COMMENT(/\(\*/, /\*\)/, { relevance: 10 })];
  var DIRECTIVE = {
    className: 'meta',
    variants: [{ begin: /\{\$/, end: /\}/ }, { begin: /\(\*\$/, end: /\*\)/ }]
  };
  var STRING = {
    className: 'string',
    begin: /'/, end: /'/,
    contains: [{ begin: /''/ }]
  };
  var CHAR_STRING = {
    className: 'string', begin: /(#\d+)+/
  };
  var CLASS = {
    begin: hljs.IDENT_RE + '\\s*=\\s*class\\s*\\(', returnBegin: true,
    contains: [hljs.TITLE_MODE]
  };
  var FUNCTION = {
    className: 'function',
    beginKeywords: 'function constructor destructor procedure', end: /[:;]/,
    keywords: 'function constructor|10 destructor|10 procedure|10',
    contains: [hljs.TITLE_MODE, {
      className: 'params',
      begin: /\(/, end: /\)/,
      keywords: KEYWORDS,
      contains: [STRING, CHAR_STRING, DIRECTIVE].concat(COMMENT_MODES)
    }, DIRECTIVE].concat(COMMENT_MODES)
  };
  return {
    aliases: ['dpr', 'dfm', 'pas', 'pascal', 'freepascal', 'lazarus', 'lpr', 'lfm'],
    case_insensitive: true,
    keywords: KEYWORDS,
    illegal: /"|\$[G-Zg-z]|\/\*|<\/|\|/,
    contains: [STRING, CHAR_STRING, hljs.NUMBER_MODE, CLASS, FUNCTION, DIRECTIVE].concat(COMMENT_MODES)
  };
};

var diff = function diff(hljs) {
  return {
    aliases: ['patch'],
    contains: [{
      className: 'meta',
      relevance: 10,
      variants: [{ begin: /^@@ +\-\d+,\d+ +\+\d+,\d+ +@@$/ }, { begin: /^\*\*\* +\d+,\d+ +\*\*\*\*$/ }, { begin: /^\-\-\- +\d+,\d+ +\-\-\-\-$/ }]
    }, {
      className: 'comment',
      variants: [{ begin: /Index: /, end: /$/ }, { begin: /={3,}/, end: /$/ }, { begin: /^\-{3}/, end: /$/ }, { begin: /^\*{3} /, end: /$/ }, { begin: /^\+{3}/, end: /$/ }, { begin: /\*{5}/, end: /\*{5}$/ }]
    }, {
      className: 'addition',
      begin: '^\\+', end: '$'
    }, {
      className: 'deletion',
      begin: '^\\-', end: '$'
    }, {
      className: 'addition',
      begin: '^\\!', end: '$'
    }]
  };
};

var django = function django(hljs) {
  var FILTER = {
    begin: /\|[A-Za-z]+:?/,
    keywords: {
      name: 'truncatewords removetags linebreaksbr yesno get_digit timesince random striptags ' + 'filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands ' + 'title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode ' + 'timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort ' + 'dictsortreversed default_if_none pluralize lower join center default ' + 'truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first ' + 'escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize ' + 'localtime utc timezone'
    },
    contains: [hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE]
  };

  return {
    aliases: ['jinja'],
    case_insensitive: true,
    subLanguage: 'xml',
    contains: [hljs.COMMENT(/\{%\s*comment\s*%}/, /\{%\s*endcomment\s*%}/), hljs.COMMENT(/\{#/, /#}/), {
      className: 'template-tag',
      begin: /\{%/, end: /%}/,
      contains: [{
        className: 'name',
        begin: /\w+/,
        keywords: {
          name: 'comment endcomment load templatetag ifchanged endifchanged if endif firstof for ' + 'endfor ifnotequal endifnotequal widthratio extends include spaceless ' + 'endspaceless regroup ifequal endifequal ssi now with cycle url filter ' + 'endfilter debug block endblock else autoescape endautoescape csrf_token empty elif ' + 'endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix ' + 'plural get_current_language language get_available_languages ' + 'get_current_language_bidi get_language_info get_language_info_list localize ' + 'endlocalize localtime endlocaltime timezone endtimezone get_current_timezone ' + 'verbatim'
        },
        starts: {
          endsWithParent: true,
          keywords: 'in by as',
          contains: [FILTER],
          relevance: 0
        }
      }]
    }, {
      className: 'template-variable',
      begin: /\{\{/, end: /}}/,
      contains: [FILTER]
    }]
  };
};

var dns = function dns(hljs) {
  return {
    aliases: ['bind', 'zone'],
    keywords: {
      keyword: 'IN A AAAA AFSDB APL CAA CDNSKEY CDS CERT CNAME DHCID DLV DNAME DNSKEY DS HIP IPSECKEY KEY KX ' + 'LOC MX NAPTR NS NSEC NSEC3 NSEC3PARAM PTR RRSIG RP SIG SOA SRV SSHFP TA TKEY TLSA TSIG TXT'
    },
    contains: [hljs.COMMENT(';', '$', { relevance: 0 }), {
      className: 'meta',
      begin: /^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/
    },
    // IPv6
    {
      className: 'number',
      begin: '((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b'
    },
    // IPv4
    {
      className: 'number',
      begin: '((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b'
    }, hljs.inherit(hljs.NUMBER_MODE, { begin: /\b\d+[dhwm]?/ })]
  };
};

var dockerfile = function dockerfile(hljs) {
  return {
    aliases: ['docker'],
    case_insensitive: true,
    keywords: 'from maintainer expose env arg user onbuild stopsignal',
    contains: [hljs.HASH_COMMENT_MODE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.NUMBER_MODE, {
      beginKeywords: 'run cmd entrypoint volume add copy workdir label healthcheck shell',
      starts: {
        end: /[^\\]\n/,
        subLanguage: 'bash'
      }
    }],
    illegal: '</'
  };
};

var dos = function dos(hljs) {
  var COMMENT = hljs.COMMENT(/^\s*@?rem\b/, /$/, {
    relevance: 10
  });
  var LABEL = {
    className: 'symbol',
    begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)',
    relevance: 0
  };
  return {
    aliases: ['bat', 'cmd'],
    case_insensitive: true,
    illegal: /\/\*/,
    keywords: {
      keyword: 'if else goto for in do call exit not exist errorlevel defined ' + 'equ neq lss leq gtr geq',
      built_in: 'prn nul lpt3 lpt2 lpt1 con com4 com3 com2 com1 aux ' + 'shift cd dir echo setlocal endlocal set pause copy ' + 'append assoc at attrib break cacls cd chcp chdir chkdsk chkntfs cls cmd color ' + 'comp compact convert date dir diskcomp diskcopy doskey erase fs ' + 'find findstr format ftype graftabl help keyb label md mkdir mode more move path ' + 'pause print popd pushd promt rd recover rem rename replace restore rmdir shift' + 'sort start subst time title tree type ver verify vol ' +
      // winutils
      'ping net ipconfig taskkill xcopy ren del'
    },
    contains: [{
      className: 'variable', begin: /%%[^ ]|%[^ ]+?%|![^ ]+?!/
    }, {
      className: 'function',
      begin: LABEL.begin, end: 'goto:eof',
      contains: [hljs.inherit(hljs.TITLE_MODE, { begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*' }), COMMENT]
    }, {
      className: 'number', begin: '\\b\\d+',
      relevance: 0
    }, COMMENT]
  };
};

var dsconfig = function dsconfig(hljs) {
  var QUOTED_PROPERTY = {
    className: 'string',
    begin: /"/, end: /"/
  };
  var APOS_PROPERTY = {
    className: 'string',
    begin: /'/, end: /'/
  };
  var UNQUOTED_PROPERTY = {
    className: 'string',
    begin: '[\\w-?]+:\\w+', end: '\\W',
    relevance: 0
  };
  var VALUELESS_PROPERTY = {
    className: 'string',
    begin: '\\w+-?\\w+', end: '\\W',
    relevance: 0
  };

  return {
    keywords: 'dsconfig',
    contains: [{
      className: 'keyword',
      begin: '^dsconfig', end: '\\s', excludeEnd: true,
      relevance: 10
    }, {
      className: 'built_in',
      begin: '(list|create|get|set|delete)-(\\w+)', end: '\\s', excludeEnd: true,
      illegal: '!@#$%^&*()',
      relevance: 10
    }, {
      className: 'built_in',
      begin: '--(\\w+)', end: '\\s', excludeEnd: true
    }, QUOTED_PROPERTY, APOS_PROPERTY, UNQUOTED_PROPERTY, VALUELESS_PROPERTY, hljs.HASH_COMMENT_MODE]
  };
};

var dts = function dts(hljs) {
  var STRINGS = {
    className: 'string',
    variants: [hljs.inherit(hljs.QUOTE_STRING_MODE, { begin: '((u8?|U)|L)?"' }), {
      begin: '(u8?|U)?R"', end: '"',
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      begin: '\'\\\\?.', end: '\'',
      illegal: '.'
    }]
  };

  var NUMBERS = {
    className: 'number',
    variants: [{ begin: '\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)' }, { begin: hljs.C_NUMBER_RE }],
    relevance: 0
  };

  var PREPROCESSOR = {
    className: 'meta',
    begin: '#', end: '$',
    keywords: { 'meta-keyword': 'if else elif endif define undef ifdef ifndef' },
    contains: [{
      begin: /\\\n/, relevance: 0
    }, {
      beginKeywords: 'include', end: '$',
      keywords: { 'meta-keyword': 'include' },
      contains: [hljs.inherit(STRINGS, { className: 'meta-string' }), {
        className: 'meta-string',
        begin: '<', end: '>',
        illegal: '\\n'
      }]
    }, STRINGS, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
  };

  var DTS_REFERENCE = {
    className: 'variable',
    begin: '\\&[a-z\\d_]*\\b'
  };

  var DTS_KEYWORD = {
    className: 'meta-keyword',
    begin: '/[a-z][a-z\\d-]*/'
  };

  var DTS_LABEL = {
    className: 'symbol',
    begin: '^\\s*[a-zA-Z_][a-zA-Z\\d_]*:'
  };

  var DTS_CELL_PROPERTY = {
    className: 'params',
    begin: '<',
    end: '>',
    contains: [NUMBERS, DTS_REFERENCE]
  };

  var DTS_NODE = {
    className: 'class',
    begin: /[a-zA-Z_][a-zA-Z\d_@]*\s{/,
    end: /[{;=]/,
    returnBegin: true,
    excludeEnd: true
  };

  var DTS_ROOT_NODE = {
    className: 'class',
    begin: '/\\s*{',
    end: '};',
    relevance: 10,
    contains: [DTS_REFERENCE, DTS_KEYWORD, DTS_LABEL, DTS_NODE, DTS_CELL_PROPERTY, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS]
  };

  return {
    keywords: "",
    contains: [DTS_ROOT_NODE, DTS_REFERENCE, DTS_KEYWORD, DTS_LABEL, DTS_NODE, DTS_CELL_PROPERTY, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS, PREPROCESSOR, {
      begin: hljs.IDENT_RE + '::',
      keywords: ""
    }]
  };
};

var dust = function dust(hljs) {
  var EXPRESSION_KEYWORDS = 'if eq ne lt lte gt gte select default math sep';
  return {
    aliases: ['dst'],
    case_insensitive: true,
    subLanguage: 'xml',
    contains: [{
      className: 'template-tag',
      begin: /\{[#\/]/, end: /\}/, illegal: /;/,
      contains: [{
        className: 'name',
        begin: /[a-zA-Z\.-]+/,
        starts: {
          endsWithParent: true, relevance: 0,
          contains: [hljs.QUOTE_STRING_MODE]
        }
      }]
    }, {
      className: 'template-variable',
      begin: /\{/, end: /\}/, illegal: /;/,
      keywords: EXPRESSION_KEYWORDS
    }]
  };
};

var ebnf = function ebnf(hljs) {
    var commentMode = hljs.COMMENT(/\(\*/, /\*\)/);

    var nonTerminalMode = {
        className: "attribute",
        begin: /^[ ]*[a-zA-Z][a-zA-Z-]*([\s-]+[a-zA-Z][a-zA-Z]*)*/
    };

    var specialSequenceMode = {
        className: "meta",
        begin: /\?.*\?/
    };

    var ruleBodyMode = {
        begin: /=/, end: /;/,
        contains: [commentMode, specialSequenceMode,
        // terminals
        hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE]
    };

    return {
        illegal: /\S/,
        contains: [commentMode, nonTerminalMode, ruleBodyMode]
    };
};

var elixir = function elixir(hljs) {
  var ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_]*(\\!|\\?)?';
  var ELIXIR_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?';
  var ELIXIR_KEYWORDS = 'and false then defined module in return redo retry end for true self when ' + 'next until do begin unless nil break not case cond alias while ensure or ' + 'include use alias fn quote';
  var SUBST = {
    className: 'subst',
    begin: '#\\{', end: '}',
    lexemes: ELIXIR_IDENT_RE,
    keywords: ELIXIR_KEYWORDS
  };
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE, SUBST],
    variants: [{
      begin: /'/, end: /'/
    }, {
      begin: /"/, end: /"/
    }]
  };
  var FUNCTION = {
    className: 'function',
    beginKeywords: 'def defp defmacro', end: /\B\b/, // the mode is ended by the title
    contains: [hljs.inherit(hljs.TITLE_MODE, {
      begin: ELIXIR_IDENT_RE,
      endsParent: true
    })]
  };
  var CLASS = hljs.inherit(FUNCTION, {
    className: 'class',
    beginKeywords: 'defimpl defmodule defprotocol defrecord', end: /\bdo\b|$|;/
  });
  var ELIXIR_DEFAULT_CONTAINS = [STRING, hljs.HASH_COMMENT_MODE, CLASS, FUNCTION, {
    className: 'symbol',
    begin: ':(?!\\s)',
    contains: [STRING, { begin: ELIXIR_METHOD_RE }],
    relevance: 0
  }, {
    className: 'symbol',
    begin: ELIXIR_IDENT_RE + ':',
    relevance: 0
  }, {
    className: 'number',
    begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
    relevance: 0
  }, {
    className: 'variable',
    begin: '(\\$\\W)|((\\$|\\@\\@?)(\\w+))'
  }, {
    begin: '->'
  }, { // regexp container
    begin: '(' + hljs.RE_STARTERS_RE + ')\\s*',
    contains: [hljs.HASH_COMMENT_MODE, {
      className: 'regexp',
      illegal: '\\n',
      contains: [hljs.BACKSLASH_ESCAPE, SUBST],
      variants: [{
        begin: '/', end: '/[a-z]*'
      }, {
        begin: '%r\\[', end: '\\][a-z]*'
      }]
    }],
    relevance: 0
  }];
  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;

  return {
    lexemes: ELIXIR_IDENT_RE,
    keywords: ELIXIR_KEYWORDS,
    contains: ELIXIR_DEFAULT_CONTAINS
  };
};

var elm = function elm(hljs) {
  var COMMENT = {
    variants: [hljs.COMMENT('--', '$'), hljs.COMMENT('{-', '-}', {
      contains: ['self']
    })]
  };

  var CONSTRUCTOR = {
    className: 'type',
    begin: '\\b[A-Z][\\w\']*', // TODO: other constructors (built-in, infix).
    relevance: 0
  };

  var LIST = {
    begin: '\\(', end: '\\)',
    illegal: '"',
    contains: [{ className: 'type', begin: '\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?' }, COMMENT]
  };

  var RECORD = {
    begin: '{', end: '}',
    contains: LIST.contains
  };

  return {
    keywords: 'let in if then else case of where module import exposing ' + 'type alias as infix infixl infixr port effect command subscription',
    contains: [

    // Top-level constructions.

    {
      beginKeywords: 'port effect module', end: 'exposing',
      keywords: 'port effect module where command subscription exposing',
      contains: [LIST, COMMENT],
      illegal: '\\W\\.|;'
    }, {
      begin: 'import', end: '$',
      keywords: 'import as exposing',
      contains: [LIST, COMMENT],
      illegal: '\\W\\.|;'
    }, {
      begin: 'type', end: '$',
      keywords: 'type alias',
      contains: [CONSTRUCTOR, LIST, RECORD, COMMENT]
    }, {
      beginKeywords: 'infix infixl infixr', end: '$',
      contains: [hljs.C_NUMBER_MODE, COMMENT]
    }, {
      begin: 'port', end: '$',
      keywords: 'port',
      contains: [COMMENT]
    },

    // Literals and names.

    // TODO: characters.
    hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE, CONSTRUCTOR, hljs.inherit(hljs.TITLE_MODE, { begin: '^[_a-z][\\w\']*' }), COMMENT, { begin: '->|<-' // No markup, relevance booster
    }],
    illegal: /;/
  };
};

var ruby = function ruby(hljs) {
  var RUBY_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?';
  var RUBY_KEYWORDS = {
    keyword: 'and then defined module in return redo if BEGIN retry end for self when ' + 'next until do begin unless END rescue else break undef not super class case ' + 'require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor',
    literal: 'true false nil'
  };
  var YARDOCTAG = {
    className: 'doctag',
    begin: '@[A-Za-z]+'
  };
  var IRB_OBJECT = {
    begin: '#<', end: '>'
  };
  var COMMENT_MODES = [hljs.COMMENT('#', '$', {
    contains: [YARDOCTAG]
  }), hljs.COMMENT('^\\=begin', '^\\=end', {
    contains: [YARDOCTAG],
    relevance: 10
  }), hljs.COMMENT('^__END__', '\\n$')];
  var SUBST = {
    className: 'subst',
    begin: '#\\{', end: '}',
    keywords: RUBY_KEYWORDS
  };
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE, SUBST],
    variants: [{ begin: /'/, end: /'/ }, { begin: /"/, end: /"/ }, { begin: /`/, end: /`/ }, { begin: '%[qQwWx]?\\(', end: '\\)' }, { begin: '%[qQwWx]?\\[', end: '\\]' }, { begin: '%[qQwWx]?{', end: '}' }, { begin: '%[qQwWx]?<', end: '>' }, { begin: '%[qQwWx]?/', end: '/' }, { begin: '%[qQwWx]?%', end: '%' }, { begin: '%[qQwWx]?-', end: '-' }, { begin: '%[qQwWx]?\\|', end: '\\|' }, {
      // \B in the beginning suppresses recognition of ?-sequences where ?
      // is the last character of a preceding identifier, as in: `func?4`
      begin: /\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/
    }, {
      begin: /<<(-?)\w+$/, end: /^\s*\w+$/
    }]
  };
  var PARAMS = {
    className: 'params',
    begin: '\\(', end: '\\)', endsParent: true,
    keywords: RUBY_KEYWORDS
  };

  var RUBY_DEFAULT_CONTAINS = [STRING, IRB_OBJECT, {
    className: 'class',
    beginKeywords: 'class module', end: '$|;',
    illegal: /=/,
    contains: [hljs.inherit(hljs.TITLE_MODE, { begin: '[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?' }), {
      begin: '<\\s*',
      contains: [{
        begin: '(' + hljs.IDENT_RE + '::)?' + hljs.IDENT_RE
      }]
    }].concat(COMMENT_MODES)
  }, {
    className: 'function',
    beginKeywords: 'def', end: '$|;',
    contains: [hljs.inherit(hljs.TITLE_MODE, { begin: RUBY_METHOD_RE }), PARAMS].concat(COMMENT_MODES)
  }, {
    // swallow namespace qualifiers before symbols
    begin: hljs.IDENT_RE + '::'
  }, {
    className: 'symbol',
    begin: hljs.UNDERSCORE_IDENT_RE + '(\\!|\\?)?:',
    relevance: 0
  }, {
    className: 'symbol',
    begin: ':(?!\\s)',
    contains: [STRING, { begin: RUBY_METHOD_RE }],
    relevance: 0
  }, {
    className: 'number',
    begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
    relevance: 0
  }, {
    begin: '(\\$\\W)|((\\$|\\@\\@?)(\\w+))' // variables
  }, {
    className: 'params',
    begin: /\|/, end: /\|/,
    keywords: RUBY_KEYWORDS
  }, { // regexp container
    begin: '(' + hljs.RE_STARTERS_RE + '|unless)\\s*',
    keywords: 'unless',
    contains: [IRB_OBJECT, {
      className: 'regexp',
      contains: [hljs.BACKSLASH_ESCAPE, SUBST],
      illegal: /\n/,
      variants: [{ begin: '/', end: '/[a-z]*' }, { begin: '%r{', end: '}[a-z]*' }, { begin: '%r\\(', end: '\\)[a-z]*' }, { begin: '%r!', end: '![a-z]*' }, { begin: '%r\\[', end: '\\][a-z]*' }]
    }].concat(COMMENT_MODES),
    relevance: 0
  }].concat(COMMENT_MODES);

  SUBST.contains = RUBY_DEFAULT_CONTAINS;
  PARAMS.contains = RUBY_DEFAULT_CONTAINS;

  var SIMPLE_PROMPT = "[>?]>";
  var DEFAULT_PROMPT = "[\\w#]+\\(\\w+\\):\\d+:\\d+>";
  var RVM_PROMPT = "(\\w+-)?\\d+\\.\\d+\\.\\d(p\\d+)?[^>]+>";

  var IRB_DEFAULT = [{
    begin: /^\s*=>/,
    starts: {
      end: '$', contains: RUBY_DEFAULT_CONTAINS
    }
  }, {
    className: 'meta',
    begin: '^(' + SIMPLE_PROMPT + "|" + DEFAULT_PROMPT + '|' + RVM_PROMPT + ')',
    starts: {
      end: '$', contains: RUBY_DEFAULT_CONTAINS
    }
  }];

  return {
    aliases: ['rb', 'gemspec', 'podspec', 'thor', 'irb'],
    keywords: RUBY_KEYWORDS,
    illegal: /\/\*/,
    contains: COMMENT_MODES.concat(IRB_DEFAULT).concat(RUBY_DEFAULT_CONTAINS)
  };
};

var erb = function erb(hljs) {
  return {
    subLanguage: 'xml',
    contains: [hljs.COMMENT('<%#', '%>'), {
      begin: '<%[%=-]?', end: '[%-]?%>',
      subLanguage: 'ruby',
      excludeBegin: true,
      excludeEnd: true
    }]
  };
};

var erlangRepl = function erlangRepl(hljs) {
  return {
    keywords: {
      built_in: 'spawn spawn_link self',
      keyword: 'after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if ' + 'let not of or orelse|10 query receive rem try when xor'
    },
    contains: [{
      className: 'meta', begin: '^[0-9]+> ',
      relevance: 10
    }, hljs.COMMENT('%', '$'), {
      className: 'number',
      begin: '\\b(\\d+#[a-fA-F0-9]+|\\d+(\\.\\d+)?([eE][-+]?\\d+)?)',
      relevance: 0
    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, {
      begin: '\\?(::)?([A-Z]\\w*(::)?)+'
    }, {
      begin: '->'
    }, {
      begin: 'ok'
    }, {
      begin: '!'
    }, {
      begin: '(\\b[a-z\'][a-zA-Z0-9_\']*:[a-z\'][a-zA-Z0-9_\']*)|(\\b[a-z\'][a-zA-Z0-9_\']*)',
      relevance: 0
    }, {
      begin: '[A-Z][a-zA-Z0-9_\']*',
      relevance: 0
    }]
  };
};

var erlang = function erlang(hljs) {
  var BASIC_ATOM_RE = '[a-z\'][a-zA-Z0-9_\']*';
  var FUNCTION_NAME_RE = '(' + BASIC_ATOM_RE + ':' + BASIC_ATOM_RE + '|' + BASIC_ATOM_RE + ')';
  var ERLANG_RESERVED = {
    keyword: 'after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if ' + 'let not of orelse|10 query receive rem try when xor',
    literal: 'false true'
  };

  var COMMENT = hljs.COMMENT('%', '$');
  var NUMBER = {
    className: 'number',
    begin: '\\b(\\d+#[a-fA-F0-9]+|\\d+(\\.\\d+)?([eE][-+]?\\d+)?)',
    relevance: 0
  };
  var NAMED_FUN = {
    begin: 'fun\\s+' + BASIC_ATOM_RE + '/\\d+'
  };
  var FUNCTION_CALL = {
    begin: FUNCTION_NAME_RE + '\\(', end: '\\)',
    returnBegin: true,
    relevance: 0,
    contains: [{
      begin: FUNCTION_NAME_RE, relevance: 0
    }, {
      begin: '\\(', end: '\\)', endsWithParent: true,
      returnEnd: true,
      relevance: 0
      // "contains" defined later
    }]
  };
  var TUPLE = {
    begin: '{', end: '}',
    relevance: 0
    // "contains" defined later
  };
  var VAR1 = {
    begin: '\\b_([A-Z][A-Za-z0-9_]*)?',
    relevance: 0
  };
  var VAR2 = {
    begin: '[A-Z][a-zA-Z0-9_]*',
    relevance: 0
  };
  var RECORD_ACCESS = {
    begin: '#' + hljs.UNDERSCORE_IDENT_RE,
    relevance: 0,
    returnBegin: true,
    contains: [{
      begin: '#' + hljs.UNDERSCORE_IDENT_RE,
      relevance: 0
    }, {
      begin: '{', end: '}',
      relevance: 0
      // "contains" defined later
    }]
  };

  var BLOCK_STATEMENTS = {
    beginKeywords: 'fun receive if try case', end: 'end',
    keywords: ERLANG_RESERVED
  };
  BLOCK_STATEMENTS.contains = [COMMENT, NAMED_FUN, hljs.inherit(hljs.APOS_STRING_MODE, { className: '' }), BLOCK_STATEMENTS, FUNCTION_CALL, hljs.QUOTE_STRING_MODE, NUMBER, TUPLE, VAR1, VAR2, RECORD_ACCESS];

  var BASIC_MODES = [COMMENT, NAMED_FUN, BLOCK_STATEMENTS, FUNCTION_CALL, hljs.QUOTE_STRING_MODE, NUMBER, TUPLE, VAR1, VAR2, RECORD_ACCESS];
  FUNCTION_CALL.contains[1].contains = BASIC_MODES;
  TUPLE.contains = BASIC_MODES;
  RECORD_ACCESS.contains[1].contains = BASIC_MODES;

  var PARAMS = {
    className: 'params',
    begin: '\\(', end: '\\)',
    contains: BASIC_MODES
  };
  return {
    aliases: ['erl'],
    keywords: ERLANG_RESERVED,
    illegal: '(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))',
    contains: [{
      className: 'function',
      begin: '^' + BASIC_ATOM_RE + '\\s*\\(', end: '->',
      returnBegin: true,
      illegal: '\\(|#|//|/\\*|\\\\|:|;',
      contains: [PARAMS, hljs.inherit(hljs.TITLE_MODE, { begin: BASIC_ATOM_RE })],
      starts: {
        end: ';|\\.',
        keywords: ERLANG_RESERVED,
        contains: BASIC_MODES
      }
    }, COMMENT, {
      begin: '^-', end: '\\.',
      relevance: 0,
      excludeEnd: true,
      returnBegin: true,
      lexemes: '-' + hljs.IDENT_RE,
      keywords: '-module -record -undef -export -ifdef -ifndef -author -copyright -doc -vsn ' + '-import -include -include_lib -compile -define -else -endif -file -behaviour ' + '-behavior -spec',
      contains: [PARAMS]
    }, NUMBER, hljs.QUOTE_STRING_MODE, RECORD_ACCESS, VAR1, VAR2, TUPLE, { begin: /\.$/ // relevance booster
    }]
  };
};

var excel = function excel(hljs) {
  return {
    aliases: ['xlsx', 'xls'],
    case_insensitive: true,
    lexemes: /[a-zA-Z][\w\.]*/,
    // built-in functions imported from https://web.archive.org/web/20160513042710/https://support.office.com/en-us/article/Excel-functions-alphabetical-b3944572-255d-4efb-bb96-c6d90033e188
    keywords: {
      built_in: 'ABS ACCRINT ACCRINTM ACOS ACOSH ACOT ACOTH AGGREGATE ADDRESS AMORDEGRC AMORLINC AND ARABIC AREAS ASC ASIN ASINH ATAN ATAN2 ATANH AVEDEV AVERAGE AVERAGEA AVERAGEIF AVERAGEIFS BAHTTEXT BASE BESSELI BESSELJ BESSELK BESSELY BETADIST BETA.DIST BETAINV BETA.INV BIN2DEC BIN2HEX BIN2OCT BINOMDIST BINOM.DIST BINOM.DIST.RANGE BINOM.INV BITAND BITLSHIFT BITOR BITRSHIFT BITXOR CALL CEILING CEILING.MATH CEILING.PRECISE CELL CHAR CHIDIST CHIINV CHITEST CHISQ.DIST CHISQ.DIST.RT CHISQ.INV CHISQ.INV.RT CHISQ.TEST CHOOSE CLEAN CODE COLUMN COLUMNS COMBIN COMBINA COMPLEX CONCAT CONCATENATE CONFIDENCE CONFIDENCE.NORM CONFIDENCE.T CONVERT CORREL COS COSH COT COTH COUNT COUNTA COUNTBLANK COUNTIF COUNTIFS COUPDAYBS COUPDAYS COUPDAYSNC COUPNCD COUPNUM COUPPCD COVAR COVARIANCE.P COVARIANCE.S CRITBINOM CSC CSCH CUBEKPIMEMBER CUBEMEMBER CUBEMEMBERPROPERTY CUBERANKEDMEMBER CUBESET CUBESETCOUNT CUBEVALUE CUMIPMT CUMPRINC DATE DATEDIF DATEVALUE DAVERAGE DAY DAYS DAYS360 DB DBCS DCOUNT DCOUNTA DDB DEC2BIN DEC2HEX DEC2OCT DECIMAL DEGREES DELTA DEVSQ DGET DISC DMAX DMIN DOLLAR DOLLARDE DOLLARFR DPRODUCT DSTDEV DSTDEVP DSUM DURATION DVAR DVARP EDATE EFFECT ENCODEURL EOMONTH ERF ERF.PRECISE ERFC ERFC.PRECISE ERROR.TYPE EUROCONVERT EVEN EXACT EXP EXPON.DIST EXPONDIST FACT FACTDOUBLE FALSE|0 F.DIST FDIST F.DIST.RT FILTERXML FIND FINDB F.INV F.INV.RT FINV FISHER FISHERINV FIXED FLOOR FLOOR.MATH FLOOR.PRECISE FORECAST FORECAST.ETS FORECAST.ETS.CONFINT FORECAST.ETS.SEASONALITY FORECAST.ETS.STAT FORECAST.LINEAR FORMULATEXT FREQUENCY F.TEST FTEST FV FVSCHEDULE GAMMA GAMMA.DIST GAMMADIST GAMMA.INV GAMMAINV GAMMALN GAMMALN.PRECISE GAUSS GCD GEOMEAN GESTEP GETPIVOTDATA GROWTH HARMEAN HEX2BIN HEX2DEC HEX2OCT HLOOKUP HOUR HYPERLINK HYPGEOM.DIST HYPGEOMDIST IF|0 IFERROR IFNA IFS IMABS IMAGINARY IMARGUMENT IMCONJUGATE IMCOS IMCOSH IMCOT IMCSC IMCSCH IMDIV IMEXP IMLN IMLOG10 IMLOG2 IMPOWER IMPRODUCT IMREAL IMSEC IMSECH IMSIN IMSINH IMSQRT IMSUB IMSUM IMTAN INDEX INDIRECT INFO INT INTERCEPT INTRATE IPMT IRR ISBLANK ISERR ISERROR ISEVEN ISFORMULA ISLOGICAL ISNA ISNONTEXT ISNUMBER ISODD ISREF ISTEXT ISO.CEILING ISOWEEKNUM ISPMT JIS KURT LARGE LCM LEFT LEFTB LEN LENB LINEST LN LOG LOG10 LOGEST LOGINV LOGNORM.DIST LOGNORMDIST LOGNORM.INV LOOKUP LOWER MATCH MAX MAXA MAXIFS MDETERM MDURATION MEDIAN MID MIDBs MIN MINIFS MINA MINUTE MINVERSE MIRR MMULT MOD MODE MODE.MULT MODE.SNGL MONTH MROUND MULTINOMIAL MUNIT N NA NEGBINOM.DIST NEGBINOMDIST NETWORKDAYS NETWORKDAYS.INTL NOMINAL NORM.DIST NORMDIST NORMINV NORM.INV NORM.S.DIST NORMSDIST NORM.S.INV NORMSINV NOT NOW NPER NPV NUMBERVALUE OCT2BIN OCT2DEC OCT2HEX ODD ODDFPRICE ODDFYIELD ODDLPRICE ODDLYIELD OFFSET OR PDURATION PEARSON PERCENTILE.EXC PERCENTILE.INC PERCENTILE PERCENTRANK.EXC PERCENTRANK.INC PERCENTRANK PERMUT PERMUTATIONA PHI PHONETIC PI PMT POISSON.DIST POISSON POWER PPMT PRICE PRICEDISC PRICEMAT PROB PRODUCT PROPER PV QUARTILE QUARTILE.EXC QUARTILE.INC QUOTIENT RADIANS RAND RANDBETWEEN RANK.AVG RANK.EQ RANK RATE RECEIVED REGISTER.ID REPLACE REPLACEB REPT RIGHT RIGHTB ROMAN ROUND ROUNDDOWN ROUNDUP ROW ROWS RRI RSQ RTD SEARCH SEARCHB SEC SECH SECOND SERIESSUM SHEET SHEETS SIGN SIN SINH SKEW SKEW.P SLN SLOPE SMALL SQL.REQUEST SQRT SQRTPI STANDARDIZE STDEV STDEV.P STDEV.S STDEVA STDEVP STDEVPA STEYX SUBSTITUTE SUBTOTAL SUM SUMIF SUMIFS SUMPRODUCT SUMSQ SUMX2MY2 SUMX2PY2 SUMXMY2 SWITCH SYD T TAN TANH TBILLEQ TBILLPRICE TBILLYIELD T.DIST T.DIST.2T T.DIST.RT TDIST TEXT TEXTJOIN TIME TIMEVALUE T.INV T.INV.2T TINV TODAY TRANSPOSE TREND TRIM TRIMMEAN TRUE|0 TRUNC T.TEST TTEST TYPE UNICHAR UNICODE UPPER VALUE VAR VAR.P VAR.S VARA VARP VARPA VDB VLOOKUP WEBSERVICE WEEKDAY WEEKNUM WEIBULL WEIBULL.DIST WORKDAY WORKDAY.INTL XIRR XNPV XOR YEAR YEARFRAC YIELD YIELDDISC YIELDMAT Z.TEST ZTEST'
    },
    contains: [{
      /* matches a beginning equal sign found in Excel formula examples */
      begin: /^=/,
      end: /[^=]/, returnEnd: true, illegal: /=/, /* only allow single equal sign at front of line */
      relevance: 10
    },
    /* technically, there can be more than 2 letters in column names, but this prevents conflict with some keywords */
    {
      /* matches a reference to a single cell */
      className: 'symbol',
      begin: /\b[A-Z]{1,2}\d+\b/,
      end: /[^\d]/, excludeEnd: true,
      relevance: 0
    }, {
      /* matches a reference to a range of cells */
      className: 'symbol',
      begin: /[A-Z]{0,2}\d*:[A-Z]{0,2}\d*/,
      relevance: 0
    }, hljs.BACKSLASH_ESCAPE, hljs.QUOTE_STRING_MODE, {
      className: 'number',
      begin: hljs.NUMBER_RE + '(%)?',
      relevance: 0
    },
    /* Excel formula comments are done by putting the comment in a function call to N() */
    hljs.COMMENT(/\bN\(/, /\)/, {
      excludeBegin: true,
      excludeEnd: true,
      illegal: /\n/
    })]
  };
};

var fix = function fix(hljs) {
  return {
    contains: [{
      begin: /[^\u2401\u0001]+/,
      end: /[\u2401\u0001]/,
      excludeEnd: true,
      returnBegin: true,
      returnEnd: false,
      contains: [{
        begin: /([^\u2401\u0001=]+)/,
        end: /=([^\u2401\u0001=]+)/,
        returnEnd: true,
        returnBegin: false,
        className: 'attr'
      }, {
        begin: /=/,
        end: /([\u2401\u0001])/,
        excludeEnd: true,
        excludeBegin: true,
        className: 'string'
      }]
    }],
    case_insensitive: true
  };
};

var flix = function flix(hljs) {

    var CHAR = {
        className: 'string',
        begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
    };

    var STRING = {
        className: 'string',
        variants: [{
            begin: '"', end: '"'
        }]
    };

    var NAME = {
        className: 'title',
        begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/
    };

    var METHOD = {
        className: 'function',
        beginKeywords: 'def',
        end: /[:={\[(\n;]/,
        excludeEnd: true,
        contains: [NAME]
    };

    return {
        keywords: {
            literal: 'true false',
            keyword: 'case class def else enum if impl import in lat rel index let match namespace switch type yield with'
        },
        contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, CHAR, STRING, METHOD, hljs.C_NUMBER_MODE]
    };
};

var fortran = function fortran(hljs) {
  var PARAMS = {
    className: 'params',
    begin: '\\(', end: '\\)'
  };

  var F_KEYWORDS = {
    literal: '.False. .True.',
    keyword: 'kind do while private call intrinsic where elsewhere ' + 'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then ' + 'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. ' + 'goto save else use module select case ' + 'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit ' + 'continue format pause cycle exit ' + 'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg ' + 'synchronous nopass non_overridable pass protected volatile abstract extends import ' + 'non_intrinsic value deferred generic final enumerator class associate bind enum ' + 'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t ' + 'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double ' + 'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr ' + 'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer ' + 'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor ' + 'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ' + 'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive ' + 'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure ' + 'integer real character complex logical dimension allocatable|10 parameter ' + 'external implicit|10 none double precision assign intent optional pointer ' + 'target in out common equivalence data',
    built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint ' + 'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl ' + 'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama ' + 'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod ' + 'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log ' + 'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate ' + 'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product ' + 'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul ' + 'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product ' + 'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind ' + 'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer ' + 'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ' + 'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode ' + 'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of' + 'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 ' + 'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits ' + 'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr ' + 'num_images parity popcnt poppar shifta shiftl shiftr this_image'
  };
  return {
    case_insensitive: true,
    aliases: ['f90', 'f95'],
    keywords: F_KEYWORDS,
    illegal: /\/\*/,
    contains: [hljs.inherit(hljs.APOS_STRING_MODE, { className: 'string', relevance: 0 }), hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string', relevance: 0 }), {
      className: 'function',
      beginKeywords: 'subroutine function program',
      illegal: '[${=\\n]',
      contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]
    }, hljs.COMMENT('!', '$', { relevance: 0 }), {
      className: 'number',
      begin: '(?=\\b|\\+|\\-|\\.)(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[de][+-]?\\d+)?\\b\\.?',
      relevance: 0
    }]
  };
};

var fsharp = function fsharp(hljs) {
  var TYPEPARAM = {
    begin: '<', end: '>',
    contains: [hljs.inherit(hljs.TITLE_MODE, { begin: /'[a-zA-Z0-9_]+/ })]
  };

  return {
    aliases: ['fs'],
    keywords: 'abstract and as assert base begin class default delegate do done ' + 'downcast downto elif else end exception extern false finally for ' + 'fun function global if in inherit inline interface internal lazy let ' + 'match member module mutable namespace new null of open or ' + 'override private public rec return sig static struct then to ' + 'true try type upcast use val void when while with yield',
    illegal: /\/\*/,
    contains: [{
      // monad builder keywords (matches before non-bang kws)
      className: 'keyword',
      begin: /\b(yield|return|let|do)!/
    }, {
      className: 'string',
      begin: '@"', end: '"',
      contains: [{ begin: '""' }]
    }, {
      className: 'string',
      begin: '"""', end: '"""'
    }, hljs.COMMENT('\\(\\*', '\\*\\)'), {
      className: 'class',
      beginKeywords: 'type', end: '\\(|=|$', excludeEnd: true,
      contains: [hljs.UNDERSCORE_TITLE_MODE, TYPEPARAM]
    }, {
      className: 'meta',
      begin: '\\[<', end: '>\\]',
      relevance: 10
    }, {
      className: 'symbol',
      begin: '\\B(\'[A-Za-z])\\b',
      contains: [hljs.BACKSLASH_ESCAPE]
    }, hljs.C_LINE_COMMENT_MODE, hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }), hljs.C_NUMBER_MODE]
  };
};

var gams = function gams(hljs) {
  var KEYWORDS = {
    'keyword': 'abort acronym acronyms alias all and assign binary card diag display ' + 'else eq file files for free ge gt if integer le loop lt maximizing ' + 'minimizing model models ne negative no not option options or ord ' + 'positive prod put putpage puttl repeat sameas semicont semiint smax ' + 'smin solve sos1 sos2 sum system table then until using while xor yes',
    'literal': 'eps inf na',
    'built-in': 'abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy ' + 'cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact ' + 'floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max ' + 'min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power ' + 'randBinomial randLinear randTriangle round rPower sigmoid sign ' + 'signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt ' + 'tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp ' + 'bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt ' + 'rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear ' + 'jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion ' + 'handleCollect handleDelete handleStatus handleSubmit heapFree ' + 'heapLimit heapSize jobHandle jobKill jobStatus jobTerminate ' + 'licenseLevel licenseStatus maxExecError sleep timeClose timeComp ' + 'timeElapsed timeExec timeStart'
  };
  var PARAMS = {
    className: 'params',
    begin: /\(/, end: /\)/,
    excludeBegin: true,
    excludeEnd: true
  };
  var SYMBOLS = {
    className: 'symbol',
    variants: [{ begin: /\=[lgenxc]=/ }, { begin: /\$/ }]
  };
  var QSTR = { // One-line quoted comment string
    className: 'comment',
    variants: [{ begin: '\'', end: '\'' }, { begin: '"', end: '"' }],
    illegal: '\\n',
    contains: [hljs.BACKSLASH_ESCAPE]
  };
  var ASSIGNMENT = {
    begin: '/',
    end: '/',
    keywords: KEYWORDS,
    contains: [QSTR, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, hljs.C_NUMBER_MODE]
  };
  var DESCTEXT = { // Parameter/set/variable description text
    begin: /[a-z][a-z0-9_]*(\([a-z0-9_, ]*\))?[ \t]+/,
    excludeBegin: true,
    end: '$',
    endsWithParent: true,
    contains: [QSTR, ASSIGNMENT, {
      className: 'comment',
      begin: /([ ]*[a-z0-9&#*=?@>\\<:\-,()$\[\]_.{}!+%^]+)+/,
      relevance: 0
    }]
  };

  return {
    aliases: ['gms'],
    case_insensitive: true,
    keywords: KEYWORDS,
    contains: [hljs.COMMENT(/^\$ontext/, /^\$offtext/), {
      className: 'meta',
      begin: '^\\$[a-z0-9]+',
      end: '$',
      returnBegin: true,
      contains: [{
        className: 'meta-keyword',
        begin: '^\\$[a-z0-9]+'
      }]
    }, hljs.COMMENT('^\\*', '$'), hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE,
    // Declarations
    {
      beginKeywords: 'set sets parameter parameters variable variables ' + 'scalar scalars equation equations',
      end: ';',
      contains: [hljs.COMMENT('^\\*', '$'), hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, ASSIGNMENT, DESCTEXT]
    }, { // table environment
      beginKeywords: 'table',
      end: ';',
      returnBegin: true,
      contains: [{ // table header row
        beginKeywords: 'table',
        end: '$',
        contains: [DESCTEXT]
      }, hljs.COMMENT('^\\*', '$'), hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, hljs.C_NUMBER_MODE]
    },
    // Function definitions
    {
      className: 'function',
      begin: /^[a-z][a-z0-9_,\-+' ()$]+\.{2}/,
      returnBegin: true,
      contains: [{ // Function title
        className: 'title',
        begin: /^[a-z0-9_]+/
      }, PARAMS, SYMBOLS]
    }, hljs.C_NUMBER_MODE, SYMBOLS]
  };
};

var gauss = function gauss(hljs) {
  var KEYWORDS = {
    keyword: 'and bool break call callexe checkinterrupt clear clearg closeall cls comlog compile ' + 'continue create debug declare delete disable dlibrary dllcall do dos ed edit else ' + 'elseif enable end endfor endif endp endo errorlog errorlogat expr external fn ' + 'for format goto gosub graph if keyword let lib library line load loadarray loadexe ' + 'loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow ' + 'matrix msym ndpclex new not open or output outwidth plot plotsym pop prcsn print ' + 'printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen ' + 'scroll setarray show sparse stop string struct system trace trap threadfor ' + 'threadendfor threadbegin threadjoin threadstat threadend until use while winprint',
    built_in: 'abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol ' + 'AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks ' + 'AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults ' + 'annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness ' + 'annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd ' + 'astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar ' + 'base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 ' + 'cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv ' + 'cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn ' + 'cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi ' + 'cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir ' + 'ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated ' + 'complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs ' + 'cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos ' + 'datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd ' + 'dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName ' + 'dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy ' + 'dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen ' + 'dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA ' + 'dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField ' + 'dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition ' + 'dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows ' + 'dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly ' + 'dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy ' + 'dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl ' + 'dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt ' + 'dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday ' + 'dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays ' + 'endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error ' + 'etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut ' + 'EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol ' + 'EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq ' + 'feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt ' + 'floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC ' + 'gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders ' + 'gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse ' + 'gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray ' + 'getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders ' + 'getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT ' + 'gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm ' + 'hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 ' + 'indicesf indicesfn indnv indsav integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 ' + 'inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf ' + 'isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv ' + 'lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn ' + 'lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind ' + 'loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars ' + 'makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli ' + 'mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave ' + 'movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate ' + 'olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto ' + 'pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox ' + 'plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea ' + 'plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout ' + 'plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill ' + 'plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol ' + 'plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange ' + 'plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel ' + 'plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot ' + 'pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames ' + 'pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector ' + 'pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate ' + 'qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr ' + 'real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn ' + 'rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel ' + 'rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn ' + 'rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh ' + 'rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind ' + 'scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa ' + 'setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind ' + 'sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL ' + 'spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense ' + 'spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet ' + 'sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt ' + 'strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr ' + 'surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname threadBegin threadEnd threadEndFor threadFor ' + 'threadJoin threadStat time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk ' + 'trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt ' + 'utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs ' + 'vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window ' + 'writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM ' + 'xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics cdfEmpirical dot h5create h5open h5read h5readAttribute ' + 'h5write h5writeAttribute ldl plotAddErrorBar plotAddSurface plotCDFEmpirical plotSetColormap plotSetContourLabels ' + 'plotSetLegendFont plotSetTextInterpreter plotSetXTicCount plotSetYTicCount plotSetZLevels powerm strjoin strtrim sylvester',
    literal: 'DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS ' + 'DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 ' + 'DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS ' + 'DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES ' + 'DB_TRANSACTIONS DB_UNICODE DB_VIEWS'
  };

  var PREPROCESSOR = {
    className: 'meta',
    begin: '#', end: '$',
    keywords: { 'meta-keyword': 'define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline' },
    contains: [{
      begin: /\\\n/, relevance: 0
    }, {
      beginKeywords: 'include', end: '$',
      keywords: { 'meta-keyword': 'include' },
      contains: [{
        className: 'meta-string',
        begin: '"', end: '"',
        illegal: '\\n'
      }]
    }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
  };

  var FUNCTION_TITLE = hljs.UNDERSCORE_IDENT_RE + '\\s*\\(?';
  var PARSE_PARAMS = [{
    className: 'params',
    begin: /\(/, end: /\)/,
    keywords: KEYWORDS,
    relevance: 0,
    contains: [hljs.C_NUMBER_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
  }];

  return {
    aliases: ['gss'],
    case_insensitive: true, // language is case-insensitive
    keywords: KEYWORDS,
    illegal: '(\\{[%#]|[%#]\\})',
    contains: [hljs.C_NUMBER_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.COMMENT('@', '@'), PREPROCESSOR, {
      className: 'string',
      begin: '"', end: '"',
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      className: 'function',
      beginKeywords: 'proc keyword',
      end: ';',
      excludeEnd: true,
      keywords: KEYWORDS,
      contains: [{
        begin: FUNCTION_TITLE, returnBegin: true,
        contains: [hljs.UNDERSCORE_TITLE_MODE],
        relevance: 0
      }, hljs.C_NUMBER_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, PREPROCESSOR].concat(PARSE_PARAMS)
    }, {
      className: 'function',
      beginKeywords: 'fn',
      end: ';',
      excludeEnd: true,
      keywords: KEYWORDS,
      contains: [{
        begin: FUNCTION_TITLE + hljs.IDENT_RE + '\\)?\\s*\\=\\s*', returnBegin: true,
        contains: [hljs.UNDERSCORE_TITLE_MODE],
        relevance: 0
      }, hljs.C_NUMBER_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE].concat(PARSE_PARAMS)
    }, {
      className: 'function',
      begin: '\\bexternal (proc|keyword|fn)\\s+',
      end: ';',
      excludeEnd: true,
      keywords: KEYWORDS,
      contains: [{
        begin: FUNCTION_TITLE, returnBegin: true,
        contains: [hljs.UNDERSCORE_TITLE_MODE],
        relevance: 0
      }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
    }, {
      className: 'function',
      begin: '\\bexternal (matrix|string|array|sparse matrix|struct ' + hljs.IDENT_RE + ')\\s+',
      end: ';',
      excludeEnd: true,
      keywords: KEYWORDS,
      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
    }]
  };
};

var gcode = function gcode(hljs) {
    var GCODE_IDENT_RE = '[A-Z_][A-Z0-9_.]*';
    var GCODE_CLOSE_RE = '\\%';
    var GCODE_KEYWORDS = 'IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT ' + 'EQ LT GT NE GE LE OR XOR';
    var GCODE_START = {
        className: 'meta',
        begin: '([O])([0-9]+)'
    };
    var GCODE_CODE = [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.COMMENT(/\(/, /\)/), hljs.inherit(hljs.C_NUMBER_MODE, { begin: '([-+]?([0-9]*\\.?[0-9]+\\.?))|' + hljs.C_NUMBER_RE }), hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }), hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }), {
        className: 'name',
        begin: '([G])([0-9]+\\.?[0-9]?)'
    }, {
        className: 'name',
        begin: '([M])([0-9]+\\.?[0-9]?)'
    }, {
        className: 'attr',
        begin: '(VC|VS|#)',
        end: '(\\d+)'
    }, {
        className: 'attr',
        begin: '(VZOFX|VZOFY|VZOFZ)'
    }, {
        className: 'built_in',
        begin: '(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\[)',
        end: '([-+]?([0-9]*\\.?[0-9]+\\.?))(\\])'
    }, {
        className: 'symbol',
        variants: [{
            begin: 'N', end: '\\d+',
            illegal: '\\W'
        }]
    }];

    return {
        aliases: ['nc'],
        // Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.
        // However, most prefer all uppercase and uppercase is customary.
        case_insensitive: true,
        lexemes: GCODE_IDENT_RE,
        keywords: GCODE_KEYWORDS,
        contains: [{
            className: 'meta',
            begin: GCODE_CLOSE_RE
        }, GCODE_START].concat(GCODE_CODE)
    };
};

var gherkin = function gherkin(hljs) {
  return {
    aliases: ['feature'],
    keywords: 'Feature Background Ability Business\ Need Scenario Scenarios Scenario\ Outline Scenario\ Template Examples Given And Then But When',
    contains: [{
      className: 'symbol',
      begin: '\\*',
      relevance: 0
    }, {
      className: 'meta',
      begin: '@[^@\\s]+'
    }, {
      begin: '\\|', end: '\\|\\w*$',
      contains: [{
        className: 'string',
        begin: '[^|]+'
      }]
    }, {
      className: 'variable',
      begin: '<', end: '>'
    }, hljs.HASH_COMMENT_MODE, {
      className: 'string',
      begin: '"""', end: '"""'
    }, hljs.QUOTE_STRING_MODE]
  };
};

var glsl = function glsl(hljs) {
  return {
    keywords: {
      keyword:
      // Statements
      'break continue discard do else for if return while switch case default ' +
      // Qualifiers
      'attribute binding buffer ccw centroid centroid varying coherent column_major const cw ' + 'depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing ' + 'flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant ' + 'invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y ' + 'local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left ' + 'out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f ' + 'r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict ' + 'rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 ' + 'rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 ' + 'rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip ' + 'triangles triangles_adjacency uniform varying vertices volatile writeonly',
      type: 'atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 ' + 'dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray ' + 'iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer' + 'iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray ' + 'image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray ' + 'isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D ' + 'isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 ' + 'mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray ' + 'sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow ' + 'sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D ' + 'samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow ' + 'image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect ' + 'uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray ' + 'usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D ' + 'samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void',
      built_in:
      // Constants
      'gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes ' + 'gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms ' + 'gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers ' + 'gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits ' + 'gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize ' + 'gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters ' + 'gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors ' + 'gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers ' + 'gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents ' + 'gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits ' + 'gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents ' + 'gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset ' + 'gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms ' + 'gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits ' + 'gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents ' + 'gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters ' + 'gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents ' + 'gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents ' + 'gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits ' + 'gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors ' + 'gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms ' + 'gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits ' + 'gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset ' +
      // Variables
      'gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial ' + 'gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color ' + 'gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord ' + 'gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor ' + 'gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial ' + 'gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel ' + 'gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix ' + 'gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose ' + 'gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose ' + 'gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 ' + 'gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 ' + 'gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ ' + 'gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord ' + 'gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse ' + 'gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask ' + 'gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter ' + 'gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose ' + 'gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out ' +
      // Functions
      'EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin ' + 'asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement ' + 'atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier ' + 'bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross ' + 'dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB ' + 'floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan ' + 'greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap ' + 'imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad ' + 'imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset ' + 'interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log ' + 'log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer ' + 'memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 ' + 'normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 ' + 'packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod ' + 'shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh ' + 'smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod ' + 'texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod ' + 'texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod ' + 'textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset ' + 'textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset ' + 'textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod ' + 'textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 ' + 'unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow',
      literal: 'true false'
    },
    illegal: '"',
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.C_NUMBER_MODE, {
      className: 'meta',
      begin: '#', end: '$'
    }]
  };
};

var go = function go(hljs) {
  var GO_KEYWORDS = {
    keyword: 'break default func interface select case map struct chan else goto package switch ' + 'const fallthrough if range type continue for import return var go defer ' + 'bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 ' + 'uint16 uint32 uint64 int uint uintptr rune',
    literal: 'true false iota nil',
    built_in: 'append cap close complex copy imag len make new panic print println real recover delete'
  };
  return {
    aliases: ['golang'],
    keywords: GO_KEYWORDS,
    illegal: '</',
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, {
      className: 'string',
      variants: [hljs.QUOTE_STRING_MODE, { begin: '\'', end: '[^\\\\]\'' }, { begin: '`', end: '`' }]
    }, {
      className: 'number',
      variants: [{ begin: hljs.C_NUMBER_RE + '[dflsi]', relevance: 1 }, hljs.C_NUMBER_MODE]
    }, {
      begin: /:=/ // relevance booster
    }, {
      className: 'function',
      beginKeywords: 'func', end: /\s*\{/, excludeEnd: true,
      contains: [hljs.TITLE_MODE, {
        className: 'params',
        begin: /\(/, end: /\)/,
        keywords: GO_KEYWORDS,
        illegal: /["']/
      }]
    }]
  };
};

var golo = function golo(hljs) {
  return {
    keywords: {
      keyword: 'println readln print import module function local return let var ' + 'while for foreach times in case when match with break continue ' + 'augment augmentation each find filter reduce ' + 'if then else otherwise try catch finally raise throw orIfNull ' + 'DynamicObject|10 DynamicVariable struct Observable map set vector list array',
      literal: 'true false null'
    },
    contains: [hljs.HASH_COMMENT_MODE, hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE, {
      className: 'meta', begin: '@[A-Za-z]+'
    }]
  };
};

var gradle = function gradle(hljs) {
  return {
    case_insensitive: true,
    keywords: {
      keyword: 'task project allprojects subprojects artifacts buildscript configurations ' + 'dependencies repositories sourceSets description delete from into include ' + 'exclude source classpath destinationDir includes options sourceCompatibility ' + 'targetCompatibility group flatDir doLast doFirst flatten todir fromdir ant ' + 'def abstract break case catch continue default do else extends final finally ' + 'for if implements instanceof native new private protected public return static ' + 'switch synchronized throw throws transient try volatile while strictfp package ' + 'import false null super this true antlrtask checkstyle codenarc copy boolean ' + 'byte char class double float int interface long short void compile runTime ' + 'file fileTree abs any append asList asWritable call collect compareTo count ' + 'div dump each eachByte eachFile eachLine every find findAll flatten getAt ' + 'getErr getIn getOut getText grep immutable inject inspect intersect invokeMethods ' + 'isCase join leftShift minus multiply newInputStream newOutputStream newPrintWriter ' + 'newReader newWriter next plus pop power previous print println push putAt read ' + 'readBytes readLines reverse reverseEach round size sort splitEachLine step subMap ' + 'times toInteger toList tokenize upto waitForOrKill withPrintWriter withReader ' + 'withStream withWriter withWriterAppend write writeLine'
    },
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.NUMBER_MODE, hljs.REGEXP_MODE]
  };
};

var groovy = function groovy(hljs) {
    return {
        keywords: {
            literal: 'true false null',
            keyword: 'byte short char int long boolean float double void ' +
            // groovy specific keywords
            'def as in assert trait ' +
            // common keywords with Java
            'super this abstract static volatile transient public private protected synchronized final ' + 'class interface enum if else for while switch case break default continue ' + 'throw throws try catch finally implements extends new import package return instanceof'
        },

        contains: [hljs.COMMENT('/\\*\\*', '\\*/', {
            relevance: 0,
            contains: [{
                // eat up @'s in emails to prevent them to be recognized as doctags
                begin: /\w+@/, relevance: 0
            }, {
                className: 'doctag',
                begin: '@[A-Za-z]+'
            }]
        }), hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, {
            className: 'string',
            begin: '"""', end: '"""'
        }, {
            className: 'string',
            begin: "'''", end: "'''"
        }, {
            className: 'string',
            begin: "\\$/", end: "/\\$",
            relevance: 10
        }, hljs.APOS_STRING_MODE, {
            className: 'regexp',
            begin: /~?\/[^\/\n]+\//,
            contains: [hljs.BACKSLASH_ESCAPE]
        }, hljs.QUOTE_STRING_MODE, {
            className: 'meta',
            begin: "^#!/usr/bin/env", end: '$',
            illegal: '\n'
        }, hljs.BINARY_NUMBER_MODE, {
            className: 'class',
            beginKeywords: 'class interface trait enum', end: '{',
            illegal: ':',
            contains: [{ beginKeywords: 'extends implements' }, hljs.UNDERSCORE_TITLE_MODE]
        }, hljs.C_NUMBER_MODE, {
            className: 'meta', begin: '@[A-Za-z]+'
        }, {
            // highlight map keys and named parameters as strings
            className: 'string', begin: /[^\?]{0}[A-Za-z0-9_$]+ *:/
        }, {
            // catch middle element of the ternary operator
            // to avoid highlight it as a label, named parameter, or map key
            begin: /\?/, end: /\:/
        }, {
            // highlight labeled statements
            className: 'symbol', begin: '^\\s*[A-Za-z0-9_$]+:',
            relevance: 0
        }],
        illegal: /#|<\//
    };
};

var haml = // TODO support filter tags like :javascript, support inline HTML
function haml(hljs) {
  return {
    case_insensitive: true,
    contains: [{
      className: 'meta',
      begin: '^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$',
      relevance: 10
    },
    // FIXME these comments should be allowed to span indented lines
    hljs.COMMENT('^\\s*(!=#|=#|-#|/).*$', false, {
      relevance: 0
    }), {
      begin: '^\\s*(-|=|!=)(?!#)',
      starts: {
        end: '\\n',
        subLanguage: 'ruby'
      }
    }, {
      className: 'tag',
      begin: '^\\s*%',
      contains: [{
        className: 'selector-tag',
        begin: '\\w+'
      }, {
        className: 'selector-id',
        begin: '#[\\w-]+'
      }, {
        className: 'selector-class',
        begin: '\\.[\\w-]+'
      }, {
        begin: '{\\s*',
        end: '\\s*}',
        contains: [{
          begin: ':\\w+\\s*=>',
          end: ',\\s+',
          returnBegin: true,
          endsWithParent: true,
          contains: [{
            className: 'attr',
            begin: ':\\w+'
          }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, {
            begin: '\\w+',
            relevance: 0
          }]
        }]
      }, {
        begin: '\\(\\s*',
        end: '\\s*\\)',
        excludeEnd: true,
        contains: [{
          begin: '\\w+\\s*=',
          end: '\\s+',
          returnBegin: true,
          endsWithParent: true,
          contains: [{
            className: 'attr',
            begin: '\\w+',
            relevance: 0
          }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, {
            begin: '\\w+',
            relevance: 0
          }]
        }]
      }]
    }, {
      begin: '^\\s*[=~]\\s*'
    }, {
      begin: '#{',
      starts: {
        end: '}',
        subLanguage: 'ruby'
      }
    }]
  };
};

var handlebars = function handlebars(hljs) {
  var BUILT_INS = { 'builtin-name': 'each in with if else unless bindattr action collection debugger log outlet template unbound view yield' };
  return {
    aliases: ['hbs', 'html.hbs', 'html.handlebars'],
    case_insensitive: true,
    subLanguage: 'xml',
    contains: [hljs.COMMENT('{{!(--)?', '(--)?}}'), {
      className: 'template-tag',
      begin: /\{\{[#\/]/, end: /\}\}/,
      contains: [{
        className: 'name',
        begin: /[a-zA-Z\.-]+/,
        keywords: BUILT_INS,
        starts: {
          endsWithParent: true, relevance: 0,
          contains: [hljs.QUOTE_STRING_MODE]
        }
      }]
    }, {
      className: 'template-variable',
      begin: /\{\{/, end: /\}\}/,
      keywords: BUILT_INS
    }]
  };
};

var haskell = function haskell(hljs) {
  var COMMENT = {
    variants: [hljs.COMMENT('--', '$'), hljs.COMMENT('{-', '-}', {
      contains: ['self']
    })]
  };

  var PRAGMA = {
    className: 'meta',
    begin: '{-#', end: '#-}'
  };

  var PREPROCESSOR = {
    className: 'meta',
    begin: '^#', end: '$'
  };

  var CONSTRUCTOR = {
    className: 'type',
    begin: '\\b[A-Z][\\w\']*', // TODO: other constructors (build-in, infix).
    relevance: 0
  };

  var LIST = {
    begin: '\\(', end: '\\)',
    illegal: '"',
    contains: [PRAGMA, PREPROCESSOR, { className: 'type', begin: '\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?' }, hljs.inherit(hljs.TITLE_MODE, { begin: '[_a-z][\\w\']*' }), COMMENT]
  };

  var RECORD = {
    begin: '{', end: '}',
    contains: LIST.contains
  };

  return {
    aliases: ['hs'],
    keywords: 'let in if then else case of where do module import hiding ' + 'qualified type data newtype deriving class instance as default ' + 'infix infixl infixr foreign export ccall stdcall cplusplus ' + 'jvm dotnet safe unsafe family forall mdo proc rec',
    contains: [

    // Top-level constructions.

    {
      beginKeywords: 'module', end: 'where',
      keywords: 'module where',
      contains: [LIST, COMMENT],
      illegal: '\\W\\.|;'
    }, {
      begin: '\\bimport\\b', end: '$',
      keywords: 'import qualified as hiding',
      contains: [LIST, COMMENT],
      illegal: '\\W\\.|;'
    }, {
      className: 'class',
      begin: '^(\\s*)?(class|instance)\\b', end: 'where',
      keywords: 'class family instance where',
      contains: [CONSTRUCTOR, LIST, COMMENT]
    }, {
      className: 'class',
      begin: '\\b(data|(new)?type)\\b', end: '$',
      keywords: 'data family type newtype deriving',
      contains: [PRAGMA, CONSTRUCTOR, LIST, RECORD, COMMENT]
    }, {
      beginKeywords: 'default', end: '$',
      contains: [CONSTRUCTOR, LIST, COMMENT]
    }, {
      beginKeywords: 'infix infixl infixr', end: '$',
      contains: [hljs.C_NUMBER_MODE, COMMENT]
    }, {
      begin: '\\bforeign\\b', end: '$',
      keywords: 'foreign import export ccall stdcall cplusplus jvm ' + 'dotnet safe unsafe',
      contains: [CONSTRUCTOR, hljs.QUOTE_STRING_MODE, COMMENT]
    }, {
      className: 'meta',
      begin: '#!\\/usr\\/bin\\/env\ runhaskell', end: '$'
    },

    // "Whitespaces".

    PRAGMA, PREPROCESSOR,

    // Literals and names.

    // TODO: characters.
    hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE, CONSTRUCTOR, hljs.inherit(hljs.TITLE_MODE, { begin: '^[_a-z][\\w\']*' }), COMMENT, { begin: '->|<-' // No markup, relevance booster
    }]
  };
};

var haxe = function haxe(hljs) {
  var HAXE_BASIC_TYPES = 'Int Float String Bool Dynamic Void Array ';

  return {
    aliases: ['hx'],
    keywords: {
      keyword: 'break case cast catch continue default do dynamic else enum extern ' + 'for function here if import in inline never new override package private get set ' + 'public return static super switch this throw trace try typedef untyped using var while ' + HAXE_BASIC_TYPES,
      built_in: 'trace this',
      literal: 'true false null _'
    },
    contains: [{ className: 'string', // interpolate-able strings
      begin: '\'', end: '\'',
      contains: [hljs.BACKSLASH_ESCAPE, { className: 'subst', // interpolation
        begin: '\\$\\{', end: '\\}'
      }, { className: 'subst', // interpolation
        begin: '\\$', end: '\\W}'
      }]
    }, hljs.QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.C_NUMBER_MODE, { className: 'meta', // compiler meta
      begin: '@:', end: '$'
    }, { className: 'meta', // compiler conditionals
      begin: '#', end: '$',
      keywords: { 'meta-keyword': 'if else elseif end error' }
    }, { className: 'type', // function types
      begin: ':[ \t]*', end: '[^A-Za-z0-9_ \t\\->]',
      excludeBegin: true, excludeEnd: true,
      relevance: 0
    }, { className: 'type', // types
      begin: ':[ \t]*', end: '\\W',
      excludeBegin: true, excludeEnd: true
    }, { className: 'type', // instantiation
      begin: 'new *', end: '\\W',
      excludeBegin: true, excludeEnd: true
    }, { className: 'class', // enums
      beginKeywords: 'enum', end: '\\{',
      contains: [hljs.TITLE_MODE]
    }, { className: 'class', // abstracts
      beginKeywords: 'abstract', end: '[\\{$]',
      contains: [{ className: 'type',
        begin: '\\(', end: '\\)',
        excludeBegin: true, excludeEnd: true
      }, { className: 'type',
        begin: 'from +', end: '\\W',
        excludeBegin: true, excludeEnd: true
      }, { className: 'type',
        begin: 'to +', end: '\\W',
        excludeBegin: true, excludeEnd: true
      }, hljs.TITLE_MODE],
      keywords: {
        keyword: 'abstract from to'
      }
    }, { className: 'class', // classes
      begin: '\\b(class|interface) +', end: '[\\{$]', excludeEnd: true,
      keywords: 'class interface',
      contains: [{ className: 'keyword',
        begin: '\\b(extends|implements) +',
        keywords: 'extends implements',
        contains: [{
          className: 'type',
          begin: hljs.IDENT_RE,
          relevance: 0
        }]
      }, hljs.TITLE_MODE]
    }, { className: 'function',
      beginKeywords: 'function', end: '\\(', excludeEnd: true,
      illegal: '\\S',
      contains: [hljs.TITLE_MODE]
    }],
    illegal: /<\//
  };
};

var hsp = function hsp(hljs) {
  return {
    case_insensitive: true,
    lexemes: /[\w\._]+/,
    keywords: 'goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop',
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, {
      // multi-line string
      className: 'string',
      begin: '{"', end: '"}',
      contains: [hljs.BACKSLASH_ESCAPE]
    }, hljs.COMMENT(';', '$', { relevance: 0 }), {
      // pre-processor
      className: 'meta',
      begin: '#', end: '$',
      keywords: { 'meta-keyword': 'addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib' },
      contains: [hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'meta-string' }), hljs.NUMBER_MODE, hljs.C_NUMBER_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
    }, {
      // label
      className: 'symbol',
      begin: '^\\*(\\w+|@)'
    }, hljs.NUMBER_MODE, hljs.C_NUMBER_MODE]
  };
};

var htmlbars = function htmlbars(hljs) {
  var BUILT_INS = 'action collection component concat debugger each each-in else get hash if input link-to loc log mut outlet partial query-params render textarea unbound unless with yield view';

  var ATTR_ASSIGNMENT = {
    illegal: /\}\}/,
    begin: /[a-zA-Z0-9_]+=/,
    returnBegin: true,
    relevance: 0,
    contains: [{
      className: 'attr', begin: /[a-zA-Z0-9_]+/
    }]
  };

  var SUB_EXPR = {
    illegal: /\}\}/,
    begin: /\)/, end: /\)/,
    contains: [{
      begin: /[a-zA-Z\.\-]+/,
      keywords: { built_in: BUILT_INS },
      starts: {
        endsWithParent: true, relevance: 0,
        contains: [hljs.QUOTE_STRING_MODE]
      }
    }]
  };

  var TAG_INNARDS = {
    endsWithParent: true, relevance: 0,
    keywords: { keyword: 'as', built_in: BUILT_INS },
    contains: [hljs.QUOTE_STRING_MODE, ATTR_ASSIGNMENT, hljs.NUMBER_MODE]
  };

  return {
    case_insensitive: true,
    subLanguage: 'xml',
    contains: [hljs.COMMENT('{{!(--)?', '(--)?}}'), {
      className: 'template-tag',
      begin: /\{\{[#\/]/, end: /\}\}/,
      contains: [{
        className: 'name',
        begin: /[a-zA-Z\.\-]+/,
        keywords: { 'builtin-name': BUILT_INS },
        starts: TAG_INNARDS
      }]
    }, {
      className: 'template-variable',
      begin: /\{\{[a-zA-Z][a-zA-Z\-]+/, end: /\}\}/,
      keywords: { keyword: 'as', built_in: BUILT_INS },
      contains: [hljs.QUOTE_STRING_MODE]
    }]
  };
};

var http = function http(hljs) {
  var VERSION = 'HTTP/[0-9\\.]+';
  return {
    aliases: ['https'],
    illegal: '\\S',
    contains: [{
      begin: '^' + VERSION, end: '$',
      contains: [{ className: 'number', begin: '\\b\\d{3}\\b' }]
    }, {
      begin: '^[A-Z]+ (.*?) ' + VERSION + '$', returnBegin: true, end: '$',
      contains: [{
        className: 'string',
        begin: ' ', end: ' ',
        excludeBegin: true, excludeEnd: true
      }, {
        begin: VERSION
      }, {
        className: 'keyword',
        begin: '[A-Z]+'
      }]
    }, {
      className: 'attribute',
      begin: '^\\w', end: ': ', excludeEnd: true,
      illegal: '\\n|\\s|=',
      starts: { end: '$', relevance: 0 }
    }, {
      begin: '\\n\\n',
      starts: { subLanguage: [], endsWithParent: true }
    }]
  };
};

var hy = function hy(hljs) {
  var keywords = {
    'builtin-name':
    // keywords
    '!= % %= & &= * ** **= *= *map ' + '+ += , --build-class-- --import-- -= . / // //= ' + '/= < << <<= <= = > >= >> >>= ' + '@ @= ^ ^= abs accumulate all and any ap-compose ' + 'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ' + 'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast ' + 'callable calling-module-name car case cdr chain chr coll? combinations compile ' + 'compress cond cons cons? continue count curry cut cycle dec ' + 'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn ' + 'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir ' + 'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? ' + 'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first ' + 'flatten float? fn fnc fnr for for* format fraction genexpr ' + 'gensym get getattr global globals group-by hasattr hash hex id ' + 'identity if if* if-not if-python2 import in inc input instance? ' + 'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even ' + 'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none ' + 'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass ' + 'iter iterable? iterate iterator? keyword keyword? lambda last len let ' + 'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all ' + 'map max merge-with method-decorator min multi-decorator multicombinations name neg? next ' + 'none? nonlocal not not-in not? nth numeric? oct odd? open ' + 'or ord partition permutations pos? post-route postwalk pow prewalk print ' + 'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str ' + 'recursive-replace reduce remove repeat repeatedly repr require rest round route ' + 'route-with-methods rwm second seq set-comp setattr setv some sorted string ' + 'string? sum switch symbol? take take-nth take-while tee try unless ' + 'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms ' + 'xi xor yield yield-from zero? zip zip-longest | |= ~'
  };

  var SYMBOLSTART = 'a-zA-Z_\\-!.?+*=<>&#\'';
  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';
  var SIMPLE_NUMBER_RE = '[-+]?\\d+(\\.\\d+)?';

  var SHEBANG = {
    className: 'meta',
    begin: '^#!', end: '$'
  };

  var SYMBOL = {
    begin: SYMBOL_RE,
    relevance: 0
  };
  var NUMBER = {
    className: 'number', begin: SIMPLE_NUMBER_RE,
    relevance: 0
  };
  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
  var COMMENT = hljs.COMMENT(';', '$', {
    relevance: 0
  });
  var LITERAL = {
    className: 'literal',
    begin: /\b([Tt]rue|[Ff]alse|nil|None)\b/
  };
  var COLLECTION = {
    begin: '[\\[\\{]', end: '[\\]\\}]'
  };
  var HINT = {
    className: 'comment',
    begin: '\\^' + SYMBOL_RE
  };
  var HINT_COL = hljs.COMMENT('\\^\\{', '\\}');
  var KEY = {
    className: 'symbol',
    begin: '[:]{1,2}' + SYMBOL_RE
  };
  var LIST = {
    begin: '\\(', end: '\\)'
  };
  var BODY = {
    endsWithParent: true,
    relevance: 0
  };
  var NAME = {
    keywords: keywords,
    lexemes: SYMBOL_RE,
    className: 'name', begin: SYMBOL_RE,
    starts: BODY
  };
  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];

  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];
  BODY.contains = DEFAULT_CONTAINS;
  COLLECTION.contains = DEFAULT_CONTAINS;

  return {
    aliases: ['hylang'],
    illegal: /\S/,
    contains: [SHEBANG, LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]
  };
};

var inform7 = function inform7(hljs) {
  var START_BRACKET = '\\[';
  var END_BRACKET = '\\]';
  return {
    aliases: ['i7'],
    case_insensitive: true,
    keywords: {
      // Some keywords more or less unique to I7, for relevance.
      keyword:
      // kind:
      'thing room person man woman animal container ' + 'supporter backdrop door ' +
      // characteristic:
      'scenery open closed locked inside gender ' +
      // verb:
      'is are say understand ' +
      // misc keyword:
      'kind of rule'
    },
    contains: [{
      className: 'string',
      begin: '"', end: '"',
      relevance: 0,
      contains: [{
        className: 'subst',
        begin: START_BRACKET, end: END_BRACKET
      }]
    }, {
      className: 'section',
      begin: /^(Volume|Book|Part|Chapter|Section|Table)\b/,
      end: '$'
    }, {
      // Rule definition
      // This is here for relevance.
      begin: /^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\b/,
      end: ':',
      contains: [{
        //Rule name
        begin: '\\(This', end: '\\)'
      }]
    }, {
      className: 'comment',
      begin: START_BRACKET, end: END_BRACKET,
      contains: ['self']
    }]
  };
};

var ini = function ini(hljs) {
  var STRING = {
    className: "string",
    contains: [hljs.BACKSLASH_ESCAPE],
    variants: [{
      begin: "'''", end: "'''",
      relevance: 10
    }, {
      begin: '"""', end: '"""',
      relevance: 10
    }, {
      begin: '"', end: '"'
    }, {
      begin: "'", end: "'"
    }]
  };
  return {
    aliases: ['toml'],
    case_insensitive: true,
    illegal: /\S/,
    contains: [hljs.COMMENT(';', '$'), hljs.HASH_COMMENT_MODE, {
      className: 'section',
      begin: /^\s*\[+/, end: /\]+/
    }, {
      begin: /^[a-z0-9\[\]_-]+\s*=\s*/, end: '$',
      returnBegin: true,
      contains: [{
        className: 'attr',
        begin: /[a-z0-9\[\]_-]+/
      }, {
        begin: /=/, endsWithParent: true,
        relevance: 0,
        contains: [{
          className: 'literal',
          begin: /\bon|off|true|false|yes|no\b/
        }, {
          className: 'variable',
          variants: [{ begin: /\$[\w\d"][\w\d_]*/ }, { begin: /\$\{(.*?)}/ }]
        }, STRING, {
          className: 'number',
          begin: /([\+\-]+)?[\d]+_[\d_]+/
        }, hljs.NUMBER_MODE]
      }]
    }]
  };
};

var irpf90 = function irpf90(hljs) {
  var PARAMS = {
    className: 'params',
    begin: '\\(', end: '\\)'
  };

  var F_KEYWORDS = {
    literal: '.False. .True.',
    keyword: 'kind do while private call intrinsic where elsewhere ' + 'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then ' + 'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. ' + 'goto save else use module select case ' + 'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit ' + 'continue format pause cycle exit ' + 'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg ' + 'synchronous nopass non_overridable pass protected volatile abstract extends import ' + 'non_intrinsic value deferred generic final enumerator class associate bind enum ' + 'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t ' + 'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double ' + 'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr ' + 'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer ' + 'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor ' + 'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ' + 'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive ' + 'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure ' + 'integer real character complex logical dimension allocatable|10 parameter ' + 'external implicit|10 none double precision assign intent optional pointer ' + 'target in out common equivalence data ' +
    // IRPF90 special keywords
    'begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch ' + 'soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read',
    built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint ' + 'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl ' + 'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama ' + 'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod ' + 'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log ' + 'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate ' + 'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product ' + 'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul ' + 'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product ' + 'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind ' + 'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer ' + 'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ' + 'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode ' + 'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of' + 'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 ' + 'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits ' + 'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr ' + 'num_images parity popcnt poppar shifta shiftl shiftr this_image ' +
    // IRPF90 special built_ins
    'IRP_ALIGN irp_here'
  };
  return {
    case_insensitive: true,
    keywords: F_KEYWORDS,
    illegal: /\/\*/,
    contains: [hljs.inherit(hljs.APOS_STRING_MODE, { className: 'string', relevance: 0 }), hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string', relevance: 0 }), {
      className: 'function',
      beginKeywords: 'subroutine function program',
      illegal: '[${=\\n]',
      contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]
    }, hljs.COMMENT('!', '$', { relevance: 0 }), hljs.COMMENT('begin_doc', 'end_doc', { relevance: 10 }), {
      className: 'number',
      begin: '(?=\\b|\\+|\\-|\\.)(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[de][+-]?\\d+)?\\b\\.?',
      relevance: 0
    }]
  };
};

var java = function java(hljs) {
  var JAVA_IDENT_RE = '[\xC0-\u02B8a-zA-Z_$][\xC0-\u02B8a-zA-Z_$0-9]*';
  var GENERIC_IDENT_RE = JAVA_IDENT_RE + '(<' + JAVA_IDENT_RE + '(\\s*,\\s*' + JAVA_IDENT_RE + ')*>)?';
  var KEYWORDS = 'false synchronized int abstract float private char boolean static null if const ' + 'for true while long strictfp finally protected import native final void ' + 'enum else break transient catch instanceof byte super volatile case assert short ' + 'package default double public try this switch continue throws protected public private ' + 'module requires exports do';

  // https://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html
  var JAVA_NUMBER_RE = '\\b' + '(' + '0[bB]([01]+[01_]+[01]+|[01]+)' + // 0b...
  '|' + '0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)' + // 0x...
  '|' + '(' + '([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?' + '|' + '\\.([\\d]+[\\d_]+[\\d]+|[\\d]+)' + ')' + '([eE][-+]?\\d+)?' + // octal, decimal, float
  ')' + '[lLfF]?';
  var JAVA_NUMBER_MODE = {
    className: 'number',
    begin: JAVA_NUMBER_RE,
    relevance: 0
  };

  return {
    aliases: ['jsp'],
    keywords: KEYWORDS,
    illegal: /<\/|#/,
    contains: [hljs.COMMENT('/\\*\\*', '\\*/', {
      relevance: 0,
      contains: [{
        // eat up @'s in emails to prevent them to be recognized as doctags
        begin: /\w+@/, relevance: 0
      }, {
        className: 'doctag',
        begin: '@[A-Za-z]+'
      }]
    }), hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, {
      className: 'class',
      beginKeywords: 'class interface', end: /[{;=]/, excludeEnd: true,
      keywords: 'class interface',
      illegal: /[:"\[\]]/,
      contains: [{ beginKeywords: 'extends implements' }, hljs.UNDERSCORE_TITLE_MODE]
    }, {
      // Expression keywords prevent 'keyword Name(...)' from being
      // recognized as a function definition
      beginKeywords: 'new throw return else',
      relevance: 0
    }, {
      className: 'function',
      begin: '(' + GENERIC_IDENT_RE + '\\s+)+' + hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true, end: /[{;=]/,
      excludeEnd: true,
      keywords: KEYWORDS,
      contains: [{
        begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true,
        relevance: 0,
        contains: [hljs.UNDERSCORE_TITLE_MODE]
      }, {
        className: 'params',
        begin: /\(/, end: /\)/,
        keywords: KEYWORDS,
        relevance: 0,
        contains: [hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE, hljs.C_BLOCK_COMMENT_MODE]
      }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
    }, JAVA_NUMBER_MODE, {
      className: 'meta', begin: '@[A-Za-z]+'
    }]
  };
};

var javascript = function javascript(hljs) {
  var IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
  var KEYWORDS = {
    keyword: 'in of if for while finally var new function do return void else break catch ' + 'instanceof with throw case default try this switch continue typeof delete ' + 'let yield const export super debugger as async await static ' +
    // ECMAScript 6 modules import
    'import from as',

    literal: 'true false null undefined NaN Infinity',
    built_in: 'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' + 'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' + 'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' + 'TypeError URIError Number Math Date String RegExp Array Float32Array ' + 'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' + 'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' + 'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' + 'Promise'
  };
  var NUMBER = {
    className: 'number',
    variants: [{ begin: '\\b(0[bB][01]+)' }, { begin: '\\b(0[oO][0-7]+)' }, { begin: hljs.C_NUMBER_RE }],
    relevance: 0
  };
  var SUBST = {
    className: 'subst',
    begin: '\\$\\{', end: '\\}',
    keywords: KEYWORDS,
    contains: [] // defined later
  };
  var TEMPLATE_STRING = {
    className: 'string',
    begin: '`', end: '`',
    contains: [hljs.BACKSLASH_ESCAPE, SUBST]
  };
  SUBST.contains = [hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, TEMPLATE_STRING, NUMBER, hljs.REGEXP_MODE];
  var PARAMS_CONTAINS = SUBST.contains.concat([hljs.C_BLOCK_COMMENT_MODE, hljs.C_LINE_COMMENT_MODE]);

  return {
    aliases: ['js', 'jsx'],
    keywords: KEYWORDS,
    contains: [{
      className: 'meta',
      relevance: 10,
      begin: /^\s*['"]use (strict|asm)['"]/
    }, {
      className: 'meta',
      begin: /^#!/, end: /$/
    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, TEMPLATE_STRING, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBER, { // object attr container
      begin: /[{,]\s*/, relevance: 0,
      contains: [{
        begin: IDENT_RE + '\\s*:', returnBegin: true,
        relevance: 0,
        contains: [{ className: 'attr', begin: IDENT_RE, relevance: 0 }]
      }]
    }, { // "value" container
      begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
      keywords: 'return throw case',
      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.REGEXP_MODE, {
        className: 'function',
        begin: '(\\(.*?\\)|' + IDENT_RE + ')\\s*=>', returnBegin: true,
        end: '\\s*=>',
        contains: [{
          className: 'params',
          variants: [{
            begin: IDENT_RE
          }, {
            begin: /\(\s*\)/
          }, {
            begin: /\(/, end: /\)/,
            excludeBegin: true, excludeEnd: true,
            keywords: KEYWORDS,
            contains: PARAMS_CONTAINS
          }]
        }]
      }, { // E4X / JSX
        begin: /</, end: /(\/\w+|\w+\/)>/,
        subLanguage: 'xml',
        contains: [{ begin: /<\w+\s*\/>/, skip: true }, {
          begin: /<\w+/, end: /(\/\w+|\w+\/)>/, skip: true,
          contains: [{ begin: /<\w+\s*\/>/, skip: true }, 'self']
        }]
      }],
      relevance: 0
    }, {
      className: 'function',
      beginKeywords: 'function', end: /\{/, excludeEnd: true,
      contains: [hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE }), {
        className: 'params',
        begin: /\(/, end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
        contains: PARAMS_CONTAINS
      }],
      illegal: /\[|%/
    }, {
      begin: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
    }, hljs.METHOD_GUARD, { // ES6 class
      className: 'class',
      beginKeywords: 'class', end: /[{;=]/, excludeEnd: true,
      illegal: /[:"\[\]]/,
      contains: [{ beginKeywords: 'extends' }, hljs.UNDERSCORE_TITLE_MODE]
    }, {
      beginKeywords: 'constructor', end: /\{/, excludeEnd: true
    }],
    illegal: /#(?!!)/
  };
};

var jbossCli = function jbossCli(hljs) {
  var PARAM = {
    begin: /[\w-]+ *=/, returnBegin: true,
    relevance: 0,
    contains: [{ className: 'attr', begin: /[\w-]+/ }]
  };
  var PARAMSBLOCK = {
    className: 'params',
    begin: /\(/,
    end: /\)/,
    contains: [PARAM],
    relevance: 0
  };
  var OPERATION = {
    className: 'function',
    begin: /:[\w\-.]+/,
    relevance: 0
  };
  var PATH = {
    className: 'string',
    begin: /\B(([\/.])[\w\-.\/=]+)+/
  };
  var COMMAND_PARAMS = {
    className: 'params',
    begin: /--[\w\-=\/]+/
  };
  return {
    aliases: ['wildfly-cli'],
    lexemes: '[a-z\-]+',
    keywords: {
      keyword: 'alias batch cd clear command connect connection-factory connection-info data-source deploy ' + 'deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls ' + 'patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias ' + 'undeploy unset version xa-data-source', // module
      literal: 'true false'
    },
    contains: [hljs.HASH_COMMENT_MODE, hljs.QUOTE_STRING_MODE, COMMAND_PARAMS, OPERATION, PATH, PARAMSBLOCK]
  };
};

var json = function json(hljs) {
  var LITERALS = { literal: 'true false null' };
  var TYPES = [hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE];
  var VALUE_CONTAINER = {
    end: ',', endsWithParent: true, excludeEnd: true,
    contains: TYPES,
    keywords: LITERALS
  };
  var OBJECT = {
    begin: '{', end: '}',
    contains: [{
      className: 'attr',
      begin: /"/, end: /"/,
      contains: [hljs.BACKSLASH_ESCAPE],
      illegal: '\\n'
    }, hljs.inherit(VALUE_CONTAINER, { begin: /:/ })],
    illegal: '\\S'
  };
  var ARRAY = {
    begin: '\\[', end: '\\]',
    contains: [hljs.inherit(VALUE_CONTAINER)], // inherit is a workaround for a bug that makes shared modes with endsWithParent compile only the ending of one of the parents
    illegal: '\\S'
  };
  TYPES.splice(TYPES.length, 0, OBJECT, ARRAY);
  return {
    contains: TYPES,
    keywords: LITERALS,
    illegal: '\\S'
  };
};

var julia = function julia(hljs) {
  // Since there are numerous special names in Julia, it is too much trouble
  // to maintain them by hand. Hence these names (i.e. keywords, literals and
  // built-ins) are automatically generated from Julia v0.6 itself through
  // the following scripts for each.

  var KEYWORDS = {
    // # keyword generator, multi-word keywords handled manually below
    // foreach(println, ["in", "isa", "where"])
    // for kw in Base.REPLCompletions.complete_keyword("")
    //     if !(contains(kw, " ") || kw == "struct")
    //         println(kw)
    //     end
    // end
    keyword: 'in isa where ' + 'baremodule begin break catch ccall const continue do else elseif end export false finally for function ' + 'global if import importall let local macro module quote return true try using while ' +
    // legacy, to be deprecated in the next release
    'type immutable abstract bitstype typealias ',

    // # literal generator
    // println("true")
    // println("false")
    // for name in Base.REPLCompletions.completions("", 0)[1]
    //     try
    //         v = eval(Symbol(name))
    //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)
    //             println(name)
    //         end
    //     end
    // end
    literal: 'true false ' + 'ARGS C_NULL DevNull ENDIAN_BOM ENV I Inf Inf16 Inf32 Inf64 InsertionSort JULIA_HOME LOAD_PATH MergeSort ' + 'NaN NaN16 NaN32 NaN64 PROGRAM_FILE QuickSort RoundDown RoundFromZero RoundNearest RoundNearestTiesAway ' + 'RoundNearestTiesUp RoundToZero RoundUp STDERR STDIN STDOUT VERSION catalan e|0 eu|0 eulergamma golden im ' + 'nothing pi γ π φ ',

    // # built_in generator:
    // for name in Base.REPLCompletions.completions("", 0)[1]
    //     try
    //         v = eval(Symbol(name))
    //         if v isa Type || v isa TypeVar
    //             println(name)
    //         end
    //     end
    // end
    built_in: 'ANY AbstractArray AbstractChannel AbstractFloat AbstractMatrix AbstractRNG AbstractSerializer AbstractSet ' + 'AbstractSparseArray AbstractSparseMatrix AbstractSparseVector AbstractString AbstractUnitRange AbstractVecOrMat ' + 'AbstractVector Any ArgumentError Array AssertionError Associative Base64DecodePipe Base64EncodePipe Bidiagonal ' + 'BigFloat BigInt BitArray BitMatrix BitVector Bool BoundsError BufferStream CachingPool CapturedException ' + 'CartesianIndex CartesianRange Cchar Cdouble Cfloat Channel Char Cint Cintmax_t Clong Clonglong ClusterManager ' + 'Cmd CodeInfo Colon Complex Complex128 Complex32 Complex64 CompositeException Condition ConjArray ConjMatrix ' + 'ConjVector Cptrdiff_t Cshort Csize_t Cssize_t Cstring Cuchar Cuint Cuintmax_t Culong Culonglong Cushort Cwchar_t ' + 'Cwstring DataType Date DateFormat DateTime DenseArray DenseMatrix DenseVecOrMat DenseVector Diagonal Dict ' + 'DimensionMismatch Dims DirectIndexString Display DivideError DomainError EOFError EachLine Enum Enumerate ' + 'ErrorException Exception ExponentialBackOff Expr Factorization FileMonitor Float16 Float32 Float64 Function ' + 'Future GlobalRef GotoNode HTML Hermitian IO IOBuffer IOContext IOStream IPAddr IPv4 IPv6 IndexCartesian IndexLinear ' + 'IndexStyle InexactError InitError Int Int128 Int16 Int32 Int64 Int8 IntSet Integer InterruptException ' + 'InvalidStateException Irrational KeyError LabelNode LinSpace LineNumberNode LoadError LowerTriangular MIME Matrix ' + 'MersenneTwister Method MethodError MethodTable Module NTuple NewvarNode NullException Nullable Number ObjectIdDict ' + 'OrdinalRange OutOfMemoryError OverflowError Pair ParseError PartialQuickSort PermutedDimsArray Pipe ' + 'PollingFileWatcher ProcessExitedException Ptr QuoteNode RandomDevice Range RangeIndex Rational RawFD ' + 'ReadOnlyMemoryError Real ReentrantLock Ref Regex RegexMatch RemoteChannel RemoteException RevString RoundingMode ' + 'RowVector SSAValue SegmentationFault SerializationState Set SharedArray SharedMatrix SharedVector Signed ' + 'SimpleVector Slot SlotNumber SparseMatrixCSC SparseVector StackFrame StackOverflowError StackTrace StepRange ' + 'StepRangeLen StridedArray StridedMatrix StridedVecOrMat StridedVector String SubArray SubString SymTridiagonal ' + 'Symbol Symmetric SystemError TCPSocket Task Text TextDisplay Timer Tridiagonal Tuple Type TypeError TypeMapEntry ' + 'TypeMapLevel TypeName TypeVar TypedSlot UDPSocket UInt UInt128 UInt16 UInt32 UInt64 UInt8 UndefRefError UndefVarError ' + 'UnicodeError UniformScaling Union UnionAll UnitRange Unsigned UpperTriangular Val Vararg VecElement VecOrMat Vector ' + 'VersionNumber Void WeakKeyDict WeakRef WorkerConfig WorkerPool '
  };

  // ref: http://julia.readthedocs.org/en/latest/manual/variables/#allowed-variable-names
  var VARIABLE_NAME_RE = '[A-Za-z_\\u00A1-\\uFFFF][A-Za-z_0-9\\u00A1-\\uFFFF]*';

  // placeholder for recursive self-reference
  var DEFAULT = {
    lexemes: VARIABLE_NAME_RE, keywords: KEYWORDS, illegal: /<\//
  };

  // ref: http://julia.readthedocs.org/en/latest/manual/integers-and-floating-point-numbers/
  var NUMBER = {
    className: 'number',
    // supported numeric literals:
    //  * binary literal (e.g. 0x10)
    //  * octal literal (e.g. 0o76543210)
    //  * hexadecimal literal (e.g. 0xfedcba876543210)
    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)
    //  * decimal literal (e.g. 9876543210, 100_000_000)
    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)
    begin: /(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+)?/,
    relevance: 0
  };

  var CHAR = {
    className: 'string',
    begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
  };

  var INTERPOLATION = {
    className: 'subst',
    begin: /\$\(/, end: /\)/,
    keywords: KEYWORDS
  };

  var INTERPOLATED_VARIABLE = {
    className: 'variable',
    begin: '\\$' + VARIABLE_NAME_RE
  };

  // TODO: neatly escape normal code in string literal
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],
    variants: [{ begin: /\w*"""/, end: /"""\w*/, relevance: 10 }, { begin: /\w*"/, end: /"\w*/ }]
  };

  var COMMAND = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],
    begin: '`', end: '`'
  };

  var MACROCALL = {
    className: 'meta',
    begin: '@' + VARIABLE_NAME_RE
  };

  var COMMENT = {
    className: 'comment',
    variants: [{ begin: '#=', end: '=#', relevance: 10 }, { begin: '#', end: '$' }]
  };

  DEFAULT.contains = [NUMBER, CHAR, STRING, COMMAND, MACROCALL, COMMENT, hljs.HASH_COMMENT_MODE, {
    className: 'keyword',
    begin: '\\b(((abstract|primitive)\\s+)type|(mutable\\s+)?struct)\\b'
  }, { begin: /<:/ // relevance booster
  }];
  INTERPOLATION.contains = DEFAULT.contains;

  return DEFAULT;
};

var juliaRepl = function juliaRepl(hljs) {
  return {
    contains: [{
      className: 'meta',
      begin: /^julia>/,
      relevance: 10,
      starts: {
        // end the highlighting if we are on a new line and the line does not have at
        // least six spaces in the beginning
        end: /^(?![ ]{6})/,
        subLanguage: 'julia'
      },
      // jldoctest Markdown blocks are used in the Julia manual and package docs indicate
      // code snippets that should be verified when the documentation is built. They can be
      // either REPL-like or script-like, but are usually REPL-like and therefore we apply
      // julia-repl highlighting to them. More information can be found in Documenter's
      // manual: https://juliadocs.github.io/Documenter.jl/latest/man/doctests.html
      aliases: ['jldoctest']
    }]
  };
};

var kotlin = function kotlin(hljs) {
  var KEYWORDS = {
    keyword: 'abstract as val var vararg get set class object open private protected public noinline ' + 'crossinline dynamic final enum if else do while for when throw try catch finally ' + 'import package is in fun override companion reified inline lateinit init' + 'interface annotation data sealed internal infix operator out by constructor super ' +
    // to be deleted soon
    'trait volatile transient native default',
    built_in: 'Byte Short Char Int Long Boolean Float Double Void Unit Nothing',
    literal: 'true false null'
  };
  var KEYWORDS_WITH_LABEL = {
    className: 'keyword',
    begin: /\b(break|continue|return|this)\b/,
    starts: {
      contains: [{
        className: 'symbol',
        begin: /@\w+/
      }]
    }
  };
  var LABEL = {
    className: 'symbol', begin: hljs.UNDERSCORE_IDENT_RE + '@'
  };

  // for string templates
  var SUBST = {
    className: 'subst',
    begin: '\\${', end: '}', contains: [hljs.APOS_STRING_MODE, hljs.C_NUMBER_MODE]
  };
  var VARIABLE = {
    className: 'variable', begin: '\\$' + hljs.UNDERSCORE_IDENT_RE
  };
  var STRING = {
    className: 'string',
    variants: [{
      begin: '"""', end: '"""',
      contains: [VARIABLE, SUBST]
    },
    // Can't use built-in modes easily, as we want to use STRING in the meta
    // context as 'meta-string' and there's no syntax to remove explicitly set
    // classNames in built-in modes.
    {
      begin: '\'', end: '\'',
      illegal: /\n/,
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      begin: '"', end: '"',
      illegal: /\n/,
      contains: [hljs.BACKSLASH_ESCAPE, VARIABLE, SUBST]
    }]
  };

  var ANNOTATION_USE_SITE = {
    className: 'meta', begin: '@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*' + hljs.UNDERSCORE_IDENT_RE + ')?'
  };
  var ANNOTATION = {
    className: 'meta', begin: '@' + hljs.UNDERSCORE_IDENT_RE,
    contains: [{
      begin: /\(/, end: /\)/,
      contains: [hljs.inherit(STRING, { className: 'meta-string' })]
    }]
  };

  return {
    keywords: KEYWORDS,
    contains: [hljs.COMMENT('/\\*\\*', '\\*/', {
      relevance: 0,
      contains: [{
        className: 'doctag',
        begin: '@[A-Za-z]+'
      }]
    }), hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, KEYWORDS_WITH_LABEL, LABEL, ANNOTATION_USE_SITE, ANNOTATION, {
      className: 'function',
      beginKeywords: 'fun', end: '[(]|$',
      returnBegin: true,
      excludeEnd: true,
      keywords: KEYWORDS,
      illegal: /fun\s+(<.*>)?[^\s\(]+(\s+[^\s\(]+)\s*=/,
      relevance: 5,
      contains: [{
        begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true,
        relevance: 0,
        contains: [hljs.UNDERSCORE_TITLE_MODE]
      }, {
        className: 'type',
        begin: /</, end: />/, keywords: 'reified',
        relevance: 0
      }, {
        className: 'params',
        begin: /\(/, end: /\)/,
        endsParent: true,
        keywords: KEYWORDS,
        relevance: 0,
        contains: [{
          begin: /:/, end: /[=,\/]/, endsWithParent: true,
          contains: [{ className: 'type', begin: hljs.UNDERSCORE_IDENT_RE }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE],
          relevance: 0
        }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, ANNOTATION_USE_SITE, ANNOTATION, STRING, hljs.C_NUMBER_MODE]
      }, hljs.C_BLOCK_COMMENT_MODE]
    }, {
      className: 'class',
      beginKeywords: 'class interface trait', end: /[:\{(]|$/, // remove 'trait' when removed from KEYWORDS
      excludeEnd: true,
      illegal: 'extends implements',
      contains: [{ beginKeywords: 'public protected internal private constructor' }, hljs.UNDERSCORE_TITLE_MODE, {
        className: 'type',
        begin: /</, end: />/, excludeBegin: true, excludeEnd: true,
        relevance: 0
      }, {
        className: 'type',
        begin: /[,:]\s*/, end: /[<\(,]|$/, excludeBegin: true, returnEnd: true
      }, ANNOTATION_USE_SITE, ANNOTATION]
    }, STRING, {
      className: 'meta',
      begin: "^#!/usr/bin/env", end: '$',
      illegal: '\n'
    }, hljs.C_NUMBER_MODE]
  };
};

var lasso = function lasso(hljs) {
  var LASSO_IDENT_RE = '[a-zA-Z_][\\w.]*';
  var LASSO_ANGLE_RE = '<\\?(lasso(script)?|=)';
  var LASSO_CLOSE_RE = '\\]|\\?>';
  var LASSO_KEYWORDS = {
    literal: 'true false none minimal full all void and or not ' + 'bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft',
    built_in: 'array date decimal duration integer map pair string tag xml null ' + 'boolean bytes keyword list locale queue set stack staticarray ' + 'local var variable global data self inherited currentcapture givenblock',
    keyword: 'cache database_names database_schemanames database_tablenames ' + 'define_tag define_type email_batch encode_set html_comment handle ' + 'handle_error header if inline iterate ljax_target link ' + 'link_currentaction link_currentgroup link_currentrecord link_detail ' + 'link_firstgroup link_firstrecord link_lastgroup link_lastrecord ' + 'link_nextgroup link_nextrecord link_prevgroup link_prevrecord log ' + 'loop namespace_using output_none portal private protect records ' + 'referer referrer repeating resultset rows search_args ' + 'search_arguments select sort_args sort_arguments thread_atomic ' + 'value_list while abort case else fail_if fail_ifnot fail if_empty ' + 'if_false if_null if_true loop_abort loop_continue loop_count params ' + 'params_up return return_value run_children soap_definetag ' + 'soap_lastrequest soap_lastresponse tag_name ascending average by ' + 'define descending do equals frozen group handle_failure import in ' + 'into join let match max min on order parent protected provide public ' + 'require returnhome skip split_thread sum take thread to trait type ' + 'where with yield yieldhome'
  };
  var HTML_COMMENT = hljs.COMMENT('<!--', '-->', {
    relevance: 0
  });
  var LASSO_NOPROCESS = {
    className: 'meta',
    begin: '\\[noprocess\\]',
    starts: {
      end: '\\[/noprocess\\]',
      returnEnd: true,
      contains: [HTML_COMMENT]
    }
  };
  var LASSO_START = {
    className: 'meta',
    begin: '\\[/noprocess|' + LASSO_ANGLE_RE
  };
  var LASSO_DATAMEMBER = {
    className: 'symbol',
    begin: '\'' + LASSO_IDENT_RE + '\''
  };
  var LASSO_CODE = [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.inherit(hljs.C_NUMBER_MODE, { begin: hljs.C_NUMBER_RE + '|(-?infinity|NaN)\\b' }), hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }), hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }), {
    className: 'string',
    begin: '`', end: '`'
  }, { // variables
    variants: [{
      begin: '[#$]' + LASSO_IDENT_RE
    }, {
      begin: '#', end: '\\d+',
      illegal: '\\W'
    }]
  }, {
    className: 'type',
    begin: '::\\s*', end: LASSO_IDENT_RE,
    illegal: '\\W'
  }, {
    className: 'params',
    variants: [{
      begin: '-(?!infinity)' + LASSO_IDENT_RE,
      relevance: 0
    }, {
      begin: '(\\.\\.\\.)'
    }]
  }, {
    begin: /(->|\.)\s*/,
    relevance: 0,
    contains: [LASSO_DATAMEMBER]
  }, {
    className: 'class',
    beginKeywords: 'define',
    returnEnd: true, end: '\\(|=>',
    contains: [hljs.inherit(hljs.TITLE_MODE, { begin: LASSO_IDENT_RE + '(=(?!>))?|[-+*/%](?!>)' })]
  }];
  return {
    aliases: ['ls', 'lassoscript'],
    case_insensitive: true,
    lexemes: LASSO_IDENT_RE + '|&[lg]t;',
    keywords: LASSO_KEYWORDS,
    contains: [{
      className: 'meta',
      begin: LASSO_CLOSE_RE,
      relevance: 0,
      starts: { // markup
        end: '\\[|' + LASSO_ANGLE_RE,
        returnEnd: true,
        relevance: 0,
        contains: [HTML_COMMENT]
      }
    }, LASSO_NOPROCESS, LASSO_START, {
      className: 'meta',
      begin: '\\[no_square_brackets',
      starts: {
        end: '\\[/no_square_brackets\\]', // not implemented in the language
        lexemes: LASSO_IDENT_RE + '|&[lg]t;',
        keywords: LASSO_KEYWORDS,
        contains: [{
          className: 'meta',
          begin: LASSO_CLOSE_RE,
          relevance: 0,
          starts: {
            end: '\\[noprocess\\]|' + LASSO_ANGLE_RE,
            returnEnd: true,
            contains: [HTML_COMMENT]
          }
        }, LASSO_NOPROCESS, LASSO_START].concat(LASSO_CODE)
      }
    }, {
      className: 'meta',
      begin: '\\[',
      relevance: 0
    }, {
      className: 'meta',
      begin: '^#!', end: 'lasso9$',
      relevance: 10
    }].concat(LASSO_CODE)
  };
};

var ldif = function ldif(hljs) {
  return {
    contains: [{
      className: 'attribute',
      begin: '^dn', end: ': ', excludeEnd: true,
      starts: { end: '$', relevance: 0 },
      relevance: 10
    }, {
      className: 'attribute',
      begin: '^\\w', end: ': ', excludeEnd: true,
      starts: { end: '$', relevance: 0 }
    }, {
      className: 'literal',
      begin: '^-', end: '$'
    }, hljs.HASH_COMMENT_MODE]
  };
};

var leaf = function leaf(hljs) {
  return {
    contains: [{
      className: 'function',
      begin: '#+' + '[A-Za-z_0-9]*' + '\\(',
      end: ' {',
      returnBegin: true,
      excludeEnd: true,
      contains: [{
        className: 'keyword',
        begin: '#+'
      }, {
        className: 'title',
        begin: '[A-Za-z_][A-Za-z_0-9]*'
      }, {
        className: 'params',
        begin: '\\(', end: '\\)',
        endsParent: true,
        contains: [{
          className: 'string',
          begin: '"',
          end: '"'
        }, {
          className: 'variable',
          begin: '[A-Za-z_][A-Za-z_0-9]*'
        }]
      }]
    }]
  };
};

var less = function less(hljs) {
  var IDENT_RE = '[\\w-]+'; // yes, Less identifiers may begin with a digit
  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';

  /* Generic Modes */

  var RULES = [],
      VALUE = []; // forward def. for recursive modes

  var STRING_MODE = function STRING_MODE(c) {
    return {
      // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
      className: 'string', begin: '~?' + c + '.*?' + c
    };
  };

  var IDENT_MODE = function IDENT_MODE(name, begin, relevance) {
    return {
      className: name, begin: begin, relevance: relevance
    };
  };

  var PARENS_MODE = {
    // used only to properly balance nested parens inside mixin call, def. arg list
    begin: '\\(', end: '\\)', contains: VALUE, relevance: 0
  };

  // generic Less highlighter (used almost everywhere except selectors):
  VALUE.push(hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRING_MODE("'"), STRING_MODE('"'), hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(
  {
    begin: '(url|data-uri)\\(',
    starts: { className: 'string', end: '[\\)\\n]', excludeEnd: true }
  }, IDENT_MODE('number', '#[0-9A-Fa-f]+\\b'), PARENS_MODE, IDENT_MODE('variable', '@@?' + IDENT_RE, 10), IDENT_MODE('variable', '@{' + IDENT_RE + '}'), IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string
  { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
    className: 'attribute', begin: IDENT_RE + '\\s*:', end: ':', returnBegin: true, excludeEnd: true
  }, {
    className: 'meta',
    begin: '!important'
  });

  var VALUE_WITH_RULESETS = VALUE.concat({
    begin: '{', end: '}', contains: RULES
  });

  var MIXIN_GUARD_MODE = {
    beginKeywords: 'when', endsWithParent: true,
    contains: [{ beginKeywords: 'and not' }].concat(VALUE) // using this form to override VALUE’s 'function' match
  };

  /* Rule-Level Modes */

  var RULE_MODE = {
    begin: INTERP_IDENT_RE + '\\s*:', returnBegin: true, end: '[;}]',
    relevance: 0,
    contains: [{
      className: 'attribute',
      begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,
      starts: {
        endsWithParent: true, illegal: '[<=$]',
        relevance: 0,
        contains: VALUE
      }
    }]
  };

  var AT_RULE_MODE = {
    className: 'keyword',
    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b',
    starts: { end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0 }
  };

  // variable definitions and calls
  var VAR_RULE_MODE = {
    className: 'variable',
    variants: [
    // using more strict pattern for higher relevance to increase chances of Less detection.
    // this is *the only* Less specific statement used in most of the sources, so...
    // (we’ll still often loose to the css-parser unless there's '//' comment,
    // simply because 1 variable just can't beat 99 properties :)
    { begin: '@' + IDENT_RE + '\\s*:', relevance: 15 }, { begin: '@' + IDENT_RE }],
    starts: { end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS }
  };

  var SELECTOR_MODE = {
    // first parse unambiguous selectors (i.e. those not starting with tag)
    // then fall into the scary lookahead-discriminator variant.
    // this mode also handles mixin definitions and calls
    variants: [{
      begin: '[\\.#:&\\[>]', end: '[;{}]' // mixin calls end with ';'
    }, {
      begin: INTERP_IDENT_RE, end: '{'
    }],
    returnBegin: true,
    returnEnd: true,
    illegal: '[<=\'$"]',
    relevance: 0,
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, MIXIN_GUARD_MODE, IDENT_MODE('keyword', 'all\\b'), IDENT_MODE('variable', '@{' + IDENT_RE + '}'), // otherwise it’s identified as tag
    IDENT_MODE('selector-tag', INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes "tags"
    IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE), IDENT_MODE('selector-class', '\\.' + INTERP_IDENT_RE, 0), IDENT_MODE('selector-tag', '&', 0), { className: 'selector-attr', begin: '\\[', end: '\\]' }, { className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/ }, { begin: '\\(', end: '\\)', contains: VALUE_WITH_RULESETS }, // argument list of parametric mixins
    { begin: '!important' // eat !important after mixin call or it will be colored as tag
    }]
  };

  RULES.push(hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, AT_RULE_MODE, VAR_RULE_MODE, RULE_MODE, SELECTOR_MODE);

  return {
    case_insensitive: true,
    illegal: '[=>\'/<($"]',
    contains: RULES
  };
};

var lisp = function lisp(hljs) {
  var LISP_IDENT_RE = '[a-zA-Z_\\-\\+\\*\\/\\<\\=\\>\\&\\#][a-zA-Z0-9_\\-\\+\\*\\/\\<\\=\\>\\&\\#!]*';
  var MEC_RE = '\\|[^]*?\\|';
  var LISP_SIMPLE_NUMBER_RE = '(\\-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|\\-)?\\d+)?';
  var SHEBANG = {
    className: 'meta',
    begin: '^#!', end: '$'
  };
  var LITERAL = {
    className: 'literal',
    begin: '\\b(t{1}|nil)\\b'
  };
  var NUMBER = {
    className: 'number',
    variants: [{ begin: LISP_SIMPLE_NUMBER_RE, relevance: 0 }, { begin: '#(b|B)[0-1]+(/[0-1]+)?' }, { begin: '#(o|O)[0-7]+(/[0-7]+)?' }, { begin: '#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?' }, { begin: '#(c|C)\\(' + LISP_SIMPLE_NUMBER_RE + ' +' + LISP_SIMPLE_NUMBER_RE, end: '\\)' }]
  };
  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
  var COMMENT = hljs.COMMENT(';', '$', {
    relevance: 0
  });
  var VARIABLE = {
    begin: '\\*', end: '\\*'
  };
  var KEYWORD = {
    className: 'symbol',
    begin: '[:&]' + LISP_IDENT_RE
  };
  var IDENT = {
    begin: LISP_IDENT_RE,
    relevance: 0
  };
  var MEC = {
    begin: MEC_RE
  };
  var QUOTED_LIST = {
    begin: '\\(', end: '\\)',
    contains: ['self', LITERAL, STRING, NUMBER, IDENT]
  };
  var QUOTED = {
    contains: [NUMBER, STRING, VARIABLE, KEYWORD, QUOTED_LIST, IDENT],
    variants: [{
      begin: '[\'`]\\(', end: '\\)'
    }, {
      begin: '\\(quote ', end: '\\)',
      keywords: { name: 'quote' }
    }, {
      begin: '\'' + MEC_RE
    }]
  };
  var QUOTED_ATOM = {
    variants: [{ begin: '\'' + LISP_IDENT_RE }, { begin: '#\'' + LISP_IDENT_RE + '(::' + LISP_IDENT_RE + ')*' }]
  };
  var LIST = {
    begin: '\\(\\s*', end: '\\)'
  };
  var BODY = {
    endsWithParent: true,
    relevance: 0
  };
  LIST.contains = [{
    className: 'name',
    variants: [{ begin: LISP_IDENT_RE }, { begin: MEC_RE }]
  }, BODY];
  BODY.contains = [QUOTED, QUOTED_ATOM, LIST, LITERAL, NUMBER, STRING, COMMENT, VARIABLE, KEYWORD, MEC, IDENT];

  return {
    illegal: /\S/,
    contains: [NUMBER, SHEBANG, LITERAL, STRING, COMMENT, QUOTED, QUOTED_ATOM, LIST, IDENT]
  };
};

var livecodeserver = function livecodeserver(hljs) {
  var VARIABLE = {
    begin: '\\b[gtps][A-Z]+[A-Za-z0-9_\\-]*\\b|\\$_[A-Z]+',
    relevance: 0
  };
  var COMMENT_MODES = [hljs.C_BLOCK_COMMENT_MODE, hljs.HASH_COMMENT_MODE, hljs.COMMENT('--', '$'), hljs.COMMENT('[^:]//', '$')];
  var TITLE1 = hljs.inherit(hljs.TITLE_MODE, {
    variants: [{ begin: '\\b_*rig[A-Z]+[A-Za-z0-9_\\-]*' }, { begin: '\\b_[a-z0-9\\-]+' }]
  });
  var TITLE2 = hljs.inherit(hljs.TITLE_MODE, { begin: '\\b([A-Za-z0-9_\\-]+)\\b' });
  return {
    case_insensitive: false,
    keywords: {
      keyword: '$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER ' + 'codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph ' + 'after byte bytes english the until http forever descending using line real8 with seventh ' + 'for stdout finally element word words fourth before black ninth sixth characters chars stderr ' + 'uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid ' + 'at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 ' + 'int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat ' + 'end repeat URL in try into switch to words https token binfile each tenth as ticks tick ' + 'system real4 by dateItems without char character ascending eighth whole dateTime numeric short ' + 'first ftp integer abbreviated abbr abbrev private case while if ' + 'div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within ' + 'contains ends with begins the keys of keys',
      literal: 'SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE ' + 'QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO ' + 'six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five ' + 'quote empty one true return cr linefeed right backslash null seven tab three two ' + 'RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK ' + 'FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK',
      built_in: 'put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode ' + 'base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum ' + 'cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress ' + 'constantNames cos date dateFormat decompress directories ' + 'diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global ' + 'globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset ' + 'keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders ' + 'libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 ' + 'longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge millisec ' + 'millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar ' + 'numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets ' + 'paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation ' + 'populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile ' + 'revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull ' + 'revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered ' + 'revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames ' + 'revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull ' + 'revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections ' + 'revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype ' + 'revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext ' + 'revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames ' + 'revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase ' + 'revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute ' + 'revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces ' + 'revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode ' + 'revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling ' + 'revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error ' + 'revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute ' + 'revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort ' + 'revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree ' + 'revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance ' + 'sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound ' + 'stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper ' + 'transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames ' + 'variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet ' + 'xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process ' + 'combine constant convert create new alias folder directory decrypt delete variable word line folder ' + 'directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile ' + 'libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback ' + 'libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime ' + 'libURLSetStatusCallback load multiply socket prepare process post seek rel relative read from process rename ' + 'replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase ' + 'revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees ' + 'revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord ' + 'revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase ' + 'revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD ' + 'revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost ' + 'revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData ' + 'revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel ' + 'revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback ' + 'revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop ' + 'subtract union unload wait write'
    },
    contains: [VARIABLE, {
      className: 'keyword',
      begin: '\\bend\\sif\\b'
    }, {
      className: 'function',
      beginKeywords: 'function', end: '$',
      contains: [VARIABLE, TITLE2, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE, TITLE1]
    }, {
      className: 'function',
      begin: '\\bend\\s+', end: '$',
      keywords: 'end',
      contains: [TITLE2, TITLE1],
      relevance: 0
    }, {
      beginKeywords: 'command on', end: '$',
      contains: [VARIABLE, TITLE2, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE, TITLE1]
    }, {
      className: 'meta',
      variants: [{
        begin: '<\\?(rev|lc|livecode)',
        relevance: 10
      }, { begin: '<\\?' }, { begin: '\\?>' }]
    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE, TITLE1].concat(COMMENT_MODES),
    illegal: ';$|^\\[|^=|&|{'
  };
};

var livescript = function livescript(hljs) {
  var KEYWORDS = {
    keyword:
    // JS keywords
    'in if for while finally new do return else break catch instanceof throw try this ' + 'switch continue typeof delete debugger case default function var with ' +
    // LiveScript keywords
    'then unless until loop of by when and or is isnt not it that otherwise from to til fallthrough super ' + 'case default function var void const let enum export import native ' + '__hasProp __extends __slice __bind __indexOf',
    literal:
    // JS literals
    'true false null undefined ' +
    // LiveScript literals
    'yes no on off it that void',
    built_in: 'npm require console print module global window document'
  };
  var JS_IDENT_RE = '[A-Za-z$_](?:\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*';
  var TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
  var SUBST = {
    className: 'subst',
    begin: /#\{/, end: /}/,
    keywords: KEYWORDS
  };
  var SUBST_SIMPLE = {
    className: 'subst',
    begin: /#[A-Za-z$_]/, end: /(?:\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,
    keywords: KEYWORDS
  };
  var EXPRESSIONS = [hljs.BINARY_NUMBER_MODE, {
    className: 'number',
    begin: '(\\b0[xX][a-fA-F0-9_]+)|(\\b\\d(\\d|_\\d)*(\\.(\\d(\\d|_\\d)*)?)?(_*[eE]([-+]\\d(_\\d|\\d)*)?)?[_a-z]*)',
    relevance: 0,
    starts: { end: '(\\s*/)?', relevance: 0 // a number tries to eat the following slash to prevent treating it as a regexp
    } }, {
    className: 'string',
    variants: [{
      begin: /'''/, end: /'''/,
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      begin: /'/, end: /'/,
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      begin: /"""/, end: /"""/,
      contains: [hljs.BACKSLASH_ESCAPE, SUBST, SUBST_SIMPLE]
    }, {
      begin: /"/, end: /"/,
      contains: [hljs.BACKSLASH_ESCAPE, SUBST, SUBST_SIMPLE]
    }, {
      begin: /\\/, end: /(\s|$)/,
      excludeEnd: true
    }]
  }, {
    className: 'regexp',
    variants: [{
      begin: '//', end: '//[gim]*',
      contains: [SUBST, hljs.HASH_COMMENT_MODE]
    }, {
      // regex can't start with space to parse x / 2 / 3 as two divisions
      // regex can't start with *, and it supports an "illegal" in the main mode
      begin: /\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/
    }]
  }, {
    begin: '@' + JS_IDENT_RE
  }, {
    begin: '``', end: '``',
    excludeBegin: true, excludeEnd: true,
    subLanguage: 'javascript'
  }];
  SUBST.contains = EXPRESSIONS;

  var PARAMS = {
    className: 'params',
    begin: '\\(', returnBegin: true,
    /* We need another contained nameless mode to not have every nested
    pair of parens to be called "params" */
    contains: [{
      begin: /\(/, end: /\)/,
      keywords: KEYWORDS,
      contains: ['self'].concat(EXPRESSIONS)
    }]
  };

  return {
    aliases: ['ls'],
    keywords: KEYWORDS,
    illegal: /\/\*/,
    contains: EXPRESSIONS.concat([hljs.COMMENT('\\/\\*', '\\*\\/'), hljs.HASH_COMMENT_MODE, {
      className: 'function',
      contains: [TITLE, PARAMS],
      returnBegin: true,
      variants: [{
        begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?(\\(.*\\))?\\s*\\B\\->\\*?', end: '\\->\\*?'
      }, {
        begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?!?(\\(.*\\))?\\s*\\B[-~]{1,2}>\\*?', end: '[-~]{1,2}>\\*?'
      }, {
        begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?(\\(.*\\))?\\s*\\B!?[-~]{1,2}>\\*?', end: '!?[-~]{1,2}>\\*?'
      }]
    }, {
      className: 'class',
      beginKeywords: 'class',
      end: '$',
      illegal: /[:="\[\]]/,
      contains: [{
        beginKeywords: 'extends',
        endsWithParent: true,
        illegal: /[:="\[\]]/,
        contains: [TITLE]
      }, TITLE]
    }, {
      begin: JS_IDENT_RE + ':', end: ':',
      returnBegin: true, returnEnd: true,
      relevance: 0
    }])
  };
};

var llvm = function llvm(hljs) {
  var identifier = '([-a-zA-Z$._][\\w\\-$.]*)';
  return {
    //lexemes: '[.%]?' + hljs.IDENT_RE,
    keywords: 'begin end true false declare define global ' + 'constant private linker_private internal ' + 'available_externally linkonce linkonce_odr weak ' + 'weak_odr appending dllimport dllexport common ' + 'default hidden protected extern_weak external ' + 'thread_local zeroinitializer undef null to tail ' + 'target triple datalayout volatile nuw nsw nnan ' + 'ninf nsz arcp fast exact inbounds align ' + 'addrspace section alias module asm sideeffect ' + 'gc dbg linker_private_weak attributes blockaddress ' + 'initialexec localdynamic localexec prefix unnamed_addr ' + 'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc ' + 'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ' + 'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func ' + 'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc ' + 'cc c signext zeroext inreg sret nounwind ' + 'noreturn noalias nocapture byval nest readnone ' + 'readonly inlinehint noinline alwaysinline optsize ssp ' + 'sspreq noredzone noimplicitfloat naked builtin cold ' + 'nobuiltin noduplicate nonlazybind optnone returns_twice ' + 'sanitize_address sanitize_memory sanitize_thread sspstrong ' + 'uwtable returned type opaque eq ne slt sgt ' + 'sle sge ult ugt ule uge oeq one olt ogt ' + 'ole oge ord uno ueq une x acq_rel acquire ' + 'alignstack atomic catch cleanup filter inteldialect ' + 'max min monotonic nand personality release seq_cst ' + 'singlethread umax umin unordered xchg add fadd ' + 'sub fsub mul fmul udiv sdiv fdiv urem srem ' + 'frem shl lshr ashr and or xor icmp fcmp ' + 'phi call trunc zext sext fptrunc fpext uitofp ' + 'sitofp fptoui fptosi inttoptr ptrtoint bitcast ' + 'addrspacecast select va_arg ret br switch invoke ' + 'unwind unreachable indirectbr landingpad resume ' + 'malloc alloca free load store getelementptr ' + 'extractelement insertelement shufflevector getresult ' + 'extractvalue insertvalue atomicrmw cmpxchg fence ' + 'argmemonly double',
    contains: [{
      className: 'keyword',
      begin: 'i\\d+'
    }, hljs.COMMENT(';', '\\n', { relevance: 0 }),
    // Double quote string
    hljs.QUOTE_STRING_MODE, {
      className: 'string',
      variants: [
      // Double-quoted string
      { begin: '"', end: '[^\\\\]"' }],
      relevance: 0
    }, {
      className: 'title',
      variants: [{ begin: '@' + identifier }, { begin: '@\\d+' }, { begin: '!' + identifier }, { begin: '!\\d+' + identifier }]
    }, {
      className: 'symbol',
      variants: [{ begin: '%' + identifier }, { begin: '%\\d+' }, { begin: '#\\d+' }]
    }, {
      className: 'number',
      variants: [{ begin: '0[xX][a-fA-F0-9]+' }, { begin: '-?\\d+(?:[.]\\d+)?(?:[eE][-+]?\\d+(?:[.]\\d+)?)?' }],
      relevance: 0
    }]
  };
};

var lsl = function lsl(hljs) {

    var LSL_STRING_ESCAPE_CHARS = {
        className: 'subst',
        begin: /\\[tn"\\]/
    };

    var LSL_STRINGS = {
        className: 'string',
        begin: '"',
        end: '"',
        contains: [LSL_STRING_ESCAPE_CHARS]
    };

    var LSL_NUMBERS = {
        className: 'number',
        begin: hljs.C_NUMBER_RE
    };

    var LSL_CONSTANTS = {
        className: 'literal',
        variants: [{
            begin: '\\b(?:PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\b'
        }, {
            begin: '\\b(?:XP_ERROR_(?:EXPERIENCES_DISABLED|EXPERIENCE_(?:DISABLED|SUSPENDED)|INVALID_(?:EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(?:FOUND|PERMITTED(?:_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(?:PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(?:_OBJECT)?|(?:DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(?:FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(?:_(?:BY_(?:LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(?:PARCEL(?:_OWNER)?|REGION)))?|CAMERA_(?:PITCH|DISTANCE|BEHINDNESS_(?:ANGLE|LAG)|(?:FOCUS|POSITION)(?:_(?:THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(?:ROOT|SET|ALL_(?:OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(?:IVE|_(?:ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(?:FWD|BACK|(?:ROT_)?(?:LEFT|RIGHT)|UP|DOWN|(?:ML_)?LBUTTON)|PERMISSION_(?:RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(?:CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(?:TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(?:INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(?:_START)?|TELEPORT|MEDIA)|OBJECT_(?:CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(?:PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_ON_REZ|NAME|DESC|POS|PRIM_(?:COUNT|EQUIVALENCE)|RETURN_(?:PARCEL(?:_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP|CREATOR|ATTACHED_POINT|RENDER_WEIGHT|(?:BODY_SHAPE|PATHFINDING)_TYPE|(?:RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(?:MEMORY|TIME))|TYPE_(?:INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(?:DEBUG|PUBLIC)_CHANNEL|ATTACH_(?:AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](?:SHOULDER|HAND|FOOT|EAR|EYE|[UL](?:ARM|LEG)|HIP)|(?:LEFT|RIGHT)_PEC|HUD_(?:CENTER_[12]|TOP_(?:RIGHT|CENTER|LEFT)|BOTTOM(?:_(?:RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(?:BASE|TIP)|[LR]WING|FACE_(?:JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(?:LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(?:ONLINE|NAME|BORN|SIM_(?:POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(?:ON_FILE|USED)|REMOTE_DATA_(?:CHANNEL|REQUEST|REPLY)|PSYS_(?:PART_(?:BF_(?:ZERO|ONE(?:_MINUS_(?:DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(?:START|END)_(?:COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(?:RIBBON|WIND|INTERP_(?:COLOR|SCALE)|BOUNCE|FOLLOW_(?:SRC|VELOCITY)|TARGET_(?:POS|LINEAR)|EMISSIVE)_MASK)|SRC_(?:MAX_AGE|PATTERN|ANGLE_(?:BEGIN|END)|BURST_(?:RATE|PART_COUNT|RADIUS|SPEED_(?:MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(?:DROP|EXPLODE|ANGLE(?:_CONE(?:_EMPTY)?)?)))|VEHICLE_(?:REFERENCE_FRAME|TYPE_(?:NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(?:LINEAR|ANGULAR)_(?:FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(?:HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(?:LINEAR|ANGULAR)_(?:DEFLECTION_(?:EFFICIENCY|TIMESCALE)|MOTOR_(?:DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(?:EFFICIENCY|TIMESCALE)|BANKING_(?:EFFICIENCY|MIX|TIMESCALE)|FLAG_(?:NO_DEFLECTION_UP|LIMIT_(?:ROLL_ONLY|MOTOR_UP)|HOVER_(?:(?:WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(?:STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(?:ALPHA_MODE(?:_(?:BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(?:_(?:BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(?:DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(?:_(?:STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(?:NONE|LOW|MEDIUM|HIGH)|BUMP_(?:NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(?:DEFAULT|PLANAR)|SCULPT_(?:TYPE_(?:SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(?:MIRROR|INVERT))|PHYSICS(?:_(?:SHAPE_(?:CONVEX|NONE|PRIM|TYPE)))?|(?:POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(?:ALT_IMAGE_ENABLE|CONTROLS|(?:CURRENT|HOME)_URL|AUTO_(?:LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(?:WIDTH|HEIGHT)_PIXELS|WHITELIST(?:_ENABLE)?|PERMS_(?:INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(?:STANDARD|MINI)|PERM_(?:NONE|OWNER|GROUP|ANYONE)|MAX_(?:URL_LENGTH|WHITELIST_(?:SIZE|COUNT)|(?:WIDTH|HEIGHT)_PIXELS)))|MASK_(?:BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(?:TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(?:MEDIA_COMMAND_(?:STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(?:ALLOW_(?:FLY|(?:GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(?:GROUP_)?OBJECTS)|USE_(?:ACCESS_(?:GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(?:GROUP|ALL)_OBJECT_ENTRY)|COUNT_(?:TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(?:NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(?:MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(?:_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(?:HIDE|DEFAULT)|REGION_FLAG_(?:ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(?:COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(?:METHOD|MIMETYPE|BODY_(?:MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|STRING_(?:TRIM(?:_(?:HEAD|TAIL))?)|CLICK_ACTION_(?:NONE|TOUCH|SIT|BUY|PAY|OPEN(?:_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(?:NONE|SCRIPT_MEMORY)|RC_(?:DATA_FLAGS|DETECT_PHANTOM|GET_(?:LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(?:TYPES|AGENTS|(?:NON)?PHYSICAL|LAND))|RCERR_(?:CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(?:ALLOWED_(?:AGENT|GROUP)_(?:ADD|REMOVE)|BANNED_AGENT_(?:ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(?:COMMAND|CMD_(?:PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(?:GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(?:CMD_(?:(?:SMOOTH_)?STOP|JUMP)|DESIRED_(?:TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(?:_(?:[ABCD]|NONE))?|MAX_(?:DECEL|TURN_RADIUS|(?:ACCEL|SPEED)))|PURSUIT_(?:OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(?:CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(?:EVADE_(?:HIDDEN|SPOTTED)|FAILURE_(?:DYNAMIC_PATHFINDING_DISABLED|INVALID_(?:GOAL|START)|NO_(?:NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(?:PARCEL_)?UNREACHABLE)|(?:GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(?:_(?:FAST|NONE|SLOW))?|CONTENT_TYPE_(?:ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(?:RADIUS|STATIC)|(?:PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(?:AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b'
        }, {
            begin: '\\b(?:FALSE|TRUE)\\b'
        }, {
            begin: '\\b(?:ZERO_ROTATION)\\b'
        }, {
            begin: '\\b(?:EOF|JSON_(?:ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(?:BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(?:GRANTED|DENIED))\\b'
        }, {
            begin: '\\b(?:ZERO_VECTOR|TOUCH_INVALID_(?:TEXCOORD|VECTOR))\\b'
        }]
    };

    var LSL_FUNCTIONS = {
        className: 'built_in',
        begin: '\\b(?:ll(?:AgentInExperience|(?:Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(?:Details|ErrorMessage)|ReturnObjectsBy(?:ID|Owner)|Json(?:2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(?:Mag|Norm|Dist)|Rot(?:Between|2(?:Euler|Fwd|Left|Up))|(?:Euler|Axes)2Rot|Whisper|(?:Region|Owner)?Say|Shout|Listen(?:Control|Remove)?|Sensor(?:Repeat|Remove)?|Detected(?:Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|(?:[GS]et)(?:AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(?:Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(?:Scale|Offset|Rotate)Texture|(?:Rot)?Target(?:Remove)?|(?:Stop)?MoveToTarget|Apply(?:Rotational)?Impulse|Set(?:KeyframedMotion|ContentType|RegionPos|(?:Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(?:Queueing|Radius)|Vehicle(?:Type|(?:Float|Vector|Rotation)Param)|(?:Touch|Sit)?Text|Camera(?:Eye|At)Offset|PrimitiveParams|ClickAction|Link(?:Alpha|Color|PrimitiveParams(?:Fast)?|Texture(?:Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get(?:(?:Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(?:PrimitiveParams|Number(?:OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(?:Details|PermMask|PrimCount)|Parcel(?:MaxPrims|Details|Prim(?:Count|Owners))|Attached(?:List)?|(?:SPMax|Free|Used)Memory|Region(?:Name|TimeDilation|FPS|Corner|AgentCount)|Root(?:Position|Rotation)|UnixTime|(?:Parcel|Region)Flags|(?:Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(?:Prims|NotecardLines|Sides)|Animation(?:List)?|(?:Camera|Local)(?:Pos|Rot)|Vel|Accel|Omega|Time(?:stamp|OfDay)|(?:Object|CenterOf)?Mass|MassMKS|Energy|Owner|(?:Owner)?Key|SunDirection|Texture(?:Offset|Scale|Rot)|Inventory(?:Number|Name|Key|Type|Creator|PermMask)|Permissions(?:Key)?|StartParameter|List(?:Length|EntryType)|Date|Agent(?:Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(?:Name|State))|(?:Get|Reset|GetAndReset)Time|PlaySound(?:Slave)?|LoopSound(?:Master|Slave)?|(?:Trigger|Stop|Preload)Sound|(?:(?:Get|Delete)Sub|Insert)String|To(?:Upper|Lower)|Give(?:InventoryList|Money)|RezObject|(?:Stop)?LookAt|Sleep|CollisionFilter|(?:Take|Release)Controls|DetachFromAvatar|AttachToAvatar(?:Temp)?|InstantMessage|(?:GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(?:Length|Trim)|(?:Start|Stop)Animation|TargetOmega|Request(?:Experience)?Permissions|(?:Create|Break)Link|BreakAllLinks|(?:Give|Remove)Inventory|Water|PassTouches|Request(?:Agent|Inventory)Data|TeleportAgent(?:Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(?:Axis|Angle)|A(?:cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(?:CSV|Integer|Json|Float|String|Key|Vector|Rot|List(?:Strided)?)|DeleteSubList|List(?:Statistics|Sort|Randomize|(?:Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(?:CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(?:Slope|Normal|Contour)|GroundRepel|(?:Set|Remove)VehicleFlags|(?:AvatarOn)?(?:Link)?SitTarget|Script(?:Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(?:Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(?:Integer|String)ToBase64|XorBase64|Log(?:10)?|Base64To(?:String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(?:Load|Release|(?:E|Une)scape)URL|ParcelMedia(?:CommandList|Query)|ModPow|MapDestination|(?:RemoveFrom|AddTo|Reset)Land(?:Pass|Ban)List|(?:Set|Clear)CameraParams|HTTP(?:Request|Response)|TextBox|DetectedTouch(?:UV|Face|Pos|(?:N|Bin)ormal|ST)|(?:MD5|SHA1|DumpList2)String|Request(?:Secure)?URL|Clear(?:Prim|Link)Media|(?:Link)?ParticleSystem|(?:Get|Request)(?:Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(?:Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b'
    };

    return {
        illegal: ':',
        contains: [LSL_STRINGS, {
            className: 'comment',
            variants: [hljs.COMMENT('//', '$'), hljs.COMMENT('/\\*', '\\*/')]
        }, LSL_NUMBERS, {
            className: 'section',
            variants: [{
                begin: '\\b(?:state|default)\\b'
            }, {
                begin: '\\b(?:state_(?:entry|exit)|touch(?:_(?:start|end))?|(?:land_)?collision(?:_(?:start|end))?|timer|listen|(?:no_)?sensor|control|(?:not_)?at_(?:rot_)?target|money|email|experience_permissions(?:_denied)?|run_time_permissions|changed|attach|dataserver|moving_(?:start|end)|link_message|(?:on|object)_rez|remote_data|http_re(?:sponse|quest)|path_update|transaction_result)\\b'
            }]
        }, LSL_FUNCTIONS, LSL_CONSTANTS, {
            className: 'type',
            begin: '\\b(?:integer|float|string|key|vector|quaternion|rotation|list)\\b'
        }]
    };
};

var lua = function lua(hljs) {
  var OPENING_LONG_BRACKET = '\\[=*\\[';
  var CLOSING_LONG_BRACKET = '\\]=*\\]';
  var LONG_BRACKETS = {
    begin: OPENING_LONG_BRACKET, end: CLOSING_LONG_BRACKET,
    contains: ['self']
  };
  var COMMENTS = [hljs.COMMENT('--(?!' + OPENING_LONG_BRACKET + ')', '$'), hljs.COMMENT('--' + OPENING_LONG_BRACKET, CLOSING_LONG_BRACKET, {
    contains: [LONG_BRACKETS],
    relevance: 10
  })];
  return {
    lexemes: hljs.UNDERSCORE_IDENT_RE,
    keywords: {
      literal: "true false nil",
      keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
      built_in:
      //Metatags and globals:
      '_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len ' + '__gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert ' +
      //Standard methods and properties:
      'collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring' + 'module next pairs pcall print rawequal rawget rawset require select setfenv' + 'setmetatable tonumber tostring type unpack xpcall arg self' +
      //Library methods and properties (one line per library):
      'coroutine resume yield status wrap create running debug getupvalue ' + 'debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv ' + 'io lines write close flush open output type read stderr stdin input stdout popen tmpfile ' + 'math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan ' + 'os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall ' + 'string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower ' + 'table setn insert getn foreachi maxn foreach concat sort remove'
    },
    contains: COMMENTS.concat([{
      className: 'function',
      beginKeywords: 'function', end: '\\)',
      contains: [hljs.inherit(hljs.TITLE_MODE, { begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*' }), {
        className: 'params',
        begin: '\\(', endsWithParent: true,
        contains: COMMENTS
      }].concat(COMMENTS)
    }, hljs.C_NUMBER_MODE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, {
      className: 'string',
      begin: OPENING_LONG_BRACKET, end: CLOSING_LONG_BRACKET,
      contains: [LONG_BRACKETS],
      relevance: 5
    }])
  };
};

var makefile = function makefile(hljs) {
  /* Variables: simple (eg $(var)) and special (eg $@) */
  var VARIABLE = {
    className: 'variable',
    variants: [{
      begin: '\\$\\(' + hljs.UNDERSCORE_IDENT_RE + '\\)',
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      begin: /\$[@%<?\^\+\*]/
    }]
  };
  /* Quoted string with variables inside */
  var QUOTE_STRING = {
    className: 'string',
    begin: /"/, end: /"/,
    contains: [hljs.BACKSLASH_ESCAPE, VARIABLE]
  };
  /* Function: $(func arg,...) */
  var FUNC = {
    className: 'variable',
    begin: /\$\([\w-]+\s/, end: /\)/,
    keywords: {
      built_in: 'subst patsubst strip findstring filter filter-out sort ' + 'word wordlist firstword lastword dir notdir suffix basename ' + 'addsuffix addprefix join wildcard realpath abspath error warning ' + 'shell origin flavor foreach if or and call eval file value'
    },
    contains: [VARIABLE]
  };
  /* Variable assignment */
  var VAR_ASSIG = {
    begin: '^' + hljs.UNDERSCORE_IDENT_RE + '\\s*[:+?]?=',
    illegal: '\\n',
    returnBegin: true,
    contains: [{
      begin: '^' + hljs.UNDERSCORE_IDENT_RE, end: '[:+?]?=',
      excludeEnd: true
    }]
  };
  /* Meta targets (.PHONY) */
  var META = {
    className: 'meta',
    begin: /^\.PHONY:/, end: /$/,
    keywords: { 'meta-keyword': '.PHONY' },
    lexemes: /[\.\w]+/
  };
  /* Targets */
  var TARGET = {
    className: 'section',
    begin: /^[^\s]+:/, end: /$/,
    contains: [VARIABLE]
  };
  return {
    aliases: ['mk', 'mak'],
    keywords: 'define endef undefine ifdef ifndef ifeq ifneq else endif ' + 'include -include sinclude override export unexport private vpath',
    lexemes: /[\w-]+/,
    contains: [hljs.HASH_COMMENT_MODE, VARIABLE, QUOTE_STRING, FUNC, VAR_ASSIG, META, TARGET]
  };
};

var mathematica = function mathematica(hljs) {
  return {
    aliases: ['mma'],
    lexemes: '(\\$|\\b)' + hljs.IDENT_RE + '\\b',
    keywords: 'AbelianGroup Abort AbortKernels AbortProtect Above Abs Absolute AbsoluteCorrelation AbsoluteCorrelationFunction AbsoluteCurrentValue AbsoluteDashing AbsoluteFileName AbsoluteOptions AbsolutePointSize AbsoluteThickness AbsoluteTime AbsoluteTiming AccountingForm Accumulate Accuracy AccuracyGoal ActionDelay ActionMenu ActionMenuBox ActionMenuBoxOptions Active ActiveItem ActiveStyle AcyclicGraphQ AddOnHelpPath AddTo AdjacencyGraph AdjacencyList AdjacencyMatrix AdjustmentBox AdjustmentBoxOptions AdjustTimeSeriesForecast AffineTransform After AiryAi AiryAiPrime AiryAiZero AiryBi AiryBiPrime AiryBiZero AlgebraicIntegerQ AlgebraicNumber AlgebraicNumberDenominator AlgebraicNumberNorm AlgebraicNumberPolynomial AlgebraicNumberTrace AlgebraicRules AlgebraicRulesData Algebraics AlgebraicUnitQ Alignment AlignmentMarker AlignmentPoint All AllowedDimensions AllowGroupClose AllowInlineCells AllowKernelInitialization AllowReverseGroupClose AllowScriptLevelChange AlphaChannel AlternatingGroup AlternativeHypothesis Alternatives AmbientLight Analytic AnchoredSearch And AndersonDarlingTest AngerJ AngleBracket AngularGauge Animate AnimationCycleOffset AnimationCycleRepetitions AnimationDirection AnimationDisplayTime AnimationRate AnimationRepetitions AnimationRunning Animator AnimatorBox AnimatorBoxOptions AnimatorElements Annotation Annuity AnnuityDue Antialiasing Antisymmetric Apart ApartSquareFree Appearance AppearanceElements AppellF1 Append AppendTo Apply ArcCos ArcCosh ArcCot ArcCoth ArcCsc ArcCsch ArcSec ArcSech ArcSin ArcSinDistribution ArcSinh ArcTan ArcTanh Arg ArgMax ArgMin ArgumentCountQ ARIMAProcess ArithmeticGeometricMean ARMAProcess ARProcess Array ArrayComponents ArrayDepth ArrayFlatten ArrayPad ArrayPlot ArrayQ ArrayReshape ArrayRules Arrays Arrow Arrow3DBox ArrowBox Arrowheads AspectRatio AspectRatioFixed Assert Assuming Assumptions AstronomicalData Asynchronous AsynchronousTaskObject AsynchronousTasks AtomQ Attributes AugmentedSymmetricPolynomial AutoAction AutoDelete AutoEvaluateEvents AutoGeneratedPackage AutoIndent AutoIndentSpacings AutoItalicWords AutoloadPath AutoMatch Automatic AutomaticImageSize AutoMultiplicationSymbol AutoNumberFormatting AutoOpenNotebooks AutoOpenPalettes AutorunSequencing AutoScaling AutoScroll AutoSpacing AutoStyleOptions AutoStyleWords Axes AxesEdge AxesLabel AxesOrigin AxesStyle Axis ' + 'BabyMonsterGroupB Back Background BackgroundTasksSettings Backslash Backsubstitution Backward Band BandpassFilter BandstopFilter BarabasiAlbertGraphDistribution BarChart BarChart3D BarLegend BarlowProschanImportance BarnesG BarOrigin BarSpacing BartlettHannWindow BartlettWindow BaseForm Baseline BaselinePosition BaseStyle BatesDistribution BattleLemarieWavelet Because BeckmannDistribution Beep Before Begin BeginDialogPacket BeginFrontEndInteractionPacket BeginPackage BellB BellY Below BenfordDistribution BeniniDistribution BenktanderGibratDistribution BenktanderWeibullDistribution BernoulliB BernoulliDistribution BernoulliGraphDistribution BernoulliProcess BernsteinBasis BesselFilterModel BesselI BesselJ BesselJZero BesselK BesselY BesselYZero Beta BetaBinomialDistribution BetaDistribution BetaNegativeBinomialDistribution BetaPrimeDistribution BetaRegularized BetweennessCentrality BezierCurve BezierCurve3DBox BezierCurve3DBoxOptions BezierCurveBox BezierCurveBoxOptions BezierFunction BilateralFilter Binarize BinaryFormat BinaryImageQ BinaryRead BinaryReadList BinaryWrite BinCounts BinLists Binomial BinomialDistribution BinomialProcess BinormalDistribution BiorthogonalSplineWavelet BipartiteGraphQ BirnbaumImportance BirnbaumSaundersDistribution BitAnd BitClear BitGet BitLength BitNot BitOr BitSet BitShiftLeft BitShiftRight BitXor Black BlackmanHarrisWindow BlackmanNuttallWindow BlackmanWindow Blank BlankForm BlankNullSequence BlankSequence Blend Block BlockRandom BlomqvistBeta BlomqvistBetaTest Blue Blur BodePlot BohmanWindow Bold Bookmarks Boole BooleanConsecutiveFunction BooleanConvert BooleanCountingFunction BooleanFunction BooleanGraph BooleanMaxterms BooleanMinimize BooleanMinterms Booleans BooleanTable BooleanVariables BorderDimensions BorelTannerDistribution Bottom BottomHatTransform BoundaryStyle Bounds Box BoxBaselineShift BoxData BoxDimensions Boxed Boxes BoxForm BoxFormFormatTypes BoxFrame BoxID BoxMargins BoxMatrix BoxRatios BoxRotation BoxRotationPoint BoxStyle BoxWhiskerChart Bra BracketingBar BraKet BrayCurtisDistance BreadthFirstScan Break Brown BrownForsytheTest BrownianBridgeProcess BrowserCategory BSplineBasis BSplineCurve BSplineCurve3DBox BSplineCurveBox BSplineCurveBoxOptions BSplineFunction BSplineSurface BSplineSurface3DBox BubbleChart BubbleChart3D BubbleScale BubbleSizes BulletGauge BusinessDayQ ButterflyGraph ButterworthFilterModel Button ButtonBar ButtonBox ButtonBoxOptions ButtonCell ButtonContents ButtonData ButtonEvaluator ButtonExpandable ButtonFrame ButtonFunction ButtonMargins ButtonMinHeight ButtonNote ButtonNotebook ButtonSource ButtonStyle ButtonStyleMenuListing Byte ByteCount ByteOrdering ' + 'C CachedValue CacheGraphics CalendarData CalendarType CallPacket CanberraDistance Cancel CancelButton CandlestickChart Cap CapForm CapitalDifferentialD CardinalBSplineBasis CarmichaelLambda Cases Cashflow Casoratian Catalan CatalanNumber Catch CauchyDistribution CauchyWindow CayleyGraph CDF CDFDeploy CDFInformation CDFWavelet Ceiling Cell CellAutoOverwrite CellBaseline CellBoundingBox CellBracketOptions CellChangeTimes CellContents CellContext CellDingbat CellDynamicExpression CellEditDuplicate CellElementsBoundingBox CellElementSpacings CellEpilog CellEvaluationDuplicate CellEvaluationFunction CellEventActions CellFrame CellFrameColor CellFrameLabelMargins CellFrameLabels CellFrameMargins CellGroup CellGroupData CellGrouping CellGroupingRules CellHorizontalScrolling CellID CellLabel CellLabelAutoDelete CellLabelMargins CellLabelPositioning CellMargins CellObject CellOpen CellPrint CellProlog Cells CellSize CellStyle CellTags CellularAutomaton CensoredDistribution Censoring Center CenterDot CentralMoment CentralMomentGeneratingFunction CForm ChampernowneNumber ChanVeseBinarize Character CharacterEncoding CharacterEncodingsPath CharacteristicFunction CharacteristicPolynomial CharacterRange Characters ChartBaseStyle ChartElementData ChartElementDataFunction ChartElementFunction ChartElements ChartLabels ChartLayout ChartLegends ChartStyle Chebyshev1FilterModel Chebyshev2FilterModel ChebyshevDistance ChebyshevT ChebyshevU Check CheckAbort CheckAll Checkbox CheckboxBar CheckboxBox CheckboxBoxOptions ChemicalData ChessboardDistance ChiDistribution ChineseRemainder ChiSquareDistribution ChoiceButtons ChoiceDialog CholeskyDecomposition Chop Circle CircleBox CircleDot CircleMinus CirclePlus CircleTimes CirculantGraph CityData Clear ClearAll ClearAttributes ClearSystemCache ClebschGordan ClickPane Clip ClipboardNotebook ClipFill ClippingStyle ClipPlanes ClipRange Clock ClockGauge ClockwiseContourIntegral Close Closed CloseKernels ClosenessCentrality Closing ClosingAutoSave ClosingEvent ClusteringComponents CMYKColor Coarse Coefficient CoefficientArrays CoefficientDomain CoefficientList CoefficientRules CoifletWavelet Collect Colon ColonForm ColorCombine ColorConvert ColorData ColorDataFunction ColorFunction ColorFunctionScaling Colorize ColorNegate ColorOutput ColorProfileData ColorQuantize ColorReplace ColorRules ColorSelectorSettings ColorSeparate ColorSetter ColorSetterBox ColorSetterBoxOptions ColorSlider ColorSpace Column ColumnAlignments ColumnBackgrounds ColumnForm ColumnLines ColumnsEqual ColumnSpacings ColumnWidths CommonDefaultFormatTypes Commonest CommonestFilter CommonUnits CommunityBoundaryStyle CommunityGraphPlot CommunityLabels CommunityRegionStyle CompatibleUnitQ CompilationOptions CompilationTarget Compile Compiled CompiledFunction Complement CompleteGraph CompleteGraphQ CompleteKaryTree CompletionsListPacket Complex Complexes ComplexExpand ComplexInfinity ComplexityFunction ComponentMeasurements ' + 'ComponentwiseContextMenu Compose ComposeList ComposeSeries Composition CompoundExpression CompoundPoissonDistribution CompoundPoissonProcess CompoundRenewalProcess Compress CompressedData Condition ConditionalExpression Conditioned Cone ConeBox ConfidenceLevel ConfidenceRange ConfidenceTransform ConfigurationPath Congruent Conjugate ConjugateTranspose Conjunction Connect ConnectedComponents ConnectedGraphQ ConnesWindow ConoverTest ConsoleMessage ConsoleMessagePacket ConsolePrint Constant ConstantArray Constants ConstrainedMax ConstrainedMin ContentPadding ContentsBoundingBox ContentSelectable ContentSize Context ContextMenu Contexts ContextToFilename ContextToFileName Continuation Continue ContinuedFraction ContinuedFractionK ContinuousAction ContinuousMarkovProcess ContinuousTimeModelQ ContinuousWaveletData ContinuousWaveletTransform ContourDetect ContourGraphics ContourIntegral ContourLabels ContourLines ContourPlot ContourPlot3D Contours ContourShading ContourSmoothing ContourStyle ContraharmonicMean Control ControlActive ControlAlignment ControllabilityGramian ControllabilityMatrix ControllableDecomposition ControllableModelQ ControllerDuration ControllerInformation ControllerInformationData ControllerLinking ControllerManipulate ControllerMethod ControllerPath ControllerState ControlPlacement ControlsRendering ControlType Convergents ConversionOptions ConversionRules ConvertToBitmapPacket ConvertToPostScript ConvertToPostScriptPacket Convolve ConwayGroupCo1 ConwayGroupCo2 ConwayGroupCo3 CoordinateChartData CoordinatesToolOptions CoordinateTransform CoordinateTransformData CoprimeQ Coproduct CopulaDistribution Copyable CopyDirectory CopyFile CopyTag CopyToClipboard CornerFilter CornerNeighbors Correlation CorrelationDistance CorrelationFunction CorrelationTest Cos Cosh CoshIntegral CosineDistance CosineWindow CosIntegral Cot Coth Count CounterAssignments CounterBox CounterBoxOptions CounterClockwiseContourIntegral CounterEvaluator CounterFunction CounterIncrements CounterStyle CounterStyleMenuListing CountRoots CountryData Covariance CovarianceEstimatorFunction CovarianceFunction CoxianDistribution CoxIngersollRossProcess CoxModel CoxModelFit CramerVonMisesTest CreateArchive CreateDialog CreateDirectory CreateDocument CreateIntermediateDirectories CreatePalette CreatePalettePacket CreateScheduledTask CreateTemporary CreateWindow CriticalityFailureImportance CriticalitySuccessImportance CriticalSection Cross CrossingDetect CrossMatrix Csc Csch CubeRoot Cubics Cuboid CuboidBox Cumulant CumulantGeneratingFunction Cup CupCap Curl CurlyDoubleQuote CurlyQuote CurrentImage CurrentlySpeakingPacket CurrentValue CurvatureFlowFilter CurveClosed Cyan CycleGraph CycleIndexPolynomial Cycles CyclicGroup Cyclotomic Cylinder CylinderBox CylindricalDecomposition ' + 'D DagumDistribution DamerauLevenshteinDistance DampingFactor Darker Dashed Dashing DataCompression DataDistribution DataRange DataReversed Date DateDelimiters DateDifference DateFunction DateList DateListLogPlot DateListPlot DatePattern DatePlus DateRange DateString DateTicksFormat DaubechiesWavelet DavisDistribution DawsonF DayCount DayCountConvention DayMatchQ DayName DayPlus DayRange DayRound DeBruijnGraph Debug DebugTag Decimal DeclareKnownSymbols DeclarePackage Decompose Decrement DedekindEta Default DefaultAxesStyle DefaultBaseStyle DefaultBoxStyle DefaultButton DefaultColor DefaultControlPlacement DefaultDuplicateCellStyle DefaultDuration DefaultElement DefaultFaceGridsStyle DefaultFieldHintStyle DefaultFont DefaultFontProperties DefaultFormatType DefaultFormatTypeForStyle DefaultFrameStyle DefaultFrameTicksStyle DefaultGridLinesStyle DefaultInlineFormatType DefaultInputFormatType DefaultLabelStyle DefaultMenuStyle DefaultNaturalLanguage DefaultNewCellStyle DefaultNewInlineCellStyle DefaultNotebook DefaultOptions DefaultOutputFormatType DefaultStyle DefaultStyleDefinitions DefaultTextFormatType DefaultTextInlineFormatType DefaultTicksStyle DefaultTooltipStyle DefaultValues Defer DefineExternal DefineInputStreamMethod DefineOutputStreamMethod Definition Degree DegreeCentrality DegreeGraphDistribution DegreeLexicographic DegreeReverseLexicographic Deinitialization Del Deletable Delete DeleteBorderComponents DeleteCases DeleteContents DeleteDirectory DeleteDuplicates DeleteFile DeleteSmallComponents DeleteWithContents DeletionWarning Delimiter DelimiterFlashTime DelimiterMatching Delimiters Denominator DensityGraphics DensityHistogram DensityPlot DependentVariables Deploy Deployed Depth DepthFirstScan Derivative DerivativeFilter DescriptorStateSpace DesignMatrix Det DGaussianWavelet DiacriticalPositioning Diagonal DiagonalMatrix Dialog DialogIndent DialogInput DialogLevel DialogNotebook DialogProlog DialogReturn DialogSymbols Diamond DiamondMatrix DiceDissimilarity DictionaryLookup DifferenceDelta DifferenceOrder DifferenceRoot DifferenceRootReduce Differences DifferentialD DifferentialRoot DifferentialRootReduce DifferentiatorFilter DigitBlock DigitBlockMinimum DigitCharacter DigitCount DigitQ DihedralGroup Dilation Dimensions DiracComb DiracDelta DirectedEdge DirectedEdges DirectedGraph DirectedGraphQ DirectedInfinity Direction Directive Directory DirectoryName DirectoryQ DirectoryStack DirichletCharacter DirichletConvolve DirichletDistribution DirichletL DirichletTransform DirichletWindow DisableConsolePrintPacket DiscreteChirpZTransform DiscreteConvolve DiscreteDelta DiscreteHadamardTransform DiscreteIndicator DiscreteLQEstimatorGains DiscreteLQRegulatorGains DiscreteLyapunovSolve DiscreteMarkovProcess DiscretePlot DiscretePlot3D DiscreteRatio DiscreteRiccatiSolve DiscreteShift DiscreteTimeModelQ DiscreteUniformDistribution DiscreteVariables DiscreteWaveletData DiscreteWaveletPacketTransform ' + 'DiscreteWaveletTransform Discriminant Disjunction Disk DiskBox DiskMatrix Dispatch DispersionEstimatorFunction Display DisplayAllSteps DisplayEndPacket DisplayFlushImagePacket DisplayForm DisplayFunction DisplayPacket DisplayRules DisplaySetSizePacket DisplayString DisplayTemporary DisplayWith DisplayWithRef DisplayWithVariable DistanceFunction DistanceTransform Distribute Distributed DistributedContexts DistributeDefinitions DistributionChart DistributionDomain DistributionFitTest DistributionParameterAssumptions DistributionParameterQ Dithering Div Divergence Divide DivideBy Dividers Divisible Divisors DivisorSigma DivisorSum DMSList DMSString Do DockedCells DocumentNotebook DominantColors DOSTextFormat Dot DotDashed DotEqual Dotted DoubleBracketingBar DoubleContourIntegral DoubleDownArrow DoubleLeftArrow DoubleLeftRightArrow DoubleLeftTee DoubleLongLeftArrow DoubleLongLeftRightArrow DoubleLongRightArrow DoubleRightArrow DoubleRightTee DoubleUpArrow DoubleUpDownArrow DoubleVerticalBar DoublyInfinite Down DownArrow DownArrowBar DownArrowUpArrow DownLeftRightVector DownLeftTeeVector DownLeftVector DownLeftVectorBar DownRightTeeVector DownRightVector DownRightVectorBar Downsample DownTee DownTeeArrow DownValues DragAndDrop DrawEdges DrawFrontFaces DrawHighlighted Drop DSolve Dt DualLinearProgramming DualSystemsModel DumpGet DumpSave DuplicateFreeQ Dynamic DynamicBox DynamicBoxOptions DynamicEvaluationTimeout DynamicLocation DynamicModule DynamicModuleBox DynamicModuleBoxOptions DynamicModuleParent DynamicModuleValues DynamicName DynamicNamespace DynamicReference DynamicSetting DynamicUpdating DynamicWrapper DynamicWrapperBox DynamicWrapperBoxOptions ' + 'E EccentricityCentrality EdgeAdd EdgeBetweennessCentrality EdgeCapacity EdgeCapForm EdgeColor EdgeConnectivity EdgeCost EdgeCount EdgeCoverQ EdgeDashing EdgeDelete EdgeDetect EdgeForm EdgeIndex EdgeJoinForm EdgeLabeling EdgeLabels EdgeLabelStyle EdgeList EdgeOpacity EdgeQ EdgeRenderingFunction EdgeRules EdgeShapeFunction EdgeStyle EdgeThickness EdgeWeight Editable EditButtonSettings EditCellTagsSettings EditDistance EffectiveInterest Eigensystem Eigenvalues EigenvectorCentrality Eigenvectors Element ElementData Eliminate EliminationOrder EllipticE EllipticExp EllipticExpPrime EllipticF EllipticFilterModel EllipticK EllipticLog EllipticNomeQ EllipticPi EllipticReducedHalfPeriods EllipticTheta EllipticThetaPrime EmitSound EmphasizeSyntaxErrors EmpiricalDistribution Empty EmptyGraphQ EnableConsolePrintPacket Enabled Encode End EndAdd EndDialogPacket EndFrontEndInteractionPacket EndOfFile EndOfLine EndOfString EndPackage EngineeringForm Enter EnterExpressionPacket EnterTextPacket Entropy EntropyFilter Environment Epilog Equal EqualColumns EqualRows EqualTilde EquatedTo Equilibrium EquirippleFilterKernel Equivalent Erf Erfc Erfi ErlangB ErlangC ErlangDistribution Erosion ErrorBox ErrorBoxOptions ErrorNorm ErrorPacket ErrorsDialogSettings EstimatedDistribution EstimatedProcess EstimatorGains EstimatorRegulator EuclideanDistance EulerE EulerGamma EulerianGraphQ EulerPhi Evaluatable Evaluate Evaluated EvaluatePacket EvaluationCell EvaluationCompletionAction EvaluationElements EvaluationMode EvaluationMonitor EvaluationNotebook EvaluationObject EvaluationOrder Evaluator EvaluatorNames EvenQ EventData EventEvaluator EventHandler EventHandlerTag EventLabels ExactBlackmanWindow ExactNumberQ ExactRootIsolation ExampleData Except ExcludedForms ExcludePods Exclusions ExclusionsStyle Exists Exit ExitDialog Exp Expand ExpandAll ExpandDenominator ExpandFileName ExpandNumerator Expectation ExpectationE ExpectedValue ExpGammaDistribution ExpIntegralE ExpIntegralEi Exponent ExponentFunction ExponentialDistribution ExponentialFamily ExponentialGeneratingFunction ExponentialMovingAverage ExponentialPowerDistribution ExponentPosition ExponentStep Export ExportAutoReplacements ExportPacket ExportString Expression ExpressionCell ExpressionPacket ExpToTrig ExtendedGCD Extension ExtentElementFunction ExtentMarkers ExtentSize ExternalCall ExternalDataCharacterEncoding Extract ExtractArchive ExtremeValueDistribution ' + 'FaceForm FaceGrids FaceGridsStyle Factor FactorComplete Factorial Factorial2 FactorialMoment FactorialMomentGeneratingFunction FactorialPower FactorInteger FactorList FactorSquareFree FactorSquareFreeList FactorTerms FactorTermsList Fail FailureDistribution False FARIMAProcess FEDisableConsolePrintPacket FeedbackSector FeedbackSectorStyle FeedbackType FEEnableConsolePrintPacket Fibonacci FieldHint FieldHintStyle FieldMasked FieldSize File FileBaseName FileByteCount FileDate FileExistsQ FileExtension FileFormat FileHash FileInformation FileName FileNameDepth FileNameDialogSettings FileNameDrop FileNameJoin FileNames FileNameSetter FileNameSplit FileNameTake FilePrint FileType FilledCurve FilledCurveBox Filling FillingStyle FillingTransform FilterRules FinancialBond FinancialData FinancialDerivative FinancialIndicator Find FindArgMax FindArgMin FindClique FindClusters FindCurvePath FindDistributionParameters FindDivisions FindEdgeCover FindEdgeCut FindEulerianCycle FindFaces FindFile FindFit FindGeneratingFunction FindGeoLocation FindGeometricTransform FindGraphCommunities FindGraphIsomorphism FindGraphPartition FindHamiltonianCycle FindIndependentEdgeSet FindIndependentVertexSet FindInstance FindIntegerNullVector FindKClan FindKClique FindKClub FindKPlex FindLibrary FindLinearRecurrence FindList FindMaximum FindMaximumFlow FindMaxValue FindMinimum FindMinimumCostFlow FindMinimumCut FindMinValue FindPermutation FindPostmanTour FindProcessParameters FindRoot FindSequenceFunction FindSettings FindShortestPath FindShortestTour FindThreshold FindVertexCover FindVertexCut Fine FinishDynamic FiniteAbelianGroupCount FiniteGroupCount FiniteGroupData First FirstPassageTimeDistribution FischerGroupFi22 FischerGroupFi23 FischerGroupFi24Prime FisherHypergeometricDistribution FisherRatioTest FisherZDistribution Fit FitAll FittedModel FixedPoint FixedPointList FlashSelection Flat Flatten FlattenAt FlatTopWindow FlipView Floor FlushPrintOutputPacket Fold FoldList Font FontColor FontFamily FontForm FontName FontOpacity FontPostScriptName FontProperties FontReencoding FontSize FontSlant FontSubstitutions FontTracking FontVariations FontWeight For ForAll Format FormatRules FormatType FormatTypeAutoConvert FormatValues FormBox FormBoxOptions FortranForm Forward ForwardBackward Fourier FourierCoefficient FourierCosCoefficient FourierCosSeries FourierCosTransform FourierDCT FourierDCTFilter FourierDCTMatrix FourierDST FourierDSTMatrix FourierMatrix FourierParameters FourierSequenceTransform FourierSeries FourierSinCoefficient FourierSinSeries FourierSinTransform FourierTransform FourierTrigSeries FractionalBrownianMotionProcess FractionalPart FractionBox FractionBoxOptions FractionLine Frame FrameBox FrameBoxOptions Framed FrameInset FrameLabel Frameless FrameMargins FrameStyle FrameTicks FrameTicksStyle FRatioDistribution FrechetDistribution FreeQ FrequencySamplingFilterKernel FresnelC FresnelS Friday FrobeniusNumber FrobeniusSolve ' + 'FromCharacterCode FromCoefficientRules FromContinuedFraction FromDate FromDigits FromDMS Front FrontEndDynamicExpression FrontEndEventActions FrontEndExecute FrontEndObject FrontEndResource FrontEndResourceString FrontEndStackSize FrontEndToken FrontEndTokenExecute FrontEndValueCache FrontEndVersion FrontFaceColor FrontFaceOpacity Full FullAxes FullDefinition FullForm FullGraphics FullOptions FullSimplify Function FunctionExpand FunctionInterpolation FunctionSpace FussellVeselyImportance ' + 'GaborFilter GaborMatrix GaborWavelet GainMargins GainPhaseMargins Gamma GammaDistribution GammaRegularized GapPenalty Gather GatherBy GaugeFaceElementFunction GaugeFaceStyle GaugeFrameElementFunction GaugeFrameSize GaugeFrameStyle GaugeLabels GaugeMarkers GaugeStyle GaussianFilter GaussianIntegers GaussianMatrix GaussianWindow GCD GegenbauerC General GeneralizedLinearModelFit GenerateConditions GeneratedCell GeneratedParameters GeneratingFunction Generic GenericCylindricalDecomposition GenomeData GenomeLookup GeodesicClosing GeodesicDilation GeodesicErosion GeodesicOpening GeoDestination GeodesyData GeoDirection GeoDistance GeoGridPosition GeometricBrownianMotionProcess GeometricDistribution GeometricMean GeometricMeanFilter GeometricTransformation GeometricTransformation3DBox GeometricTransformation3DBoxOptions GeometricTransformationBox GeometricTransformationBoxOptions GeoPosition GeoPositionENU GeoPositionXYZ GeoProjectionData GestureHandler GestureHandlerTag Get GetBoundingBoxSizePacket GetContext GetEnvironment GetFileName GetFrontEndOptionsDataPacket GetLinebreakInformationPacket GetMenusPacket GetPageBreakInformationPacket Glaisher GlobalClusteringCoefficient GlobalPreferences GlobalSession Glow GoldenRatio GompertzMakehamDistribution GoodmanKruskalGamma GoodmanKruskalGammaTest Goto Grad Gradient GradientFilter GradientOrientationFilter Graph GraphAssortativity GraphCenter GraphComplement GraphData GraphDensity GraphDiameter GraphDifference GraphDisjointUnion ' + 'GraphDistance GraphDistanceMatrix GraphElementData GraphEmbedding GraphHighlight GraphHighlightStyle GraphHub Graphics Graphics3D Graphics3DBox Graphics3DBoxOptions GraphicsArray GraphicsBaseline GraphicsBox GraphicsBoxOptions GraphicsColor GraphicsColumn GraphicsComplex GraphicsComplex3DBox GraphicsComplex3DBoxOptions GraphicsComplexBox GraphicsComplexBoxOptions GraphicsContents GraphicsData GraphicsGrid GraphicsGridBox GraphicsGroup GraphicsGroup3DBox GraphicsGroup3DBoxOptions GraphicsGroupBox GraphicsGroupBoxOptions GraphicsGrouping GraphicsHighlightColor GraphicsRow GraphicsSpacing GraphicsStyle GraphIntersection GraphLayout GraphLinkEfficiency GraphPeriphery GraphPlot GraphPlot3D GraphPower GraphPropertyDistribution GraphQ GraphRadius GraphReciprocity GraphRoot GraphStyle GraphUnion Gray GrayLevel GreatCircleDistance Greater GreaterEqual GreaterEqualLess GreaterFullEqual GreaterGreater GreaterLess GreaterSlantEqual GreaterTilde Green Grid GridBaseline GridBox GridBoxAlignment GridBoxBackground GridBoxDividers GridBoxFrame GridBoxItemSize GridBoxItemStyle GridBoxOptions GridBoxSpacings GridCreationSettings GridDefaultElement GridElementStyleOptions GridFrame GridFrameMargins GridGraph GridLines GridLinesStyle GroebnerBasis GroupActionBase GroupCentralizer GroupElementFromWord GroupElementPosition GroupElementQ GroupElements GroupElementToWord GroupGenerators GroupMultiplicationTable GroupOrbits GroupOrder GroupPageBreakWithin GroupSetwiseStabilizer GroupStabilizer GroupStabilizerChain Gudermannian GumbelDistribution ' + 'HaarWavelet HadamardMatrix HalfNormalDistribution HamiltonianGraphQ HammingDistance HammingWindow HankelH1 HankelH2 HankelMatrix HannPoissonWindow HannWindow HaradaNortonGroupHN HararyGraph HarmonicMean HarmonicMeanFilter HarmonicNumber Hash HashTable Haversine HazardFunction Head HeadCompose Heads HeavisideLambda HeavisidePi HeavisideTheta HeldGroupHe HeldPart HelpBrowserLookup HelpBrowserNotebook HelpBrowserSettings HermiteDecomposition HermiteH HermitianMatrixQ HessenbergDecomposition Hessian HexadecimalCharacter Hexahedron HexahedronBox HexahedronBoxOptions HiddenSurface HighlightGraph HighlightImage HighpassFilter HigmanSimsGroupHS HilbertFilter HilbertMatrix Histogram Histogram3D HistogramDistribution HistogramList HistogramTransform HistogramTransformInterpolation HitMissTransform HITSCentrality HodgeDual HoeffdingD HoeffdingDTest Hold HoldAll HoldAllComplete HoldComplete HoldFirst HoldForm HoldPattern HoldRest HolidayCalendar HomeDirectory HomePage Horizontal HorizontalForm HorizontalGauge HorizontalScrollPosition HornerForm HotellingTSquareDistribution HoytDistribution HTMLSave Hue HumpDownHump HumpEqual HurwitzLerchPhi HurwitzZeta HyperbolicDistribution HypercubeGraph HyperexponentialDistribution Hyperfactorial Hypergeometric0F1 Hypergeometric0F1Regularized Hypergeometric1F1 Hypergeometric1F1Regularized Hypergeometric2F1 Hypergeometric2F1Regularized HypergeometricDistribution HypergeometricPFQ HypergeometricPFQRegularized HypergeometricU Hyperlink HyperlinkCreationSettings Hyphenation HyphenationOptions HypoexponentialDistribution HypothesisTestData ' + 'I Identity IdentityMatrix If IgnoreCase Im Image Image3D Image3DSlices ImageAccumulate ImageAdd ImageAdjust ImageAlign ImageApply ImageAspectRatio ImageAssemble ImageCache ImageCacheValid ImageCapture ImageChannels ImageClip ImageColorSpace ImageCompose ImageConvolve ImageCooccurrence ImageCorners ImageCorrelate ImageCorrespondingPoints ImageCrop ImageData ImageDataPacket ImageDeconvolve ImageDemosaic ImageDifference ImageDimensions ImageDistance ImageEffect ImageFeatureTrack ImageFileApply ImageFileFilter ImageFileScan ImageFilter ImageForestingComponents ImageForwardTransformation ImageHistogram ImageKeypoints ImageLevels ImageLines ImageMargins ImageMarkers ImageMeasurements ImageMultiply ImageOffset ImagePad ImagePadding ImagePartition ImagePeriodogram ImagePerspectiveTransformation ImageQ ImageRangeCache ImageReflect ImageRegion ImageResize ImageResolution ImageRotate ImageRotated ImageScaled ImageScan ImageSize ImageSizeAction ImageSizeCache ImageSizeMultipliers ImageSizeRaw ImageSubtract ImageTake ImageTransformation ImageTrim ImageType ImageValue ImageValuePositions Implies Import ImportAutoReplacements ImportString ImprovementImportance In IncidenceGraph IncidenceList IncidenceMatrix IncludeConstantBasis IncludeFileExtension IncludePods IncludeSingularTerm Increment Indent IndentingNewlineSpacings IndentMaxFraction IndependenceTest IndependentEdgeSetQ IndependentUnit IndependentVertexSetQ Indeterminate IndexCreationOptions Indexed IndexGraph IndexTag Inequality InexactNumberQ InexactNumbers Infinity Infix Information Inherited InheritScope Initialization InitializationCell InitializationCellEvaluation InitializationCellWarning InlineCounterAssignments InlineCounterIncrements InlineRules Inner Inpaint Input InputAliases InputAssumptions InputAutoReplacements InputField InputFieldBox InputFieldBoxOptions InputForm InputGrouping InputNamePacket InputNotebook InputPacket InputSettings InputStream InputString InputStringPacket InputToBoxFormPacket Insert InsertionPointObject InsertResults Inset Inset3DBox Inset3DBoxOptions InsetBox InsetBoxOptions Install InstallService InString Integer IntegerDigits IntegerExponent IntegerLength IntegerPart IntegerPartitions IntegerQ Integers IntegerString Integral Integrate Interactive InteractiveTradingChart Interlaced Interleaving InternallyBalancedDecomposition InterpolatingFunction InterpolatingPolynomial Interpolation InterpolationOrder InterpolationPoints InterpolationPrecision Interpretation InterpretationBox InterpretationBoxOptions InterpretationFunction ' + 'InterpretTemplate InterquartileRange Interrupt InterruptSettings Intersection Interval IntervalIntersection IntervalMemberQ IntervalUnion Inverse InverseBetaRegularized InverseCDF InverseChiSquareDistribution InverseContinuousWaveletTransform InverseDistanceTransform InverseEllipticNomeQ InverseErf InverseErfc InverseFourier InverseFourierCosTransform InverseFourierSequenceTransform InverseFourierSinTransform InverseFourierTransform InverseFunction InverseFunctions InverseGammaDistribution InverseGammaRegularized InverseGaussianDistribution InverseGudermannian InverseHaversine InverseJacobiCD InverseJacobiCN InverseJacobiCS InverseJacobiDC InverseJacobiDN InverseJacobiDS InverseJacobiNC InverseJacobiND InverseJacobiNS InverseJacobiSC InverseJacobiSD InverseJacobiSN InverseLaplaceTransform InversePermutation InverseRadon InverseSeries InverseSurvivalFunction InverseWaveletTransform InverseWeierstrassP InverseZTransform Invisible InvisibleApplication InvisibleTimes IrreduciblePolynomialQ IsolatingInterval IsomorphicGraphQ IsotopeData Italic Item ItemBox ItemBoxOptions ItemSize ItemStyle ItoProcess ' + 'JaccardDissimilarity JacobiAmplitude Jacobian JacobiCD JacobiCN JacobiCS JacobiDC JacobiDN JacobiDS JacobiNC JacobiND JacobiNS JacobiP JacobiSC JacobiSD JacobiSN JacobiSymbol JacobiZeta JankoGroupJ1 JankoGroupJ2 JankoGroupJ3 JankoGroupJ4 JarqueBeraALMTest JohnsonDistribution Join Joined JoinedCurve JoinedCurveBox JoinForm JordanDecomposition JordanModelDecomposition ' + 'K KagiChart KaiserBesselWindow KaiserWindow KalmanEstimator KalmanFilter KarhunenLoeveDecomposition KaryTree KatzCentrality KCoreComponents KDistribution KelvinBei KelvinBer KelvinKei KelvinKer KendallTau KendallTauTest KernelExecute KernelMixtureDistribution KernelObject Kernels Ket Khinchin KirchhoffGraph KirchhoffMatrix KleinInvariantJ KnightTourGraph KnotData KnownUnitQ KolmogorovSmirnovTest KroneckerDelta KroneckerModelDecomposition KroneckerProduct KroneckerSymbol KuiperTest KumaraswamyDistribution Kurtosis KuwaharaFilter ' + 'Label Labeled LabeledSlider LabelingFunction LabelStyle LaguerreL LambdaComponents LambertW LanczosWindow LandauDistribution Language LanguageCategory LaplaceDistribution LaplaceTransform Laplacian LaplacianFilter LaplacianGaussianFilter Large Larger Last Latitude LatitudeLongitude LatticeData LatticeReduce Launch LaunchKernels LayeredGraphPlot LayerSizeFunction LayoutInformation LCM LeafCount LeapYearQ LeastSquares LeastSquaresFilterKernel Left LeftArrow LeftArrowBar LeftArrowRightArrow LeftDownTeeVector LeftDownVector LeftDownVectorBar LeftRightArrow LeftRightVector LeftTee LeftTeeArrow LeftTeeVector LeftTriangle LeftTriangleBar LeftTriangleEqual LeftUpDownVector LeftUpTeeVector LeftUpVector LeftUpVectorBar LeftVector LeftVectorBar LegendAppearance Legended LegendFunction LegendLabel LegendLayout LegendMargins LegendMarkers LegendMarkerSize LegendreP LegendreQ LegendreType Length LengthWhile LerchPhi Less LessEqual LessEqualGreater LessFullEqual LessGreater LessLess LessSlantEqual LessTilde LetterCharacter LetterQ Level LeveneTest LeviCivitaTensor LevyDistribution Lexicographic LibraryFunction LibraryFunctionError LibraryFunctionInformation LibraryFunctionLoad LibraryFunctionUnload LibraryLoad LibraryUnload LicenseID LiftingFilterData LiftingWaveletTransform LightBlue LightBrown LightCyan Lighter LightGray LightGreen Lighting LightingAngle LightMagenta LightOrange LightPink LightPurple LightRed LightSources LightYellow Likelihood Limit LimitsPositioning LimitsPositioningTokens LindleyDistribution Line Line3DBox LinearFilter LinearFractionalTransform LinearModelFit LinearOffsetFunction LinearProgramming LinearRecurrence LinearSolve LinearSolveFunction LineBox LineBreak LinebreakAdjustments LineBreakChart LineBreakWithin LineColor LineForm LineGraph LineIndent LineIndentMaxFraction LineIntegralConvolutionPlot LineIntegralConvolutionScale LineLegend LineOpacity LineSpacing LineWrapParts LinkActivate LinkClose LinkConnect LinkConnectedQ LinkCreate LinkError LinkFlush LinkFunction LinkHost LinkInterrupt LinkLaunch LinkMode LinkObject LinkOpen LinkOptions LinkPatterns LinkProtocol LinkRead LinkReadHeld LinkReadyQ Links LinkWrite LinkWriteHeld LiouvilleLambda List Listable ListAnimate ListContourPlot ListContourPlot3D ListConvolve ListCorrelate ListCurvePathPlot ListDeconvolve ListDensityPlot Listen ListFourierSequenceTransform ListInterpolation ListLineIntegralConvolutionPlot ListLinePlot ListLogLinearPlot ListLogLogPlot ListLogPlot ListPicker ListPickerBox ListPickerBoxBackground ListPickerBoxOptions ListPlay ListPlot ListPlot3D ListPointPlot3D ListPolarPlot ListQ ListStreamDensityPlot ListStreamPlot ListSurfacePlot3D ListVectorDensityPlot ListVectorPlot ListVectorPlot3D ListZTransform Literal LiteralSearch LocalClusteringCoefficient LocalizeVariables LocationEquivalenceTest LocationTest Locator LocatorAutoCreate LocatorBox LocatorBoxOptions LocatorCentering LocatorPane LocatorPaneBox LocatorPaneBoxOptions ' + 'LocatorRegion Locked Log Log10 Log2 LogBarnesG LogGamma LogGammaDistribution LogicalExpand LogIntegral LogisticDistribution LogitModelFit LogLikelihood LogLinearPlot LogLogisticDistribution LogLogPlot LogMultinormalDistribution LogNormalDistribution LogPlot LogRankTest LogSeriesDistribution LongEqual Longest LongestAscendingSequence LongestCommonSequence LongestCommonSequencePositions LongestCommonSubsequence LongestCommonSubsequencePositions LongestMatch LongForm Longitude LongLeftArrow LongLeftRightArrow LongRightArrow Loopback LoopFreeGraphQ LowerCaseQ LowerLeftArrow LowerRightArrow LowerTriangularize LowpassFilter LQEstimatorGains LQGRegulator LQOutputRegulatorGains LQRegulatorGains LUBackSubstitution LucasL LuccioSamiComponents LUDecomposition LyapunovSolve LyonsGroupLy ' + 'MachineID MachineName MachineNumberQ MachinePrecision MacintoshSystemPageSetup Magenta Magnification Magnify MainSolve MaintainDynamicCaches Majority MakeBoxes MakeExpression MakeRules MangoldtLambda ManhattanDistance Manipulate Manipulator MannWhitneyTest MantissaExponent Manual Map MapAll MapAt MapIndexed MAProcess MapThread MarcumQ MardiaCombinedTest MardiaKurtosisTest MardiaSkewnessTest MarginalDistribution MarkovProcessProperties Masking MatchingDissimilarity MatchLocalNameQ MatchLocalNames MatchQ Material MathematicaNotation MathieuC MathieuCharacteristicA MathieuCharacteristicB MathieuCharacteristicExponent MathieuCPrime MathieuGroupM11 MathieuGroupM12 MathieuGroupM22 MathieuGroupM23 MathieuGroupM24 MathieuS MathieuSPrime MathMLForm MathMLText Matrices MatrixExp MatrixForm MatrixFunction MatrixLog MatrixPlot MatrixPower MatrixQ MatrixRank Max MaxBend MaxDetect MaxExtraBandwidths MaxExtraConditions MaxFeatures MaxFilter Maximize MaxIterations MaxMemoryUsed MaxMixtureKernels MaxPlotPoints MaxPoints MaxRecursion MaxStableDistribution MaxStepFraction MaxSteps MaxStepSize MaxValue MaxwellDistribution McLaughlinGroupMcL Mean MeanClusteringCoefficient MeanDegreeConnectivity MeanDeviation MeanFilter MeanGraphDistance MeanNeighborDegree MeanShift MeanShiftFilter Median MedianDeviation MedianFilter Medium MeijerG MeixnerDistribution MemberQ MemoryConstrained MemoryInUse Menu MenuAppearance MenuCommandKey MenuEvaluator MenuItem MenuPacket MenuSortingValue MenuStyle MenuView MergeDifferences Mesh MeshFunctions MeshRange MeshShading MeshStyle Message MessageDialog MessageList MessageName MessageOptions MessagePacket Messages MessagesNotebook MetaCharacters MetaInformation Method MethodOptions MexicanHatWavelet MeyerWavelet Min MinDetect MinFilter MinimalPolynomial MinimalStateSpaceModel Minimize Minors MinRecursion MinSize MinStableDistribution Minus MinusPlus MinValue Missing MissingDataMethod MittagLefflerE MixedRadix MixedRadixQuantity MixtureDistribution Mod Modal Mode Modular ModularLambda Module Modulus MoebiusMu Moment Momentary MomentConvert MomentEvaluate MomentGeneratingFunction Monday Monitor MonomialList MonomialOrder MonsterGroupM MorletWavelet MorphologicalBinarize MorphologicalBranchPoints MorphologicalComponents MorphologicalEulerNumber MorphologicalGraph MorphologicalPerimeter MorphologicalTransform Most MouseAnnotation MouseAppearance MouseAppearanceTag MouseButtons Mouseover MousePointerNote MousePosition MovingAverage MovingMedian MoyalDistribution MultiedgeStyle MultilaunchWarning MultiLetterItalics MultiLetterStyle MultilineFunction Multinomial MultinomialDistribution MultinormalDistribution MultiplicativeOrder Multiplicity Multiselection MultivariateHypergeometricDistribution MultivariatePoissonDistribution MultivariateTDistribution ' + 'N NakagamiDistribution NameQ Names NamespaceBox Nand NArgMax NArgMin NBernoulliB NCache NDSolve NDSolveValue Nearest NearestFunction NeedCurrentFrontEndPackagePacket NeedCurrentFrontEndSymbolsPacket NeedlemanWunschSimilarity Needs Negative NegativeBinomialDistribution NegativeMultinomialDistribution NeighborhoodGraph Nest NestedGreaterGreater NestedLessLess NestedScriptRules NestList NestWhile NestWhileList NevilleThetaC NevilleThetaD NevilleThetaN NevilleThetaS NewPrimitiveStyle NExpectation Next NextPrime NHoldAll NHoldFirst NHoldRest NicholsGridLines NicholsPlot NIntegrate NMaximize NMaxValue NMinimize NMinValue NominalVariables NonAssociative NoncentralBetaDistribution NoncentralChiSquareDistribution NoncentralFRatioDistribution NoncentralStudentTDistribution NonCommutativeMultiply NonConstants None NonlinearModelFit NonlocalMeansFilter NonNegative NonPositive Nor NorlundB Norm Normal NormalDistribution NormalGrouping Normalize NormalizedSquaredEuclideanDistance NormalsFunction NormFunction Not NotCongruent NotCupCap NotDoubleVerticalBar Notebook NotebookApply NotebookAutoSave NotebookClose NotebookConvertSettings NotebookCreate NotebookCreateReturnObject NotebookDefault NotebookDelete NotebookDirectory NotebookDynamicExpression NotebookEvaluate NotebookEventActions NotebookFileName NotebookFind NotebookFindReturnObject NotebookGet NotebookGetLayoutInformationPacket NotebookGetMisspellingsPacket NotebookInformation NotebookInterfaceObject NotebookLocate NotebookObject NotebookOpen NotebookOpenReturnObject NotebookPath NotebookPrint NotebookPut NotebookPutReturnObject NotebookRead NotebookResetGeneratedCells Notebooks NotebookSave NotebookSaveAs NotebookSelection NotebookSetupLayoutInformationPacket NotebooksMenu NotebookWrite NotElement NotEqualTilde NotExists NotGreater NotGreaterEqual NotGreaterFullEqual NotGreaterGreater NotGreaterLess NotGreaterSlantEqual NotGreaterTilde NotHumpDownHump NotHumpEqual NotLeftTriangle NotLeftTriangleBar NotLeftTriangleEqual NotLess NotLessEqual NotLessFullEqual NotLessGreater NotLessLess NotLessSlantEqual NotLessTilde NotNestedGreaterGreater NotNestedLessLess NotPrecedes NotPrecedesEqual NotPrecedesSlantEqual NotPrecedesTilde NotReverseElement NotRightTriangle NotRightTriangleBar NotRightTriangleEqual NotSquareSubset NotSquareSubsetEqual NotSquareSuperset NotSquareSupersetEqual NotSubset NotSubsetEqual NotSucceeds NotSucceedsEqual NotSucceedsSlantEqual NotSucceedsTilde NotSuperset NotSupersetEqual NotTilde NotTildeEqual NotTildeFullEqual NotTildeTilde NotVerticalBar NProbability NProduct NProductFactors NRoots NSolve NSum NSumTerms Null NullRecords NullSpace NullWords Number NumberFieldClassNumber NumberFieldDiscriminant NumberFieldFundamentalUnits NumberFieldIntegralBasis NumberFieldNormRepresentatives NumberFieldRegulator NumberFieldRootsOfUnity NumberFieldSignature NumberForm NumberFormat NumberMarks NumberMultiplier NumberPadding NumberPoint NumberQ NumberSeparator ' + 'NumberSigns NumberString Numerator NumericFunction NumericQ NuttallWindow NValues NyquistGridLines NyquistPlot ' + 'O ObservabilityGramian ObservabilityMatrix ObservableDecomposition ObservableModelQ OddQ Off Offset OLEData On ONanGroupON OneIdentity Opacity Open OpenAppend Opener OpenerBox OpenerBoxOptions OpenerView OpenFunctionInspectorPacket Opening OpenRead OpenSpecialOptions OpenTemporary OpenWrite Operate OperatingSystem OptimumFlowData Optional OptionInspectorSettings OptionQ Options OptionsPacket OptionsPattern OptionValue OptionValueBox OptionValueBoxOptions Or Orange Order OrderDistribution OrderedQ Ordering Orderless OrnsteinUhlenbeckProcess Orthogonalize Out Outer OutputAutoOverwrite OutputControllabilityMatrix OutputControllableModelQ OutputForm OutputFormData OutputGrouping OutputMathEditExpression OutputNamePacket OutputResponse OutputSizeLimit OutputStream Over OverBar OverDot Overflow OverHat Overlaps Overlay OverlayBox OverlayBoxOptions Overscript OverscriptBox OverscriptBoxOptions OverTilde OverVector OwenT OwnValues ' + 'PackingMethod PaddedForm Padding PadeApproximant PadLeft PadRight PageBreakAbove PageBreakBelow PageBreakWithin PageFooterLines PageFooters PageHeaderLines PageHeaders PageHeight PageRankCentrality PageWidth PairedBarChart PairedHistogram PairedSmoothHistogram PairedTTest PairedZTest PaletteNotebook PalettePath Pane PaneBox PaneBoxOptions Panel PanelBox PanelBoxOptions Paneled PaneSelector PaneSelectorBox PaneSelectorBoxOptions PaperWidth ParabolicCylinderD ParagraphIndent ParagraphSpacing ParallelArray ParallelCombine ParallelDo ParallelEvaluate Parallelization Parallelize ParallelMap ParallelNeeds ParallelProduct ParallelSubmit ParallelSum ParallelTable ParallelTry Parameter ParameterEstimator ParameterMixtureDistribution ParameterVariables ParametricFunction ParametricNDSolve ParametricNDSolveValue ParametricPlot ParametricPlot3D ParentConnect ParentDirectory ParentForm Parenthesize ParentList ParetoDistribution Part PartialCorrelationFunction PartialD ParticleData Partition PartitionsP PartitionsQ ParzenWindow PascalDistribution PassEventsDown PassEventsUp Paste PasteBoxFormInlineCells PasteButton Path PathGraph PathGraphQ Pattern PatternSequence PatternTest PauliMatrix PaulWavelet Pause PausedTime PDF PearsonChiSquareTest PearsonCorrelationTest PearsonDistribution PerformanceGoal PeriodicInterpolation Periodogram PeriodogramArray PermutationCycles PermutationCyclesQ PermutationGroup PermutationLength PermutationList PermutationListQ PermutationMax PermutationMin PermutationOrder PermutationPower PermutationProduct PermutationReplace Permutations PermutationSupport Permute PeronaMalikFilter Perpendicular PERTDistribution PetersenGraph PhaseMargins Pi Pick PIDData PIDDerivativeFilter PIDFeedforward PIDTune Piecewise PiecewiseExpand PieChart PieChart3D PillaiTrace PillaiTraceTest Pink Pivoting PixelConstrained PixelValue PixelValuePositions Placed Placeholder PlaceholderReplace Plain PlanarGraphQ Play PlayRange Plot Plot3D Plot3Matrix PlotDivision PlotJoined PlotLabel PlotLayout PlotLegends PlotMarkers PlotPoints PlotRange PlotRangeClipping PlotRangePadding PlotRegion PlotStyle Plus PlusMinus Pochhammer PodStates PodWidth Point Point3DBox PointBox PointFigureChart PointForm PointLegend PointSize PoissonConsulDistribution PoissonDistribution PoissonProcess PoissonWindow PolarAxes PolarAxesOrigin PolarGridLines PolarPlot PolarTicks PoleZeroMarkers PolyaAeppliDistribution PolyGamma Polygon Polygon3DBox Polygon3DBoxOptions PolygonBox PolygonBoxOptions PolygonHoleScale PolygonIntersections PolygonScale PolyhedronData PolyLog PolynomialExtendedGCD PolynomialForm PolynomialGCD PolynomialLCM PolynomialMod PolynomialQ PolynomialQuotient PolynomialQuotientRemainder PolynomialReduce PolynomialRemainder Polynomials PopupMenu PopupMenuBox PopupMenuBoxOptions PopupView PopupWindow Position Positive PositiveDefiniteMatrixQ PossibleZeroQ Postfix PostScript Power PowerDistribution PowerExpand PowerMod PowerModList ' + 'PowerSpectralDensity PowersRepresentations PowerSymmetricPolynomial Precedence PrecedenceForm Precedes PrecedesEqual PrecedesSlantEqual PrecedesTilde Precision PrecisionGoal PreDecrement PredictionRoot PreemptProtect PreferencesPath Prefix PreIncrement Prepend PrependTo PreserveImageOptions Previous PriceGraphDistribution PrimaryPlaceholder Prime PrimeNu PrimeOmega PrimePi PrimePowerQ PrimeQ Primes PrimeZetaP PrimitiveRoot PrincipalComponents PrincipalValue Print PrintAction PrintForm PrintingCopies PrintingOptions PrintingPageRange PrintingStartingPageNumber PrintingStyleEnvironment PrintPrecision PrintTemporary Prism PrismBox PrismBoxOptions PrivateCellOptions PrivateEvaluationOptions PrivateFontOptions PrivateFrontEndOptions PrivateNotebookOptions PrivatePaths Probability ProbabilityDistribution ProbabilityPlot ProbabilityPr ProbabilityScalePlot ProbitModelFit ProcessEstimator ProcessParameterAssumptions ProcessParameterQ ProcessStateDomain ProcessTimeDomain Product ProductDistribution ProductLog ProgressIndicator ProgressIndicatorBox ProgressIndicatorBoxOptions Projection Prolog PromptForm Properties Property PropertyList PropertyValue Proportion Proportional Protect Protected ProteinData Pruning PseudoInverse Purple Put PutAppend Pyramid PyramidBox PyramidBoxOptions ' + 'QBinomial QFactorial QGamma QHypergeometricPFQ QPochhammer QPolyGamma QRDecomposition QuadraticIrrationalQ Quantile QuantilePlot Quantity QuantityForm QuantityMagnitude QuantityQ QuantityUnit Quartics QuartileDeviation Quartiles QuartileSkewness QueueingNetworkProcess QueueingProcess QueueProperties Quiet Quit Quotient QuotientRemainder ' + 'RadialityCentrality RadicalBox RadicalBoxOptions RadioButton RadioButtonBar RadioButtonBox RadioButtonBoxOptions Radon RamanujanTau RamanujanTauL RamanujanTauTheta RamanujanTauZ Random RandomChoice RandomComplex RandomFunction RandomGraph RandomImage RandomInteger RandomPermutation RandomPrime RandomReal RandomSample RandomSeed RandomVariate RandomWalkProcess Range RangeFilter RangeSpecification RankedMax RankedMin Raster Raster3D Raster3DBox Raster3DBoxOptions RasterArray RasterBox RasterBoxOptions Rasterize RasterSize Rational RationalFunctions Rationalize Rationals Ratios Raw RawArray RawBoxes RawData RawMedium RayleighDistribution Re Read ReadList ReadProtected Real RealBlockDiagonalForm RealDigits RealExponent Reals Reap Record RecordLists RecordSeparators Rectangle RectangleBox RectangleBoxOptions RectangleChart RectangleChart3D RecurrenceFilter RecurrenceTable RecurringDigitsForm Red Reduce RefBox ReferenceLineStyle ReferenceMarkers ReferenceMarkerStyle Refine ReflectionMatrix ReflectionTransform Refresh RefreshRate RegionBinarize RegionFunction RegionPlot RegionPlot3D RegularExpression Regularization Reinstall Release ReleaseHold ReliabilityDistribution ReliefImage ReliefPlot Remove RemoveAlphaChannel RemoveAsynchronousTask Removed RemoveInputStreamMethod RemoveOutputStreamMethod RemoveProperty RemoveScheduledTask RenameDirectory RenameFile RenderAll RenderingOptions RenewalProcess RenkoChart Repeated RepeatedNull RepeatedString Replace ReplaceAll ReplaceHeldPart ReplaceImageValue ReplaceList ReplacePart ReplacePixelValue ReplaceRepeated Resampling Rescale RescalingTransform ResetDirectory ResetMenusPacket ResetScheduledTask Residue Resolve Rest Resultant ResumePacket Return ReturnExpressionPacket ReturnInputFormPacket ReturnPacket ReturnTextPacket Reverse ReverseBiorthogonalSplineWavelet ReverseElement ReverseEquilibrium ReverseGraph ReverseUpEquilibrium RevolutionAxis RevolutionPlot3D RGBColor RiccatiSolve RiceDistribution RidgeFilter RiemannR RiemannSiegelTheta RiemannSiegelZ Riffle Right RightArrow RightArrowBar RightArrowLeftArrow RightCosetRepresentative RightDownTeeVector RightDownVector RightDownVectorBar RightTee RightTeeArrow RightTeeVector RightTriangle RightTriangleBar RightTriangleEqual RightUpDownVector RightUpTeeVector RightUpVector RightUpVectorBar RightVector RightVectorBar RiskAchievementImportance RiskReductionImportance RogersTanimotoDissimilarity Root RootApproximant RootIntervals RootLocusPlot RootMeanSquare RootOfUnityQ RootReduce Roots RootSum Rotate RotateLabel RotateLeft RotateRight RotationAction RotationBox RotationBoxOptions RotationMatrix RotationTransform Round RoundImplies RoundingRadius Row RowAlignments RowBackgrounds RowBox RowHeights RowLines RowMinHeight RowReduce RowsEqual RowSpacings RSolve RudvalisGroupRu Rule RuleCondition RuleDelayed RuleForm RulerUnits Run RunScheduledTask RunThrough RuntimeAttributes RuntimeOptions RussellRaoDissimilarity ' + 'SameQ SameTest SampleDepth SampledSoundFunction SampledSoundList SampleRate SamplingPeriod SARIMAProcess SARMAProcess SatisfiabilityCount SatisfiabilityInstances SatisfiableQ Saturday Save Saveable SaveAutoDelete SaveDefinitions SawtoothWave Scale Scaled ScaleDivisions ScaledMousePosition ScaleOrigin ScalePadding ScaleRanges ScaleRangeStyle ScalingFunctions ScalingMatrix ScalingTransform Scan ScheduledTaskActiveQ ScheduledTaskData ScheduledTaskObject ScheduledTasks SchurDecomposition ScientificForm ScreenRectangle ScreenStyleEnvironment ScriptBaselineShifts ScriptLevel ScriptMinSize ScriptRules ScriptSizeMultipliers Scrollbars ScrollingOptions ScrollPosition Sec Sech SechDistribution SectionGrouping SectorChart SectorChart3D SectorOrigin SectorSpacing SeedRandom Select Selectable SelectComponents SelectedCells SelectedNotebook Selection SelectionAnimate SelectionCell SelectionCellCreateCell SelectionCellDefaultStyle SelectionCellParentStyle SelectionCreateCell SelectionDebuggerTag SelectionDuplicateCell SelectionEvaluate SelectionEvaluateCreateCell SelectionMove SelectionPlaceholder SelectionSetStyle SelectWithContents SelfLoops SelfLoopStyle SemialgebraicComponentInstances SendMail Sequence SequenceAlignment SequenceForm SequenceHold SequenceLimit Series SeriesCoefficient SeriesData SessionTime Set SetAccuracy SetAlphaChannel SetAttributes Setbacks SetBoxFormNamesPacket SetDelayed SetDirectory SetEnvironment SetEvaluationNotebook SetFileDate SetFileLoadingContext SetNotebookStatusLine SetOptions SetOptionsPacket SetPrecision SetProperty SetSelectedNotebook SetSharedFunction SetSharedVariable SetSpeechParametersPacket SetStreamPosition SetSystemOptions Setter SetterBar SetterBox SetterBoxOptions Setting SetValue Shading Shallow ShannonWavelet ShapiroWilkTest Share Sharpen ShearingMatrix ShearingTransform ShenCastanMatrix Short ShortDownArrow Shortest ShortestMatch ShortestPathFunction ShortLeftArrow ShortRightArrow ShortUpArrow Show ShowAutoStyles ShowCellBracket ShowCellLabel ShowCellTags ShowClosedCellArea ShowContents ShowControls ShowCursorTracker ShowGroupOpenCloseIcon ShowGroupOpener ShowInvisibleCharacters ShowPageBreaks ShowPredictiveInterface ShowSelection ShowShortBoxForm ShowSpecialCharacters ShowStringCharacters ShowSyntaxStyles ShrinkingDelay ShrinkWrapBoundingBox SiegelTheta SiegelTukeyTest Sign Signature SignedRankTest SignificanceLevel SignPadding SignTest SimilarityRules SimpleGraph SimpleGraphQ Simplify Sin Sinc SinghMaddalaDistribution SingleEvaluation SingleLetterItalics SingleLetterStyle SingularValueDecomposition SingularValueList SingularValuePlot SingularValues Sinh SinhIntegral SinIntegral SixJSymbol Skeleton SkeletonTransform SkellamDistribution Skewness SkewNormalDistribution Skip SliceDistribution Slider Slider2D Slider2DBox Slider2DBoxOptions SliderBox SliderBoxOptions SlideView Slot SlotSequence Small SmallCircle Smaller SmithDelayCompensator SmithWatermanSimilarity ' + 'SmoothDensityHistogram SmoothHistogram SmoothHistogram3D SmoothKernelDistribution SocialMediaData Socket SokalSneathDissimilarity Solve SolveAlways SolveDelayed Sort SortBy Sound SoundAndGraphics SoundNote SoundVolume Sow Space SpaceForm Spacer Spacings Span SpanAdjustments SpanCharacterRounding SpanFromAbove SpanFromBoth SpanFromLeft SpanLineThickness SpanMaxSize SpanMinSize SpanningCharacters SpanSymmetric SparseArray SpatialGraphDistribution Speak SpeakTextPacket SpearmanRankTest SpearmanRho Spectrogram SpectrogramArray Specularity SpellingCorrection SpellingDictionaries SpellingDictionariesPath SpellingOptions SpellingSuggestionsPacket Sphere SphereBox SphericalBesselJ SphericalBesselY SphericalHankelH1 SphericalHankelH2 SphericalHarmonicY SphericalPlot3D SphericalRegion SpheroidalEigenvalue SpheroidalJoiningFactor SpheroidalPS SpheroidalPSPrime SpheroidalQS SpheroidalQSPrime SpheroidalRadialFactor SpheroidalS1 SpheroidalS1Prime SpheroidalS2 SpheroidalS2Prime Splice SplicedDistribution SplineClosed SplineDegree SplineKnots SplineWeights Split SplitBy SpokenString Sqrt SqrtBox SqrtBoxOptions Square SquaredEuclideanDistance SquareFreeQ SquareIntersection SquaresR SquareSubset SquareSubsetEqual SquareSuperset SquareSupersetEqual SquareUnion SquareWave StabilityMargins StabilityMarginsStyle StableDistribution Stack StackBegin StackComplete StackInhibit StandardDeviation StandardDeviationFilter StandardForm Standardize StandbyDistribution Star StarGraph StartAsynchronousTask StartingStepSize StartOfLine StartOfString StartScheduledTask StartupSound StateDimensions StateFeedbackGains StateOutputEstimator StateResponse StateSpaceModel StateSpaceRealization StateSpaceTransform StationaryDistribution StationaryWaveletPacketTransform StationaryWaveletTransform StatusArea StatusCentrality StepMonitor StieltjesGamma StirlingS1 StirlingS2 StopAsynchronousTask StopScheduledTask StrataVariables StratonovichProcess StreamColorFunction StreamColorFunctionScaling StreamDensityPlot StreamPlot StreamPoints StreamPosition Streams StreamScale StreamStyle String StringBreak StringByteCount StringCases StringCount StringDrop StringExpression StringForm StringFormat StringFreeQ StringInsert StringJoin StringLength StringMatchQ StringPosition StringQ StringReplace StringReplaceList StringReplacePart StringReverse StringRotateLeft StringRotateRight StringSkeleton StringSplit StringTake StringToStream StringTrim StripBoxes StripOnInput StripWrapperBoxes StrokeForm StructuralImportance StructuredArray StructuredSelection StruveH StruveL Stub StudentTDistribution Style StyleBox StyleBoxAutoDelete StyleBoxOptions StyleData StyleDefinitions StyleForm StyleKeyMapping StyleMenuListing StyleNameDialogSettings StyleNames StylePrint StyleSheetPath Subfactorial Subgraph SubMinus SubPlus SubresultantPolynomialRemainders ' + 'SubresultantPolynomials Subresultants Subscript SubscriptBox SubscriptBoxOptions Subscripted Subset SubsetEqual Subsets SubStar Subsuperscript SubsuperscriptBox SubsuperscriptBoxOptions Subtract SubtractFrom SubValues Succeeds SucceedsEqual SucceedsSlantEqual SucceedsTilde SuchThat Sum SumConvergence Sunday SuperDagger SuperMinus SuperPlus Superscript SuperscriptBox SuperscriptBoxOptions Superset SupersetEqual SuperStar Surd SurdForm SurfaceColor SurfaceGraphics SurvivalDistribution SurvivalFunction SurvivalModel SurvivalModelFit SuspendPacket SuzukiDistribution SuzukiGroupSuz SwatchLegend Switch Symbol SymbolName SymletWavelet Symmetric SymmetricGroup SymmetricMatrixQ SymmetricPolynomial SymmetricReduction Symmetrize SymmetrizedArray SymmetrizedArrayRules SymmetrizedDependentComponents SymmetrizedIndependentComponents SymmetrizedReplacePart SynchronousInitialization SynchronousUpdating Syntax SyntaxForm SyntaxInformation SyntaxLength SyntaxPacket SyntaxQ SystemDialogInput SystemException SystemHelpPath SystemInformation SystemInformationData SystemOpen SystemOptions SystemsModelDelay SystemsModelDelayApproximate SystemsModelDelete SystemsModelDimensions SystemsModelExtract SystemsModelFeedbackConnect SystemsModelLabels SystemsModelOrder SystemsModelParallelConnect SystemsModelSeriesConnect SystemsModelStateFeedbackConnect SystemStub ' + 'Tab TabFilling Table TableAlignments TableDepth TableDirections TableForm TableHeadings TableSpacing TableView TableViewBox TabSpacings TabView TabViewBox TabViewBoxOptions TagBox TagBoxNote TagBoxOptions TaggingRules TagSet TagSetDelayed TagStyle TagUnset Take TakeWhile Tally Tan Tanh TargetFunctions TargetUnits TautologyQ TelegraphProcess TemplateBox TemplateBoxOptions TemplateSlotSequence TemporalData Temporary TemporaryVariable TensorContract TensorDimensions TensorExpand TensorProduct TensorQ TensorRank TensorReduce TensorSymmetry TensorTranspose TensorWedge Tetrahedron TetrahedronBox TetrahedronBoxOptions TeXForm TeXSave Text Text3DBox Text3DBoxOptions TextAlignment TextBand TextBoundingBox TextBox TextCell TextClipboardType TextData TextForm TextJustification TextLine TextPacket TextParagraph TextRecognize TextRendering TextStyle Texture TextureCoordinateFunction TextureCoordinateScaling Therefore ThermometerGauge Thick Thickness Thin Thinning ThisLink ThompsonGroupTh Thread ThreeJSymbol Threshold Through Throw Thumbnail Thursday Ticks TicksStyle Tilde TildeEqual TildeFullEqual TildeTilde TimeConstrained TimeConstraint Times TimesBy TimeSeriesForecast TimeSeriesInvertibility TimeUsed TimeValue TimeZone Timing Tiny TitleGrouping TitsGroupT ToBoxes ToCharacterCode ToColor ToContinuousTimeModel ToDate ToDiscreteTimeModel ToeplitzMatrix ToExpression ToFileName Together Toggle ToggleFalse Toggler TogglerBar TogglerBox TogglerBoxOptions ToHeldExpression ToInvertibleTimeSeries TokenWords Tolerance ToLowerCase ToNumberField TooBig Tooltip TooltipBox TooltipBoxOptions TooltipDelay TooltipStyle Top TopHatTransform TopologicalSort ToRadicals ToRules ToString Total TotalHeight TotalVariationFilter TotalWidth TouchscreenAutoZoom TouchscreenControlPlacement ToUpperCase Tr Trace TraceAbove TraceAction TraceBackward TraceDepth TraceDialog TraceForward TraceInternal TraceLevel TraceOff TraceOn TraceOriginal TracePrint TraceScan TrackedSymbols TradingChart TraditionalForm TraditionalFunctionNotation TraditionalNotation TraditionalOrder TransferFunctionCancel TransferFunctionExpand TransferFunctionFactor TransferFunctionModel TransferFunctionPoles TransferFunctionTransform TransferFunctionZeros TransformationFunction TransformationFunctions TransformationMatrix TransformedDistribution TransformedField Translate TranslationTransform TransparentColor Transpose TreeForm TreeGraph TreeGraphQ TreePlot TrendStyle TriangleWave TriangularDistribution Trig TrigExpand TrigFactor TrigFactorList Trigger TrigReduce TrigToExp TrimmedMean True TrueQ TruncatedDistribution TsallisQExponentialDistribution TsallisQGaussianDistribution TTest Tube TubeBezierCurveBox TubeBezierCurveBoxOptions TubeBox TubeBSplineCurveBox TubeBSplineCurveBoxOptions Tuesday TukeyLambdaDistribution TukeyWindow Tuples TuranGraph TuringMachine ' + 'Transparent ' + 'UnateQ Uncompress Undefined UnderBar Underflow Underlined Underoverscript UnderoverscriptBox UnderoverscriptBoxOptions Underscript UnderscriptBox UnderscriptBoxOptions UndirectedEdge UndirectedGraph UndirectedGraphQ UndocumentedTestFEParserPacket UndocumentedTestGetSelectionPacket Unequal Unevaluated UniformDistribution UniformGraphDistribution UniformSumDistribution Uninstall Union UnionPlus Unique UnitBox UnitConvert UnitDimensions Unitize UnitRootTest UnitSimplify UnitStep UnitTriangle UnitVector Unprotect UnsameQ UnsavedVariables Unset UnsetShared UntrackedVariables Up UpArrow UpArrowBar UpArrowDownArrow Update UpdateDynamicObjects UpdateDynamicObjectsSynchronous UpdateInterval UpDownArrow UpEquilibrium UpperCaseQ UpperLeftArrow UpperRightArrow UpperTriangularize Upsample UpSet UpSetDelayed UpTee UpTeeArrow UpValues URL URLFetch URLFetchAsynchronous URLSave URLSaveAsynchronous UseGraphicsRange Using UsingFrontEnd ' + 'V2Get ValidationLength Value ValueBox ValueBoxOptions ValueForm ValueQ ValuesData Variables Variance VarianceEquivalenceTest VarianceEstimatorFunction VarianceGammaDistribution VarianceTest VectorAngle VectorColorFunction VectorColorFunctionScaling VectorDensityPlot VectorGlyphData VectorPlot VectorPlot3D VectorPoints VectorQ Vectors VectorScale VectorStyle Vee Verbatim Verbose VerboseConvertToPostScriptPacket VerifyConvergence VerifySolutions VerifyTestAssumptions Version VersionNumber VertexAdd VertexCapacity VertexColors VertexComponent VertexConnectivity VertexCoordinateRules VertexCoordinates VertexCorrelationSimilarity VertexCosineSimilarity VertexCount VertexCoverQ VertexDataCoordinates VertexDegree VertexDelete VertexDiceSimilarity VertexEccentricity VertexInComponent VertexInDegree VertexIndex VertexJaccardSimilarity VertexLabeling VertexLabels VertexLabelStyle VertexList VertexNormals VertexOutComponent VertexOutDegree VertexQ VertexRenderingFunction VertexReplace VertexShape VertexShapeFunction VertexSize VertexStyle VertexTextureCoordinates VertexWeight Vertical VerticalBar VerticalForm VerticalGauge VerticalSeparator VerticalSlider VerticalTilde ViewAngle ViewCenter ViewMatrix ViewPoint ViewPointSelectorSettings ViewPort ViewRange ViewVector ViewVertical VirtualGroupData Visible VisibleCell VoigtDistribution VonMisesDistribution ' + 'WaitAll WaitAsynchronousTask WaitNext WaitUntil WakebyDistribution WalleniusHypergeometricDistribution WaringYuleDistribution WatershedComponents WatsonUSquareTest WattsStrogatzGraphDistribution WaveletBestBasis WaveletFilterCoefficients WaveletImagePlot WaveletListPlot WaveletMapIndexed WaveletMatrixPlot WaveletPhi WaveletPsi WaveletScale WaveletScalogram WaveletThreshold WeaklyConnectedComponents WeaklyConnectedGraphQ WeakStationarity WeatherData WeberE Wedge Wednesday WeibullDistribution WeierstrassHalfPeriods WeierstrassInvariants WeierstrassP WeierstrassPPrime WeierstrassSigma WeierstrassZeta WeightedAdjacencyGraph WeightedAdjacencyMatrix WeightedData WeightedGraphQ Weights WelchWindow WheelGraph WhenEvent Which While White Whitespace WhitespaceCharacter WhittakerM WhittakerW WienerFilter WienerProcess WignerD WignerSemicircleDistribution WilksW WilksWTest WindowClickSelect WindowElements WindowFloating WindowFrame WindowFrameElements WindowMargins WindowMovable WindowOpacity WindowSelected WindowSize WindowStatusArea WindowTitle WindowToolbars WindowWidth With WolframAlpha WolframAlphaDate WolframAlphaQuantity WolframAlphaResult Word WordBoundary WordCharacter WordData WordSearch WordSeparators WorkingPrecision Write WriteString Wronskian ' + 'XMLElement XMLObject Xnor Xor ' + 'Yellow YuleDissimilarity ' + 'ZernikeR ZeroSymmetric ZeroTest ZeroWidthTimes Zeta ZetaZero ZipfDistribution ZTest ZTransform ' + '$Aborted $ActivationGroupID $ActivationKey $ActivationUserRegistered $AddOnsDirectory $AssertFunction $Assumptions $AsynchronousTask $BaseDirectory $BatchInput $BatchOutput $BoxForms $ByteOrdering $Canceled $CharacterEncoding $CharacterEncodings $CommandLine $CompilationTarget $ConditionHold $ConfiguredKernels $Context $ContextPath $ControlActiveSetting $CreationDate $CurrentLink $DateStringFormat $DefaultFont $DefaultFrontEnd $DefaultImagingDevice $DefaultPath $Display $DisplayFunction $DistributedContexts $DynamicEvaluation $Echo $Epilog $ExportFormats $Failed $FinancialDataSource $FormatType $FrontEnd $FrontEndSession $GeoLocation $HistoryLength $HomeDirectory $HTTPCookies $IgnoreEOF $ImagingDevices $ImportFormats $InitialDirectory $Input $InputFileName $InputStreamMethods $Inspector $InstallationDate $InstallationDirectory $InterfaceEnvironment $IterationLimit $KernelCount $KernelID $Language $LaunchDirectory $LibraryPath $LicenseExpirationDate $LicenseID $LicenseProcesses $LicenseServer $LicenseSubprocesses $LicenseType $Line $Linked $LinkSupported $LoadedFiles $MachineAddresses $MachineDomain $MachineDomains $MachineEpsilon $MachineID $MachineName $MachinePrecision $MachineType $MaxExtraPrecision $MaxLicenseProcesses $MaxLicenseSubprocesses $MaxMachineNumber $MaxNumber $MaxPiecewiseCases $MaxPrecision $MaxRootDegree $MessageGroups $MessageList $MessagePrePrint $Messages $MinMachineNumber $MinNumber $MinorReleaseNumber $MinPrecision $ModuleNumber $NetworkLicense $NewMessage $NewSymbol $Notebooks $NumberMarks $Off $OperatingSystem $Output $OutputForms $OutputSizeLimit $OutputStreamMethods $Packages $ParentLink $ParentProcessID $PasswordFile $PatchLevelID $Path $PathnameSeparator $PerformanceGoal $PipeSupported $Post $Pre $PreferencesDirectory $PrePrint $PreRead $PrintForms $PrintLiteral $ProcessID $ProcessorCount $ProcessorType $ProductInformation $ProgramName $RandomState $RecursionLimit $ReleaseNumber $RootDirectory $ScheduledTask $ScriptCommandLine $SessionID $SetParentLink $SharedFunctions $SharedVariables $SoundDisplay $SoundDisplayFunction $SuppressInputFormHeads $SynchronousEvaluation $SyntaxHandler $System $SystemCharacterEncoding $SystemID $SystemWordLength $TemporaryDirectory $TemporaryPrefix $TextStyle $TimedOut $TimeUnit $TimeZone $TopDirectory $TraceOff $TraceOn $TracePattern $TracePostAction $TracePreAction $Urgent $UserAddOnsDirectory $UserBaseDirectory $UserDocumentsDirectory $UserName $Version $VersionNumber',
    contains: [{
      className: 'comment',
      begin: /\(\*/, end: /\*\)/
    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE, {
      begin: /\{/, end: /\}/,
      illegal: /:/
    }]
  };
};

var matlab = function matlab(hljs) {
  var COMMON_CONTAINS = [hljs.C_NUMBER_MODE, {
    className: 'string',
    begin: '\'', end: '\'',
    contains: [hljs.BACKSLASH_ESCAPE, { begin: '\'\'' }]
  }];
  var TRANSPOSE = {
    relevance: 0,
    contains: [{
      begin: /'['\.]*/
    }]
  };

  return {
    keywords: {
      keyword: 'break case catch classdef continue else elseif end enumerated events for function ' + 'global if methods otherwise parfor persistent properties return spmd switch try while',
      built_in: 'sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan ' + 'atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot ' + 'cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog ' + 'realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal ' + 'cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli ' + 'besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma ' + 'gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms ' + 'nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones ' + 'eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ' + 'ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril ' + 'triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute ' + 'shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i inf nan ' + 'isnan isinf isfinite j why compan gallery hadamard hankel hilb invhilb magic pascal ' + 'rosser toeplitz vander wilkinson'
    },
    illegal: '(//|"|#|/\\*|\\s+/\\w+)',
    contains: [{
      className: 'function',
      beginKeywords: 'function', end: '$',
      contains: [hljs.UNDERSCORE_TITLE_MODE, {
        className: 'params',
        variants: [{ begin: '\\(', end: '\\)' }, { begin: '\\[', end: '\\]' }]
      }]
    }, {
      begin: /[a-zA-Z_][a-zA-Z_0-9]*'['\.]*/,
      returnBegin: true,
      relevance: 0,
      contains: [{ begin: /[a-zA-Z_][a-zA-Z_0-9]*/, relevance: 0 }, TRANSPOSE.contains[0]]
    }, {
      begin: '\\[', end: '\\]',
      contains: COMMON_CONTAINS,
      relevance: 0,
      starts: TRANSPOSE
    }, {
      begin: '\\{', end: /}/,
      contains: COMMON_CONTAINS,
      relevance: 0,
      starts: TRANSPOSE
    }, {
      // transpose operators at the end of a function call
      begin: /\)/,
      relevance: 0,
      starts: TRANSPOSE
    }, hljs.COMMENT('^\\s*\\%\\{\\s*$', '^\\s*\\%\\}\\s*$'), hljs.COMMENT('\\%', '$')].concat(COMMON_CONTAINS)
  };
};

var maxima = function maxima(hljs) {
  var KEYWORDS = 'if then else elseif for thru do while unless step in and or not';
  var LITERALS = 'true false unknown inf minf ind und %e %i %pi %phi %gamma';
  var BUILTIN_FUNCTIONS = ' abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate' + ' addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix' + ' adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type' + ' alias allroots alphacharp alphanumericp amortization %and annuity_fv' + ' annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2' + ' applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply' + ' arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger' + ' asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order' + ' asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method' + ' av average_degree backtrace bars barsplot barsplot_description base64 base64_decode' + ' bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx' + ' bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify' + ' bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized' + ' bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp' + ' bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition' + ' block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description' + ' break bug_report build_info|10 buildq build_sample burn cabs canform canten' + ' cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli' + ' cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform' + ' cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel' + ' cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial' + ' cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson' + ' cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay' + ' ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic' + ' cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2' + ' charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps' + ' chinese cholesky christof chromatic_index chromatic_number cint circulant_graph' + ' clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph' + ' clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse' + ' collectterms columnop columnspace columnswap columnvector combination combine' + ' comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph' + ' complete_graph complex_number_p components compose_functions concan concat' + ' conjugate conmetderiv connected_components connect_vertices cons constant' + ' constantp constituent constvalue cont2part content continuous_freq contortion' + ' contour_plot contract contract_edge contragrad contrib_ode convert coord' + ' copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1' + ' covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline' + ' ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph' + ' cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate' + ' declare declare_constvalue declare_dimensions declare_fundamental_dimensions' + ' declare_fundamental_units declare_qty declare_translated declare_unit_conversion' + ' declare_units declare_weights decsym defcon define define_alt_display define_variable' + ' defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten' + ' delta demo demoivre denom depends derivdegree derivlist describe desolve' + ' determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag' + ' diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export' + ' dimacs_import dimension dimensionless dimensions dimensions_as_list direct' + ' directory discrete_freq disjoin disjointp disolate disp dispcon dispform' + ' dispfun dispJordan display disprule dispterms distrib divide divisors divsum' + ' dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart' + ' draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring' + ' edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth' + ' einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome' + ' ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using' + ' ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi' + ' ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp' + ' equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors' + ' euler ev eval_string evenp every evolution evolution2d evundiff example exp' + ' expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci' + ' expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li' + ' expintegral_shi expintegral_si explicit explose exponentialize express expt' + ' exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum' + ' factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements' + ' fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge' + ' file_search file_type fillarray findde find_root find_root_abs find_root_error' + ' find_root_rel first fix flatten flength float floatnump floor flower_snark' + ' flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran' + ' fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp' + ' foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s' + ' from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp' + ' fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units' + ' fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized' + ' gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide' + ' gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym' + ' geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean' + ' geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string' + ' get_pixel get_plot_option get_tex_environment get_tex_environment_default' + ' get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close' + ' gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum' + ' gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import' + ' graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery' + ' graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph' + ' grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path' + ' hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite' + ' hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description' + ' hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph' + ' icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy' + ' ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart' + ' imetric implicit implicit_derivative implicit_plot indexed_tensor indices' + ' induced_subgraph inferencep inference_result infix info_display init_atensor' + ' init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions' + ' integrate intersect intersection intervalp intopois intosum invariant1 invariant2' + ' inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc' + ' inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns' + ' inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint' + ' invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph' + ' is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate' + ' isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph' + ' items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc' + ' jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd' + ' jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill' + ' killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis' + ' kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform' + ' kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete' + ' kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace' + ' kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2' + ' kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson' + ' kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange' + ' laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp' + ' lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length' + ' let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit' + ' Lindstedt linear linearinterpol linear_program linear_regression line_graph' + ' linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials' + ' listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry' + ' log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst' + ' lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact' + ' lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub' + ' lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma' + ' make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country' + ' make_polygon make_random_state make_rgb_picture makeset make_string_input_stream' + ' make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom' + ' maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display' + ' mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker' + ' max max_clique max_degree max_flow maximize_lp max_independent_set max_matching' + ' maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform' + ' mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete' + ' mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic' + ' mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t' + ' mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull' + ' median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree' + ' min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor' + ' minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton' + ' mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions' + ' multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff' + ' multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary' + ' natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext' + ' newdet new_graph newline newton new_variable next_prime nicedummies niceindices' + ' ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp' + ' nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst' + ' nthroot nullity nullspace num numbered_boundaries numberp number_to_octets' + ' num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai' + ' nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin' + ' oid_to_octets op opena opena_binary openr openr_binary openw openw_binary' + ' operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless' + ' orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap' + ' out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface' + ' parg parGosper parse_string parse_timedate part part2cont partfrac partition' + ' partition_set partpol path_digraph path_graph pathname_directory pathname_name' + ' pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform' + ' pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete' + ' pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal' + ' pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal' + ' pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t' + ' pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph' + ' petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding' + ' playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff' + ' poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar' + ' polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion' + ' poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal' + ' poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal' + ' poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation' + ' poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm' + ' poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form' + ' poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part' + ' poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension' + ' poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod' + ' powerseries powerset prefix prev_prime primep primes principal_components' + ' print printf printfile print_graph printpois printprops prodrac product properties' + ' propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct' + ' puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp' + ' quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile' + ' quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2' + ' quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f' + ' quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel' + ' quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal' + ' quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t' + ' quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t' + ' quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan' + ' radius random random_bernoulli random_beta random_binomial random_bipartite_graph' + ' random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform' + ' random_exp random_f random_gamma random_general_finite_discrete random_geometric' + ' random_graph random_graph1 random_gumbel random_hypergeometric random_laplace' + ' random_logistic random_lognormal random_negative_binomial random_network' + ' random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto' + ' random_permutation random_poisson random_rayleigh random_regular_graph random_student_t' + ' random_tournament random_tree random_weibull range rank rat ratcoef ratdenom' + ' ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump' + ' ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array' + ' read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline' + ' read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate' + ' realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar' + ' rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus' + ' rem remainder remarray rembox remcomps remcon remcoord remfun remfunction' + ' remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions' + ' remove_fundamental_units remove_plot_option remove_vertex rempart remrule' + ' remsym remvalue rename rename_file reset reset_displays residue resolvante' + ' resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein' + ' resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer' + ' rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann' + ' rinvariant risch rk rmdir rncombine romberg room rootscontract round row' + ' rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i' + ' scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description' + ' scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second' + ' sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight' + ' setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state' + ' set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications' + ' set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path' + ' show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform' + ' simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert' + ' sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial' + ' skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp' + ' skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric' + ' skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic' + ' skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t' + ' skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t' + ' skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph' + ' smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve' + ' solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export' + ' sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1' + ' spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition' + ' sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus' + ' ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot' + ' starplot_description status std std1 std_bernoulli std_beta std_binomial' + ' std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma' + ' std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace' + ' std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t' + ' std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull' + ' stemplot stirling stirling1 stirling2 strim striml strimr string stringout' + ' stringp strong_components struve_h struve_l sublis sublist sublist_indices' + ' submatrix subsample subset subsetp subst substinpart subst_parallel substpart' + ' substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext' + ' symbolp symmdifference symmetricp system take_channel take_inference tan' + ' tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract' + ' tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference' + ' test_normality test_proportion test_proportions_difference test_rank_sum' + ' test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display' + ' texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter' + ' toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep' + ' totalfourier totient tpartpol trace tracematrix trace_options transform_sample' + ' translate translate_file transpose treefale tree_reduce treillis treinat' + ' triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate' + ' truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph' + ' truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget' + ' ultraspherical underlying_graph undiff union unique uniteigenvectors unitp' + ' units unit_step unitvector unorder unsum untellrat untimer' + ' untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli' + ' var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform' + ' var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel' + ' var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial' + ' var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson' + ' var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp' + ' verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance' + ' vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle' + ' vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j' + ' wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian' + ' xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta' + ' zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors' + ' zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table' + ' absboxchar activecontexts adapt_depth additive adim aform algebraic' + ' algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic' + ' animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar' + ' asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top' + ' azimuth background background_color backsubst berlefact bernstein_explicit' + ' besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest' + ' border boundaries_array box boxchar breakup %c capping cauchysum cbrange' + ' cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics' + ' colorbox columns commutative complex cone context contexts contour contour_levels' + ' cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp' + ' cube current_let_rule_package cylinder data_file_name debugmode decreasing' + ' default_let_rule_package delay dependencies derivabbrev derivsubst detout' + ' diagmetric diff dim dimensions dispflag display2d|10 display_format_internal' + ' distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor' + ' doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules' + ' dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart' + ' edge_color edge_coloring edge_partition edge_type edge_width %edispflag' + ' elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer' + ' epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type' + ' %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand' + ' expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine' + ' factlim factorflag factorial_expand factors_only fb feature features' + ' file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10' + ' file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color' + ' fill_density filled_func fixed_vertices flipflag float2bf font font_size' + ' fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim' + ' gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command' + ' gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command' + ' gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command' + ' gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble' + ' gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args' + ' Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both' + ' head_length head_type height hypergeometric_representation %iargs ibase' + ' icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form' + ' ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval' + ' infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued' + ' integrate_use_rootsof integration_constant integration_constant_counter interpolate_color' + ' intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr' + ' julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment' + ' label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max' + ' leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear' + ' linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params' + ' linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname' + ' loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx' + ' logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros' + ' mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult' + ' matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10' + ' maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint' + ' maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp' + ' mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver' + ' modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag' + ' newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc' + ' noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np' + ' npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties' + ' opsubst optimprefix optionset orientation origin orthopoly_returns_intervals' + ' outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution' + ' %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart' + ' png_file pochhammer_max_index points pointsize point_size points_joined point_type' + ' poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm' + ' poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list' + ' poly_secondary_elimination_order poly_top_reduction_only posfun position' + ' powerdisp pred prederror primep_number_of_tests product_use_gamma program' + ' programmode promote_float_to_bigfloat prompt proportional_axes props psexpand' + ' ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof' + ' ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann' + ' ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw' + ' refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs' + ' rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy' + ' same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck' + ' setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width' + ' show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type' + ' show_vertices show_weight simp simplified_output simplify_products simpproduct' + ' simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn' + ' solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag' + ' stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda' + ' subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric' + ' tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials' + ' tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch' + ' tr track transcompile transform transform_xy translate_fast_arrays transparent' + ' transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex' + ' tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign' + ' trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars' + ' tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode' + ' tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes' + ' ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble' + ' usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition' + ' vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface' + ' wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel' + ' xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate' + ' xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel' + ' xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width' + ' ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis' + ' ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis' + ' yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob' + ' zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest';
  var SYMBOLS = '_ __ %|0 %%|0';

  return {
    lexemes: '[A-Za-z_%][0-9A-Za-z_%]*',
    keywords: {
      keyword: KEYWORDS,
      literal: LITERALS,
      built_in: BUILTIN_FUNCTIONS,
      symbol: SYMBOLS
    },
    contains: [{
      className: 'comment',
      begin: '/\\*',
      end: '\\*/',
      contains: ['self']
    }, hljs.QUOTE_STRING_MODE, {
      className: 'number',
      relevance: 0,
      variants: [{
        // float number w/ exponent
        // hmm, I wonder if we ought to include other exponent markers?
        begin: '\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Ee][-+]?\\d+\\b'
      }, {
        // bigfloat number
        begin: '\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Bb][-+]?\\d+\\b',
        relevance: 10
      }, {
        // float number w/out exponent
        // Doesn't seem to recognize floats which start with '.'
        begin: '\\b(\\.\\d+|\\d+\\.\\d+)\\b'
      }, {
        // integer in base up to 36
        // Doesn't seem to recognize integers which end with '.'
        begin: '\\b(\\d+|0[0-9A-Za-z]+)\\.?\\b'
      }]
    }],
    illegal: /@/
  };
};

var mel = function mel(hljs) {
  return {
    keywords: 'int float string vector matrix if else switch case default while do for in break ' + 'continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic ' + 'addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey ' + 'affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve ' + 'alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor ' + 'animDisplay animView annotate appendStringArray applicationName applyAttrPreset ' + 'applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx ' + 'artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu ' + 'artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand ' + 'assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface ' + 'attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu ' + 'attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp ' + 'attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery ' + 'autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults ' + 'bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership ' + 'bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType ' + 'boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu ' + 'buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge ' + 'cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch ' + 'catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox ' + 'character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp ' + 'checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip ' + 'clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore ' + 'closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter ' + 'cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color ' + 'colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp ' + 'colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem ' + 'componentEditor compositingInterop computePolysetVolume condition cone confirmDialog ' + 'connectAttr connectControl connectDynamic connectJoint connectionInfo constrain ' + 'constrainValue constructionHistory container containsMultibyte contextInfo control ' + 'convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation ' + 'convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache ' + 'cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel ' + 'cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver ' + 'cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor ' + 'createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer ' + 'createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse ' + 'currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx ' + 'curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface ' + 'curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox ' + 'defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete ' + 'deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes ' + 'delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo ' + 'dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable ' + 'disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected ' + 'displayColor displayCull displayLevelOfDetail displayPref displayRGBColor ' + 'displaySmoothness displayStats displayString displaySurface distanceDimContext ' + 'distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct ' + 'doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator ' + 'duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression ' + 'dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor ' + 'dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers ' + 'editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor ' + 'editorTemplate effector emit emitter enableDevice encodeString endString endsWith env ' + 'equivalent equivalentTol erf error eval evalDeferred evalEcho event ' + 'exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp ' + 'expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof ' + 'fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo ' + 'filetest filletCurve filter filterCurve filterExpand filterStudioImport ' + 'findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster ' + 'finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar ' + 'floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo ' + 'fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint ' + 'frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss ' + 'geometryConstraint getApplicationVersionAsFloat getAttr getClassification ' + 'getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes ' + 'getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender ' + 'glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl ' + 'gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid ' + 'gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap ' + 'HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor ' + 'HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached ' + 'HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel ' + 'headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey ' + 'hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender ' + 'hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox ' + 'iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel ' + 'ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem ' + 'ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform ' + 'insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance ' + 'instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp ' + 'interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf ' + 'isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect ' + 'itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx ' + 'jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner ' + 'keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx ' + 'keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx ' + 'keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx ' + 'keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor ' + 'layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList ' + 'lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep ' + 'listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory ' + 'listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation ' + 'listNodeTypes listPanelCategories listRelatives listSets listTransforms ' + 'listUnselected listerEditor loadFluid loadNewShelf loadPlugin ' + 'loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log ' + 'longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive ' + 'makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext ' + 'manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx ' + 'manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout ' + 'menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp ' + 'mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move ' + 'moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute ' + 'nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast ' + 'nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint ' + 'normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect ' + 'nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref ' + 'nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType ' + 'objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface ' + 'offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit ' + 'orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier ' + 'paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration ' + 'panelHistory paramDimContext paramDimension paramLocator parent parentConstraint ' + 'particle particleExists particleInstancer particleRenderInfo partition pasteKey ' + 'pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture ' + 'pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo ' + 'pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult ' + 'pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend ' + 'polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal ' + 'polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge ' + 'polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge ' + 'polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet ' + 'polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet ' + 'polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection ' + 'polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge ' + 'polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet ' + 'polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix ' + 'polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut ' + 'polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet ' + 'polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge ' + 'polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex ' + 'polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection ' + 'polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection ' + 'polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint ' + 'polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate ' + 'polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge ' + 'polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing ' + 'polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet ' + 'polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace ' + 'popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer ' + 'projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx ' + 'propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd ' + 'python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection ' + 'radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl ' + 'readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference ' + 'referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE ' + 'registerPluginResource rehash reloadImage removeJoint removeMultiInstance ' + 'removePanelCategory rename renameAttr renameSelectionList renameUI render ' + 'renderGlobalsNode renderInfo renderLayerButton renderLayerParent ' + 'renderLayerPostProcess renderLayerUnparent renderManip renderPartition ' + 'renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor ' + 'renderWindowSelectContext renderer reorder reorderDeformers requires reroot ' + 'resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget ' + 'reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx ' + 'rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout ' + 'runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage ' + 'saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale ' + 'scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor ' + 'sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable ' + 'scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt ' + 'searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey ' + 'selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType ' + 'selectedNodes selectionConnection separator setAttr setAttrEnumResource ' + 'setAttrMapping setAttrNiceNameResource setConstraintRestPosition ' + 'setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr ' + 'setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe ' + 'setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag ' + 'setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject ' + 'setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets ' + 'shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare ' + 'shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField ' + 'shortNameOf showHelp showHidden showManipCtx showSelectionInTitle ' + 'showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface ' + 'size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep ' + 'snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound ' + 'soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort ' + 'spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString ' + 'startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp ' + 'stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex ' + 'stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex ' + 'stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString ' + 'stringToStringArray strip stripPrefixFromName stroke subdAutoProjection ' + 'subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV ' + 'subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror ' + 'subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease ' + 'subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring ' + 'surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton ' + 'symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext ' + 'texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext ' + 'texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text ' + 'textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList ' + 'textToShelf textureDisplacePlane textureHairColor texturePlacementContext ' + 'textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath ' + 'toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower ' + 'toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper ' + 'trace track trackCtx transferAttributes transformCompare transformLimits translator ' + 'trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence ' + 'twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit ' + 'unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink ' + 'uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane ' + 'viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex ' + 'waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire ' + 'wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform',
    illegal: '</',
    contains: [hljs.C_NUMBER_MODE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, {
      className: 'string',
      begin: '`', end: '`',
      contains: [hljs.BACKSLASH_ESCAPE]
    }, { // eats variables
      begin: '[\\$\\%\\@](\\^\\w\\b|#\\w+|[^\\s\\w{]|{\\w+}|\\w+)'
    }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
  };
};

var mercury = function mercury(hljs) {
  var KEYWORDS = {
    keyword: 'module use_module import_module include_module end_module initialise ' + 'mutable initialize finalize finalise interface implementation pred ' + 'mode func type inst solver any_pred any_func is semidet det nondet ' + 'multi erroneous failure cc_nondet cc_multi typeclass instance where ' + 'pragma promise external trace atomic or_else require_complete_switch ' + 'require_det require_semidet require_multi require_nondet ' + 'require_cc_multi require_cc_nondet require_erroneous require_failure',
    meta:
    // pragma
    'inline no_inline type_spec source_file fact_table obsolete memo ' + 'loop_check minimal_model terminates does_not_terminate ' + 'check_termination promise_equivalent_clauses ' +
    // preprocessor
    'foreign_proc foreign_decl foreign_code foreign_type ' + 'foreign_import_module foreign_export_enum foreign_export ' + 'foreign_enum may_call_mercury will_not_call_mercury thread_safe ' + 'not_thread_safe maybe_thread_safe promise_pure promise_semipure ' + 'tabled_for_io local untrailed trailed attach_to_io_state ' + 'can_pass_as_mercury_type stable will_not_throw_exception ' + 'may_modify_trail will_not_modify_trail may_duplicate ' + 'may_not_duplicate affects_liveness does_not_affect_liveness ' + 'doesnt_affect_liveness no_sharing unknown_sharing sharing',
    built_in: 'some all not if then else true fail false try catch catch_any ' + 'semidet_true semidet_false semidet_fail impure_true impure semipure'
  };

  var COMMENT = hljs.COMMENT('%', '$');

  var NUMCODE = {
    className: 'number',
    begin: "0'.\\|0[box][0-9a-fA-F]*"
  };

  var ATOM = hljs.inherit(hljs.APOS_STRING_MODE, { relevance: 0 });
  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { relevance: 0 });
  var STRING_FMT = {
    className: 'subst',
    begin: '\\\\[abfnrtv]\\|\\\\x[0-9a-fA-F]*\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]',
    relevance: 0
  };
  STRING.contains.push(STRING_FMT);

  var IMPLICATION = {
    className: 'built_in',
    variants: [{ begin: '<=>' }, { begin: '<=', relevance: 0 }, { begin: '=>', relevance: 0 }, { begin: '/\\\\' }, { begin: '\\\\/' }]
  };

  var HEAD_BODY_CONJUNCTION = {
    className: 'built_in',
    variants: [{ begin: ':-\\|-->' }, { begin: '=', relevance: 0 }]
  };

  return {
    aliases: ['m', 'moo'],
    keywords: KEYWORDS,
    contains: [IMPLICATION, HEAD_BODY_CONJUNCTION, COMMENT, hljs.C_BLOCK_COMMENT_MODE, NUMCODE, hljs.NUMBER_MODE, ATOM, STRING, { begin: /:-/ // relevance booster
    }]
  };
};

var mipsasm = function mipsasm(hljs) {
  //local labels: %?[FB]?[AT]?\d{1,2}\w+
  return {
    case_insensitive: true,
    aliases: ['mips'],
    lexemes: '\\.?' + hljs.IDENT_RE,
    keywords: {
      meta:
      //GNU preprocs
      '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg ',
      built_in: '$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 ' + // integer registers
      '$16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 ' + // integer registers
      'zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 ' + // integer register aliases
      't0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 ' + // integer register aliases
      'k0 k1 gp sp fp ra ' + // integer register aliases
      '$f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 ' + // floating-point registers
      '$f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 ' + // floating-point registers
      'Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi ' + // Coprocessor 0 registers
      'HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId ' + // Coprocessor 0 registers
      'EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ' + // Coprocessor 0 registers
      'ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt ' // Coprocessor 0 registers
    },
    contains: [{
      className: 'keyword',
      begin: '\\b(' + //mnemonics
      // 32-bit integer instructions
      'addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|' + 'bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(\.hb)?|jr(\.hb)?|lbu?|lhu?|' + 'll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|' + 'multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|' + 'srlv?|subu?|sw[lr]?|xori?|wsbh|' +
      // floating-point instructions
      'abs\.[sd]|add\.[sd]|alnv.ps|bc1[ft]l?|' + 'c\.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et])\.[sd]|' + '(ceil|floor|round|trunc)\.[lw]\.[sd]|cfc1|cvt\.d\.[lsw]|' + 'cvt\.l\.[dsw]|cvt\.ps\.s|cvt\.s\.[dlw]|cvt\.s\.p[lu]|cvt\.w\.[dls]|' + 'div\.[ds]|ldx?c1|luxc1|lwx?c1|madd\.[sd]|mfc1|mov[fntz]?\.[ds]|' + 'msub\.[sd]|mth?c1|mul\.[ds]|neg\.[ds]|nmadd\.[ds]|nmsub\.[ds]|' + 'p[lu][lu]\.ps|recip\.fmt|r?sqrt\.[ds]|sdx?c1|sub\.[ds]|suxc1|' + 'swx?c1|' +
      // system control instructions
      'break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|' + 'rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|' + 'tlti?u?|tnei?|wait|wrpgpr' + ')',
      end: '\\s'
    }, hljs.COMMENT('[;#]', '$'), hljs.C_BLOCK_COMMENT_MODE, hljs.QUOTE_STRING_MODE, {
      className: 'string',
      begin: '\'',
      end: '[^\\\\]\'',
      relevance: 0
    }, {
      className: 'title',
      begin: '\\|', end: '\\|',
      illegal: '\\n',
      relevance: 0
    }, {
      className: 'number',
      variants: [{ begin: '0x[0-9a-f]+' }, //hex
      { begin: '\\b-?\\d+' //bare number
      }],
      relevance: 0
    }, {
      className: 'symbol',
      variants: [{ begin: '^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:' }, //GNU MIPS syntax
      { begin: '^\\s*[0-9]+:' }, // numbered local labels
      { begin: '[0-9]+[bf]' // number local label reference (backwards, forwards)
      }],
      relevance: 0
    }],
    illegal: '\/'
  };
};

var mizar = function mizar(hljs) {
  return {
    keywords: 'environ vocabularies notations constructors definitions ' + 'registrations theorems schemes requirements begin end definition ' + 'registration cluster existence pred func defpred deffunc theorem ' + 'proof let take assume then thus hence ex for st holds consider ' + 'reconsider such that and in provided of as from be being by means ' + 'equals implies iff redefine define now not or attr is mode ' + 'suppose per cases set thesis contradiction scheme reserve struct ' + 'correctness compatibility coherence symmetry assymetry ' + 'reflexivity irreflexivity connectedness uniqueness commutativity ' + 'idempotence involutiveness projectivity',
    contains: [hljs.COMMENT('::', '$')]
  };
};

var perl = function perl(hljs) {
  var PERL_KEYWORDS = 'getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ' + 'ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime ' + 'readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qq' + 'fileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent ' + 'shutdown dump chomp connect getsockname die socketpair close flock exists index shmget' + 'sub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr ' + 'unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 ' + 'getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline ' + 'endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand ' + 'mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink ' + 'getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr ' + 'untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link ' + 'getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller ' + 'lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and ' + 'sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 ' + 'chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach ' + 'tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedir' + 'ioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe ' + 'atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when';
  var SUBST = {
    className: 'subst',
    begin: '[$@]\\{', end: '\\}',
    keywords: PERL_KEYWORDS
  };
  var METHOD = {
    begin: '->{', end: '}'
    // contains defined later
  };
  var VAR = {
    variants: [{ begin: /\$\d/ }, { begin: /[\$%@](\^\w\b|#\w+(::\w+)*|{\w+}|\w+(::\w*)*)/ }, { begin: /[\$%@][^\s\w{]/, relevance: 0 }]
  };
  var STRING_CONTAINS = [hljs.BACKSLASH_ESCAPE, SUBST, VAR];
  var PERL_DEFAULT_CONTAINS = [VAR, hljs.HASH_COMMENT_MODE, hljs.COMMENT('^\\=\\w', '\\=cut', {
    endsWithParent: true
  }), METHOD, {
    className: 'string',
    contains: STRING_CONTAINS,
    variants: [{
      begin: 'q[qwxr]?\\s*\\(', end: '\\)',
      relevance: 5
    }, {
      begin: 'q[qwxr]?\\s*\\[', end: '\\]',
      relevance: 5
    }, {
      begin: 'q[qwxr]?\\s*\\{', end: '\\}',
      relevance: 5
    }, {
      begin: 'q[qwxr]?\\s*\\|', end: '\\|',
      relevance: 5
    }, {
      begin: 'q[qwxr]?\\s*\\<', end: '\\>',
      relevance: 5
    }, {
      begin: 'qw\\s+q', end: 'q',
      relevance: 5
    }, {
      begin: '\'', end: '\'',
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      begin: '"', end: '"'
    }, {
      begin: '`', end: '`',
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      begin: '{\\w+}',
      contains: [],
      relevance: 0
    }, {
      begin: '\-?\\w+\\s*\\=\\>',
      contains: [],
      relevance: 0
    }]
  }, {
    className: 'number',
    begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
    relevance: 0
  }, { // regexp container
    begin: '(\\/\\/|' + hljs.RE_STARTERS_RE + '|\\b(split|return|print|reverse|grep)\\b)\\s*',
    keywords: 'split return print reverse grep',
    relevance: 0,
    contains: [hljs.HASH_COMMENT_MODE, {
      className: 'regexp',
      begin: '(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*',
      relevance: 10
    }, {
      className: 'regexp',
      begin: '(m|qr)?/', end: '/[a-z]*',
      contains: [hljs.BACKSLASH_ESCAPE],
      relevance: 0 // allows empty "//" which is a common comment delimiter in other languages
    }]
  }, {
    className: 'function',
    beginKeywords: 'sub', end: '(\\s*\\(.*?\\))?[;{]', excludeEnd: true,
    relevance: 5,
    contains: [hljs.TITLE_MODE]
  }, {
    begin: '-\\w\\b',
    relevance: 0
  }, {
    begin: "^__DATA__$",
    end: "^__END__$",
    subLanguage: 'mojolicious',
    contains: [{
      begin: "^@@.*",
      end: "$",
      className: "comment"
    }]
  }];
  SUBST.contains = PERL_DEFAULT_CONTAINS;
  METHOD.contains = PERL_DEFAULT_CONTAINS;

  return {
    aliases: ['pl', 'pm'],
    lexemes: /[\w\.]+/,
    keywords: PERL_KEYWORDS,
    contains: PERL_DEFAULT_CONTAINS
  };
};

var mojolicious = function mojolicious(hljs) {
  return {
    subLanguage: 'xml',
    contains: [{
      className: 'meta',
      begin: '^__(END|DATA)__$'
    },
    // mojolicious line
    {
      begin: "^\\s*%{1,2}={0,2}", end: '$',
      subLanguage: 'perl'
    },
    // mojolicious block
    {
      begin: "<%{1,2}={0,2}",
      end: "={0,1}%>",
      subLanguage: 'perl',
      excludeBegin: true,
      excludeEnd: true
    }]
  };
};

var monkey = function monkey(hljs) {
  var NUMBER = {
    className: 'number', relevance: 0,
    variants: [{
      begin: '[$][a-fA-F0-9]+'
    }, hljs.NUMBER_MODE]
  };

  return {
    case_insensitive: true,
    keywords: {
      keyword: 'public private property continue exit extern new try catch ' + 'eachin not abstract final select case default const local global field ' + 'end if then else elseif endif while wend repeat until forever for ' + 'to step next return module inline throw import',

      built_in: 'DebugLog DebugStop Error Print ACos ACosr ASin ASinr ATan ATan2 ATan2r ATanr Abs Abs Ceil ' + 'Clamp Clamp Cos Cosr Exp Floor Log Max Max Min Min Pow Sgn Sgn Sin Sinr Sqrt Tan Tanr Seed PI HALFPI TWOPI',

      literal: 'true false null and or shl shr mod'
    },
    illegal: /\/\*/,
    contains: [hljs.COMMENT('#rem', '#end'), hljs.COMMENT("'", '$', {
      relevance: 0
    }), {
      className: 'function',
      beginKeywords: 'function method', end: '[(=:]|$',
      illegal: /\n/,
      contains: [hljs.UNDERSCORE_TITLE_MODE]
    }, {
      className: 'class',
      beginKeywords: 'class interface', end: '$',
      contains: [{
        beginKeywords: 'extends implements'
      }, hljs.UNDERSCORE_TITLE_MODE]
    }, {
      className: 'built_in',
      begin: '\\b(self|super)\\b'
    }, {
      className: 'meta',
      begin: '\\s*#', end: '$',
      keywords: { 'meta-keyword': 'if else elseif endif end then' }
    }, {
      className: 'meta',
      begin: '^\\s*strict\\b'
    }, {
      beginKeywords: 'alias', end: '=',
      contains: [hljs.UNDERSCORE_TITLE_MODE]
    }, hljs.QUOTE_STRING_MODE, NUMBER]
  };
};

var moonscript = function moonscript(hljs) {
  var KEYWORDS = {
    keyword:
    // Moonscript keywords
    'if then not for in while do return else elseif break continue switch and or ' + 'unless when class extends super local import export from using',
    literal: 'true false nil',
    built_in: '_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load ' + 'loadfile loadstring module next pairs pcall print rawequal rawget rawset require ' + 'select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug ' + 'io math os package string table'
  };
  var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
  var SUBST = {
    className: 'subst',
    begin: /#\{/, end: /}/,
    keywords: KEYWORDS
  };
  var EXPRESSIONS = [hljs.inherit(hljs.C_NUMBER_MODE, { starts: { end: '(\\s*/)?', relevance: 0 } }), // a number tries to eat the following slash to prevent treating it as a regexp
  {
    className: 'string',
    variants: [{
      begin: /'/, end: /'/,
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      begin: /"/, end: /"/,
      contains: [hljs.BACKSLASH_ESCAPE, SUBST]
    }]
  }, {
    className: 'built_in',
    begin: '@__' + hljs.IDENT_RE
  }, {
    begin: '@' + hljs.IDENT_RE // relevance booster on par with CoffeeScript
  }, {
    begin: hljs.IDENT_RE + '\\\\' + hljs.IDENT_RE // inst\method
  }];
  SUBST.contains = EXPRESSIONS;

  var TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
  var PARAMS_RE = '(\\(.*\\))?\\s*\\B[-=]>';
  var PARAMS = {
    className: 'params',
    begin: '\\([^\\(]', returnBegin: true,
    /* We need another contained nameless mode to not have every nested
    pair of parens to be called "params" */
    contains: [{
      begin: /\(/, end: /\)/,
      keywords: KEYWORDS,
      contains: ['self'].concat(EXPRESSIONS)
    }]
  };

  return {
    aliases: ['moon'],
    keywords: KEYWORDS,
    illegal: /\/\*/,
    contains: EXPRESSIONS.concat([hljs.COMMENT('--', '$'), {
      className: 'function', // function: -> =>
      begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + PARAMS_RE, end: '[-=]>',
      returnBegin: true,
      contains: [TITLE, PARAMS]
    }, {
      begin: /[\(,:=]\s*/, // anonymous function start
      relevance: 0,
      contains: [{
        className: 'function',
        begin: PARAMS_RE, end: '[-=]>',
        returnBegin: true,
        contains: [PARAMS]
      }]
    }, {
      className: 'class',
      beginKeywords: 'class',
      end: '$',
      illegal: /[:="\[\]]/,
      contains: [{
        beginKeywords: 'extends',
        endsWithParent: true,
        illegal: /[:="\[\]]/,
        contains: [TITLE]
      }, TITLE]
    }, {
      className: 'name', // table
      begin: JS_IDENT_RE + ':', end: ':',
      returnBegin: true, returnEnd: true,
      relevance: 0
    }])
  };
};

var n1ql = function n1ql(hljs) {
  return {
    case_insensitive: true,
    contains: [{
      beginKeywords: 'build create index delete drop explain infer|10 insert merge prepare select update upsert|10',
      end: /;/, endsWithParent: true,
      keywords: {
        // Taken from http://developer.couchbase.com/documentation/server/current/n1ql/n1ql-language-reference/reservedwords.html
        keyword: 'all alter analyze and any array as asc begin between binary boolean break bucket build by call ' + 'case cast cluster collate collection commit connect continue correlate cover create database ' + 'dataset datastore declare decrement delete derived desc describe distinct do drop each element ' + 'else end every except exclude execute exists explain fetch first flatten for force from ' + 'function grant group gsi having if ignore ilike in include increment index infer inline inner ' + 'insert intersect into is join key keys keyspace known last left let letting like limit lsm map ' + 'mapping matched materialized merge minus namespace nest not number object offset on ' + 'option or order outer over parse partition password path pool prepare primary private privilege ' + 'procedure public raw realm reduce rename return returning revoke right role rollback satisfies ' + 'schema select self semi set show some start statistics string system then to transaction trigger ' + 'truncate under union unique unknown unnest unset update upsert use user using validate value ' + 'valued values via view when where while with within work xor',
        // Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/literals.html
        literal: 'true false null missing|5',
        // Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/functions.html
        built_in: 'array_agg array_append array_concat array_contains array_count array_distinct array_ifnull array_length ' + 'array_max array_min array_position array_prepend array_put array_range array_remove array_repeat array_replace ' + 'array_reverse array_sort array_sum avg count max min sum greatest least ifmissing ifmissingornull ifnull ' + 'missingif nullif ifinf ifnan ifnanorinf naninf neginfif posinfif clock_millis clock_str date_add_millis ' + 'date_add_str date_diff_millis date_diff_str date_part_millis date_part_str date_trunc_millis date_trunc_str ' + 'duration_to_str millis str_to_millis millis_to_str millis_to_utc millis_to_zone_name now_millis now_str ' + 'str_to_duration str_to_utc str_to_zone_name decode_json encode_json encoded_size poly_length base64 base64_encode ' + 'base64_decode meta uuid abs acos asin atan atan2 ceil cos degrees e exp ln log floor pi power radians random ' + 'round sign sin sqrt tan trunc object_length object_names object_pairs object_inner_pairs object_values ' + 'object_inner_values object_add object_put object_remove object_unwrap regexp_contains regexp_like regexp_position ' + 'regexp_replace contains initcap length lower ltrim position repeat replace rtrim split substr title trim upper ' + 'isarray isatom isboolean isnumber isobject isstring type toarray toatom toboolean tonumber toobject tostring'
      },
      contains: [{
        className: 'string',
        begin: '\'', end: '\'',
        contains: [hljs.BACKSLASH_ESCAPE],
        relevance: 0
      }, {
        className: 'string',
        begin: '"', end: '"',
        contains: [hljs.BACKSLASH_ESCAPE],
        relevance: 0
      }, {
        className: 'symbol',
        begin: '`', end: '`',
        contains: [hljs.BACKSLASH_ESCAPE],
        relevance: 2
      }, hljs.C_NUMBER_MODE, hljs.C_BLOCK_COMMENT_MODE]
    }, hljs.C_BLOCK_COMMENT_MODE]
  };
};

var nginx = function nginx(hljs) {
  var VAR = {
    className: 'variable',
    variants: [{ begin: /\$\d+/ }, { begin: /\$\{/, end: /}/ }, { begin: '[\\$\\@]' + hljs.UNDERSCORE_IDENT_RE }]
  };
  var DEFAULT = {
    endsWithParent: true,
    lexemes: '[a-z/_]+',
    keywords: {
      literal: 'on off yes no true false none blocked debug info notice warn error crit ' + 'select break last permanent redirect kqueue rtsig epoll poll /dev/poll'
    },
    relevance: 0,
    illegal: '=>',
    contains: [hljs.HASH_COMMENT_MODE, {
      className: 'string',
      contains: [hljs.BACKSLASH_ESCAPE, VAR],
      variants: [{ begin: /"/, end: /"/ }, { begin: /'/, end: /'/ }]
    },
    // this swallows entire URLs to avoid detecting numbers within
    {
      begin: '([a-z]+):/', end: '\\s', endsWithParent: true, excludeEnd: true,
      contains: [VAR]
    }, {
      className: 'regexp',
      contains: [hljs.BACKSLASH_ESCAPE, VAR],
      variants: [{ begin: "\\s\\^", end: "\\s|{|;", returnEnd: true },
      // regexp locations (~, ~*)
      { begin: "~\\*?\\s+", end: "\\s|{|;", returnEnd: true },
      // *.example.com
      { begin: "\\*(\\.[a-z\\-]+)+" },
      // sub.example.*
      { begin: "([a-z\\-]+\\.)+\\*" }]
    },
    // IP
    {
      className: 'number',
      begin: '\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b'
    },
    // units
    {
      className: 'number',
      begin: '\\b\\d+[kKmMgGdshdwy]*\\b',
      relevance: 0
    }, VAR]
  };

  return {
    aliases: ['nginxconf'],
    contains: [hljs.HASH_COMMENT_MODE, {
      begin: hljs.UNDERSCORE_IDENT_RE + '\\s+{', returnBegin: true,
      end: '{',
      contains: [{
        className: 'section',
        begin: hljs.UNDERSCORE_IDENT_RE
      }],
      relevance: 0
    }, {
      begin: hljs.UNDERSCORE_IDENT_RE + '\\s', end: ';|{', returnBegin: true,
      contains: [{
        className: 'attribute',
        begin: hljs.UNDERSCORE_IDENT_RE,
        starts: DEFAULT
      }],
      relevance: 0
    }],
    illegal: '[^\\s\\}]'
  };
};

var nimrod = function nimrod(hljs) {
  return {
    aliases: ['nim'],
    keywords: {
      keyword: 'addr and as asm bind block break case cast const continue converter ' + 'discard distinct div do elif else end enum except export finally ' + 'for from generic if import in include interface is isnot iterator ' + 'let macro method mixin mod nil not notin object of or out proc ptr ' + 'raise ref return shl shr static template try tuple type using var ' + 'when while with without xor yield',
      literal: 'shared guarded stdin stdout stderr result true false',
      built_in: 'int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 float ' + 'float32 float64 bool char string cstring pointer expr stmt void ' + 'auto any range array openarray varargs seq set clong culong cchar ' + 'cschar cshort cint csize clonglong cfloat cdouble clongdouble ' + 'cuchar cushort cuint culonglong cstringarray semistatic'
    },
    contains: [{
      className: 'meta', // Actually pragma
      begin: /{\./,
      end: /\.}/,
      relevance: 10
    }, {
      className: 'string',
      begin: /[a-zA-Z]\w*"/,
      end: /"/,
      contains: [{ begin: /""/ }]
    }, {
      className: 'string',
      begin: /([a-zA-Z]\w*)?"""/,
      end: /"""/
    }, hljs.QUOTE_STRING_MODE, {
      className: 'type',
      begin: /\b[A-Z]\w+\b/,
      relevance: 0
    }, {
      className: 'number',
      relevance: 0,
      variants: [{ begin: /\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/ }, { begin: /\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/ }, { begin: /\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/ }, { begin: /\b(\d[_\d]*)('?[iIuUfF](8|16|32|64))?/ }]
    }, hljs.HASH_COMMENT_MODE]
  };
};

var nix = function nix(hljs) {
  var NIX_KEYWORDS = {
    keyword: 'rec with let in inherit assert if else then',
    literal: 'true false or and null',
    built_in: 'import abort baseNameOf dirOf isNull builtins map removeAttrs throw ' + 'toString derivation'
  };
  var ANTIQUOTE = {
    className: 'subst',
    begin: /\$\{/,
    end: /}/,
    keywords: NIX_KEYWORDS
  };
  var ATTRS = {
    begin: /[a-zA-Z0-9-_]+(\s*=)/, returnBegin: true,
    relevance: 0,
    contains: [{
      className: 'attr',
      begin: /\S+/
    }]
  };
  var STRING = {
    className: 'string',
    contains: [ANTIQUOTE],
    variants: [{ begin: "''", end: "''" }, { begin: '"', end: '"' }]
  };
  var EXPRESSIONS = [hljs.NUMBER_MODE, hljs.HASH_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRING, ATTRS];
  ANTIQUOTE.contains = EXPRESSIONS;
  return {
    aliases: ["nixos"],
    keywords: NIX_KEYWORDS,
    contains: EXPRESSIONS
  };
};

var nsis = function nsis(hljs) {
  var CONSTANTS = {
    className: 'variable',
    begin: /\$(ADMINTOOLS|APPDATA|CDBURN_AREA|CMDLINE|COMMONFILES32|COMMONFILES64|COMMONFILES|COOKIES|DESKTOP|DOCUMENTS|EXEDIR|EXEFILE|EXEPATH|FAVORITES|FONTS|HISTORY|HWNDPARENT|INSTDIR|INTERNET_CACHE|LANGUAGE|LOCALAPPDATA|MUSIC|NETHOOD|OUTDIR|PICTURES|PLUGINSDIR|PRINTHOOD|PROFILE|PROGRAMFILES32|PROGRAMFILES64|PROGRAMFILES|QUICKLAUNCH|RECENT|RESOURCES_LOCALIZED|RESOURCES|SENDTO|SMPROGRAMS|SMSTARTUP|STARTMENU|SYSDIR|TEMP|TEMPLATES|VIDEOS|WINDIR)/
  };

  var DEFINES = {
    // ${defines}
    className: 'variable',
    begin: /\$+{[\w\.:-]+}/
  };

  var VARIABLES = {
    // $variables
    className: 'variable',
    begin: /\$+\w+/,
    illegal: /\(\){}/
  };

  var LANGUAGES = {
    // $(language_strings)
    className: 'variable',
    begin: /\$+\([\w\^\.:-]+\)/
  };

  var PARAMETERS = {
    // command parameters
    className: 'params',
    begin: '(ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HKCR|HKCU|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM|HKPD|HKU|IDABORT|IDCANCEL|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)'
  };

  var COMPILER = {
    // !compiler_flags
    className: 'keyword',
    begin: /\!(addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversionsystem|ifdef|ifmacrodef|ifmacrondef|ifndef|if|include|insertmacro|macroend|macro|makensis|packhdr|searchparse|searchreplace|tempfile|undef|verbose|warning)/
  };

  var METACHARS = {
    // $\n, $\r, $\t, $$
    className: 'subst',
    begin: /\$(\\[nrt]|\$)/
  };

  var PLUGINS = {
    // plug::ins
    className: 'class',
    begin: /\w+\:\:\w+/
  };

  var STRING = {
    className: 'string',
    variants: [{
      begin: '"', end: '"'
    }, {
      begin: '\'', end: '\''
    }, {
      begin: '`', end: '`'
    }],
    illegal: /\n/,
    contains: [METACHARS, CONSTANTS, DEFINES, VARIABLES, LANGUAGES]
  };

  return {
    case_insensitive: false,
    keywords: {
      keyword: 'Abort AddBrandingImage AddSize AllowRootDirInstall AllowSkipFiles AutoCloseWindow BGFont BGGradient BrandingText BringToFront Call CallInstDLL Caption ChangeUI CheckBitmap ClearErrors CompletedText ComponentText CopyFiles CRCCheck CreateDirectory CreateFont CreateShortCut Delete DeleteINISec DeleteINIStr DeleteRegKey DeleteRegValue DetailPrint DetailsButtonText DirText DirVar DirVerify EnableWindow EnumRegKey EnumRegValue Exch Exec ExecShell ExecWait ExpandEnvStrings File FileBufSize FileClose FileErrorText FileOpen FileRead FileReadByte FileReadUTF16LE FileReadWord FileSeek FileWrite FileWriteByte FileWriteUTF16LE FileWriteWord FindClose FindFirst FindNext FindWindow FlushINI FunctionEnd GetCurInstType GetCurrentAddress GetDlgItem GetDLLVersion GetDLLVersionLocal GetErrorLevel GetFileTime GetFileTimeLocal GetFullPathName GetFunctionAddress GetInstDirError GetLabelAddress GetTempFileName Goto HideWindow Icon IfAbort IfErrors IfFileExists IfRebootFlag IfSilent InitPluginsDir InstallButtonText InstallColors InstallDir InstallDirRegKey InstProgressFlags InstType InstTypeGetText InstTypeSetText IntCmp IntCmpU IntFmt IntOp IsWindow LangString LicenseBkColor LicenseData LicenseForceSelection LicenseLangString LicenseText LoadLanguageFile LockWindow LogSet LogText ManifestDPIAware ManifestSupportedOS MessageBox MiscButtonText Name Nop OutFile Page PageCallbacks PageExEnd Pop Push Quit ReadEnvStr ReadINIStr ReadRegDWORD ReadRegStr Reboot RegDLL Rename RequestExecutionLevel ReserveFile Return RMDir SearchPath SectionEnd SectionGetFlags SectionGetInstTypes SectionGetSize SectionGetText SectionGroupEnd SectionIn SectionSetFlags SectionSetInstTypes SectionSetSize SectionSetText SendMessage SetAutoClose SetBrandingImage SetCompress SetCompressor SetCompressorDictSize SetCtlColors SetCurInstType SetDatablockOptimize SetDateSave SetDetailsPrint SetDetailsView SetErrorLevel SetErrors SetFileAttributes SetFont SetOutPath SetOverwrite SetRebootFlag SetRegView SetShellVarContext SetSilent ShowInstDetails ShowUninstDetails ShowWindow SilentInstall SilentUnInstall Sleep SpaceTexts StrCmp StrCmpS StrCpy StrLen SubCaption Unicode UninstallButtonText UninstallCaption UninstallIcon UninstallSubCaption UninstallText UninstPage UnRegDLL Var VIAddVersionKey VIFileVersion VIProductVersion WindowIcon WriteINIStr WriteRegBin WriteRegDWORD WriteRegExpandStr WriteRegStr WriteUninstaller XPStyle',
      literal: 'admin all auto both bottom bzip2 colored components current custom directory false force hide highest ifdiff ifnewer instfiles lastused leave left license listonly lzma nevershow none normal notset off on open print right show silent silentlog smooth textonly top true try un.components un.custom un.directory un.instfiles un.license uninstConfirm user Win10 Win7 Win8 WinVista zlib'
    },
    contains: [hljs.HASH_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.COMMENT(';', '$', {
      relevance: 0
    }), {
      className: 'function',
      beginKeywords: 'Function PageEx Section SectionGroup', end: '$'
    }, STRING, COMPILER, DEFINES, VARIABLES, LANGUAGES, PARAMETERS, PLUGINS, hljs.NUMBER_MODE]
  };
};

var objectivec = function objectivec(hljs) {
  var API_CLASS = {
    className: 'built_in',
    begin: '\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+'
  };
  var OBJC_KEYWORDS = {
    keyword: 'int float while char export sizeof typedef const struct for union ' + 'unsigned long volatile static bool mutable if do return goto void ' + 'enum else break extern asm case short default double register explicit ' + 'signed typename this switch continue wchar_t inline readonly assign ' + 'readwrite self @synchronized id typeof ' + 'nonatomic super unichar IBOutlet IBAction strong weak copy ' + 'in out inout bycopy byref oneway __strong __weak __block __autoreleasing ' + '@private @protected @public @try @property @end @throw @catch @finally ' + '@autoreleasepool @synthesize @dynamic @selector @optional @required ' + '@encode @package @import @defs @compatibility_alias ' + '__bridge __bridge_transfer __bridge_retained __bridge_retain ' + '__covariant __contravariant __kindof ' + '_Nonnull _Nullable _Null_unspecified ' + '__FUNCTION__ __PRETTY_FUNCTION__ __attribute__ ' + 'getter setter retain unsafe_unretained ' + 'nonnull nullable null_unspecified null_resettable class instancetype ' + 'NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER ' + 'NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED ' + 'NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE ' + 'NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END ' + 'NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW ' + 'NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN',
    literal: 'false true FALSE TRUE nil YES NO NULL',
    built_in: 'BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once'
  };
  var LEXEMES = /[a-zA-Z@][a-zA-Z0-9_]*/;
  var CLASS_KEYWORDS = '@interface @class @protocol @implementation';
  return {
    aliases: ['mm', 'objc', 'obj-c'],
    keywords: OBJC_KEYWORDS,
    lexemes: LEXEMES,
    illegal: '</',
    contains: [API_CLASS, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.C_NUMBER_MODE, hljs.QUOTE_STRING_MODE, {
      className: 'string',
      variants: [{
        begin: '@"', end: '"',
        illegal: '\\n',
        contains: [hljs.BACKSLASH_ESCAPE]
      }, {
        begin: '\'', end: '[^\\\\]\'',
        illegal: '[^\\\\][^\']'
      }]
    }, {
      className: 'meta',
      begin: '#',
      end: '$',
      contains: [{
        className: 'meta-string',
        variants: [{ begin: '\"', end: '\"' }, { begin: '<', end: '>' }]
      }]
    }, {
      className: 'class',
      begin: '(' + CLASS_KEYWORDS.split(' ').join('|') + ')\\b', end: '({|$)', excludeEnd: true,
      keywords: CLASS_KEYWORDS, lexemes: LEXEMES,
      contains: [hljs.UNDERSCORE_TITLE_MODE]
    }, {
      begin: '\\.' + hljs.UNDERSCORE_IDENT_RE,
      relevance: 0
    }]
  };
};

var ocaml = function ocaml(hljs) {
  /* missing support for heredoc-like string (OCaml 4.0.2+) */
  return {
    aliases: ['ml'],
    keywords: {
      keyword: 'and as assert asr begin class constraint do done downto else end ' + 'exception external for fun function functor if in include ' + 'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method ' + 'mod module mutable new object of open! open or private rec sig struct ' + 'then to try type val! val virtual when while with ' +
      /* camlp4 */
      'parser value',
      built_in:
      /* built-in types */
      'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit ' +
      /* (some) types in Pervasives */
      'in_channel out_channel ref',
      literal: 'true false'
    },
    illegal: /\/\/|>>/,
    lexemes: '[a-z_]\\w*!?',
    contains: [{
      className: 'literal',
      begin: '\\[(\\|\\|)?\\]|\\(\\)',
      relevance: 0
    }, hljs.COMMENT('\\(\\*', '\\*\\)', {
      contains: ['self']
    }), { /* type variable */
      className: 'symbol',
      begin: '\'[A-Za-z_](?!\')[\\w\']*'
      /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
    }, { /* polymorphic variant */
      className: 'type',
      begin: '`[A-Z][\\w\']*'
    }, { /* module or constructor */
      className: 'type',
      begin: '\\b[A-Z][\\w\']*',
      relevance: 0
    }, { /* don't color identifiers, but safely catch all identifiers with '*/
      begin: '[a-z_]\\w*\'[\\w\']*', relevance: 0
    }, hljs.inherit(hljs.APOS_STRING_MODE, { className: 'string', relevance: 0 }), hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }), {
      className: 'number',
      begin: '\\b(0[xX][a-fA-F0-9_]+[Lln]?|' + '0[oO][0-7_]+[Lln]?|' + '0[bB][01_]+[Lln]?|' + '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',
      relevance: 0
    }, {
      begin: /[-=]>/ // relevance booster
    }]
  };
};

var openscad = function openscad(hljs) {
	var SPECIAL_VARS = {
		className: 'keyword',
		begin: '\\$(f[asn]|t|vp[rtd]|children)'
	},
	    LITERALS = {
		className: 'literal',
		begin: 'false|true|PI|undef'
	},
	    NUMBERS = {
		className: 'number',
		begin: '\\b\\d+(\\.\\d+)?(e-?\\d+)?', //adds 1e5, 1e-10
		relevance: 0
	},
	    STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
	    PREPRO = {
		className: 'meta',
		keywords: { 'meta-keyword': 'include use' },
		begin: 'include|use <',
		end: '>'
	},
	    PARAMS = {
		className: 'params',
		begin: '\\(', end: '\\)',
		contains: ['self', NUMBERS, STRING, SPECIAL_VARS, LITERALS]
	},
	    MODIFIERS = {
		begin: '[*!#%]',
		relevance: 0
	},
	    FUNCTIONS = {
		className: 'function',
		beginKeywords: 'module function',
		end: '\\=|\\{',
		contains: [PARAMS, hljs.UNDERSCORE_TITLE_MODE]
	};

	return {
		aliases: ['scad'],
		keywords: {
			keyword: 'function module include use for intersection_for if else \\%',
			literal: 'false true PI undef',
			built_in: 'circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign'
		},
		contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, PREPRO, STRING, SPECIAL_VARS, MODIFIERS, FUNCTIONS]
	};
};

var oxygene = function oxygene(hljs) {
  var OXYGENE_KEYWORDS = 'abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue ' + 'create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false ' + 'final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited ' + 'inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of ' + 'old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly ' + 'record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple ' + 'type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal ' + 'register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained';
  var CURLY_COMMENT = hljs.COMMENT('{', '}', {
    relevance: 0
  });
  var PAREN_COMMENT = hljs.COMMENT('\\(\\*', '\\*\\)', {
    relevance: 10
  });
  var STRING = {
    className: 'string',
    begin: '\'', end: '\'',
    contains: [{ begin: '\'\'' }]
  };
  var CHAR_STRING = {
    className: 'string', begin: '(#\\d+)+'
  };
  var FUNCTION = {
    className: 'function',
    beginKeywords: 'function constructor destructor procedure method', end: '[:;]',
    keywords: 'function constructor|10 destructor|10 procedure|10 method|10',
    contains: [hljs.TITLE_MODE, {
      className: 'params',
      begin: '\\(', end: '\\)',
      keywords: OXYGENE_KEYWORDS,
      contains: [STRING, CHAR_STRING]
    }, CURLY_COMMENT, PAREN_COMMENT]
  };
  return {
    case_insensitive: true,
    lexemes: /\.?\w+/,
    keywords: OXYGENE_KEYWORDS,
    illegal: '("|\\$[G-Zg-z]|\\/\\*|</|=>|->)',
    contains: [CURLY_COMMENT, PAREN_COMMENT, hljs.C_LINE_COMMENT_MODE, STRING, CHAR_STRING, hljs.NUMBER_MODE, FUNCTION, {
      className: 'class',
      begin: '=\\bclass\\b', end: 'end;',
      keywords: OXYGENE_KEYWORDS,
      contains: [STRING, CHAR_STRING, CURLY_COMMENT, PAREN_COMMENT, hljs.C_LINE_COMMENT_MODE, FUNCTION]
    }]
  };
};

var parser3 = function parser3(hljs) {
  var CURLY_SUBCOMMENT = hljs.COMMENT('{', '}', {
    contains: ['self']
  });
  return {
    subLanguage: 'xml', relevance: 0,
    contains: [hljs.COMMENT('^#', '$'), hljs.COMMENT('\\^rem{', '}', {
      relevance: 10,
      contains: [CURLY_SUBCOMMENT]
    }), {
      className: 'meta',
      begin: '^@(?:BASE|USE|CLASS|OPTIONS)$',
      relevance: 10
    }, {
      className: 'title',
      begin: '@[\\w\\-]+\\[[\\w^;\\-]*\\](?:\\[[\\w^;\\-]*\\])?(?:.*)$'
    }, {
      className: 'variable',
      begin: '\\$\\{?[\\w\\-\\.\\:]+\\}?'
    }, {
      className: 'keyword',
      begin: '\\^[\\w\\-\\.\\:]+'
    }, {
      className: 'number',
      begin: '\\^#[0-9a-fA-F]+'
    }, hljs.C_NUMBER_MODE]
  };
};

var pf = function pf(hljs) {
  var MACRO = {
    className: 'variable',
    begin: /\$[\w\d#@][\w\d_]*/
  };
  var TABLE = {
    className: 'variable',
    begin: /<(?!\/)/, end: />/
  };
  return {
    aliases: ['pf.conf'],
    lexemes: /[a-z0-9_<>-]+/,
    keywords: {
      built_in: /* block match pass are "actions" in pf.conf(5), the rest are
                 * lexically similar top-level commands.
                 */
      'block match pass load anchor|5 antispoof|10 set table',
      keyword: 'in out log quick on rdomain inet inet6 proto from port os to route' + 'allow-opts divert-packet divert-reply divert-to flags group icmp-type' + 'icmp6-type label once probability recieved-on rtable prio queue' + 'tos tag tagged user keep fragment for os drop' + 'af-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robin' + 'source-hash static-port' + 'dup-to reply-to route-to' + 'parent bandwidth default min max qlimit' + 'block-policy debug fingerprints hostid limit loginterface optimization' + 'reassemble ruleset-optimization basic none profile skip state-defaults' + 'state-policy timeout' + 'const counters persist' + 'no modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppy' + 'source-track global rule max-src-nodes max-src-states max-src-conn' + 'max-src-conn-rate overload flush' + 'scrub|5 max-mss min-ttl no-df|10 random-id',
      literal: 'all any no-route self urpf-failed egress|5 unknown'
    },
    contains: [hljs.HASH_COMMENT_MODE, hljs.NUMBER_MODE, hljs.QUOTE_STRING_MODE, MACRO, TABLE]
  };
};

var php = function php(hljs) {
  var VARIABLE = {
    begin: '\\$+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*'
  };
  var PREPROCESSOR = {
    className: 'meta', begin: /<\?(php)?|\?>/
  };
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE, PREPROCESSOR],
    variants: [{
      begin: 'b"', end: '"'
    }, {
      begin: 'b\'', end: '\''
    }, hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }), hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null })]
  };
  var NUMBER = { variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE] };
  return {
    aliases: ['php3', 'php4', 'php5', 'php6'],
    case_insensitive: true,
    keywords: 'and include_once list abstract global private echo interface as static endswitch ' + 'array null if endwhile or const for endforeach self var while isset public ' + 'protected exit foreach throw elseif include __FILE__ empty require_once do xor ' + 'return parent clone use __CLASS__ __LINE__ else break print eval new ' + 'catch __METHOD__ case exception default die require __FUNCTION__ ' + 'enddeclare final try switch continue endfor endif declare unset true false ' + 'trait goto instanceof insteadof __DIR__ __NAMESPACE__ ' + 'yield finally',
    contains: [hljs.HASH_COMMENT_MODE, hljs.COMMENT('//', '$', { contains: [PREPROCESSOR] }), hljs.COMMENT('/\\*', '\\*/', {
      contains: [{
        className: 'doctag',
        begin: '@[A-Za-z]+'
      }]
    }), hljs.COMMENT('__halt_compiler.+?;', false, {
      endsWithParent: true,
      keywords: '__halt_compiler',
      lexemes: hljs.UNDERSCORE_IDENT_RE
    }), {
      className: 'string',
      begin: /<<<['"]?\w+['"]?$/, end: /^\w+;?$/,
      contains: [hljs.BACKSLASH_ESCAPE, {
        className: 'subst',
        variants: [{ begin: /\$\w+/ }, { begin: /\{\$/, end: /\}/ }]
      }]
    }, PREPROCESSOR, {
      className: 'keyword', begin: /\$this\b/
    }, VARIABLE, {
      // swallow composed identifiers to avoid parsing them as keywords
      begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
    }, {
      className: 'function',
      beginKeywords: 'function', end: /[;{]/, excludeEnd: true,
      illegal: '\\$|\\[|%',
      contains: [hljs.UNDERSCORE_TITLE_MODE, {
        className: 'params',
        begin: '\\(', end: '\\)',
        contains: ['self', VARIABLE, hljs.C_BLOCK_COMMENT_MODE, STRING, NUMBER]
      }]
    }, {
      className: 'class',
      beginKeywords: 'class interface', end: '{', excludeEnd: true,
      illegal: /[:\(\$"]/,
      contains: [{ beginKeywords: 'extends implements' }, hljs.UNDERSCORE_TITLE_MODE]
    }, {
      beginKeywords: 'namespace', end: ';',
      illegal: /[\.']/,
      contains: [hljs.UNDERSCORE_TITLE_MODE]
    }, {
      beginKeywords: 'use', end: ';',
      contains: [hljs.UNDERSCORE_TITLE_MODE]
    }, {
      begin: '=>' // No markup, just a relevance booster
    }, STRING, NUMBER]
  };
};

var pony = function pony(hljs) {
  var KEYWORDS = {
    keyword: 'actor addressof and as be break class compile_error compile_intrinsic' + 'consume continue delegate digestof do else elseif embed end error' + 'for fun if ifdef in interface is isnt lambda let match new not object' + 'or primitive recover repeat return struct then trait try type until ' + 'use var where while with xor',
    meta: 'iso val tag trn box ref',
    literal: 'this false true'
  };

  var TRIPLE_QUOTE_STRING_MODE = {
    className: 'string',
    begin: '"""', end: '"""',
    relevance: 10
  };

  var QUOTE_STRING_MODE = {
    className: 'string',
    begin: '"', end: '"',
    contains: [hljs.BACKSLASH_ESCAPE]
  };

  var SINGLE_QUOTE_CHAR_MODE = {
    className: 'string',
    begin: '\'', end: '\'',
    contains: [hljs.BACKSLASH_ESCAPE],
    relevance: 0
  };

  var TYPE_NAME = {
    className: 'type',
    begin: '\\b_?[A-Z][\\w]*',
    relevance: 0
  };

  var PRIMED_NAME = {
    begin: hljs.IDENT_RE + '\'', relevance: 0
  };

  var CLASS = {
    className: 'class',
    beginKeywords: 'class actor', end: '$',
    contains: [hljs.TITLE_MODE, hljs.C_LINE_COMMENT_MODE]
  };

  var FUNCTION = {
    className: 'function',
    beginKeywords: 'new fun', end: '=>',
    contains: [hljs.TITLE_MODE, {
      begin: /\(/, end: /\)/,
      contains: [TYPE_NAME, PRIMED_NAME, hljs.C_NUMBER_MODE, hljs.C_BLOCK_COMMENT_MODE]
    }, {
      begin: /:/, endsWithParent: true,
      contains: [TYPE_NAME]
    }, hljs.C_LINE_COMMENT_MODE]
  };

  return {
    keywords: KEYWORDS,
    contains: [CLASS, FUNCTION, TYPE_NAME, TRIPLE_QUOTE_STRING_MODE, QUOTE_STRING_MODE, SINGLE_QUOTE_CHAR_MODE, PRIMED_NAME, hljs.C_NUMBER_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
  };
};

var powershell = function powershell(hljs) {
  var BACKTICK_ESCAPE = {
    begin: '`[\\s\\S]',
    relevance: 0
  };
  var VAR = {
    className: 'variable',
    variants: [{ begin: /\$[\w\d][\w\d_:]*/ }]
  };
  var LITERAL = {
    className: 'literal',
    begin: /\$(null|true|false)\b/
  };
  var QUOTE_STRING = {
    className: 'string',
    variants: [{ begin: /"/, end: /"/ }, { begin: /@"/, end: /^"@/ }],
    contains: [BACKTICK_ESCAPE, VAR, {
      className: 'variable',
      begin: /\$[A-z]/, end: /[^A-z]/
    }]
  };
  var APOS_STRING = {
    className: 'string',
    variants: [{ begin: /'/, end: /'/ }, { begin: /@'/, end: /^'@/ }]
  };

  var PS_HELPTAGS = {
    className: 'doctag',
    variants: [
    /* no paramater help tags */
    { begin: /\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/ },
    /* one parameter help tags */
    { begin: /\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/ }]
  };
  var PS_COMMENT = hljs.inherit(hljs.COMMENT(null, null), {
    variants: [
    /* single-line comment */
    { begin: /#/, end: /$/ },
    /* multi-line comment */
    { begin: /<#/, end: /#>/ }],
    contains: [PS_HELPTAGS]
  });

  return {
    aliases: ['ps'],
    lexemes: /-?[A-z\.\-]+/,
    case_insensitive: true,
    keywords: {
      keyword: 'if else foreach return function do while until elseif begin for trap data dynamicparam end break throw param continue finally in switch exit filter try process catch',
      built_in: 'Add-Computer Add-Content Add-History Add-JobTrigger Add-Member Add-PSSnapin Add-Type Checkpoint-Computer Clear-Content Clear-EventLog Clear-History Clear-Host Clear-Item Clear-ItemProperty Clear-Variable Compare-Object Complete-Transaction Connect-PSSession Connect-WSMan Convert-Path ConvertFrom-Csv ConvertFrom-Json ConvertFrom-SecureString ConvertFrom-StringData ConvertTo-Csv ConvertTo-Html ConvertTo-Json ConvertTo-SecureString ConvertTo-Xml Copy-Item Copy-ItemProperty Debug-Process Disable-ComputerRestore Disable-JobTrigger Disable-PSBreakpoint Disable-PSRemoting Disable-PSSessionConfiguration Disable-WSManCredSSP Disconnect-PSSession Disconnect-WSMan Disable-ScheduledJob Enable-ComputerRestore Enable-JobTrigger Enable-PSBreakpoint Enable-PSRemoting Enable-PSSessionConfiguration Enable-ScheduledJob Enable-WSManCredSSP Enter-PSSession Exit-PSSession Export-Alias Export-Clixml Export-Console Export-Counter Export-Csv Export-FormatData Export-ModuleMember Export-PSSession ForEach-Object Format-Custom Format-List Format-Table Format-Wide Get-Acl Get-Alias Get-AuthenticodeSignature Get-ChildItem Get-Command Get-ComputerRestorePoint Get-Content Get-ControlPanelItem Get-Counter Get-Credential Get-Culture Get-Date Get-Event Get-EventLog Get-EventSubscriber Get-ExecutionPolicy Get-FormatData Get-Host Get-HotFix Get-Help Get-History Get-IseSnippet Get-Item Get-ItemProperty Get-Job Get-JobTrigger Get-Location Get-Member Get-Module Get-PfxCertificate Get-Process Get-PSBreakpoint Get-PSCallStack Get-PSDrive Get-PSProvider Get-PSSession Get-PSSessionConfiguration Get-PSSnapin Get-Random Get-ScheduledJob Get-ScheduledJobOption Get-Service Get-TraceSource Get-Transaction Get-TypeData Get-UICulture Get-Unique Get-Variable Get-Verb Get-WinEvent Get-WmiObject Get-WSManCredSSP Get-WSManInstance Group-Object Import-Alias Import-Clixml Import-Counter Import-Csv Import-IseSnippet Import-LocalizedData Import-PSSession Import-Module Invoke-AsWorkflow Invoke-Command Invoke-Expression Invoke-History Invoke-Item Invoke-RestMethod Invoke-WebRequest Invoke-WmiMethod Invoke-WSManAction Join-Path Limit-EventLog Measure-Command Measure-Object Move-Item Move-ItemProperty New-Alias New-Event New-EventLog New-IseSnippet New-Item New-ItemProperty New-JobTrigger New-Object New-Module New-ModuleManifest New-PSDrive New-PSSession New-PSSessionConfigurationFile New-PSSessionOption New-PSTransportOption New-PSWorkflowExecutionOption New-PSWorkflowSession New-ScheduledJobOption New-Service New-TimeSpan New-Variable New-WebServiceProxy New-WinEvent New-WSManInstance New-WSManSessionOption Out-Default Out-File Out-GridView Out-Host Out-Null Out-Printer Out-String Pop-Location Push-Location Read-Host Receive-Job Register-EngineEvent Register-ObjectEvent Register-PSSessionConfiguration Register-ScheduledJob Register-WmiEvent Remove-Computer Remove-Event Remove-EventLog Remove-Item Remove-ItemProperty Remove-Job Remove-JobTrigger Remove-Module Remove-PSBreakpoint Remove-PSDrive Remove-PSSession Remove-PSSnapin Remove-TypeData Remove-Variable Remove-WmiObject Remove-WSManInstance Rename-Computer Rename-Item Rename-ItemProperty Reset-ComputerMachinePassword Resolve-Path Restart-Computer Restart-Service Restore-Computer Resume-Job Resume-Service Save-Help Select-Object Select-String Select-Xml Send-MailMessage Set-Acl Set-Alias Set-AuthenticodeSignature Set-Content Set-Date Set-ExecutionPolicy Set-Item Set-ItemProperty Set-JobTrigger Set-Location Set-PSBreakpoint Set-PSDebug Set-PSSessionConfiguration Set-ScheduledJob Set-ScheduledJobOption Set-Service Set-StrictMode Set-TraceSource Set-Variable Set-WmiInstance Set-WSManInstance Set-WSManQuickConfig Show-Command Show-ControlPanelItem Show-EventLog Sort-Object Split-Path Start-Job Start-Process Start-Service Start-Sleep Start-Transaction Start-Transcript Stop-Computer Stop-Job Stop-Process Stop-Service Stop-Transcript Suspend-Job Suspend-Service Tee-Object Test-ComputerSecureChannel Test-Connection Test-ModuleManifest Test-Path Test-PSSessionConfigurationFile Trace-Command Unblock-File Undo-Transaction Unregister-Event Unregister-PSSessionConfiguration Unregister-ScheduledJob Update-FormatData Update-Help Update-List Update-TypeData Use-Transaction Wait-Event Wait-Job Wait-Process Where-Object Write-Debug Write-Error Write-EventLog Write-Host Write-Output Write-Progress Write-Verbose Write-Warning Add-MDTPersistentDrive Disable-MDTMonitorService Enable-MDTMonitorService Get-MDTDeploymentShareStatistics Get-MDTMonitorData Get-MDTOperatingSystemCatalog Get-MDTPersistentDrive Import-MDTApplication Import-MDTDriver Import-MDTOperatingSystem Import-MDTPackage Import-MDTTaskSequence New-MDTDatabase Remove-MDTMonitorData Remove-MDTPersistentDrive Restore-MDTPersistentDrive Set-MDTMonitorData Test-MDTDeploymentShare Test-MDTMonitorData Update-MDTDatabaseSchema Update-MDTDeploymentShare Update-MDTLinkedDS Update-MDTMedia Update-MDTMedia Add-VamtProductKey Export-VamtData Find-VamtManagedMachine Get-VamtConfirmationId Get-VamtProduct Get-VamtProductKey Import-VamtData Initialize-VamtData Install-VamtConfirmationId Install-VamtProductActivation Install-VamtProductKey Update-VamtProduct',
      nomarkup: '-ne -eq -lt -gt -ge -le -not -like -notlike -match -notmatch -contains -notcontains -in -notin -replace'
    },
    contains: [BACKTICK_ESCAPE, hljs.NUMBER_MODE, QUOTE_STRING, APOS_STRING, LITERAL, VAR, PS_COMMENT]
  };
};

var processing$1 = function processing(hljs) {
  return {
    keywords: {
      keyword: 'BufferedReader PVector PFont PImage PGraphics HashMap boolean byte char color ' + 'double float int long String Array FloatDict FloatList IntDict IntList JSONArray JSONObject ' + 'Object StringDict StringList Table TableRow XML ' +
      // Java keywords
      'false synchronized int abstract float private char boolean static null if const ' + 'for true while long throw strictfp finally protected import native final return void ' + 'enum else break transient new catch instanceof byte super volatile case assert short ' + 'package default double public try this switch continue throws protected public private',
      literal: 'P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI',
      title: 'setup draw',
      built_in: 'displayHeight displayWidth mouseY mouseX mousePressed pmouseX pmouseY key ' + 'keyCode pixels focused frameCount frameRate height width ' + 'size createGraphics beginDraw createShape loadShape PShape arc ellipse line point ' + 'quad rect triangle bezier bezierDetail bezierPoint bezierTangent curve curveDetail curvePoint ' + 'curveTangent curveTightness shape shapeMode beginContour beginShape bezierVertex curveVertex ' + 'endContour endShape quadraticVertex vertex ellipseMode noSmooth rectMode smooth strokeCap ' + 'strokeJoin strokeWeight mouseClicked mouseDragged mouseMoved mousePressed mouseReleased ' + 'mouseWheel keyPressed keyPressedkeyReleased keyTyped print println save saveFrame day hour ' + 'millis minute month second year background clear colorMode fill noFill noStroke stroke alpha ' + 'blue brightness color green hue lerpColor red saturation modelX modelY modelZ screenX screenY ' + 'screenZ ambient emissive shininess specular add createImage beginCamera camera endCamera frustum ' + 'ortho perspective printCamera printProjection cursor frameRate noCursor exit loop noLoop popStyle ' + 'pushStyle redraw binary boolean byte char float hex int str unbinary unhex join match matchAll nf ' + 'nfc nfp nfs split splitTokens trim append arrayCopy concat expand reverse shorten sort splice subset ' + 'box sphere sphereDetail createInput createReader loadBytes loadJSONArray loadJSONObject loadStrings ' + 'loadTable loadXML open parseXML saveTable selectFolder selectInput beginRaw beginRecord createOutput ' + 'createWriter endRaw endRecord PrintWritersaveBytes saveJSONArray saveJSONObject saveStream saveStrings ' + 'saveXML selectOutput popMatrix printMatrix pushMatrix resetMatrix rotate rotateX rotateY rotateZ scale ' + 'shearX shearY translate ambientLight directionalLight lightFalloff lights lightSpecular noLights normal ' + 'pointLight spotLight image imageMode loadImage noTint requestImage tint texture textureMode textureWrap ' + 'blend copy filter get loadPixels set updatePixels blendMode loadShader PShaderresetShader shader createFont ' + 'loadFont text textFont textAlign textLeading textMode textSize textWidth textAscent textDescent abs ceil ' + 'constrain dist exp floor lerp log mag map max min norm pow round sq sqrt acos asin atan atan2 cos degrees ' + 'radians sin tan noise noiseDetail noiseSeed random randomGaussian randomSeed'
    },
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE]
  };
};

var profile = function profile(hljs) {
  return {
    contains: [hljs.C_NUMBER_MODE, {
      begin: '[a-zA-Z_][\\da-zA-Z_]+\\.[\\da-zA-Z_]{1,3}', end: ':',
      excludeEnd: true
    }, {
      begin: '(ncalls|tottime|cumtime)', end: '$',
      keywords: 'ncalls tottime|10 cumtime|10 filename',
      relevance: 10
    }, {
      begin: 'function calls', end: '$',
      contains: [hljs.C_NUMBER_MODE],
      relevance: 10
    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, {
      className: 'string',
      begin: '\\(', end: '\\)$',
      excludeBegin: true, excludeEnd: true,
      relevance: 0
    }]
  };
};

var prolog = function prolog(hljs) {

  var ATOM = {

    begin: /[a-z][A-Za-z0-9_]*/,
    relevance: 0
  };

  var VAR = {

    className: 'symbol',
    variants: [{ begin: /[A-Z][a-zA-Z0-9_]*/ }, { begin: /_[A-Za-z0-9_]*/ }],
    relevance: 0
  };

  var PARENTED = {

    begin: /\(/,
    end: /\)/,
    relevance: 0
  };

  var LIST = {

    begin: /\[/,
    end: /\]/
  };

  var LINE_COMMENT = {

    className: 'comment',
    begin: /%/, end: /$/,
    contains: [hljs.PHRASAL_WORDS_MODE]
  };

  var BACKTICK_STRING = {

    className: 'string',
    begin: /`/, end: /`/,
    contains: [hljs.BACKSLASH_ESCAPE]
  };

  var CHAR_CODE = {

    className: 'string', // 0'a etc.
    begin: /0\'(\\\'|.)/
  };

  var SPACE_CODE = {

    className: 'string',
    begin: /0\'\\s/ // 0'\s
  };

  var PRED_OP = { // relevance booster
    begin: /:-/
  };

  var inner = [ATOM, VAR, PARENTED, PRED_OP, LIST, LINE_COMMENT, hljs.C_BLOCK_COMMENT_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, BACKTICK_STRING, CHAR_CODE, SPACE_CODE, hljs.C_NUMBER_MODE];

  PARENTED.contains = inner;
  LIST.contains = inner;

  return {
    contains: inner.concat([{ begin: /\.$/ // relevance booster
    }])
  };
};

var protobuf = function protobuf(hljs) {
  return {
    keywords: {
      keyword: 'package import option optional required repeated group',
      built_in: 'double float int32 int64 uint32 uint64 sint32 sint64 ' + 'fixed32 fixed64 sfixed32 sfixed64 bool string bytes',
      literal: 'true false'
    },
    contains: [hljs.QUOTE_STRING_MODE, hljs.NUMBER_MODE, hljs.C_LINE_COMMENT_MODE, {
      className: 'class',
      beginKeywords: 'message enum service', end: /\{/,
      illegal: /\n/,
      contains: [hljs.inherit(hljs.TITLE_MODE, {
        starts: { endsWithParent: true, excludeEnd: true // hack: eating everything after the first title
        } })]
    }, {
      className: 'function',
      beginKeywords: 'rpc',
      end: /;/, excludeEnd: true,
      keywords: 'rpc returns'
    }, {
      begin: /^\s*[A-Z_]+/,
      end: /\s*=/, excludeEnd: true
    }]
  };
};

var puppet = function puppet(hljs) {

  var PUPPET_KEYWORDS = {
    keyword:
    /* language keywords */
    'and case default else elsif false if in import enherits node or true undef unless main settings $string ',
    literal:
    /* metaparameters */
    'alias audit before loglevel noop require subscribe tag ' +
    /* normal attributes */
    'owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check ' + 'en_address ip_address realname command environment hour monute month monthday special target weekday ' + 'creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore ' + 'links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source ' + 'souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid ' + 'ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel ' + 'native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options ' + 'device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use ' + 'message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform ' + 'responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running ' + 'start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age ' + 'password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled ' + 'enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist ' + 'priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey ' + 'sslverify mounted',
    built_in:
    /* core facts */
    'architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers ' + 'domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces ' + 'ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion ' + 'kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease ' + 'lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major ' + 'macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease ' + 'operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion ' + 'rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced ' + 'selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime ' + 'uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version'
  };

  var COMMENT = hljs.COMMENT('#', '$');

  var IDENT_RE = '([A-Za-z_]|::)(\\w|::)*';

  var TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE });

  var VARIABLE = { className: 'variable', begin: '\\$' + IDENT_RE };

  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE, VARIABLE],
    variants: [{ begin: /'/, end: /'/ }, { begin: /"/, end: /"/ }]
  };

  return {
    aliases: ['pp'],
    contains: [COMMENT, VARIABLE, STRING, {
      beginKeywords: 'class', end: '\\{|;',
      illegal: /=/,
      contains: [TITLE, COMMENT]
    }, {
      beginKeywords: 'define', end: /\{/,
      contains: [{
        className: 'section', begin: hljs.IDENT_RE, endsParent: true
      }]
    }, {
      begin: hljs.IDENT_RE + '\\s+\\{', returnBegin: true,
      end: /\S/,
      contains: [{
        className: 'keyword',
        begin: hljs.IDENT_RE
      }, {
        begin: /\{/, end: /\}/,
        keywords: PUPPET_KEYWORDS,
        relevance: 0,
        contains: [STRING, COMMENT, {
          begin: '[a-zA-Z_]+\\s*=>',
          returnBegin: true, end: '=>',
          contains: [{
            className: 'attr',
            begin: hljs.IDENT_RE
          }]
        }, {
          className: 'number',
          begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
          relevance: 0
        }, VARIABLE]
      }],
      relevance: 0
    }]
  };
};

var purebasic = // Base deafult colors in PB IDE: background: #FFFFDF; foreground: #000000;

function purebasic(hljs) {
  var STRINGS = { // PB IDE color: #0080FF (Azure Radiance)
    className: 'string',
    begin: '(~)?"', end: '"',
    illegal: '\\n'
  };
  var CONSTANTS = { // PB IDE color: #924B72 (Cannon Pink)
    //  "#" + a letter or underscore + letters, digits or underscores + (optional) "$"
    className: 'symbol',
    begin: '#[a-zA-Z_]\\w*\\$?'
  };

  return {
    aliases: ['pb', 'pbi'],
    keywords: // PB IDE color: #006666 (Blue Stone) + Bold
    // The following keywords list was taken and adapted from GuShH's PureBasic language file for GeSHi...
    'And As Break CallDebugger Case CompilerCase CompilerDefault CompilerElse CompilerEndIf CompilerEndSelect ' + 'CompilerError CompilerIf CompilerSelect Continue Data DataSection EndDataSection Debug DebugLevel ' + 'Default Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM ' + 'EnableDebugger EnableExplicit End EndEnumeration EndIf EndImport EndInterface EndMacro EndProcedure ' + 'EndSelect EndStructure EndStructureUnion EndWith Enumeration Extends FakeReturn For Next ForEach ' + 'ForEver Global Gosub Goto If Import ImportC IncludeBinary IncludeFile IncludePath Interface Macro ' + 'NewList Not Or ProcedureReturn Protected Prototype ' + 'PrototypeC Read ReDim Repeat Until Restore Return Select Shared Static Step Structure StructureUnion ' + 'Swap To Wend While With XIncludeFile XOr ' + 'Procedure ProcedureC ProcedureCDLL ProcedureDLL Declare DeclareC DeclareCDLL DeclareDLL',
    contains: [
    // COMMENTS | PB IDE color: #00AAAA (Persian Green)
    hljs.COMMENT(';', '$', { relevance: 0 }), { // PROCEDURES DEFINITIONS
      className: 'function',
      begin: '\\b(Procedure|Declare)(C|CDLL|DLL)?\\b',
      end: '\\(',
      excludeEnd: true,
      returnBegin: true,
      contains: [{ // PROCEDURE KEYWORDS | PB IDE color: #006666 (Blue Stone) + Bold
        className: 'keyword',
        begin: '(Procedure|Declare)(C|CDLL|DLL)?',
        excludeEnd: true
      }, { // PROCEDURE RETURN TYPE SETTING | PB IDE color: #000000 (Black)
        className: 'type',
        begin: '\\.\\w*'
        // end: ' ',
      }, hljs.UNDERSCORE_TITLE_MODE // PROCEDURE NAME | PB IDE color: #006666 (Blue Stone)
      ]
    }, STRINGS, CONSTANTS]
  };
};

var python = function python(hljs) {
  var KEYWORDS = {
    keyword: 'and elif is global as in if from raise for except finally print import pass return ' + 'exec else break not with class assert yield try while continue del or def lambda ' + 'async await nonlocal|10 None True False',
    built_in: 'Ellipsis NotImplemented'
  };
  var PROMPT = {
    className: 'meta', begin: /^(>>>|\.\.\.) /
  };
  var SUBST = {
    className: 'subst',
    begin: /\{/, end: /\}/,
    keywords: KEYWORDS,
    illegal: /#/
  };
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE],
    variants: [{
      begin: /(u|b)?r?'''/, end: /'''/,
      contains: [PROMPT],
      relevance: 10
    }, {
      begin: /(u|b)?r?"""/, end: /"""/,
      contains: [PROMPT],
      relevance: 10
    }, {
      begin: /(fr|rf|f)'''/, end: /'''/,
      contains: [PROMPT, SUBST]
    }, {
      begin: /(fr|rf|f)"""/, end: /"""/,
      contains: [PROMPT, SUBST]
    }, {
      begin: /(u|r|ur)'/, end: /'/,
      relevance: 10
    }, {
      begin: /(u|r|ur)"/, end: /"/,
      relevance: 10
    }, {
      begin: /(b|br)'/, end: /'/
    }, {
      begin: /(b|br)"/, end: /"/
    }, {
      begin: /(fr|rf|f)'/, end: /'/,
      contains: [SUBST]
    }, {
      begin: /(fr|rf|f)"/, end: /"/,
      contains: [SUBST]
    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE]
  };
  var NUMBER = {
    className: 'number', relevance: 0,
    variants: [{ begin: hljs.BINARY_NUMBER_RE + '[lLjJ]?' }, { begin: '\\b(0o[0-7]+)[lLjJ]?' }, { begin: hljs.C_NUMBER_RE + '[lLjJ]?' }]
  };
  var PARAMS = {
    className: 'params',
    begin: /\(/, end: /\)/,
    contains: ['self', PROMPT, NUMBER, STRING]
  };
  SUBST.contains = [STRING, NUMBER, PROMPT];
  return {
    aliases: ['py', 'gyp'],
    keywords: KEYWORDS,
    illegal: /(<\/|->|\?)|=>/,
    contains: [PROMPT, NUMBER, STRING, hljs.HASH_COMMENT_MODE, {
      variants: [{ className: 'function', beginKeywords: 'def' }, { className: 'class', beginKeywords: 'class' }],
      end: /:/,
      illegal: /[${=;\n,]/,
      contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS, {
        begin: /->/, endsWithParent: true,
        keywords: 'None'
      }]
    }, {
      className: 'meta',
      begin: /^[\t ]*@/, end: /$/
    }, {
      begin: /\b(print|exec)\(/ // don’t highlight keywords-turned-functions in Python 3
    }]
  };
};

var q = function q(hljs) {
  var Q_KEYWORDS = {
    keyword: 'do while select delete by update from',
    literal: '0b 1b',
    built_in: 'neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum',
    type: '`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid'
  };
  return {
    aliases: ['k', 'kdb'],
    keywords: Q_KEYWORDS,
    lexemes: /(`?)[A-Za-z0-9_]+\b/,
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE]
  };
};

var qml = function qml(hljs) {
  var KEYWORDS = {
    keyword: 'in of on if for while finally var new function do return void else break catch ' + 'instanceof with throw case default try this switch continue typeof delete ' + 'let yield const export super debugger as async await import',
    literal: 'true false null undefined NaN Infinity',
    built_in: 'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' + 'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' + 'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' + 'TypeError URIError Number Math Date String RegExp Array Float32Array ' + 'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' + 'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' + 'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' + 'Behavior bool color coordinate date double enumeration font geocircle georectangle ' + 'geoshape int list matrix4x4 parent point quaternion real rect ' + 'size string url variant vector2d vector3d vector4d' + 'Promise'
  };

  var QML_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9\\._]*';

  // Isolate property statements. Ends at a :, =, ;, ,, a comment or end of line.
  // Use property class.
  var PROPERTY = {
    className: 'keyword',
    begin: '\\bproperty\\b',
    starts: {
      className: 'string',
      end: '(:|=|;|,|//|/\\*|$)',
      returnEnd: true
    }
  };

  // Isolate signal statements. Ends at a ) a comment or end of line.
  // Use property class.
  var SIGNAL = {
    className: 'keyword',
    begin: '\\bsignal\\b',
    starts: {
      className: 'string',
      end: '(\\(|:|=|;|,|//|/\\*|$)',
      returnEnd: true
    }
  };

  // id: is special in QML. When we see id: we want to mark the id: as attribute and
  // emphasize the token following.
  var ID_ID = {
    className: 'attribute',
    begin: '\\bid\\s*:',
    starts: {
      className: 'string',
      end: QML_IDENT_RE,
      returnEnd: false
    }
  };

  // Find QML object attribute. An attribute is a QML identifier followed by :.
  // Unfortunately it's hard to know where it ends, as it may contain scalars,
  // objects, object definitions, or javascript. The true end is either when the parent
  // ends or the next attribute is detected.
  var QML_ATTRIBUTE = {
    begin: QML_IDENT_RE + '\\s*:',
    returnBegin: true,
    contains: [{
      className: 'attribute',
      begin: QML_IDENT_RE,
      end: '\\s*:',
      excludeEnd: true,
      relevance: 0
    }],
    relevance: 0
  };

  // Find QML object. A QML object is a QML identifier followed by { and ends at the matching }.
  // All we really care about is finding IDENT followed by { and just mark up the IDENT and ignore the {.
  var QML_OBJECT = {
    begin: QML_IDENT_RE + '\\s*{', end: '{',
    returnBegin: true,
    relevance: 0,
    contains: [hljs.inherit(hljs.TITLE_MODE, { begin: QML_IDENT_RE })]
  };

  return {
    aliases: ['qt'],
    case_insensitive: false,
    keywords: KEYWORDS,
    contains: [{
      className: 'meta',
      begin: /^\s*['"]use (strict|asm)['"]/
    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, { // template string
      className: 'string',
      begin: '`', end: '`',
      contains: [hljs.BACKSLASH_ESCAPE, {
        className: 'subst',
        begin: '\\$\\{', end: '\\}'
      }]
    }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, {
      className: 'number',
      variants: [{ begin: '\\b(0[bB][01]+)' }, { begin: '\\b(0[oO][0-7]+)' }, { begin: hljs.C_NUMBER_RE }],
      relevance: 0
    }, { // "value" container
      begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
      keywords: 'return throw case',
      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.REGEXP_MODE, { // E4X / JSX
        begin: /</, end: />\s*[);\]]/,
        relevance: 0,
        subLanguage: 'xml'
      }],
      relevance: 0
    }, SIGNAL, PROPERTY, {
      className: 'function',
      beginKeywords: 'function', end: /\{/, excludeEnd: true,
      contains: [hljs.inherit(hljs.TITLE_MODE, { begin: /[A-Za-z$_][0-9A-Za-z$_]*/ }), {
        className: 'params',
        begin: /\(/, end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
        contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
      }],
      illegal: /\[|%/
    }, {
      begin: '\\.' + hljs.IDENT_RE, relevance: 0 // hack: prevents detection of keywords after dots
    }, ID_ID, QML_ATTRIBUTE, QML_OBJECT],
    illegal: /#/
  };
};

var r = function r(hljs) {
  var IDENT_RE = '([a-zA-Z]|\\.[a-zA-Z.])[a-zA-Z0-9._]*';

  return {
    contains: [hljs.HASH_COMMENT_MODE, {
      begin: IDENT_RE,
      lexemes: IDENT_RE,
      keywords: {
        keyword: 'function if in break next repeat else for return switch while try tryCatch ' + 'stop warning require library attach detach source setMethod setGeneric ' + 'setGroupGeneric setClass ...',
        literal: 'NULL NA TRUE FALSE T F Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 ' + 'NA_complex_|10'
      },
      relevance: 0
    }, {
      // hex value
      className: 'number',
      begin: "0[xX][0-9a-fA-F]+[Li]?\\b",
      relevance: 0
    }, {
      // explicit integer
      className: 'number',
      begin: "\\d+(?:[eE][+\\-]?\\d*)?L\\b",
      relevance: 0
    }, {
      // number with trailing decimal
      className: 'number',
      begin: "\\d+\\.(?!\\d)(?:i\\b)?",
      relevance: 0
    }, {
      // number
      className: 'number',
      begin: "\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",
      relevance: 0
    }, {
      // number with leading decimal
      className: 'number',
      begin: "\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b",
      relevance: 0
    }, {
      // escaped identifier
      begin: '`',
      end: '`',
      relevance: 0
    }, {
      className: 'string',
      contains: [hljs.BACKSLASH_ESCAPE],
      variants: [{ begin: '"', end: '"' }, { begin: "'", end: "'" }]
    }]
  };
};

var rib = function rib(hljs) {
  return {
    keywords: 'ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis ' + 'Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone ' + 'CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail ' + 'DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format ' + 'FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry ' + 'Hider Hyperboloid Identity Illuminate Imager Interior LightSource ' + 'MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte ' + 'MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option ' + 'Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples ' + 'PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection ' + 'Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow ' + 'ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere ' + 'SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd ' + 'TransformPoints Translate TrimCurve WorldBegin WorldEnd',
    illegal: '</',
    contains: [hljs.HASH_COMMENT_MODE, hljs.C_NUMBER_MODE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE]
  };
};

var roboconf = function roboconf(hljs) {
  var IDENTIFIER = '[a-zA-Z-_][^\\n{]+\\{';

  var PROPERTY = {
    className: 'attribute',
    begin: /[a-zA-Z-_]+/, end: /\s*:/, excludeEnd: true,
    starts: {
      end: ';',
      relevance: 0,
      contains: [{
        className: 'variable',
        begin: /\.[a-zA-Z-_]+/
      }, {
        className: 'keyword',
        begin: /\(optional\)/
      }]
    }
  };

  return {
    aliases: ['graph', 'instances'],
    case_insensitive: true,
    keywords: 'import',
    contains: [
    // Facet sections
    {
      begin: '^facet ' + IDENTIFIER,
      end: '}',
      keywords: 'facet',
      contains: [PROPERTY, hljs.HASH_COMMENT_MODE]
    },

    // Instance sections
    {
      begin: '^\\s*instance of ' + IDENTIFIER,
      end: '}',
      keywords: 'name count channels instance-data instance-state instance of',
      illegal: /\S/,
      contains: ['self', PROPERTY, hljs.HASH_COMMENT_MODE]
    },

    // Component sections
    {
      begin: '^' + IDENTIFIER,
      end: '}',
      contains: [PROPERTY, hljs.HASH_COMMENT_MODE]
    },

    // Comments
    hljs.HASH_COMMENT_MODE]
  };
};

var routeros = // Colors from RouterOS terminal:
//   green        - #0E9A00
//   teal         - #0C9A9A
//   purple       - #99069A
//   light-brown  - #9A9900

function routeros(hljs) {

  var STATEMENTS = 'foreach do while for if from to step else on-error and or not in';

  // Global commands: Every global command should start with ":" token, otherwise it will be treated as variable.
  var GLOBAL_COMMANDS = 'global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime';

  // Common commands: Following commands available from most sub-menus:
  var COMMON_COMMANDS = 'add remove enable disable set get print export edit find run debug error info warning';

  var LITERALS = 'true false yes no nothing nil null';

  var OBJECTS = 'traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firewall firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw';

  // print parameters
  // Several parameters are available for print command:
  // ToDo: var PARAMETERS_PRINT = 'append as-value brief detail count-only file follow follow-only from interval terse value-list without-paging where info';
  // ToDo: var OPERATORS = '&& and ! not || or in ~ ^ & << >> + - * /';
  // ToDo: var TYPES = 'num number bool boolean str string ip ip6-prefix id time array';
  // ToDo: The following tokens serve as delimiters in the grammar: ()  []  {}  :   ;   $   / 

  var VAR = {
    className: 'variable',
    variants: [{ begin: /\$[\w\d#@][\w\d_]*/ }, { begin: /\$\{(.*?)}/ }]
  };

  var QUOTE_STRING = {
    className: 'string',
    begin: /"/, end: /"/,
    contains: [hljs.BACKSLASH_ESCAPE, VAR, {
      className: 'variable',
      begin: /\$\(/, end: /\)/,
      contains: [hljs.BACKSLASH_ESCAPE]
    }]
  };

  var APOS_STRING = {
    className: 'string',
    begin: /'/, end: /'/
  };

  return {
    aliases: ['routeros', 'mikrotik'],
    case_insensitive: true,
    lexemes: /:?[\w-]+/,
    keywords: {
      literal: LITERALS,
      keyword: STATEMENTS + ' :' + STATEMENTS.split(' ').join(' :') + ' :' + GLOBAL_COMMANDS.split(' ').join(' :')
    },
    contains: [{ // недопустимые конструкции
      variants: [{ begin: /^@/, end: /$/ }, // dns
      { begin: /\/\*/, end: /\*\// }, // -- comment
      { begin: /%%/, end: /$/ }, // -- comment
      { begin: /^'/, end: /$/ }, // Monkey one line comment
      { begin: /^\s*\/[\w-]+=/, end: /$/ }, // jboss-cli
      { begin: /\/\//, end: /$/ }, // Stan comment
      { begin: /^\[\</, end: /\>\]$/ }, // F# class declaration?
      { begin: /<\//, end: />/ }, // HTML tags
      { begin: /^facet /, end: /\}/ }, // roboconf - лютый костыль )))
      { begin: '^1\\.\\.(\\d+)$', end: /$/ }],
      illegal: /./
    }, hljs.COMMENT('^#', '$'), QUOTE_STRING, APOS_STRING, VAR, { // attribute=value
      begin: /[\w-]+\=([^\s\{\}\[\]\(\)]+)/,
      relevance: 0,
      returnBegin: true,
      contains: [{
        className: 'attribute',
        begin: /[^=]+/
      }, {
        begin: /=/,
        endsWithParent: true,
        relevance: 0,
        contains: [QUOTE_STRING, APOS_STRING, VAR, {
          className: 'literal',
          begin: '\\b(' + LITERALS.split(' ').join('|') + ')\\b'
        },
        /*{
          // IPv4 addresses and subnets
          className: 'number',
          variants: [
            {begin: IPADDR_wBITMASK+'(,'+IPADDR_wBITMASK+')*'}, //192.168.0.0/24,1.2.3.0/24
            {begin: IPADDR+'-'+IPADDR},       // 192.168.0.1-192.168.0.3
            {begin: IPADDR+'(,'+IPADDR+')*'}, // 192.168.0.1,192.168.0.34,192.168.24.1,192.168.0.1
          ]
        }, // */
        /*{
          // MAC addresses and DHCP Client IDs
          className: 'number',
          begin: /\b(1:)?([0-9A-Fa-f]{1,2}[:-]){5}([0-9A-Fa-f]){1,2}\b/,
        }, //*/
        {
          // Не форматировать не классифицированные значения. Необходимо для исключения подсветки значений как built_in.
          // className: 'number',  
          begin: /("[^"]*"|[^\s\{\}\[\]]+)/
        }] //*/
      }]
    }, //*/
    {
      // HEX values
      className: 'number',
      begin: /\*[0-9a-fA-F]+/
    }, //*/

    {
      begin: '\\b(' + COMMON_COMMANDS.split(' ').join('|') + ')([\\s\[\(]|\])',
      returnBegin: true,
      contains: [{
        className: 'builtin-name', //'function',
        begin: /\w+/
      }]
    }, {
      className: 'built_in',
      variants: [{ begin: '(\\.\\./|/|\\s)((' + OBJECTS.split(' ').join('|') + ');?\\s)+', relevance: 10 }, { begin: /\.\./ }]
    }]
  };
};

var rsl = function rsl(hljs) {
  return {
    keywords: {
      keyword: 'float color point normal vector matrix while for if do return else break extern continue',
      built_in: 'abs acos ambient area asin atan atmosphere attribute calculatenormal ceil cellnoise ' + 'clamp comp concat cos degrees depth Deriv diffuse distance Du Dv environment exp ' + 'faceforward filterstep floor format fresnel incident length lightsource log match ' + 'max min mod noise normalize ntransform opposite option phong pnoise pow printf ' + 'ptlined radians random reflect refract renderinfo round setcomp setxcomp setycomp ' + 'setzcomp shadow sign sin smoothstep specular specularbrdf spline sqrt step tan ' + 'texture textureinfo trace transform vtransform xcomp ycomp zcomp'
    },
    illegal: '</',
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, hljs.C_NUMBER_MODE, {
      className: 'meta',
      begin: '#', end: '$'
    }, {
      className: 'class',
      beginKeywords: 'surface displacement light volume imager', end: '\\('
    }, {
      beginKeywords: 'illuminate illuminance gather', end: '\\('
    }]
  };
};

var ruleslanguage = function ruleslanguage(hljs) {
  return {
    keywords: {
      keyword: 'BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE ' + 'INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 ' + 'INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 ' + 'INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 ' + 'INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 ' + 'INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 ' + 'INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 ' + 'INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 ' + 'INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 ' + 'INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 ' + 'INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 ' + 'INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 ' + 'INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 ' + 'INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 ' + 'INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 ' + 'MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER ' + 'OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE ' + 'NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH ' + 'IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND ' + 'UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME ' + 'ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE ' + 'GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE ' + 'SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING ' + 'DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF ' + 'MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY ' + 'YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE ' + 'COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR ' + 'READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES ' + 'ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE ' + 'EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE ' + 'SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL ' + 'COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN ' + 'MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING ' + 'FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM ' + 'NUMDAYS READ_DATE STAGING',
      built_in: 'IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML ' + 'DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT ' + 'DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE ' + 'DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT ' + 'DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME'
    },
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE, {
      className: 'literal',
      variants: [{ begin: '#\\s+[a-zA-Z\\ \\.]*', relevance: 0 }, // looks like #-comment
      { begin: '#[a-zA-Z\\ \\.]+' }]
    }]
  };
};

var rust = function rust(hljs) {
  var NUM_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\?';
  var KEYWORDS = 'alignof as be box break const continue crate do else enum extern ' + 'false fn for if impl in let loop match mod mut offsetof once priv ' + 'proc pub pure ref return self Self sizeof static struct super trait true ' + 'type typeof unsafe unsized use virtual while where yield move default';
  var BUILTINS =
  // functions
  'drop ' +
  // types
  'i8 i16 i32 i64 i128 isize ' + 'u8 u16 u32 u64 u128 usize ' + 'f32 f64 ' + 'str char bool ' + 'Box Option Result String Vec ' +
  // traits
  'Copy Send Sized Sync Drop Fn FnMut FnOnce ToOwned Clone Debug ' + 'PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator ' + 'Extend IntoIterator DoubleEndedIterator ExactSizeIterator ' + 'SliceConcatExt ToString ' +
  // macros
  'assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! ' + 'debug_assert! debug_assert_eq! env! panic! file! format! format_args! ' + 'include_bin! include_str! line! local_data_key! module_path! ' + 'option_env! print! println! select! stringify! try! unimplemented! ' + 'unreachable! vec! write! writeln! macro_rules! assert_ne! debug_assert_ne!';
  return {
    aliases: ['rs'],
    keywords: {
      keyword: KEYWORDS,
      literal: 'true false Some None Ok Err',
      built_in: BUILTINS
    },
    lexemes: hljs.IDENT_RE + '!?',
    illegal: '</',
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.COMMENT('/\\*', '\\*/', { contains: ['self'] }), hljs.inherit(hljs.QUOTE_STRING_MODE, { begin: /b?"/, illegal: null }), {
      className: 'string',
      variants: [{ begin: /r(#*)"(.|\n)*?"\1(?!#)/ }, { begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ }]
    }, {
      className: 'symbol',
      begin: /'[a-zA-Z_][a-zA-Z0-9_]*/
    }, {
      className: 'number',
      variants: [{ begin: '\\b0b([01_]+)' + NUM_SUFFIX }, { begin: '\\b0o([0-7_]+)' + NUM_SUFFIX }, { begin: '\\b0x([A-Fa-f0-9_]+)' + NUM_SUFFIX }, { begin: '\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' + NUM_SUFFIX
      }],
      relevance: 0
    }, {
      className: 'function',
      beginKeywords: 'fn', end: '(\\(|<)', excludeEnd: true,
      contains: [hljs.UNDERSCORE_TITLE_MODE]
    }, {
      className: 'meta',
      begin: '#\\!?\\[', end: '\\]',
      contains: [{
        className: 'meta-string',
        begin: /"/, end: /"/
      }]
    }, {
      className: 'class',
      beginKeywords: 'type', end: ';',
      contains: [hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { endsParent: true })],
      illegal: '\\S'
    }, {
      className: 'class',
      beginKeywords: 'trait enum struct union', end: '{',
      contains: [hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { endsParent: true })],
      illegal: '[\\w\\d]'
    }, {
      begin: hljs.IDENT_RE + '::',
      keywords: { built_in: BUILTINS }
    }, {
      begin: '->'
    }]
  };
};

var scala = function scala(hljs) {

  var ANNOTATION = { className: 'meta', begin: '@[A-Za-z]+' };

  // used in strings for escaping/interpolation/substitution
  var SUBST = {
    className: 'subst',
    variants: [{ begin: '\\$[A-Za-z0-9_]+' }, { begin: '\\${', end: '}' }]
  };

  var STRING = {
    className: 'string',
    variants: [{
      begin: '"', end: '"',
      illegal: '\\n',
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      begin: '"""', end: '"""',
      relevance: 10
    }, {
      begin: '[a-z]+"', end: '"',
      illegal: '\\n',
      contains: [hljs.BACKSLASH_ESCAPE, SUBST]
    }, {
      className: 'string',
      begin: '[a-z]+"""', end: '"""',
      contains: [SUBST],
      relevance: 10
    }]

  };

  var SYMBOL = {
    className: 'symbol',
    begin: '\'\\w[\\w\\d_]*(?!\')'
  };

  var TYPE = {
    className: 'type',
    begin: '\\b[A-Z][A-Za-z0-9_]*',
    relevance: 0
  };

  var NAME = {
    className: 'title',
    begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
    relevance: 0
  };

  var CLASS = {
    className: 'class',
    beginKeywords: 'class object trait type',
    end: /[:={\[\n;]/,
    excludeEnd: true,
    contains: [{
      beginKeywords: 'extends with',
      relevance: 10
    }, {
      begin: /\[/,
      end: /\]/,
      excludeBegin: true,
      excludeEnd: true,
      relevance: 0,
      contains: [TYPE]
    }, {
      className: 'params',
      begin: /\(/,
      end: /\)/,
      excludeBegin: true,
      excludeEnd: true,
      relevance: 0,
      contains: [TYPE]
    }, NAME]
  };

  var METHOD = {
    className: 'function',
    beginKeywords: 'def',
    end: /[:={\[(\n;]/,
    excludeEnd: true,
    contains: [NAME]
  };

  return {
    keywords: {
      literal: 'true false null',
      keyword: 'type yield lazy override def with val var sealed abstract private trait object if forSome for while throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit'
    },
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRING, SYMBOL, TYPE, METHOD, CLASS, hljs.C_NUMBER_MODE, ANNOTATION]
  };
};

var scheme = function scheme(hljs) {
  var SCHEME_IDENT_RE = '[^\\(\\)\\[\\]\\{\\}",\'`;#|\\\\\\s]+';
  var SCHEME_SIMPLE_NUMBER_RE = '(\\-|\\+)?\\d+([./]\\d+)?';
  var SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';
  var BUILTINS = {
    'builtin-name': 'case-lambda call/cc class define-class exit-handler field import ' + 'inherit init-field interface let*-values let-values let/ec mixin ' + 'opt-lambda override protect provide public rename require ' + 'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' + 'when with-syntax and begin call-with-current-continuation ' + 'call-with-input-file call-with-output-file case cond define ' + 'define-syntax delay do dynamic-wind else for-each if lambda let let* ' + 'let-syntax letrec letrec-syntax map or syntax-rules \' * + , ,@ - ... / ' + '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' + 'boolean? caar cadr call-with-input-file call-with-output-file ' + 'call-with-values car cdddar cddddr cdr ceiling char->integer ' + 'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' + 'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' + 'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' + 'char? close-input-port close-output-port complex? cons cos ' + 'current-input-port current-output-port denominator display eof-object? ' + 'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' + 'force gcd imag-part inexact->exact inexact? input-port? integer->char ' + 'integer? interaction-environment lcm length list list->string ' + 'list->vector list-ref list-tail list? load log magnitude make-polar ' + 'make-rectangular make-string make-vector max member memq memv min ' + 'modulo negative? newline not null-environment null? number->string ' + 'number? numerator odd? open-input-file open-output-file output-port? ' + 'pair? peek-char port? positive? procedure? quasiquote quote quotient ' + 'rational? rationalize read read-char real-part real? remainder reverse ' + 'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' + 'string->list string->number string->symbol string-append string-ci<=? ' + 'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' + 'string-fill! string-length string-ref string-set! string<=? string<? ' + 'string=? string>=? string>? string? substring symbol->string symbol? ' + 'tan transcript-off transcript-on truncate values vector ' + 'vector->list vector-fill! vector-length vector-ref vector-set! ' + 'with-input-from-file with-output-to-file write write-char zero?'
  };

  var SHEBANG = {
    className: 'meta',
    begin: '^#!',
    end: '$'
  };

  var LITERAL = {
    className: 'literal',
    begin: '(#t|#f|#\\\\' + SCHEME_IDENT_RE + '|#\\\\.)'
  };

  var NUMBER = {
    className: 'number',
    variants: [{ begin: SCHEME_SIMPLE_NUMBER_RE, relevance: 0 }, { begin: SCHEME_COMPLEX_NUMBER_RE, relevance: 0 }, { begin: '#b[0-1]+(/[0-1]+)?' }, { begin: '#o[0-7]+(/[0-7]+)?' }, { begin: '#x[0-9a-f]+(/[0-9a-f]+)?' }]
  };

  var STRING = hljs.QUOTE_STRING_MODE;

  var COMMENT_MODES = [hljs.COMMENT(';', '$', {
    relevance: 0
  }), hljs.COMMENT('#\\|', '\\|#')];

  var IDENT = {
    begin: SCHEME_IDENT_RE,
    relevance: 0
  };

  var QUOTED_IDENT = {
    className: 'symbol',
    begin: '\'' + SCHEME_IDENT_RE
  };

  var BODY = {
    endsWithParent: true,
    relevance: 0
  };

  var QUOTED_LIST = {
    variants: [{ begin: /'/ }, { begin: '`' }],
    contains: [{
      begin: '\\(', end: '\\)',
      contains: ['self', LITERAL, STRING, NUMBER, IDENT, QUOTED_IDENT]
    }]
  };

  var NAME = {
    className: 'name',
    begin: SCHEME_IDENT_RE,
    lexemes: SCHEME_IDENT_RE,
    keywords: BUILTINS
  };

  var LAMBDA = {
    begin: /lambda/, endsWithParent: true, returnBegin: true,
    contains: [NAME, {
      begin: /\(/, end: /\)/, endsParent: true,
      contains: [IDENT]
    }]
  };

  var LIST = {
    variants: [{ begin: '\\(', end: '\\)' }, { begin: '\\[', end: '\\]' }],
    contains: [LAMBDA, NAME, BODY]
  };

  BODY.contains = [LITERAL, NUMBER, STRING, IDENT, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES);

  return {
    illegal: /\S/,
    contains: [SHEBANG, NUMBER, STRING, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES)
  };
};

var scilab = function scilab(hljs) {

  var COMMON_CONTAINS = [hljs.C_NUMBER_MODE, {
    className: 'string',
    begin: '\'|\"', end: '\'|\"',
    contains: [hljs.BACKSLASH_ESCAPE, { begin: '\'\'' }]
  }];

  return {
    aliases: ['sci'],
    lexemes: /%?\w+/,
    keywords: {
      keyword: 'abort break case clear catch continue do elseif else endfunction end for function ' + 'global if pause return resume select try then while',
      literal: '%f %F %t %T %pi %eps %inf %nan %e %i %z %s',
      built_in: // Scilab has more than 2000 functions. Just list the most commons
      'abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error ' + 'exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty ' + 'isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log ' + 'max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real ' + 'round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan ' + 'type typename warning zeros matrix'
    },
    illegal: '("|#|/\\*|\\s+/\\w+)',
    contains: [{
      className: 'function',
      beginKeywords: 'function', end: '$',
      contains: [hljs.UNDERSCORE_TITLE_MODE, {
        className: 'params',
        begin: '\\(', end: '\\)'
      }]
    }, {
      begin: '[a-zA-Z_][a-zA-Z_0-9]*(\'+[\\.\']*|[\\.\']+)', end: '',
      relevance: 0
    }, {
      begin: '\\[', end: '\\]\'*[\\.\']*',
      relevance: 0,
      contains: COMMON_CONTAINS
    }, hljs.COMMENT('//', '$')].concat(COMMON_CONTAINS)
  };
};

var scss = function scss(hljs) {
  var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
  var VARIABLE = {
    className: 'variable',
    begin: '(\\$' + IDENT_RE + ')\\b'
  };
  var HEXCOLOR = {
    className: 'number', begin: '#[0-9A-Fa-f]+'
  };
  var DEF_INTERNALS = {
    className: 'attribute',
    begin: '[A-Z\\_\\.\\-]+', end: ':',
    excludeEnd: true,
    illegal: '[^\\s]',
    starts: {
      endsWithParent: true, excludeEnd: true,
      contains: [HEXCOLOR, hljs.CSS_NUMBER_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, hljs.C_BLOCK_COMMENT_MODE, {
        className: 'meta', begin: '!important'
      }]
    }
  };
  return {
    case_insensitive: true,
    illegal: '[=/|\']',
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, {
      className: 'selector-id', begin: '\\#[A-Za-z0-9_-]+',
      relevance: 0
    }, {
      className: 'selector-class', begin: '\\.[A-Za-z0-9_-]+',
      relevance: 0
    }, {
      className: 'selector-attr', begin: '\\[', end: '\\]',
      illegal: '$'
    }, {
      className: 'selector-tag', // begin: IDENT_RE, end: '[,|\\s]'
      begin: '\\b(a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|div|dl|dt|em|embed|fieldset|figcaption|figure|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|map|mark|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|samp|script|section|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\\b',
      relevance: 0
    }, {
      begin: ':(visited|valid|root|right|required|read-write|read-only|out-range|optional|only-of-type|only-child|nth-of-type|nth-last-of-type|nth-last-child|nth-child|not|link|left|last-of-type|last-child|lang|invalid|indeterminate|in-range|hover|focus|first-of-type|first-line|first-letter|first-child|first|enabled|empty|disabled|default|checked|before|after|active)'
    }, {
      begin: '::(after|before|choices|first-letter|first-line|repeat-index|repeat-item|selection|value)'
    }, VARIABLE, {
      className: 'attribute',
      begin: '\\b(z-index|word-wrap|word-spacing|word-break|width|widows|white-space|visibility|vertical-align|unicode-bidi|transition-timing-function|transition-property|transition-duration|transition-delay|transition|transform-style|transform-origin|transform|top|text-underline-position|text-transform|text-shadow|text-rendering|text-overflow|text-indent|text-decoration-style|text-decoration-line|text-decoration-color|text-decoration|text-align-last|text-align|tab-size|table-layout|right|resize|quotes|position|pointer-events|perspective-origin|perspective|page-break-inside|page-break-before|page-break-after|padding-top|padding-right|padding-left|padding-bottom|padding|overflow-y|overflow-x|overflow-wrap|overflow|outline-width|outline-style|outline-offset|outline-color|outline|orphans|order|opacity|object-position|object-fit|normal|none|nav-up|nav-right|nav-left|nav-index|nav-down|min-width|min-height|max-width|max-height|mask|marks|margin-top|margin-right|margin-left|margin-bottom|margin|list-style-type|list-style-position|list-style-image|list-style|line-height|letter-spacing|left|justify-content|initial|inherit|ime-mode|image-orientation|image-resolution|image-rendering|icon|hyphens|height|font-weight|font-variant-ligatures|font-variant|font-style|font-stretch|font-size-adjust|font-size|font-language-override|font-kerning|font-feature-settings|font-family|font|float|flex-wrap|flex-shrink|flex-grow|flex-flow|flex-direction|flex-basis|flex|filter|empty-cells|display|direction|cursor|counter-reset|counter-increment|content|column-width|column-span|column-rule-width|column-rule-style|column-rule-color|column-rule|column-gap|column-fill|column-count|columns|color|clip-path|clip|clear|caption-side|break-inside|break-before|break-after|box-sizing|box-shadow|box-decoration-break|bottom|border-width|border-top-width|border-top-style|border-top-right-radius|border-top-left-radius|border-top-color|border-top|border-style|border-spacing|border-right-width|border-right-style|border-right-color|border-right|border-radius|border-left-width|border-left-style|border-left-color|border-left|border-image-width|border-image-source|border-image-slice|border-image-repeat|border-image-outset|border-image|border-color|border-collapse|border-bottom-width|border-bottom-style|border-bottom-right-radius|border-bottom-left-radius|border-bottom-color|border-bottom|border|background-size|background-repeat|background-position|background-origin|background-image|background-color|background-clip|background-attachment|background-blend-mode|background|backface-visibility|auto|animation-timing-function|animation-play-state|animation-name|animation-iteration-count|animation-fill-mode|animation-duration|animation-direction|animation-delay|animation|align-self|align-items|align-content)\\b',
      illegal: '[^\\s]'
    }, {
      begin: '\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b'
    }, {
      begin: ':', end: ';',
      contains: [VARIABLE, HEXCOLOR, hljs.CSS_NUMBER_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, {
        className: 'meta', begin: '!important'
      }]
    }, {
      begin: '@', end: '[{;]',
      keywords: 'mixin include extend for if else each while charset import debug media page content font-face namespace warn',
      contains: [VARIABLE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, HEXCOLOR, hljs.CSS_NUMBER_MODE, {
        begin: '\\s[A-Za-z0-9_.-]+',
        relevance: 0
      }]
    }]
  };
};

var shell = function shell(hljs) {
  return {
    aliases: ['console'],
    contains: [{
      className: 'meta',
      begin: '^\\s{0,3}[\\w\\d\\[\\]()@-]*[>%$#]',
      starts: {
        end: '$', subLanguage: 'bash'
      }
    }]
  };
};

var smali = function smali(hljs) {
  var smali_instr_low_prio = ['add', 'and', 'cmp', 'cmpg', 'cmpl', 'const', 'div', 'double', 'float', 'goto', 'if', 'int', 'long', 'move', 'mul', 'neg', 'new', 'nop', 'not', 'or', 'rem', 'return', 'shl', 'shr', 'sput', 'sub', 'throw', 'ushr', 'xor'];
  var smali_instr_high_prio = ['aget', 'aput', 'array', 'check', 'execute', 'fill', 'filled', 'goto/16', 'goto/32', 'iget', 'instance', 'invoke', 'iput', 'monitor', 'packed', 'sget', 'sparse'];
  var smali_keywords = ['transient', 'constructor', 'abstract', 'final', 'synthetic', 'public', 'private', 'protected', 'static', 'bridge', 'system'];
  return {
    aliases: ['smali'],
    contains: [{
      className: 'string',
      begin: '"', end: '"',
      relevance: 0
    }, hljs.COMMENT('#', '$', {
      relevance: 0
    }), {
      className: 'keyword',
      variants: [{ begin: '\\s*\\.end\\s[a-zA-Z0-9]*' }, { begin: '^[ ]*\\.[a-zA-Z]*', relevance: 0 }, { begin: '\\s:[a-zA-Z_0-9]*', relevance: 0 }, { begin: '\\s(' + smali_keywords.join('|') + ')' }]
    }, {
      className: 'built_in',
      variants: [{
        begin: '\\s(' + smali_instr_low_prio.join('|') + ')\\s'
      }, {
        begin: '\\s(' + smali_instr_low_prio.join('|') + ')((\\-|/)[a-zA-Z0-9]+)+\\s',
        relevance: 10
      }, {
        begin: '\\s(' + smali_instr_high_prio.join('|') + ')((\\-|/)[a-zA-Z0-9]+)*\\s',
        relevance: 10
      }]
    }, {
      className: 'class',
      begin: 'L[^\(;:\n]*;',
      relevance: 0
    }, {
      begin: '[vp][0-9]+'
    }]
  };
};

var smalltalk = function smalltalk(hljs) {
  var VAR_IDENT_RE = '[a-z][a-zA-Z0-9_]*';
  var CHAR = {
    className: 'string',
    begin: '\\$.{1}'
  };
  var SYMBOL = {
    className: 'symbol',
    begin: '#' + hljs.UNDERSCORE_IDENT_RE
  };
  return {
    aliases: ['st'],
    keywords: 'self super nil true false thisContext', // only 6
    contains: [hljs.COMMENT('"', '"'), hljs.APOS_STRING_MODE, {
      className: 'type',
      begin: '\\b[A-Z][A-Za-z0-9_]*',
      relevance: 0
    }, {
      begin: VAR_IDENT_RE + ':',
      relevance: 0
    }, hljs.C_NUMBER_MODE, SYMBOL, CHAR, {
      // This looks more complicated than needed to avoid combinatorial
      // explosion under V8. It effectively means `| var1 var2 ... |` with
      // whitespace adjacent to `|` being optional.
      begin: '\\|[ ]*' + VAR_IDENT_RE + '([ ]+' + VAR_IDENT_RE + ')*[ ]*\\|',
      returnBegin: true, end: /\|/,
      illegal: /\S/,
      contains: [{ begin: '(\\|[ ]*)?' + VAR_IDENT_RE }]
    }, {
      begin: '\\#\\(', end: '\\)',
      contains: [hljs.APOS_STRING_MODE, CHAR, hljs.C_NUMBER_MODE, SYMBOL]
    }]
  };
};

var sml = function sml(hljs) {
  return {
    aliases: ['ml'],
    keywords: {
      keyword:
      /* according to Definition of Standard ML 97  */
      'abstype and andalso as case datatype do else end eqtype ' + 'exception fn fun functor handle if in include infix infixr ' + 'let local nonfix of op open orelse raise rec sharing sig ' + 'signature struct structure then type val with withtype where while',
      built_in:
      /* built-in types according to basis library */
      'array bool char exn int list option order real ref string substring vector unit word',
      literal: 'true false NONE SOME LESS EQUAL GREATER nil'
    },
    illegal: /\/\/|>>/,
    lexemes: '[a-z_]\\w*!?',
    contains: [{
      className: 'literal',
      begin: /\[(\|\|)?\]|\(\)/,
      relevance: 0
    }, hljs.COMMENT('\\(\\*', '\\*\\)', {
      contains: ['self']
    }), { /* type variable */
      className: 'symbol',
      begin: '\'[A-Za-z_](?!\')[\\w\']*'
      /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
    }, { /* polymorphic variant */
      className: 'type',
      begin: '`[A-Z][\\w\']*'
    }, { /* module or constructor */
      className: 'type',
      begin: '\\b[A-Z][\\w\']*',
      relevance: 0
    }, { /* don't color identifiers, but safely catch all identifiers with '*/
      begin: '[a-z_]\\w*\'[\\w\']*'
    }, hljs.inherit(hljs.APOS_STRING_MODE, { className: 'string', relevance: 0 }), hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }), {
      className: 'number',
      begin: '\\b(0[xX][a-fA-F0-9_]+[Lln]?|' + '0[oO][0-7_]+[Lln]?|' + '0[bB][01_]+[Lln]?|' + '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',
      relevance: 0
    }, {
      begin: /[-=]>/ // relevance booster
    }]
  };
};

var sqf = function sqf(hljs) {
  var CPP = hljs.getLanguage('cpp').exports;

  // In SQF, a variable start with _
  var VARIABLE = {
    className: 'variable',
    begin: /\b_+[a-zA-Z_]\w*/
  };

  // In SQF, a function should fit myTag_fnc_myFunction pattern
  // https://community.bistudio.com/wiki/Functions_Library_(Arma_3)#Adding_a_Function
  var FUNCTION = {
    className: 'title',
    begin: /[a-zA-Z][a-zA-Z0-9]+_fnc_\w*/
  };

  // In SQF strings, quotes matching the start are escaped by adding a consecutive.
  // Example of single escaped quotes: " "" " and  ' '' '.
  var STRINGS = {
    className: 'string',
    variants: [{
      begin: '"',
      end: '"',
      contains: [{ begin: '""', relevance: 0 }]
    }, {
      begin: '\'',
      end: '\'',
      contains: [{ begin: '\'\'', relevance: 0 }]
    }]
  };

  return {
    aliases: ['sqf'],
    case_insensitive: true,
    keywords: {
      keyword: 'case catch default do else exit exitWith for forEach from if ' + 'switch then throw to try waitUntil while with',
      built_in: 'abs accTime acos action actionIDs actionKeys actionKeysImages actionKeysNames ' + 'actionKeysNamesArray actionName actionParams activateAddons activatedAddons activateKey ' + 'add3DENConnection add3DENEventHandler add3DENLayer addAction addBackpack addBackpackCargo ' + 'addBackpackCargoGlobal addBackpackGlobal addCamShake addCuratorAddons addCuratorCameraArea ' + 'addCuratorEditableObjects addCuratorEditingArea addCuratorPoints addEditorObject addEventHandler ' + 'addGoggles addGroupIcon addHandgunItem addHeadgear addItem addItemCargo addItemCargoGlobal ' + 'addItemPool addItemToBackpack addItemToUniform addItemToVest addLiveStats addMagazine ' + 'addMagazineAmmoCargo addMagazineCargo addMagazineCargoGlobal addMagazineGlobal addMagazinePool ' + 'addMagazines addMagazineTurret addMenu addMenuItem addMissionEventHandler addMPEventHandler ' + 'addMusicEventHandler addOwnedMine addPlayerScores addPrimaryWeaponItem ' + 'addPublicVariableEventHandler addRating addResources addScore addScoreSide addSecondaryWeaponItem ' + 'addSwitchableUnit addTeamMember addToRemainsCollector addUniform addVehicle addVest addWaypoint ' + 'addWeapon addWeaponCargo addWeaponCargoGlobal addWeaponGlobal addWeaponItem addWeaponPool ' + 'addWeaponTurret agent agents AGLToASL aimedAtTarget aimPos airDensityRTD airportSide ' + 'AISFinishHeal alive all3DENEntities allControls allCurators allCutLayers allDead allDeadMen ' + 'allDisplays allGroups allMapMarkers allMines allMissionObjects allow3DMode allowCrewInImmobile ' + 'allowCuratorLogicIgnoreAreas allowDamage allowDammage allowFileOperations allowFleeing allowGetIn ' + 'allowSprint allPlayers allSites allTurrets allUnits allUnitsUAV allVariables ammo and animate ' + 'animateDoor animateSource animationNames animationPhase animationSourcePhase animationState ' + 'append apply armoryPoints arrayIntersect asin ASLToAGL ASLToATL assert assignAsCargo ' + 'assignAsCargoIndex assignAsCommander assignAsDriver assignAsGunner assignAsTurret assignCurator ' + 'assignedCargo assignedCommander assignedDriver assignedGunner assignedItems assignedTarget ' + 'assignedTeam assignedVehicle assignedVehicleRole assignItem assignTeam assignToAirport atan atan2 ' + 'atg ATLToASL attachedObject attachedObjects attachedTo attachObject attachTo attackEnabled ' + 'backpack backpackCargo backpackContainer backpackItems backpackMagazines backpackSpaceFor ' + 'behaviour benchmark binocular blufor boundingBox boundingBoxReal boundingCenter breakOut breakTo ' + 'briefingName buildingExit buildingPos buttonAction buttonSetAction cadetMode call callExtension ' + 'camCommand camCommit camCommitPrepared camCommitted camConstuctionSetParams camCreate camDestroy ' + 'cameraEffect cameraEffectEnableHUD cameraInterest cameraOn cameraView campaignConfigFile ' + 'camPreload camPreloaded camPrepareBank camPrepareDir camPrepareDive camPrepareFocus camPrepareFov ' + 'camPrepareFovRange camPreparePos camPrepareRelPos camPrepareTarget camSetBank camSetDir ' + 'camSetDive camSetFocus camSetFov camSetFovRange camSetPos camSetRelPos camSetTarget camTarget ' + 'camUseNVG canAdd canAddItemToBackpack canAddItemToUniform canAddItemToVest ' + 'cancelSimpleTaskDestination canFire canMove canSlingLoad canStand canSuspend canUnloadInCombat ' + 'canVehicleCargo captive captiveNum cbChecked cbSetChecked ceil channelEnabled cheatsEnabled ' + 'checkAIFeature checkVisibility civilian className clearAllItemsFromBackpack clearBackpackCargo ' + 'clearBackpackCargoGlobal clearGroupIcons clearItemCargo clearItemCargoGlobal clearItemPool ' + 'clearMagazineCargo clearMagazineCargoGlobal clearMagazinePool clearOverlay clearRadio ' + 'clearWeaponCargo clearWeaponCargoGlobal clearWeaponPool clientOwner closeDialog closeDisplay ' + 'closeOverlay collapseObjectTree collect3DENHistory combatMode commandArtilleryFire commandChat ' + 'commander commandFire commandFollow commandFSM commandGetOut commandingMenu commandMove ' + 'commandRadio commandStop commandSuppressiveFire commandTarget commandWatch comment commitOverlay ' + 'compile compileFinal completedFSM composeText configClasses configFile configHierarchy configName ' + 'configNull configProperties configSourceAddonList configSourceMod configSourceModList ' + 'connectTerminalToUAV controlNull controlsGroupCtrl copyFromClipboard copyToClipboard ' + 'copyWaypoints cos count countEnemy countFriendly countSide countType countUnknown ' + 'create3DENComposition create3DENEntity createAgent createCenter createDialog createDiaryLink ' + 'createDiaryRecord createDiarySubject createDisplay createGearDialog createGroup ' + 'createGuardedPoint createLocation createMarker createMarkerLocal createMenu createMine ' + 'createMissionDisplay createMPCampaignDisplay createSimpleObject createSimpleTask createSite ' + 'createSoundSource createTask createTeam createTrigger createUnit createVehicle createVehicleCrew ' + 'createVehicleLocal crew ctrlActivate ctrlAddEventHandler ctrlAngle ctrlAutoScrollDelay ' + 'ctrlAutoScrollRewind ctrlAutoScrollSpeed ctrlChecked ctrlClassName ctrlCommit ctrlCommitted ' + 'ctrlCreate ctrlDelete ctrlEnable ctrlEnabled ctrlFade ctrlHTMLLoaded ctrlIDC ctrlIDD ' + 'ctrlMapAnimAdd ctrlMapAnimClear ctrlMapAnimCommit ctrlMapAnimDone ctrlMapCursor ctrlMapMouseOver ' + 'ctrlMapScale ctrlMapScreenToWorld ctrlMapWorldToScreen ctrlModel ctrlModelDirAndUp ctrlModelScale ' + 'ctrlParent ctrlParentControlsGroup ctrlPosition ctrlRemoveAllEventHandlers ctrlRemoveEventHandler ' + 'ctrlScale ctrlSetActiveColor ctrlSetAngle ctrlSetAutoScrollDelay ctrlSetAutoScrollRewind ' + 'ctrlSetAutoScrollSpeed ctrlSetBackgroundColor ctrlSetChecked ctrlSetEventHandler ctrlSetFade ' + 'ctrlSetFocus ctrlSetFont ctrlSetFontH1 ctrlSetFontH1B ctrlSetFontH2 ctrlSetFontH2B ctrlSetFontH3 ' + 'ctrlSetFontH3B ctrlSetFontH4 ctrlSetFontH4B ctrlSetFontH5 ctrlSetFontH5B ctrlSetFontH6 ' + 'ctrlSetFontH6B ctrlSetFontHeight ctrlSetFontHeightH1 ctrlSetFontHeightH2 ctrlSetFontHeightH3 ' + 'ctrlSetFontHeightH4 ctrlSetFontHeightH5 ctrlSetFontHeightH6 ctrlSetFontHeightSecondary ' + 'ctrlSetFontP ctrlSetFontPB ctrlSetFontSecondary ctrlSetForegroundColor ctrlSetModel ' + 'ctrlSetModelDirAndUp ctrlSetModelScale ctrlSetPosition ctrlSetScale ctrlSetStructuredText ' + 'ctrlSetText ctrlSetTextColor ctrlSetTooltip ctrlSetTooltipColorBox ctrlSetTooltipColorShade ' + 'ctrlSetTooltipColorText ctrlShow ctrlShown ctrlText ctrlTextHeight ctrlType ctrlVisible ' + 'curatorAddons curatorCamera curatorCameraArea curatorCameraAreaCeiling curatorCoef ' + 'curatorEditableObjects curatorEditingArea curatorEditingAreaType curatorMouseOver curatorPoints ' + 'curatorRegisteredObjects curatorSelected curatorWaypointCost current3DENOperation currentChannel ' + 'currentCommand currentMagazine currentMagazineDetail currentMagazineDetailTurret ' + 'currentMagazineTurret currentMuzzle currentNamespace currentTask currentTasks currentThrowable ' + 'currentVisionMode currentWaypoint currentWeapon currentWeaponMode currentWeaponTurret ' + 'currentZeroing cursorObject cursorTarget customChat customRadio cutFadeOut cutObj cutRsc cutText ' + 'damage date dateToNumber daytime deActivateKey debriefingText debugFSM debugLog deg ' + 'delete3DENEntities deleteAt deleteCenter deleteCollection deleteEditorObject deleteGroup ' + 'deleteIdentity deleteLocation deleteMarker deleteMarkerLocal deleteRange deleteResources ' + 'deleteSite deleteStatus deleteTeam deleteVehicle deleteVehicleCrew deleteWaypoint detach ' + 'detectedMines diag_activeMissionFSMs diag_activeScripts diag_activeSQFScripts ' + 'diag_activeSQSScripts diag_captureFrame diag_captureSlowFrame diag_codePerformance diag_drawMode ' + 'diag_enable diag_enabled diag_fps diag_fpsMin diag_frameNo diag_list diag_log diag_logSlowFrame ' + 'diag_mergeConfigFile diag_recordTurretLimits diag_tickTime diag_toggle dialog diarySubjectExists ' + 'didJIP didJIPOwner difficulty difficultyEnabled difficultyEnabledRTD difficultyOption direction ' + 'directSay disableAI disableCollisionWith disableConversation disableDebriefingStats ' + 'disableNVGEquipment disableRemoteSensors disableSerialization disableTIEquipment ' + 'disableUAVConnectability disableUserInput displayAddEventHandler displayCtrl displayNull ' + 'displayParent displayRemoveAllEventHandlers displayRemoveEventHandler displaySetEventHandler ' + 'dissolveTeam distance distance2D distanceSqr distributionRegion do3DENAction doArtilleryFire ' + 'doFire doFollow doFSM doGetOut doMove doorPhase doStop doSuppressiveFire doTarget doWatch ' + 'drawArrow drawEllipse drawIcon drawIcon3D drawLine drawLine3D drawLink drawLocation drawPolygon ' + 'drawRectangle driver drop east echo edit3DENMissionAttributes editObject editorSetEventHandler ' + 'effectiveCommander emptyPositions enableAI enableAIFeature enableAimPrecision enableAttack ' + 'enableAudioFeature enableCamShake enableCaustics enableChannel enableCollisionWith enableCopilot ' + 'enableDebriefingStats enableDiagLegend enableEndDialog enableEngineArtillery enableEnvironment ' + 'enableFatigue enableGunLights enableIRLasers enableMimics enablePersonTurret enableRadio ' + 'enableReload enableRopeAttach enableSatNormalOnDetail enableSaving enableSentences ' + 'enableSimulation enableSimulationGlobal enableStamina enableTeamSwitch enableUAVConnectability ' + 'enableUAVWaypoints enableVehicleCargo endLoadingScreen endMission engineOn enginesIsOnRTD ' + 'enginesRpmRTD enginesTorqueRTD entities estimatedEndServerTime estimatedTimeLeft ' + 'evalObjectArgument everyBackpack everyContainer exec execEditorScript execFSM execVM exp ' + 'expectedDestination exportJIPMessages eyeDirection eyePos face faction fadeMusic fadeRadio ' + 'fadeSound fadeSpeech failMission fillWeaponsFromPool find findCover findDisplay findEditorObject ' + 'findEmptyPosition findEmptyPositionReady findNearestEnemy finishMissionInit finite fire ' + 'fireAtTarget firstBackpack flag flagOwner flagSide flagTexture fleeing floor flyInHeight ' + 'flyInHeightASL fog fogForecast fogParams forceAddUniform forcedMap forceEnd forceMap forceRespawn ' + 'forceSpeed forceWalk forceWeaponFire forceWeatherChange forEachMember forEachMemberAgent ' + 'forEachMemberTeam format formation formationDirection formationLeader formationMembers ' + 'formationPosition formationTask formatText formLeader freeLook fromEditor fuel fullCrew ' + 'gearIDCAmmoCount gearSlotAmmoCount gearSlotData get3DENActionState get3DENAttribute get3DENCamera ' + 'get3DENConnections get3DENEntity get3DENEntityID get3DENGrid get3DENIconsVisible ' + 'get3DENLayerEntities get3DENLinesVisible get3DENMissionAttribute get3DENMouseOver get3DENSelected ' + 'getAimingCoef getAllHitPointsDamage getAllOwnedMines getAmmoCargo getAnimAimPrecision ' + 'getAnimSpeedCoef getArray getArtilleryAmmo getArtilleryComputerSettings getArtilleryETA ' + 'getAssignedCuratorLogic getAssignedCuratorUnit getBackpackCargo getBleedingRemaining ' + 'getBurningValue getCameraViewDirection getCargoIndex getCenterOfMass getClientState ' + 'getClientStateNumber getConnectedUAV getCustomAimingCoef getDammage getDescription getDir ' + 'getDirVisual getDLCs getEditorCamera getEditorMode getEditorObjectScope getElevationOffset ' + 'getFatigue getFriend getFSMVariable getFuelCargo getGroupIcon getGroupIconParams getGroupIcons ' + 'getHideFrom getHit getHitIndex getHitPointDamage getItemCargo getMagazineCargo getMarkerColor ' + 'getMarkerPos getMarkerSize getMarkerType getMass getMissionConfig getMissionConfigValue ' + 'getMissionDLCs getMissionLayerEntities getModelInfo getMousePosition getNumber getObjectArgument ' + 'getObjectChildren getObjectDLC getObjectMaterials getObjectProxy getObjectTextures getObjectType ' + 'getObjectViewDistance getOxygenRemaining getPersonUsedDLCs getPilotCameraDirection ' + 'getPilotCameraPosition getPilotCameraRotation getPilotCameraTarget getPlayerChannel ' + 'getPlayerScores getPlayerUID getPos getPosASL getPosASLVisual getPosASLW getPosATL ' + 'getPosATLVisual getPosVisual getPosWorld getRelDir getRelPos getRemoteSensorsDisabled ' + 'getRepairCargo getResolution getShadowDistance getShotParents getSlingLoad getSpeed getStamina ' + 'getStatValue getSuppression getTerrainHeightASL getText getUnitLoadout getUnitTrait getVariable ' + 'getVehicleCargo getWeaponCargo getWeaponSway getWPPos glanceAt globalChat globalRadio goggles ' + 'goto group groupChat groupFromNetId groupIconSelectable groupIconsVisible groupId groupOwner ' + 'groupRadio groupSelectedUnits groupSelectUnit grpNull gunner gusts halt handgunItems ' + 'handgunMagazine handgunWeapon handsHit hasInterface hasPilotCamera hasWeapon hcAllGroups ' + 'hcGroupParams hcLeader hcRemoveAllGroups hcRemoveGroup hcSelected hcSelectGroup hcSetGroup ' + 'hcShowBar hcShownBar headgear hideBody hideObject hideObjectGlobal hideSelection hint hintC ' + 'hintCadet hintSilent hmd hostMission htmlLoad HUDMovementLevels humidity image importAllGroups ' + 'importance in inArea inAreaArray incapacitatedState independent inflame inflamed ' + 'inGameUISetEventHandler inheritsFrom initAmbientLife inPolygon inputAction inRangeOfArtillery ' + 'insertEditorObject intersect is3DEN is3DENMultiplayer isAbleToBreathe isAgent isArray ' + 'isAutoHoverOn isAutonomous isAutotest isBleeding isBurning isClass isCollisionLightOn ' + 'isCopilotEnabled isDedicated isDLCAvailable isEngineOn isEqualTo isEqualType isEqualTypeAll ' + 'isEqualTypeAny isEqualTypeArray isEqualTypeParams isFilePatchingEnabled isFlashlightOn ' + 'isFlatEmpty isForcedWalk isFormationLeader isHidden isInRemainsCollector ' + 'isInstructorFigureEnabled isIRLaserOn isKeyActive isKindOf isLightOn isLocalized isManualFire ' + 'isMarkedForCollection isMultiplayer isMultiplayerSolo isNil isNull isNumber isObjectHidden ' + 'isObjectRTD isOnRoad isPipEnabled isPlayer isRealTime isRemoteExecuted isRemoteExecutedJIP ' + 'isServer isShowing3DIcons isSprintAllowed isStaminaEnabled isSteamMission ' + 'isStreamFriendlyUIEnabled isText isTouchingGround isTurnedOut isTutHintsEnabled isUAVConnectable ' + 'isUAVConnected isUniformAllowed isVehicleCargo isWalking isWeaponDeployed isWeaponRested ' + 'itemCargo items itemsWithMagazines join joinAs joinAsSilent joinSilent joinString kbAddDatabase ' + 'kbAddDatabaseTargets kbAddTopic kbHasTopic kbReact kbRemoveTopic kbTell kbWasSaid keyImage ' + 'keyName knowsAbout land landAt landResult language laserTarget lbAdd lbClear lbColor lbCurSel ' + 'lbData lbDelete lbIsSelected lbPicture lbSelection lbSetColor lbSetCurSel lbSetData lbSetPicture ' + 'lbSetPictureColor lbSetPictureColorDisabled lbSetPictureColorSelected lbSetSelectColor ' + 'lbSetSelectColorRight lbSetSelected lbSetTooltip lbSetValue lbSize lbSort lbSortByValue lbText ' + 'lbValue leader leaderboardDeInit leaderboardGetRows leaderboardInit leaveVehicle libraryCredits ' + 'libraryDisclaimers lifeState lightAttachObject lightDetachObject lightIsOn lightnings limitSpeed ' + 'linearConversion lineBreak lineIntersects lineIntersectsObjs lineIntersectsSurfaces ' + 'lineIntersectsWith linkItem list listObjects ln lnbAddArray lnbAddColumn lnbAddRow lnbClear ' + 'lnbColor lnbCurSelRow lnbData lnbDeleteColumn lnbDeleteRow lnbGetColumnsPosition lnbPicture ' + 'lnbSetColor lnbSetColumnsPos lnbSetCurSelRow lnbSetData lnbSetPicture lnbSetText lnbSetValue ' + 'lnbSize lnbText lnbValue load loadAbs loadBackpack loadFile loadGame loadIdentity loadMagazine ' + 'loadOverlay loadStatus loadUniform loadVest local localize locationNull locationPosition lock ' + 'lockCameraTo lockCargo lockDriver locked lockedCargo lockedDriver lockedTurret lockIdentity ' + 'lockTurret lockWP log logEntities logNetwork logNetworkTerminate lookAt lookAtPos magazineCargo ' + 'magazines magazinesAllTurrets magazinesAmmo magazinesAmmoCargo magazinesAmmoFull magazinesDetail ' + 'magazinesDetailBackpack magazinesDetailUniform magazinesDetailVest magazinesTurret ' + 'magazineTurretAmmo mapAnimAdd mapAnimClear mapAnimCommit mapAnimDone mapCenterOnCamera ' + 'mapGridPosition markAsFinishedOnSteam markerAlpha markerBrush markerColor markerDir markerPos ' + 'markerShape markerSize markerText markerType max members menuAction menuAdd menuChecked menuClear ' + 'menuCollapse menuData menuDelete menuEnable menuEnabled menuExpand menuHover menuPicture ' + 'menuSetAction menuSetCheck menuSetData menuSetPicture menuSetValue menuShortcut menuShortcutText ' + 'menuSize menuSort menuText menuURL menuValue min mineActive mineDetectedBy missionConfigFile ' + 'missionDifficulty missionName missionNamespace missionStart missionVersion mod modelToWorld ' + 'modelToWorldVisual modParams moonIntensity moonPhase morale move move3DENCamera moveInAny ' + 'moveInCargo moveInCommander moveInDriver moveInGunner moveInTurret moveObjectToEnd moveOut ' + 'moveTime moveTo moveToCompleted moveToFailed musicVolume name nameSound nearEntities ' + 'nearestBuilding nearestLocation nearestLocations nearestLocationWithDubbing nearestObject ' + 'nearestObjects nearestTerrainObjects nearObjects nearObjectsReady nearRoads nearSupplies ' + 'nearTargets needReload netId netObjNull newOverlay nextMenuItemIndex nextWeatherChange nMenuItems ' + 'not numberToDate objectCurators objectFromNetId objectParent objNull objStatus onBriefingGroup ' + 'onBriefingNotes onBriefingPlan onBriefingTeamSwitch onCommandModeChanged onDoubleClick ' + 'onEachFrame onGroupIconClick onGroupIconOverEnter onGroupIconOverLeave onHCGroupSelectionChanged ' + 'onMapSingleClick onPlayerConnected onPlayerDisconnected onPreloadFinished onPreloadStarted ' + 'onShowNewObject onTeamSwitch openCuratorInterface openDLCPage openMap openYoutubeVideo opfor or ' + 'orderGetIn overcast overcastForecast owner param params parseNumber parseText parsingNamespace ' + 'particlesQuality pi pickWeaponPool pitch pixelGrid pixelGridBase pixelGridNoUIScale pixelH pixelW ' + 'playableSlotsNumber playableUnits playAction playActionNow player playerRespawnTime playerSide ' + 'playersNumber playGesture playMission playMove playMoveNow playMusic playScriptedMission ' + 'playSound playSound3D position positionCameraToWorld posScreenToWorld posWorldToScreen ' + 'ppEffectAdjust ppEffectCommit ppEffectCommitted ppEffectCreate ppEffectDestroy ppEffectEnable ' + 'ppEffectEnabled ppEffectForceInNVG precision preloadCamera preloadObject preloadSound ' + 'preloadTitleObj preloadTitleRsc preprocessFile preprocessFileLineNumbers primaryWeapon ' + 'primaryWeaponItems primaryWeaponMagazine priority private processDiaryLink productVersion ' + 'profileName profileNamespace profileNameSteam progressLoadingScreen progressPosition ' + 'progressSetPosition publicVariable publicVariableClient publicVariableServer pushBack ' + 'pushBackUnique putWeaponPool queryItemsPool queryMagazinePool queryWeaponPool rad radioChannelAdd ' + 'radioChannelCreate radioChannelRemove radioChannelSetCallSign radioChannelSetLabel radioVolume ' + 'rain rainbow random rank rankId rating rectangular registeredTasks registerTask reload ' + 'reloadEnabled remoteControl remoteExec remoteExecCall remove3DENConnection remove3DENEventHandler ' + 'remove3DENLayer removeAction removeAll3DENEventHandlers removeAllActions removeAllAssignedItems ' + 'removeAllContainers removeAllCuratorAddons removeAllCuratorCameraAreas ' + 'removeAllCuratorEditingAreas removeAllEventHandlers removeAllHandgunItems removeAllItems ' + 'removeAllItemsWithMagazines removeAllMissionEventHandlers removeAllMPEventHandlers ' + 'removeAllMusicEventHandlers removeAllOwnedMines removeAllPrimaryWeaponItems removeAllWeapons ' + 'removeBackpack removeBackpackGlobal removeCuratorAddons removeCuratorCameraArea ' + 'removeCuratorEditableObjects removeCuratorEditingArea removeDrawIcon removeDrawLinks ' + 'removeEventHandler removeFromRemainsCollector removeGoggles removeGroupIcon removeHandgunItem ' + 'removeHeadgear removeItem removeItemFromBackpack removeItemFromUniform removeItemFromVest ' + 'removeItems removeMagazine removeMagazineGlobal removeMagazines removeMagazinesTurret ' + 'removeMagazineTurret removeMenuItem removeMissionEventHandler removeMPEventHandler ' + 'removeMusicEventHandler removeOwnedMine removePrimaryWeaponItem removeSecondaryWeaponItem ' + 'removeSimpleTask removeSwitchableUnit removeTeamMember removeUniform removeVest removeWeapon ' + 'removeWeaponGlobal removeWeaponTurret requiredVersion resetCamShake resetSubgroupDirection ' + 'resistance resize resources respawnVehicle restartEditorCamera reveal revealMine reverse ' + 'reversedMouseY roadAt roadsConnectedTo roleDescription ropeAttachedObjects ropeAttachedTo ' + 'ropeAttachEnabled ropeAttachTo ropeCreate ropeCut ropeDestroy ropeDetach ropeEndPosition ' + 'ropeLength ropes ropeUnwind ropeUnwound rotorsForcesRTD rotorsRpmRTD round runInitScript ' + 'safeZoneH safeZoneW safeZoneWAbs safeZoneX safeZoneXAbs safeZoneY save3DENInventory saveGame ' + 'saveIdentity saveJoysticks saveOverlay saveProfileNamespace saveStatus saveVar savingEnabled say ' + 'say2D say3D scopeName score scoreSide screenshot screenToWorld scriptDone scriptName scriptNull ' + 'scudState secondaryWeapon secondaryWeaponItems secondaryWeaponMagazine select selectBestPlaces ' + 'selectDiarySubject selectedEditorObjects selectEditorObject selectionNames selectionPosition ' + 'selectLeader selectMax selectMin selectNoPlayer selectPlayer selectRandom selectWeapon ' + 'selectWeaponTurret sendAUMessage sendSimpleCommand sendTask sendTaskResult sendUDPMessage ' + 'serverCommand serverCommandAvailable serverCommandExecutable serverName serverTime set ' + 'set3DENAttribute set3DENAttributes set3DENGrid set3DENIconsVisible set3DENLayer ' + 'set3DENLinesVisible set3DENMissionAttributes set3DENModelsVisible set3DENObjectType ' + 'set3DENSelected setAccTime setAirportSide setAmmo setAmmoCargo setAnimSpeedCoef setAperture ' + 'setApertureNew setArmoryPoints setAttributes setAutonomous setBehaviour setBleedingRemaining ' + 'setCameraInterest setCamShakeDefParams setCamShakeParams setCamUseTi setCaptive setCenterOfMass ' + 'setCollisionLight setCombatMode setCompassOscillation setCuratorCameraAreaCeiling setCuratorCoef ' + 'setCuratorEditingAreaType setCuratorWaypointCost setCurrentChannel setCurrentTask ' + 'setCurrentWaypoint setCustomAimCoef setDamage setDammage setDate setDebriefingText ' + 'setDefaultCamera setDestination setDetailMapBlendPars setDir setDirection setDrawIcon ' + 'setDropInterval setEditorMode setEditorObjectScope setEffectCondition setFace setFaceAnimation ' + 'setFatigue setFlagOwner setFlagSide setFlagTexture setFog setFormation setFormationTask ' + 'setFormDir setFriend setFromEditor setFSMVariable setFuel setFuelCargo setGroupIcon ' + 'setGroupIconParams setGroupIconsSelectable setGroupIconsVisible setGroupId setGroupIdGlobal ' + 'setGroupOwner setGusts setHideBehind setHit setHitIndex setHitPointDamage setHorizonParallaxCoef ' + 'setHUDMovementLevels setIdentity setImportance setLeader setLightAmbient setLightAttenuation ' + 'setLightBrightness setLightColor setLightDayLight setLightFlareMaxDistance setLightFlareSize ' + 'setLightIntensity setLightnings setLightUseFlare setLocalWindParams setMagazineTurretAmmo ' + 'setMarkerAlpha setMarkerAlphaLocal setMarkerBrush setMarkerBrushLocal setMarkerColor ' + 'setMarkerColorLocal setMarkerDir setMarkerDirLocal setMarkerPos setMarkerPosLocal setMarkerShape ' + 'setMarkerShapeLocal setMarkerSize setMarkerSizeLocal setMarkerText setMarkerTextLocal ' + 'setMarkerType setMarkerTypeLocal setMass setMimic setMousePosition setMusicEffect ' + 'setMusicEventHandler setName setNameSound setObjectArguments setObjectMaterial ' + 'setObjectMaterialGlobal setObjectProxy setObjectTexture setObjectTextureGlobal ' + 'setObjectViewDistance setOvercast setOwner setOxygenRemaining setParticleCircle setParticleClass ' + 'setParticleFire setParticleParams setParticleRandom setPilotCameraDirection ' + 'setPilotCameraRotation setPilotCameraTarget setPilotLight setPiPEffect setPitch setPlayable ' + 'setPlayerRespawnTime setPos setPosASL setPosASL2 setPosASLW setPosATL setPosition setPosWorld ' + 'setRadioMsg setRain setRainbow setRandomLip setRank setRectangular setRepairCargo ' + 'setShadowDistance setShotParents setSide setSimpleTaskAlwaysVisible setSimpleTaskCustomData ' + 'setSimpleTaskDescription setSimpleTaskDestination setSimpleTaskTarget setSimpleTaskType ' + 'setSimulWeatherLayers setSize setSkill setSlingLoad setSoundEffect setSpeaker setSpeech ' + 'setSpeedMode setStamina setStaminaScheme setStatValue setSuppression setSystemOfUnits ' + 'setTargetAge setTaskResult setTaskState setTerrainGrid setText setTimeMultiplier setTitleEffect ' + 'setTriggerActivation setTriggerArea setTriggerStatements setTriggerText setTriggerTimeout ' + 'setTriggerType setType setUnconscious setUnitAbility setUnitLoadout setUnitPos setUnitPosWeak ' + 'setUnitRank setUnitRecoilCoefficient setUnitTrait setUnloadInCombat setUserActionText setVariable ' + 'setVectorDir setVectorDirAndUp setVectorUp setVehicleAmmo setVehicleAmmoDef setVehicleArmor ' + 'setVehicleCargo setVehicleId setVehicleLock setVehiclePosition setVehicleTiPars setVehicleVarName ' + 'setVelocity setVelocityTransformation setViewDistance setVisibleIfTreeCollapsed setWaves ' + 'setWaypointBehaviour setWaypointCombatMode setWaypointCompletionRadius setWaypointDescription ' + 'setWaypointForceBehaviour setWaypointFormation setWaypointHousePosition setWaypointLoiterRadius ' + 'setWaypointLoiterType setWaypointName setWaypointPosition setWaypointScript setWaypointSpeed ' + 'setWaypointStatements setWaypointTimeout setWaypointType setWaypointVisible ' + 'setWeaponReloadingTime setWind setWindDir setWindForce setWindStr setWPPos show3DIcons showChat ' + 'showCinemaBorder showCommandingMenu showCompass showCuratorCompass showGPS showHUD showLegend ' + 'showMap shownArtilleryComputer shownChat shownCompass shownCuratorCompass showNewEditorObject ' + 'shownGPS shownHUD shownMap shownPad shownRadio shownScoretable shownUAVFeed shownWarrant ' + 'shownWatch showPad showRadio showScoretable showSubtitles showUAVFeed showWarrant showWatch ' + 'showWaypoint showWaypoints side sideAmbientLife sideChat sideEmpty sideEnemy sideFriendly ' + 'sideLogic sideRadio sideUnknown simpleTasks simulationEnabled simulCloudDensity ' + 'simulCloudOcclusion simulInClouds simulWeatherSync sin size sizeOf skill skillFinal skipTime ' + 'sleep sliderPosition sliderRange sliderSetPosition sliderSetRange sliderSetSpeed sliderSpeed ' + 'slingLoadAssistantShown soldierMagazines someAmmo sort soundVolume spawn speaker speed speedMode ' + 'splitString sqrt squadParams stance startLoadingScreen step stop stopEngineRTD stopped str ' + 'sunOrMoon supportInfo suppressFor surfaceIsWater surfaceNormal surfaceType swimInDepth ' + 'switchableUnits switchAction switchCamera switchGesture switchLight switchMove ' + 'synchronizedObjects synchronizedTriggers synchronizedWaypoints synchronizeObjectsAdd ' + 'synchronizeObjectsRemove synchronizeTrigger synchronizeWaypoint systemChat systemOfUnits tan ' + 'targetKnowledge targetsAggregate targetsQuery taskAlwaysVisible taskChildren taskCompleted ' + 'taskCustomData taskDescription taskDestination taskHint taskMarkerOffset taskNull taskParent ' + 'taskResult taskState taskType teamMember teamMemberNull teamName teams teamSwitch ' + 'teamSwitchEnabled teamType terminate terrainIntersect terrainIntersectASL text textLog ' + 'textLogFormat tg time timeMultiplier titleCut titleFadeOut titleObj titleRsc titleText toArray ' + 'toFixed toLower toString toUpper triggerActivated triggerActivation triggerArea ' + 'triggerAttachedVehicle triggerAttachObject triggerAttachVehicle triggerStatements triggerText ' + 'triggerTimeout triggerTimeoutCurrent triggerType turretLocal turretOwner turretUnit tvAdd tvClear ' + 'tvCollapse tvCount tvCurSel tvData tvDelete tvExpand tvPicture tvSetCurSel tvSetData tvSetPicture ' + 'tvSetPictureColor tvSetPictureColorDisabled tvSetPictureColorSelected tvSetPictureRight ' + 'tvSetPictureRightColor tvSetPictureRightColorDisabled tvSetPictureRightColorSelected tvSetText ' + 'tvSetTooltip tvSetValue tvSort tvSortByValue tvText tvTooltip tvValue type typeName typeOf ' + 'UAVControl uiNamespace uiSleep unassignCurator unassignItem unassignTeam unassignVehicle ' + 'underwater uniform uniformContainer uniformItems uniformMagazines unitAddons unitAimPosition ' + 'unitAimPositionVisual unitBackpack unitIsUAV unitPos unitReady unitRecoilCoefficient units ' + 'unitsBelowHeight unlinkItem unlockAchievement unregisterTask updateDrawIcon updateMenuItem ' + 'updateObjectTree useAISteeringComponent useAudioTimeForMoves vectorAdd vectorCos ' + 'vectorCrossProduct vectorDiff vectorDir vectorDirVisual vectorDistance vectorDistanceSqr ' + 'vectorDotProduct vectorFromTo vectorMagnitude vectorMagnitudeSqr vectorMultiply vectorNormalized ' + 'vectorUp vectorUpVisual vehicle vehicleCargoEnabled vehicleChat vehicleRadio vehicles ' + 'vehicleVarName velocity velocityModelSpace verifySignature vest vestContainer vestItems ' + 'vestMagazines viewDistance visibleCompass visibleGPS visibleMap visiblePosition ' + 'visiblePositionASL visibleScoretable visibleWatch waves waypointAttachedObject ' + 'waypointAttachedVehicle waypointAttachObject waypointAttachVehicle waypointBehaviour ' + 'waypointCombatMode waypointCompletionRadius waypointDescription waypointForceBehaviour ' + 'waypointFormation waypointHousePosition waypointLoiterRadius waypointLoiterType waypointName ' + 'waypointPosition waypoints waypointScript waypointsEnabledUAV waypointShow waypointSpeed ' + 'waypointStatements waypointTimeout waypointTimeoutCurrent waypointType waypointVisible ' + 'weaponAccessories weaponAccessoriesCargo weaponCargo weaponDirection weaponInertia weaponLowered ' + 'weapons weaponsItems weaponsItemsCargo weaponState weaponsTurret weightRTD west WFSideText wind',
      literal: 'true false nil'
    },
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.NUMBER_MODE, VARIABLE, FUNCTION, STRINGS, CPP.preprocessor],
    illegal: /#/
  };
};

var sql = function sql(hljs) {
  var COMMENT_MODE = hljs.COMMENT('--', '$');
  return {
    case_insensitive: true,
    illegal: /[<>{}*#]/,
    contains: [{
      beginKeywords: 'begin end start commit rollback savepoint lock alter create drop rename call ' + 'delete do handler insert load replace select truncate update set show pragma grant ' + 'merge describe use explain help declare prepare execute deallocate release ' + 'unlock purge reset change stop analyze cache flush optimize repair kill ' + 'install uninstall checksum restore check backup revoke comment',
      end: /;/, endsWithParent: true,
      lexemes: /[\w\.]+/,
      keywords: {
        keyword: 'abort abs absolute acc acce accep accept access accessed accessible account acos action activate add ' + 'addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias ' + 'allocate allow alter always analyze ancillary and any anydata anydataset anyschema anytype apply ' + 'archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan ' + 'atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid ' + 'authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile ' + 'before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float ' + 'binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound ' + 'buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel ' + 'capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base ' + 'char_length character_length characters characterset charindex charset charsetform charsetid check ' + 'checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close ' + 'cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation ' + 'collect colu colum column column_value columns columns_updated comment commit compact compatibility ' + 'compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn ' + 'connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection ' + 'consider consistent constant constraint constraints constructor container content contents context ' + 'contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost ' + 'count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation ' + 'critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user ' + 'cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add ' + 'date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts ' + 'day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate ' + 'declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults ' + 'deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank ' + 'depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor ' + 'deterministic diagnostics difference dimension direct_load directory disable disable_all ' + 'disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div ' + 'do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable ' + 'editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt ' + 'end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors ' + 'escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding ' + 'execu execut execute exempt exists exit exp expire explain export export_set extended extent external ' + 'external_1 external_2 externally extract failed failed_login_attempts failover failure far fast ' + 'feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final ' + 'finish first first_value fixed flash_cache flashback floor flush following follows for forall force ' + 'form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ' + 'ftp full function general generated get get_format get_lock getdate getutcdate global global_name ' + 'globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups ' + 'gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex ' + 'hierarchy high high_priority hosts hour http id ident_current ident_incr ident_seed identified ' + 'identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment ' + 'index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile ' + 'initial initialized initially initrans inmemory inner innodb input insert install instance instantiable ' + 'instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat ' + 'is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists ' + 'keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lax lcase ' + 'lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit ' + 'lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate ' + 'locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call ' + 'logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime ' + 'managed management manual map mapping mask master master_pos_wait match matched materialized max ' + 'maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans ' + 'md5 measures median medium member memcompress memory merge microsecond mid migration min minextents ' + 'minimum mining minus minute minvalue missing mod mode model modification modify module monitoring month ' + 'months mount move movement multiset mutex name name_const names nan national native natural nav nchar ' + 'nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile ' + 'nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile ' + 'nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder ' + 'nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck ' + 'noswitch not nothing notice notrim novalidate now nowait nth_value nullif nulls num numb numbe ' + 'nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ' + 'ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old ' + 'on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date ' + 'oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary ' + 'out outer outfile outline output over overflow overriding package pad parallel parallel_enable ' + 'parameters parent parse partial partition partitions pascal passing password password_grace_time ' + 'password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex ' + 'pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc ' + 'performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin ' + 'policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction ' + 'prediction_cost prediction_details prediction_probability prediction_set prepare present preserve ' + 'prior priority private private_sga privileges procedural procedure procedure_analyze processlist ' + 'profiles project prompt protection public publishingservername purge quarter query quick quiesce quota ' + 'quotename radians raise rand range rank raw read reads readsize rebuild record records ' + 'recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh ' + 'regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy ' + 'reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename ' + 'repair repeat replace replicate replication required reset resetlogs resize resource respect restore ' + 'restricted result result_cache resumable resume retention return returning returns reuse reverse revoke ' + 'right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows ' + 'rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll ' + 'sdo_georaster sdo_topo_geometry search sec_to_time second section securefile security seed segment select ' + 'self sequence sequential serializable server servererror session session_user sessions_per_user set ' + 'sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor ' + 'si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin ' + 'size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex ' + 'source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows ' + 'sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone ' + 'standby start starting startup statement static statistics stats_binomial_test stats_crosstab ' + 'stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep ' + 'stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev ' + 'stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate ' + 'subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum ' + 'suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate ' + 'sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tan tdo ' + 'template temporary terminated tertiary_weights test than then thread through tier ties time time_format ' + 'time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr ' + 'timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking ' + 'transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate ' + 'try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress ' + 'under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unpivot ' + 'unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert ' + 'url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date ' + 'utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var ' + 'var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray ' + 'verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear ' + 'wellformed when whene whenev wheneve whenever where while whitespace with within without work wrapped ' + 'xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces ' + 'xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek',
        literal: 'true false null',
        built_in: 'array bigint binary bit blob boolean char character date dec decimal float int int8 integer interval number ' + 'numeric real record serial serial8 smallint text varchar varying void'
      },
      contains: [{
        className: 'string',
        begin: '\'', end: '\'',
        contains: [hljs.BACKSLASH_ESCAPE, { begin: '\'\'' }]
      }, {
        className: 'string',
        begin: '"', end: '"',
        contains: [hljs.BACKSLASH_ESCAPE, { begin: '""' }]
      }, {
        className: 'string',
        begin: '`', end: '`',
        contains: [hljs.BACKSLASH_ESCAPE]
      }, hljs.C_NUMBER_MODE, hljs.C_BLOCK_COMMENT_MODE, COMMENT_MODE]
    }, hljs.C_BLOCK_COMMENT_MODE, COMMENT_MODE]
  };
};

var stan = function stan(hljs) {
  return {
    contains: [hljs.HASH_COMMENT_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, {
      begin: hljs.UNDERSCORE_IDENT_RE,
      lexemes: hljs.UNDERSCORE_IDENT_RE,
      keywords: {
        // Stan's keywords
        name: 'for in while repeat until if then else',
        // Stan's probablity distributions (less beta and gamma, as commonly
        // used for parameter names). So far, _log and _rng variants are not
        // included
        symbol: 'bernoulli bernoulli_logit binomial binomial_logit ' + 'beta_binomial hypergeometric categorical categorical_logit ' + 'ordered_logistic neg_binomial neg_binomial_2 ' + 'neg_binomial_2_log poisson poisson_log multinomial normal ' + 'exp_mod_normal skew_normal student_t cauchy double_exponential ' + 'logistic gumbel lognormal chi_square inv_chi_square ' + 'scaled_inv_chi_square exponential inv_gamma weibull frechet ' + 'rayleigh wiener pareto pareto_type_2 von_mises uniform ' + 'multi_normal multi_normal_prec multi_normal_cholesky multi_gp ' + 'multi_gp_cholesky multi_student_t gaussian_dlm_obs dirichlet ' + 'lkj_corr lkj_corr_cholesky wishart inv_wishart',
        // Stan's data types
        'selector-tag': 'int real vector simplex unit_vector ordered positive_ordered ' + 'row_vector matrix cholesky_factor_corr cholesky_factor_cov ' + 'corr_matrix cov_matrix',
        // Stan's model blocks
        title: 'functions model data parameters quantities transformed ' + 'generated',
        literal: 'true false'
      },
      relevance: 0
    },
    // The below is all taken from the R language definition
    {
      // hex value
      className: 'number',
      begin: "0[xX][0-9a-fA-F]+[Li]?\\b",
      relevance: 0
    }, {
      // hex value
      className: 'number',
      begin: "0[xX][0-9a-fA-F]+[Li]?\\b",
      relevance: 0
    }, {
      // explicit integer
      className: 'number',
      begin: "\\d+(?:[eE][+\\-]?\\d*)?L\\b",
      relevance: 0
    }, {
      // number with trailing decimal
      className: 'number',
      begin: "\\d+\\.(?!\\d)(?:i\\b)?",
      relevance: 0
    }, {
      // number
      className: 'number',
      begin: "\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",
      relevance: 0
    }, {
      // number with leading decimal
      className: 'number',
      begin: "\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b",
      relevance: 0
    }]
  };
};

var stata = function stata(hljs) {
  return {
    aliases: ['do', 'ado'],
    case_insensitive: true,
    keywords: 'if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize meqparse mer merg merge mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5',
    contains: [{
      className: 'symbol',
      begin: /`[a-zA-Z0-9_]+'/
    }, {
      className: 'variable',
      begin: /\$\{?[a-zA-Z0-9_]+\}?/
    }, {
      className: 'string',
      variants: [{ begin: '`"[^\r\n]*?"\'' }, { begin: '"[^\r\n"]*"' }]
    }, {
      className: 'built_in',
      variants: [{
        begin: '\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\(|$)'
      }]
    }, hljs.COMMENT('^[ \t]*\\*.*$', false), hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
  };
};

var step21 = function step21(hljs) {
  var STEP21_IDENT_RE = '[A-Z_][A-Z0-9_.]*';
  var STEP21_KEYWORDS = {
    keyword: 'HEADER ENDSEC DATA'
  };
  var STEP21_START = {
    className: 'meta',
    begin: 'ISO-10303-21;',
    relevance: 10
  };
  var STEP21_CLOSE = {
    className: 'meta',
    begin: 'END-ISO-10303-21;',
    relevance: 10
  };

  return {
    aliases: ['p21', 'step', 'stp'],
    case_insensitive: true, // STEP 21 is case insensitive in theory, in practice all non-comments are capitalized.
    lexemes: STEP21_IDENT_RE,
    keywords: STEP21_KEYWORDS,
    contains: [STEP21_START, STEP21_CLOSE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.COMMENT('/\\*\\*!', '\\*/'), hljs.C_NUMBER_MODE, hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }), hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }), {
      className: 'string',
      begin: "'", end: "'"
    }, {
      className: 'symbol',
      variants: [{
        begin: '#', end: '\\d+',
        illegal: '\\W'
      }]
    }]
  };
};

var stylus = function stylus(hljs) {

  var VARIABLE = {
    className: 'variable',
    begin: '\\$' + hljs.IDENT_RE
  };

  var HEX_COLOR = {
    className: 'number',
    begin: '#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})'
  };

  var AT_KEYWORDS = ['charset', 'css', 'debug', 'extend', 'font-face', 'for', 'import', 'include', 'media', 'mixin', 'page', 'warn', 'while'];

  var PSEUDO_SELECTORS = ['after', 'before', 'first-letter', 'first-line', 'active', 'first-child', 'focus', 'hover', 'lang', 'link', 'visited'];

  var TAGS = ['a', 'abbr', 'address', 'article', 'aside', 'audio', 'b', 'blockquote', 'body', 'button', 'canvas', 'caption', 'cite', 'code', 'dd', 'del', 'details', 'dfn', 'div', 'dl', 'dt', 'em', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'mark', 'menu', 'nav', 'object', 'ol', 'p', 'q', 'quote', 'samp', 'section', 'span', 'strong', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'ul', 'var', 'video'];

  var TAG_END = '[\\.\\s\\n\\[\\:,]';

  var ATTRIBUTES = ['align-content', 'align-items', 'align-self', 'animation', 'animation-delay', 'animation-direction', 'animation-duration', 'animation-fill-mode', 'animation-iteration-count', 'animation-name', 'animation-play-state', 'animation-timing-function', 'auto', 'backface-visibility', 'background', 'background-attachment', 'background-clip', 'background-color', 'background-image', 'background-origin', 'background-position', 'background-repeat', 'background-size', 'border', 'border-bottom', 'border-bottom-color', 'border-bottom-left-radius', 'border-bottom-right-radius', 'border-bottom-style', 'border-bottom-width', 'border-collapse', 'border-color', 'border-image', 'border-image-outset', 'border-image-repeat', 'border-image-slice', 'border-image-source', 'border-image-width', 'border-left', 'border-left-color', 'border-left-style', 'border-left-width', 'border-radius', 'border-right', 'border-right-color', 'border-right-style', 'border-right-width', 'border-spacing', 'border-style', 'border-top', 'border-top-color', 'border-top-left-radius', 'border-top-right-radius', 'border-top-style', 'border-top-width', 'border-width', 'bottom', 'box-decoration-break', 'box-shadow', 'box-sizing', 'break-after', 'break-before', 'break-inside', 'caption-side', 'clear', 'clip', 'clip-path', 'color', 'column-count', 'column-fill', 'column-gap', 'column-rule', 'column-rule-color', 'column-rule-style', 'column-rule-width', 'column-span', 'column-width', 'columns', 'content', 'counter-increment', 'counter-reset', 'cursor', 'direction', 'display', 'empty-cells', 'filter', 'flex', 'flex-basis', 'flex-direction', 'flex-flow', 'flex-grow', 'flex-shrink', 'flex-wrap', 'float', 'font', 'font-family', 'font-feature-settings', 'font-kerning', 'font-language-override', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-variant-ligatures', 'font-weight', 'height', 'hyphens', 'icon', 'image-orientation', 'image-rendering', 'image-resolution', 'ime-mode', 'inherit', 'initial', 'justify-content', 'left', 'letter-spacing', 'line-height', 'list-style', 'list-style-image', 'list-style-position', 'list-style-type', 'margin', 'margin-bottom', 'margin-left', 'margin-right', 'margin-top', 'marks', 'mask', 'max-height', 'max-width', 'min-height', 'min-width', 'nav-down', 'nav-index', 'nav-left', 'nav-right', 'nav-up', 'none', 'normal', 'object-fit', 'object-position', 'opacity', 'order', 'orphans', 'outline', 'outline-color', 'outline-offset', 'outline-style', 'outline-width', 'overflow', 'overflow-wrap', 'overflow-x', 'overflow-y', 'padding', 'padding-bottom', 'padding-left', 'padding-right', 'padding-top', 'page-break-after', 'page-break-before', 'page-break-inside', 'perspective', 'perspective-origin', 'pointer-events', 'position', 'quotes', 'resize', 'right', 'tab-size', 'table-layout', 'text-align', 'text-align-last', 'text-decoration', 'text-decoration-color', 'text-decoration-line', 'text-decoration-style', 'text-indent', 'text-overflow', 'text-rendering', 'text-shadow', 'text-transform', 'text-underline-position', 'top', 'transform', 'transform-origin', 'transform-style', 'transition', 'transition-delay', 'transition-duration', 'transition-property', 'transition-timing-function', 'unicode-bidi', 'vertical-align', 'visibility', 'white-space', 'widows', 'width', 'word-break', 'word-spacing', 'word-wrap', 'z-index'];

  // illegals
  var ILLEGAL = ['\\?', '(\\bReturn\\b)', // monkey
  '(\\bEnd\\b)', // monkey
  '(\\bend\\b)', // vbscript
  '(\\bdef\\b)', // gradle
  ';', // a whole lot of languages
  '#\\s', // markdown
  '\\*\\s', // markdown
  '===\\s', // markdown
  '\\|', '%'];

  return {
    aliases: ['styl'],
    case_insensitive: false,
    keywords: 'if else for in',
    illegal: '(' + ILLEGAL.join('|') + ')',
    contains: [

    // strings
    hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE,

    // comments
    hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE,

    // hex colors
    HEX_COLOR,

    // class tag
    {
      begin: '\\.[a-zA-Z][a-zA-Z0-9_-]*' + TAG_END,
      returnBegin: true,
      contains: [{ className: 'selector-class', begin: '\\.[a-zA-Z][a-zA-Z0-9_-]*' }]
    },

    // id tag
    {
      begin: '\\#[a-zA-Z][a-zA-Z0-9_-]*' + TAG_END,
      returnBegin: true,
      contains: [{ className: 'selector-id', begin: '\\#[a-zA-Z][a-zA-Z0-9_-]*' }]
    },

    // tags
    {
      begin: '\\b(' + TAGS.join('|') + ')' + TAG_END,
      returnBegin: true,
      contains: [{ className: 'selector-tag', begin: '\\b[a-zA-Z][a-zA-Z0-9_-]*' }]
    },

    // psuedo selectors
    {
      begin: '&?:?:\\b(' + PSEUDO_SELECTORS.join('|') + ')' + TAG_END
    },

    // @ keywords
    {
      begin: '\@(' + AT_KEYWORDS.join('|') + ')\\b'
    },

    // variables
    VARIABLE,

    // dimension
    hljs.CSS_NUMBER_MODE,

    // number
    hljs.NUMBER_MODE,

    // functions
    //  - only from beginning of line + whitespace
    {
      className: 'function',
      begin: '^[a-zA-Z][a-zA-Z0-9_\-]*\\(.*\\)',
      illegal: '[\\n]',
      returnBegin: true,
      contains: [{ className: 'title', begin: '\\b[a-zA-Z][a-zA-Z0-9_\-]*' }, {
        className: 'params',
        begin: /\(/,
        end: /\)/,
        contains: [HEX_COLOR, VARIABLE, hljs.APOS_STRING_MODE, hljs.CSS_NUMBER_MODE, hljs.NUMBER_MODE, hljs.QUOTE_STRING_MODE]
      }]
    },

    // attributes
    //  - only from beginning of line + whitespace
    //  - must have whitespace after it
    {
      className: 'attribute',
      begin: '\\b(' + ATTRIBUTES.reverse().join('|') + ')\\b',
      starts: {
        // value container
        end: /;|$/,
        contains: [HEX_COLOR, VARIABLE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.CSS_NUMBER_MODE, hljs.NUMBER_MODE, hljs.C_BLOCK_COMMENT_MODE],
        illegal: /\./,
        relevance: 0
      }
    }]
  };
};

var subunit = function subunit(hljs) {
  var DETAILS = {
    className: 'string',
    begin: '\\[\n(multipart)?', end: '\\]\n'
  };
  var TIME = {
    className: 'string',
    begin: '\\d{4}-\\d{2}-\\d{2}(\\s+)\\d{2}:\\d{2}:\\d{2}\.\\d+Z'
  };
  var PROGRESSVALUE = {
    className: 'string',
    begin: '(\\+|-)\\d+'
  };
  var KEYWORDS = {
    className: 'keyword',
    relevance: 10,
    variants: [{ begin: '^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\s+(test)?' }, { begin: '^progress(:?)(\\s+)?(pop|push)?' }, { begin: '^tags:' }, { begin: '^time:' }]
  };
  return {
    case_insensitive: true,
    contains: [DETAILS, TIME, PROGRESSVALUE, KEYWORDS]
  };
};

var swift = function swift(hljs) {
  var SWIFT_KEYWORDS = {
    keyword: '__COLUMN__ __FILE__ __FUNCTION__ __LINE__ as as! as? associativity ' + 'break case catch class continue convenience default defer deinit didSet do ' + 'dynamic dynamicType else enum extension fallthrough false fileprivate final for func ' + 'get guard if import in indirect infix init inout internal is lazy left let ' + 'mutating nil none nonmutating open operator optional override postfix precedence ' + 'prefix private protocol Protocol public repeat required rethrows return ' + 'right self Self set static struct subscript super switch throw throws true ' + 'try try! try? Type typealias unowned var weak where while willSet',
    literal: 'true false nil',
    built_in: 'abs advance alignof alignofValue anyGenerator assert assertionFailure ' + 'bridgeFromObjectiveC bridgeFromObjectiveCUnconditional bridgeToObjectiveC ' + 'bridgeToObjectiveCUnconditional c contains count countElements countLeadingZeros ' + 'debugPrint debugPrintln distance dropFirst dropLast dump encodeBitsAsWords ' + 'enumerate equal fatalError filter find getBridgedObjectiveCType getVaList ' + 'indices insertionSort isBridgedToObjectiveC isBridgedVerbatimToObjectiveC ' + 'isUniquelyReferenced isUniquelyReferencedNonObjC join lazy lexicographicalCompare ' + 'map max maxElement min minElement numericCast overlaps partition posix ' + 'precondition preconditionFailure print println quickSort readLine reduce reflect ' + 'reinterpretCast reverse roundUpToAlignment sizeof sizeofValue sort split ' + 'startsWith stride strideof strideofValue swap toString transcode ' + 'underestimateCount unsafeAddressOf unsafeBitCast unsafeDowncast unsafeUnwrap ' + 'unsafeReflect withExtendedLifetime withObjectAtPlusZero withUnsafePointer ' + 'withUnsafePointerToObject withUnsafeMutablePointer withUnsafeMutablePointers ' + 'withUnsafePointer withUnsafePointers withVaList zip'
  };

  var TYPE = {
    className: 'type',
    begin: '\\b[A-Z][\\w\xC0-\u02B8\']*',
    relevance: 0
  };
  var BLOCK_COMMENT = hljs.COMMENT('/\\*', '\\*/', {
    contains: ['self']
  });
  var SUBST = {
    className: 'subst',
    begin: /\\\(/, end: '\\)',
    keywords: SWIFT_KEYWORDS,
    contains: [] // assigned later
  };
  var NUMBERS = {
    className: 'number',
    begin: '\\b([\\d_]+(\\.[\\deE_]+)?|0x[a-fA-F0-9_]+(\\.[a-fA-F0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b',
    relevance: 0
  };
  var QUOTE_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, {
    contains: [SUBST, hljs.BACKSLASH_ESCAPE]
  });
  SUBST.contains = [NUMBERS];

  return {
    keywords: SWIFT_KEYWORDS,
    contains: [QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, BLOCK_COMMENT, TYPE, NUMBERS, {
      className: 'function',
      beginKeywords: 'func', end: '{', excludeEnd: true,
      contains: [hljs.inherit(hljs.TITLE_MODE, {
        begin: /[A-Za-z$_][0-9A-Za-z$_]*/
      }), {
        begin: /</, end: />/
      }, {
        className: 'params',
        begin: /\(/, end: /\)/, endsParent: true,
        keywords: SWIFT_KEYWORDS,
        contains: ['self', NUMBERS, QUOTE_STRING_MODE, hljs.C_BLOCK_COMMENT_MODE, { begin: ':' // relevance booster
        }],
        illegal: /["']/
      }],
      illegal: /\[|%/
    }, {
      className: 'class',
      beginKeywords: 'struct protocol class extension enum',
      keywords: SWIFT_KEYWORDS,
      end: '\\{',
      excludeEnd: true,
      contains: [hljs.inherit(hljs.TITLE_MODE, { begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/ })]
    }, {
      className: 'meta', // @attributes
      begin: '(@warn_unused_result|@exported|@lazy|@noescape|' + '@NSCopying|@NSManaged|@objc|@convention|@required|' + '@noreturn|@IBAction|@IBDesignable|@IBInspectable|@IBOutlet|' + '@infix|@prefix|@postfix|@autoclosure|@testable|@available|' + '@nonobjc|@NSApplicationMain|@UIApplicationMain)'

    }, {
      beginKeywords: 'import', end: /$/,
      contains: [hljs.C_LINE_COMMENT_MODE, BLOCK_COMMENT]
    }]
  };
};

var taggerscript = function taggerscript(hljs) {

  var COMMENT = {
    className: 'comment',
    begin: /\$noop\(/,
    end: /\)/,
    contains: [{
      begin: /\(/,
      end: /\)/,
      contains: ['self', {
        begin: /\\./
      }]
    }],
    relevance: 10
  };

  var FUNCTION = {
    className: 'keyword',
    begin: /\$(?!noop)[a-zA-Z][_a-zA-Z0-9]*/,
    end: /\(/,
    excludeEnd: true
  };

  var VARIABLE = {
    className: 'variable',
    begin: /%[_a-zA-Z0-9:]*/,
    end: '%'
  };

  var ESCAPE_SEQUENCE = {
    className: 'symbol',
    begin: /\\./
  };

  return {
    contains: [COMMENT, FUNCTION, VARIABLE, ESCAPE_SEQUENCE]
  };
};

var yaml = function yaml(hljs) {
  var LITERALS = 'true false yes no null';

  var keyPrefix = '^[ \\-]*';
  var keyName = '[a-zA-Z_][\\w\\-]*';
  var KEY = {
    className: 'attr',
    variants: [{ begin: keyPrefix + keyName + ":" }, { begin: keyPrefix + '"' + keyName + '"' + ":" }, { begin: keyPrefix + "'" + keyName + "'" + ":" }]
  };

  var TEMPLATE_VARIABLES = {
    className: 'template-variable',
    variants: [{ begin: '\{\{', end: '\}\}' }, // jinja templates Ansible
    { begin: '%\{', end: '\}' // Ruby i18n
    }]
  };
  var STRING = {
    className: 'string',
    relevance: 0,
    variants: [{ begin: /'/, end: /'/ }, { begin: /"/, end: /"/ }, { begin: /\S+/ }],
    contains: [hljs.BACKSLASH_ESCAPE, TEMPLATE_VARIABLES]
  };

  return {
    case_insensitive: true,
    aliases: ['yml', 'YAML', 'yaml'],
    contains: [KEY, {
      className: 'meta',
      begin: '^---\s*$',
      relevance: 10
    }, { // multi line string
      className: 'string',
      begin: '[\\|>] *$',
      returnEnd: true,
      contains: STRING.contains,
      // very simple termination: next hash key
      end: KEY.variants[0].begin
    }, { // Ruby/Rails erb
      begin: '<%[%=-]?', end: '[%-]?%>',
      subLanguage: 'ruby',
      excludeBegin: true,
      excludeEnd: true,
      relevance: 0
    }, { // data type
      className: 'type',
      begin: '!!' + hljs.UNDERSCORE_IDENT_RE
    }, { // fragment id &ref
      className: 'meta',
      begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$'
    }, { // fragment reference *ref
      className: 'meta',
      begin: '\\*' + hljs.UNDERSCORE_IDENT_RE + '$'
    }, { // array listing
      className: 'bullet',
      begin: '^ *-',
      relevance: 0
    }, hljs.HASH_COMMENT_MODE, {
      beginKeywords: LITERALS,
      keywords: { literal: LITERALS }
    }, hljs.C_NUMBER_MODE, STRING]
  };
};

var tap = function tap(hljs) {
  return {
    case_insensitive: true,
    contains: [hljs.HASH_COMMENT_MODE,
    // version of format and total amount of testcases
    {
      className: 'meta',
      variants: [{ begin: '^TAP version (\\d+)$' }, { begin: '^1\\.\\.(\\d+)$' }]
    },
    // YAML block
    {
      begin: '(\s+)?---$', end: '\\.\\.\\.$',
      subLanguage: 'yaml',
      relevance: 0
    },
    // testcase number
    {
      className: 'number',
      begin: ' (\\d+) '
    },
    // testcase status and description
    {
      className: 'symbol',
      variants: [{ begin: '^ok' }, { begin: '^not ok' }]
    }]
  };
};

var tcl = function tcl(hljs) {
  return {
    aliases: ['tk'],
    keywords: 'after append apply array auto_execok auto_import auto_load auto_mkindex ' + 'auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd chan clock ' + 'close concat continue dde dict encoding eof error eval exec exit expr fblocked ' + 'fconfigure fcopy file fileevent filename flush for foreach format gets glob global ' + 'history http if incr info interp join lappend|10 lassign|10 lindex|10 linsert|10 list ' + 'llength|10 load lrange|10 lrepeat|10 lreplace|10 lreverse|10 lsearch|10 lset|10 lsort|10 ' + 'mathfunc mathop memory msgcat namespace open package parray pid pkg::create pkg_mkIndex ' + 'platform platform::shell proc puts pwd read refchan regexp registry regsub|10 rename ' + 'return safe scan seek set socket source split string subst switch tcl_endOfWord ' + 'tcl_findLibrary tcl_startOfNextWord tcl_startOfPreviousWord tcl_wordBreakAfter ' + 'tcl_wordBreakBefore tcltest tclvars tell time tm trace unknown unload unset update ' + 'uplevel upvar variable vwait while',
    contains: [hljs.COMMENT(';[ \\t]*#', '$'), hljs.COMMENT('^[ \\t]*#', '$'), {
      beginKeywords: 'proc',
      end: '[\\{]',
      excludeEnd: true,
      contains: [{
        className: 'title',
        begin: '[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
        end: '[ \\t\\n\\r]',
        endsWithParent: true,
        excludeEnd: true
      }]
    }, {
      excludeEnd: true,
      variants: [{
        begin: '\\$(\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*\\(([a-zA-Z0-9_])*\\)',
        end: '[^a-zA-Z0-9_\\}\\$]'
      }, {
        begin: '\\$(\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
        end: '(\\))?[^a-zA-Z0-9_\\}\\$]'
      }]
    }, {
      className: 'string',
      contains: [hljs.BACKSLASH_ESCAPE],
      variants: [hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }), hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null })]
    }, {
      className: 'number',
      variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]
    }]
  };
};

var tex = function tex(hljs) {
  var COMMAND = {
    className: 'tag',
    begin: /\\/,
    relevance: 0,
    contains: [{
      className: 'name',
      variants: [{ begin: /[a-zA-Zа-яА-я]+[*]?/ }, { begin: /[^a-zA-Zа-яА-я0-9]/ }],
      starts: {
        endsWithParent: true,
        relevance: 0,
        contains: [{
          className: 'string', // because it looks like attributes in HTML tags
          variants: [{ begin: /\[/, end: /\]/ }, { begin: /\{/, end: /\}/ }]
        }, {
          begin: /\s*=\s*/, endsWithParent: true,
          relevance: 0,
          contains: [{
            className: 'number',
            begin: /-?\d*\.?\d+(pt|pc|mm|cm|in|dd|cc|ex|em)?/
          }]
        }]
      }
    }]
  };

  return {
    contains: [COMMAND, {
      className: 'formula',
      contains: [COMMAND],
      relevance: 0,
      variants: [{ begin: /\$\$/, end: /\$\$/ }, { begin: /\$/, end: /\$/ }]
    }, hljs.COMMENT('%', '$', {
      relevance: 0
    })]
  };
};

var thrift = function thrift(hljs) {
  var BUILT_IN_TYPES = 'bool byte i16 i32 i64 double string binary';
  return {
    keywords: {
      keyword: 'namespace const typedef struct enum service exception void oneway set list map required optional',
      built_in: BUILT_IN_TYPES,
      literal: 'true false'
    },
    contains: [hljs.QUOTE_STRING_MODE, hljs.NUMBER_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, {
      className: 'class',
      beginKeywords: 'struct enum service exception', end: /\{/,
      illegal: /\n/,
      contains: [hljs.inherit(hljs.TITLE_MODE, {
        starts: { endsWithParent: true, excludeEnd: true // hack: eating everything after the first title
        } })]
    }, {
      begin: '\\b(set|list|map)\\s*<', end: '>',
      keywords: BUILT_IN_TYPES,
      contains: ['self']
    }]
  };
};

var tp = function tp(hljs) {
  var TPID = {
    className: 'number',
    begin: '[1-9][0-9]*', /* no leading zeros */
    relevance: 0
  };
  var TPLABEL = {
    className: 'symbol',
    begin: ':[^\\]]+'
  };
  var TPDATA = {
    className: 'built_in',
    begin: '(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|\
    TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\[', end: '\\]',
    contains: ['self', TPID, TPLABEL]
  };
  var TPIO = {
    className: 'built_in',
    begin: '(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\[', end: '\\]',
    contains: ['self', TPID, hljs.QUOTE_STRING_MODE, /* for pos section at bottom */
    TPLABEL]
  };

  return {
    keywords: {
      keyword: 'ABORT ACC ADJUST AND AP_LD BREAK CALL CNT COL CONDITION CONFIG DA DB ' + 'DIV DETECT ELSE END ENDFOR ERR_NUM ERROR_PROG FINE FOR GP GUARD INC ' + 'IF JMP LINEAR_MAX_SPEED LOCK MOD MONITOR OFFSET Offset OR OVERRIDE ' + 'PAUSE PREG PTH RT_LD RUN SELECT SKIP Skip TA TB TO TOOL_OFFSET ' + 'Tool_Offset UF UT UFRAME_NUM UTOOL_NUM UNLOCK WAIT X Y Z W P R STRLEN ' + 'SUBSTR FINDSTR VOFFSET PROG ATTR MN POS',
      literal: 'ON OFF max_speed LPOS JPOS ENABLE DISABLE START STOP RESET'
    },
    contains: [TPDATA, TPIO, {
      className: 'keyword',
      begin: '/(PROG|ATTR|MN|POS|END)\\b'
    }, {
      /* this is for cases like ,CALL */
      className: 'keyword',
      begin: '(CALL|RUN|POINT_LOGIC|LBL)\\b'
    }, {
      /* this is for cases like CNT100 where the default lexemes do not
       * separate the keyword and the number */
      className: 'keyword',
      begin: '\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)'
    }, {
      /* to catch numbers that do not have a word boundary on the left */
      className: 'number',
      begin: '\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\b',
      relevance: 0
    }, hljs.COMMENT('//', '[;$]'), hljs.COMMENT('!', '[;$]'), hljs.COMMENT('--eg:', '$'), hljs.QUOTE_STRING_MODE, {
      className: 'string',
      begin: '\'', end: '\''
    }, hljs.C_NUMBER_MODE, {
      className: 'variable',
      begin: '\\$[A-Za-z0-9_]+'
    }]
  };
};

var twig = function twig(hljs) {
  var PARAMS = {
    className: 'params',
    begin: '\\(', end: '\\)'
  };

  var FUNCTION_NAMES = 'attribute block constant cycle date dump include ' + 'max min parent random range source template_from_string';

  var FUNCTIONS = {
    beginKeywords: FUNCTION_NAMES,
    keywords: { name: FUNCTION_NAMES },
    relevance: 0,
    contains: [PARAMS]
  };

  var FILTER = {
    begin: /\|[A-Za-z_]+:?/,
    keywords: 'abs batch capitalize convert_encoding date date_modify default ' + 'escape first format join json_encode keys last length lower ' + 'merge nl2br number_format raw replace reverse round slice sort split ' + 'striptags title trim upper url_encode',
    contains: [FUNCTIONS]
  };

  var TAGS = 'autoescape block do embed extends filter flush for ' + 'if import include macro sandbox set spaceless use verbatim';

  TAGS = TAGS + ' ' + TAGS.split(' ').map(function (t) {
    return 'end' + t;
  }).join(' ');

  return {
    aliases: ['craftcms'],
    case_insensitive: true,
    subLanguage: 'xml',
    contains: [hljs.COMMENT(/\{#/, /#}/), {
      className: 'template-tag',
      begin: /\{%/, end: /%}/,
      contains: [{
        className: 'name',
        begin: /\w+/,
        keywords: TAGS,
        starts: {
          endsWithParent: true,
          contains: [FILTER, FUNCTIONS],
          relevance: 0
        }
      }]
    }, {
      className: 'template-variable',
      begin: /\{\{/, end: /}}/,
      contains: ['self', FILTER, FUNCTIONS]
    }]
  };
};

var typescript = function typescript(hljs) {
  var KEYWORDS = {
    keyword: 'in if for while finally var new function do return void else break catch ' + 'instanceof with throw case default try this switch continue typeof delete ' + 'let yield const class public private protected get set super ' + 'static implements enum export import declare type namespace abstract ' + 'as from extends async await',
    literal: 'true false null undefined NaN Infinity',
    built_in: 'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' + 'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' + 'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' + 'TypeError URIError Number Math Date String RegExp Array Float32Array ' + 'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' + 'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' + 'module console window document any number boolean string void Promise'
  };

  return {
    aliases: ['ts'],
    keywords: KEYWORDS,
    contains: [{
      className: 'meta',
      begin: /^\s*['"]use strict['"]/
    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, { // template string
      className: 'string',
      begin: '`', end: '`',
      contains: [hljs.BACKSLASH_ESCAPE, {
        className: 'subst',
        begin: '\\$\\{', end: '\\}'
      }]
    }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, {
      className: 'number',
      variants: [{ begin: '\\b(0[bB][01]+)' }, { begin: '\\b(0[oO][0-7]+)' }, { begin: hljs.C_NUMBER_RE }],
      relevance: 0
    }, { // "value" container
      begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
      keywords: 'return throw case',
      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.REGEXP_MODE, {
        className: 'function',
        begin: '(\\(.*?\\)|' + hljs.IDENT_RE + ')\\s*=>', returnBegin: true,
        end: '\\s*=>',
        contains: [{
          className: 'params',
          variants: [{
            begin: hljs.IDENT_RE
          }, {
            begin: /\(\s*\)/
          }, {
            begin: /\(/, end: /\)/,
            excludeBegin: true, excludeEnd: true,
            keywords: KEYWORDS,
            contains: ['self', hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]
          }]
        }]
      }],
      relevance: 0
    }, {
      className: 'function',
      begin: 'function', end: /[\{;]/, excludeEnd: true,
      keywords: KEYWORDS,
      contains: ['self', hljs.inherit(hljs.TITLE_MODE, { begin: /[A-Za-z$_][0-9A-Za-z$_]*/ }), {
        className: 'params',
        begin: /\(/, end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
        keywords: KEYWORDS,
        contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE],
        illegal: /["'\(]/
      }],
      illegal: /%/,
      relevance: 0 // () => {} is more typical in TypeScript
    }, {
      beginKeywords: 'constructor', end: /\{/, excludeEnd: true,
      contains: ['self', {
        className: 'params',
        begin: /\(/, end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
        keywords: KEYWORDS,
        contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE],
        illegal: /["'\(]/
      }]
    }, { // prevent references like module.id from being higlighted as module definitions
      begin: /module\./,
      keywords: { built_in: 'module' },
      relevance: 0
    }, {
      beginKeywords: 'module', end: /\{/, excludeEnd: true
    }, {
      beginKeywords: 'interface', end: /\{/, excludeEnd: true,
      keywords: 'interface extends'
    }, {
      begin: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
    }, {
      begin: '\\.' + hljs.IDENT_RE, relevance: 0 // hack: prevents detection of keywords after dots
    }, {
      className: 'meta', begin: '@[A-Za-z]+'
    }]
  };
};

var vala = function vala(hljs) {
  return {
    keywords: {
      keyword:
      // Value types
      'char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 ' + 'uint16 uint32 uint64 float double bool struct enum string void ' +
      // Reference types
      'weak unowned owned ' +
      // Modifiers
      'async signal static abstract interface override virtual delegate ' +
      // Control Structures
      'if while do for foreach else switch case break default return try catch ' +
      // Visibility
      'public private protected internal ' +
      // Other
      'using new this get set const stdout stdin stderr var',
      built_in: 'DBus GLib CCode Gee Object Gtk Posix',
      literal: 'false true null'
    },
    contains: [{
      className: 'class',
      beginKeywords: 'class interface namespace', end: '{', excludeEnd: true,
      illegal: '[^,:\\n\\s\\.]',
      contains: [hljs.UNDERSCORE_TITLE_MODE]
    }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, {
      className: 'string',
      begin: '"""', end: '"""',
      relevance: 5
    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, hljs.C_NUMBER_MODE, {
      className: 'meta',
      begin: '^#', end: '$',
      relevance: 2
    }]
  };
};

var vbnet = function vbnet(hljs) {
  return {
    aliases: ['vb'],
    case_insensitive: true,
    keywords: {
      keyword: 'addhandler addressof alias and andalso aggregate ansi as assembly auto binary by byref byval ' + /* a-b */
      'call case catch class compare const continue custom declare default delegate dim distinct do ' + /* c-d */
      'each equals else elseif end enum erase error event exit explicit finally for friend from function ' + /* e-f */
      'get global goto group handles if implements imports in inherits interface into is isfalse isnot istrue ' + /* g-i */
      'join key let lib like loop me mid mod module mustinherit mustoverride mybase myclass ' + /* j-m */
      'namespace narrowing new next not notinheritable notoverridable ' + /* n */
      'of off on operator option optional or order orelse overloads overridable overrides ' + /* o */
      'paramarray partial preserve private property protected public ' + /* p */
      'raiseevent readonly redim rem removehandler resume return ' + /* r */
      'select set shadows shared skip static step stop structure strict sub synclock ' + /* s */
      'take text then throw to try unicode until using when where while widening with withevents writeonly xor', /* t-x */
      built_in: 'boolean byte cbool cbyte cchar cdate cdec cdbl char cint clng cobj csbyte cshort csng cstr ctype ' + /* b-c */
      'date decimal directcast double gettype getxmlnamespace iif integer long object ' + /* d-o */
      'sbyte short single string trycast typeof uinteger ulong ushort', /* s-u */
      literal: 'true false nothing'
    },
    illegal: '//|{|}|endif|gosub|variant|wend', /* reserved deprecated keywords */
    contains: [hljs.inherit(hljs.QUOTE_STRING_MODE, { contains: [{ begin: '""' }] }), hljs.COMMENT('\'', '$', {
      returnBegin: true,
      contains: [{
        className: 'doctag',
        begin: '\'\'\'|<!--|-->',
        contains: [hljs.PHRASAL_WORDS_MODE]
      }, {
        className: 'doctag',
        begin: '</?', end: '>',
        contains: [hljs.PHRASAL_WORDS_MODE]
      }]
    }), hljs.C_NUMBER_MODE, {
      className: 'meta',
      begin: '#', end: '$',
      keywords: { 'meta-keyword': 'if else elseif end region externalsource' }
    }]
  };
};

var vbscript = function vbscript(hljs) {
  return {
    aliases: ['vbs'],
    case_insensitive: true,
    keywords: {
      keyword: 'call class const dim do loop erase execute executeglobal exit for each next function ' + 'if then else on error option explicit new private property let get public randomize ' + 'redim rem select case set stop sub while wend with end to elseif is or xor and not ' + 'class_initialize class_terminate default preserve in me byval byref step resume goto',
      built_in: 'lcase month vartype instrrev ubound setlocale getobject rgb getref string ' + 'weekdayname rnd dateadd monthname now day minute isarray cbool round formatcurrency ' + 'conversions csng timevalue second year space abs clng timeserial fixs len asc ' + 'isempty maths dateserial atn timer isobject filter weekday datevalue ccur isdate ' + 'instr datediff formatdatetime replace isnull right sgn array snumeric log cdbl hex ' + 'chr lbound msgbox ucase getlocale cos cdate cbyte rtrim join hour oct typename trim ' + 'strcomp int createobject loadpicture tan formatnumber mid scriptenginebuildversion ' + 'scriptengine split scriptengineminorversion cint sin datepart ltrim sqr ' + 'scriptenginemajorversion time derived eval date formatpercent exp inputbox left ascw ' + 'chrw regexp server response request cstr err',
      literal: 'true false null nothing empty'
    },
    illegal: '//',
    contains: [hljs.inherit(hljs.QUOTE_STRING_MODE, { contains: [{ begin: '""' }] }), hljs.COMMENT(/'/, /$/, {
      relevance: 0
    }), hljs.C_NUMBER_MODE]
  };
};

var vbscriptHtml = function vbscriptHtml(hljs) {
  return {
    subLanguage: 'xml',
    contains: [{
      begin: '<%', end: '%>',
      subLanguage: 'vbscript'
    }]
  };
};

var verilog = function verilog(hljs) {
  var SV_KEYWORDS = {
    keyword: 'accept_on alias always always_comb always_ff always_latch and assert assign ' + 'assume automatic before begin bind bins binsof bit break buf|0 bufif0 bufif1 ' + 'byte case casex casez cell chandle checker class clocking cmos config const ' + 'constraint context continue cover covergroup coverpoint cross deassign default ' + 'defparam design disable dist do edge else end endcase endchecker endclass ' + 'endclocking endconfig endfunction endgenerate endgroup endinterface endmodule ' + 'endpackage endprimitive endprogram endproperty endspecify endsequence endtable ' + 'endtask enum event eventually expect export extends extern final first_match for ' + 'force foreach forever fork forkjoin function generate|5 genvar global highz0 highz1 ' + 'if iff ifnone ignore_bins illegal_bins implements implies import incdir include ' + 'initial inout input inside instance int integer interconnect interface intersect ' + 'join join_any join_none large let liblist library local localparam logic longint ' + 'macromodule matches medium modport module nand negedge nettype new nexttime nmos ' + 'nor noshowcancelled not notif0 notif1 or output package packed parameter pmos ' + 'posedge primitive priority program property protected pull0 pull1 pulldown pullup ' + 'pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos ' + 'real realtime ref reg reject_on release repeat restrict return rnmos rpmos rtran ' + 'rtranif0 rtranif1 s_always s_eventually s_nexttime s_until s_until_with scalared ' + 'sequence shortint shortreal showcancelled signed small soft solve specify specparam ' + 'static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on ' + 'sync_reject_on table tagged task this throughout time timeprecision timeunit tran ' + 'tranif0 tranif1 tri tri0 tri1 triand trior trireg type typedef union unique unique0 ' + 'unsigned until until_with untyped use uwire var vectored virtual void wait wait_order ' + 'wand weak weak0 weak1 while wildcard wire with within wor xnor xor',
    literal: 'null',
    built_in: '$finish $stop $exit $fatal $error $warning $info $realtime $time $printtimescale ' + '$bitstoreal $bitstoshortreal $itor $signed $cast $bits $stime $timeformat ' + '$realtobits $shortrealtobits $rtoi $unsigned $asserton $assertkill $assertpasson ' + '$assertfailon $assertnonvacuouson $assertoff $assertcontrol $assertpassoff ' + '$assertfailoff $assertvacuousoff $isunbounded $sampled $fell $changed $past_gclk ' + '$fell_gclk $changed_gclk $rising_gclk $steady_gclk $coverage_control ' + '$coverage_get $coverage_save $set_coverage_db_name $rose $stable $past ' + '$rose_gclk $stable_gclk $future_gclk $falling_gclk $changing_gclk $display ' + '$coverage_get_max $coverage_merge $get_coverage $load_coverage_db $typename ' + '$unpacked_dimensions $left $low $increment $clog2 $ln $log10 $exp $sqrt $pow ' + '$floor $ceil $sin $cos $tan $countbits $onehot $isunknown $fatal $warning ' + '$dimensions $right $high $size $asin $acos $atan $atan2 $hypot $sinh $cosh ' + '$tanh $asinh $acosh $atanh $countones $onehot0 $error $info $random ' + '$dist_chi_square $dist_erlang $dist_exponential $dist_normal $dist_poisson ' + '$dist_t $dist_uniform $q_initialize $q_remove $q_exam $async$and$array ' + '$async$nand$array $async$or$array $async$nor$array $sync$and$array ' + '$sync$nand$array $sync$or$array $sync$nor$array $q_add $q_full $psprintf ' + '$async$and$plane $async$nand$plane $async$or$plane $async$nor$plane ' + '$sync$and$plane $sync$nand$plane $sync$or$plane $sync$nor$plane $system ' + '$display $displayb $displayh $displayo $strobe $strobeb $strobeh $strobeo ' + '$write $readmemb $readmemh $writememh $value$plusargs ' + '$dumpvars $dumpon $dumplimit $dumpports $dumpportson $dumpportslimit ' + '$writeb $writeh $writeo $monitor $monitorb $monitorh $monitoro $writememb ' + '$dumpfile $dumpoff $dumpall $dumpflush $dumpportsoff $dumpportsall ' + '$dumpportsflush $fclose $fdisplay $fdisplayb $fdisplayh $fdisplayo ' + '$fstrobe $fstrobeb $fstrobeh $fstrobeo $swrite $swriteb $swriteh ' + '$swriteo $fscanf $fread $fseek $fflush $feof $fopen $fwrite $fwriteb ' + '$fwriteh $fwriteo $fmonitor $fmonitorb $fmonitorh $fmonitoro $sformat ' + '$sformatf $fgetc $ungetc $fgets $sscanf $rewind $ftell $ferror'
  };
  return {
    aliases: ['v', 'sv', 'svh'],
    case_insensitive: false,
    keywords: SV_KEYWORDS, lexemes: /[\w\$]+/,
    contains: [hljs.C_BLOCK_COMMENT_MODE, hljs.C_LINE_COMMENT_MODE, hljs.QUOTE_STRING_MODE, {
      className: 'number',
      contains: [hljs.BACKSLASH_ESCAPE],
      variants: [{ begin: '\\b((\\d+\'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)' }, { begin: '\\B((\'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)' }, { begin: '\\b([0-9_])+', relevance: 0 }]
    },
    /* parameters to instances */
    {
      className: 'variable',
      variants: [{ begin: '#\\((?!parameter).+\\)' }, { begin: '\\.\\w+', relevance: 0 }]
    }, {
      className: 'meta',
      begin: '`', end: '$',
      keywords: { 'meta-keyword': 'define __FILE__ ' + '__LINE__ begin_keywords celldefine default_nettype define ' + 'else elsif end_keywords endcelldefine endif ifdef ifndef ' + 'include line nounconnected_drive pragma resetall timescale ' + 'unconnected_drive undef undefineall' },
      relevance: 0
    }]
  }; // return
};

var vhdl = function vhdl(hljs) {
  // Regular expression for VHDL numeric literals.

  // Decimal literal:
  var INTEGER_RE = '\\d(_|\\d)*';
  var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;
  var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';
  // Based literal:
  var BASED_INTEGER_RE = '\\w+';
  var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';

  var NUMBER_RE = '\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';

  return {
    case_insensitive: true,
    keywords: {
      keyword: 'abs access after alias all and architecture array assert assume assume_guarantee attribute ' + 'begin block body buffer bus case component configuration constant context cover disconnect ' + 'downto default else elsif end entity exit fairness file for force function generate ' + 'generic group guarded if impure in inertial inout is label library linkage literal ' + 'loop map mod nand new next nor not null of on open or others out package port ' + 'postponed procedure process property protected pure range record register reject ' + 'release rem report restrict restrict_guarantee return rol ror select sequence ' + 'severity shared signal sla sll sra srl strong subtype then to transport type ' + 'unaffected units until use variable vmode vprop vunit wait when while with xnor xor',
      built_in: 'boolean bit character ' + 'integer time delay_length natural positive ' + 'string bit_vector file_open_kind file_open_status ' + 'std_logic std_logic_vector unsigned signed boolean_vector integer_vector ' + 'std_ulogic std_ulogic_vector unresolved_unsigned u_unsigned unresolved_signed u_signed' + 'real_vector time_vector',
      literal: 'false true note warning error failure ' + // severity_level
      'line text side width' // textio
    },
    illegal: '{',
    contains: [hljs.C_BLOCK_COMMENT_MODE, // VHDL-2008 block commenting.
    hljs.COMMENT('--', '$'), hljs.QUOTE_STRING_MODE, {
      className: 'number',
      begin: NUMBER_RE,
      relevance: 0
    }, {
      className: 'string',
      begin: '\'(U|X|0|1|Z|W|L|H|-)\'',
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      className: 'symbol',
      begin: '\'[A-Za-z](_?[A-Za-z0-9])*',
      contains: [hljs.BACKSLASH_ESCAPE]
    }]
  };
};

var vim = function vim(hljs) {
  return {
    lexemes: /[!#@\w]+/,
    keywords: {
      keyword:
      // express version except: ! & * < = > !! # @ @@
      'N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope ' + 'cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc ' + 'ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 ' + 'profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor ' + 'so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew ' + 'tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ ' +
      // full version
      'Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload ' + 'bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap ' + 'cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor ' + 'endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap ' + 'imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview ' + 'lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap ' + 'nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext ' + 'ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding ' + 'scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace ' + 'startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious ' + 'trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew ' + 'vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank',
      built_in: //built in func
      'synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv ' + 'complete_check add getwinposx getqflist getwinposy screencol ' + 'clearmatches empty extend getcmdpos mzeval garbagecollect setreg ' + 'ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable ' + 'shiftwidth max sinh isdirectory synID system inputrestore winline ' + 'atan visualmode inputlist tabpagewinnr round getregtype mapcheck ' + 'hasmapto histdel argidx findfile sha256 exists toupper getcmdline ' + 'taglist string getmatches bufnr strftime winwidth bufexists ' + 'strtrans tabpagebuflist setcmdpos remote_read printf setloclist ' + 'getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval ' + 'resolve libcallnr foldclosedend reverse filter has_key bufname ' + 'str2float strlen setline getcharmod setbufvar index searchpos ' + 'shellescape undofile foldclosed setqflist buflisted strchars str2nr ' + 'virtcol floor remove undotree remote_expr winheight gettabwinvar ' + 'reltime cursor tabpagenr finddir localtime acos getloclist search ' + 'tanh matchend rename gettabvar strdisplaywidth type abs py3eval ' + 'setwinvar tolower wildmenumode log10 spellsuggest bufloaded ' + 'synconcealed nextnonblank server2client complete settabwinvar ' + 'executable input wincol setmatches getftype hlID inputsave ' + 'searchpair or screenrow line settabvar histadd deepcopy strpart ' + 'remote_peek and eval getftime submatch screenchar winsaveview ' + 'matchadd mkdir screenattr getfontname libcall reltimestr getfsize ' + 'winnr invert pow getbufline byte2line soundfold repeat fnameescape ' + 'tagfiles sin strwidth spellbadword trunc maparg log lispindent ' + 'hostname setpos globpath remote_foreground getchar synIDattr ' + 'fnamemodify cscope_connection stridx winbufnr indent min ' + 'complete_add nr2char searchpairpos inputdialog values matchlist ' + 'items hlexists strridx browsedir expand fmod pathshorten line2byte ' + 'argc count getwinvar glob foldtextresult getreg foreground cosh ' + 'matchdelete has char2nr simplify histget searchdecl iconv ' + 'winrestcmd pumvisible writefile foldlevel haslocaldir keys cos ' + 'matchstr foldtext histnr tan tempname getcwd byteidx getbufvar ' + 'islocked escape eventhandler remote_send serverlist winrestview ' + 'synstack pyeval prevnonblank readfile cindent filereadable changenr ' + 'exp'
    },
    illegal: /;/,
    contains: [hljs.NUMBER_MODE, hljs.APOS_STRING_MODE,

    /*
    A double quote can start either a string or a line comment. Strings are
    ended before the end of a line by another double quote and can contain
    escaped double-quotes and post-escaped line breaks.
     Also, any double quote at the beginning of a line is a comment but we
    don't handle that properly at the moment: any double quote inside will
    turn them into a string. Handling it properly will require a smarter
    parser.
    */
    {
      className: 'string',
      begin: /"(\\"|\n\\|[^"\n])*"/
    }, hljs.COMMENT('"', '$'), {
      className: 'variable',
      begin: /[bwtglsav]:[\w\d_]*/
    }, {
      className: 'function',
      beginKeywords: 'function function!', end: '$',
      relevance: 0,
      contains: [hljs.TITLE_MODE, {
        className: 'params',
        begin: '\\(', end: '\\)'
      }]
    }, {
      className: 'symbol',
      begin: /<[\w-]+>/
    }]
  };
};

var x86asm = function x86asm(hljs) {
  return {
    case_insensitive: true,
    lexemes: '[.%]?' + hljs.IDENT_RE,
    keywords: {
      keyword: 'lock rep repe repz repne repnz xaquire xrelease bnd nobnd ' + 'aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63',
      built_in:
      // Instruction pointer
      'ip eip rip ' +
      // 8-bit registers
      'al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b ' +
      // 16-bit registers
      'ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w ' +
      // 32-bit registers
      'eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d ' +
      // 64-bit registers
      'rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 ' +
      // Segment registers
      'cs ds es fs gs ss ' +
      // Floating point stack registers
      'st st0 st1 st2 st3 st4 st5 st6 st7 ' +
      // MMX Registers
      'mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 ' +
      // SSE registers
      'xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 ' + 'xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 ' +
      // AVX registers
      'ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 ' + 'ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 ' +
      // AVX-512F registers
      'zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 ' + 'zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 ' +
      // AVX-512F mask registers
      'k0 k1 k2 k3 k4 k5 k6 k7 ' +
      // Bound (MPX) register
      'bnd0 bnd1 bnd2 bnd3 ' +
      // Special register
      'cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 ' +
      // NASM altreg package
      'r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b ' + 'r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d ' + 'r0h r1h r2h r3h ' + 'r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l ' + 'db dw dd dq dt ddq do dy dz ' + 'resb resw resd resq rest resdq reso resy resz ' + 'incbin equ times ' + 'byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr',

      meta: '%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif ' + '%if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep ' + '%endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment ' + '.nolist ' + '__FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ ' + '__UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend ' + 'align alignb sectalign daz nodaz up down zero default option assume public ' + 'bits use16 use32 use64 default section segment absolute extern global common cpu float ' + '__utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ ' + '__float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ ' + '__Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e ' + 'float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__'
    },
    contains: [hljs.COMMENT(';', '$', {
      relevance: 0
    }), {
      className: 'number',
      variants: [
      // Float number and x87 BCD
      {
        begin: '\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|' + '(0[Xx])?[0-9][0-9_]*\\.?[0-9_]*(?:[pP](?:[+-]?[0-9_]+)?)?)\\b',
        relevance: 0
      },

      // Hex number in $
      { begin: '\\$[0-9][0-9A-Fa-f]*', relevance: 0 },

      // Number in H,D,T,Q,O,B,Y suffix
      { begin: '\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b' },

      // Number in X,D,T,Q,O,B,Y prefix
      { begin: '\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b' }]
    },
    // Double quote string
    hljs.QUOTE_STRING_MODE, {
      className: 'string',
      variants: [
      // Single-quoted string
      { begin: '\'', end: '[^\\\\]\'' },
      // Backquoted string
      { begin: '`', end: '[^\\\\]`' }],
      relevance: 0
    }, {
      className: 'symbol',
      variants: [
      // Global label and local label
      { begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)' },
      // Macro-local label
      { begin: '^\\s*%%[A-Za-z0-9_$#@~.?]*:' }],
      relevance: 0
    },
    // Macro parameter
    {
      className: 'subst',
      begin: '%[0-9]+',
      relevance: 0
    },
    // Macro parameter
    {
      className: 'subst',
      begin: '%!\S+',
      relevance: 0
    }, {
      className: 'meta',
      begin: /^\s*\.[\w_-]+/
    }]
  };
};

var xl = function xl(hljs) {
  var BUILTIN_MODULES = 'ObjectLoader Animate MovieCredits Slides Filters Shading Materials LensFlare Mapping VLCAudioVideo ' + 'StereoDecoder PointCloud NetworkAccess RemoteControl RegExp ChromaKey Snowfall NodeJS Speech Charts';

  var XL_KEYWORDS = {
    keyword: 'if then else do while until for loop import with is as where when by data constant ' + 'integer real text name boolean symbol infix prefix postfix block tree',
    literal: 'true false nil',
    built_in: 'in mod rem and or xor not abs sign floor ceil sqrt sin cos tan asin ' + 'acos atan exp expm1 log log2 log10 log1p pi at text_length text_range ' + 'text_find text_replace contains page slide basic_slide title_slide ' + 'title subtitle fade_in fade_out fade_at clear_color color line_color ' + 'line_width texture_wrap texture_transform texture scale_?x scale_?y ' + 'scale_?z? translate_?x translate_?y translate_?z? rotate_?x rotate_?y ' + 'rotate_?z? rectangle circle ellipse sphere path line_to move_to ' + 'quad_to curve_to theme background contents locally time mouse_?x ' + 'mouse_?y mouse_buttons ' + BUILTIN_MODULES
  };

  var DOUBLE_QUOTE_TEXT = {
    className: 'string',
    begin: '"', end: '"', illegal: '\\n'
  };
  var SINGLE_QUOTE_TEXT = {
    className: 'string',
    begin: '\'', end: '\'', illegal: '\\n'
  };
  var LONG_TEXT = {
    className: 'string',
    begin: '<<', end: '>>'
  };
  var BASED_NUMBER = {
    className: 'number',
    begin: '[0-9]+#[0-9A-Z_]+(\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?'
  };
  var IMPORT = {
    beginKeywords: 'import', end: '$',
    keywords: XL_KEYWORDS,
    contains: [DOUBLE_QUOTE_TEXT]
  };
  var FUNCTION_DEFINITION = {
    className: 'function',
    begin: /[a-z][^\n]*->/, returnBegin: true, end: /->/,
    contains: [hljs.inherit(hljs.TITLE_MODE, { starts: {
        endsWithParent: true,
        keywords: XL_KEYWORDS
      } })]
  };
  return {
    aliases: ['tao'],
    lexemes: /[a-zA-Z][a-zA-Z0-9_?]*/,
    keywords: XL_KEYWORDS,
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, DOUBLE_QUOTE_TEXT, SINGLE_QUOTE_TEXT, LONG_TEXT, FUNCTION_DEFINITION, IMPORT, BASED_NUMBER, hljs.NUMBER_MODE]
  };
};

var xquery = function xquery(hljs) {
  var KEYWORDS = 'for let if while then else return where group by xquery encoding version' + 'module namespace boundary-space preserve strip default collation base-uri ordering' + 'copy-namespaces order declare import schema namespace function option in allowing empty' + 'at tumbling window sliding window start when only end when previous next stable ascending' + 'descending empty greatest least some every satisfies switch case typeswitch try catch and' + 'or to union intersect instance of treat as castable cast map array delete insert into' + 'replace value rename copy modify update';
  var LITERAL = 'false true xs:string xs:integer element item xs:date xs:datetime xs:float xs:double xs:decimal QName xs:anyURI xs:long xs:int xs:short xs:byte attribute';
  var VAR = {
    begin: /\$[a-zA-Z0-9\-]+/
  };

  var NUMBER = {
    className: 'number',
    begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
    relevance: 0
  };

  var STRING = {
    className: 'string',
    variants: [{ begin: /"/, end: /"/, contains: [{ begin: /""/, relevance: 0 }] }, { begin: /'/, end: /'/, contains: [{ begin: /''/, relevance: 0 }] }]
  };

  var ANNOTATION = {
    className: 'meta',
    begin: '%\\w+'
  };

  var COMMENT = {
    className: 'comment',
    begin: '\\(:', end: ':\\)',
    relevance: 10,
    contains: [{
      className: 'doctag', begin: '@\\w+'
    }]
  };

  var METHOD = {
    begin: '{', end: '}'
  };

  var CONTAINS = [VAR, STRING, NUMBER, COMMENT, ANNOTATION, METHOD];
  METHOD.contains = CONTAINS;

  return {
    aliases: ['xpath', 'xq'],
    case_insensitive: false,
    lexemes: /[a-zA-Z\$][a-zA-Z0-9_:\-]*/,
    illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,
    keywords: {
      keyword: KEYWORDS,
      literal: LITERAL
    },
    contains: CONTAINS
  };
};

var zephir = function zephir(hljs) {
  var STRING = {
    className: 'string',
    contains: [hljs.BACKSLASH_ESCAPE],
    variants: [{
      begin: 'b"', end: '"'
    }, {
      begin: 'b\'', end: '\''
    }, hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }), hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null })]
  };
  var NUMBER = { variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE] };
  return {
    aliases: ['zep'],
    case_insensitive: true,
    keywords: 'and include_once list abstract global private echo interface as static endswitch ' + 'array null if endwhile or const for endforeach self var let while isset public ' + 'protected exit foreach throw elseif include __FILE__ empty require_once do xor ' + 'return parent clone use __CLASS__ __LINE__ else break print eval new ' + 'catch __METHOD__ case exception default die require __FUNCTION__ ' + 'enddeclare final try switch continue endfor endif declare unset true false ' + 'trait goto instanceof insteadof __DIR__ __NAMESPACE__ ' + 'yield finally int uint long ulong char uchar double float bool boolean string' + 'likely unlikely',
    contains: [hljs.C_LINE_COMMENT_MODE, hljs.HASH_COMMENT_MODE, hljs.COMMENT('/\\*', '\\*/', {
      contains: [{
        className: 'doctag',
        begin: '@[A-Za-z]+'
      }]
    }), hljs.COMMENT('__halt_compiler.+?;', false, {
      endsWithParent: true,
      keywords: '__halt_compiler',
      lexemes: hljs.UNDERSCORE_IDENT_RE
    }), {
      className: 'string',
      begin: '<<<[\'"]?\\w+[\'"]?$', end: '^\\w+;',
      contains: [hljs.BACKSLASH_ESCAPE]
    }, {
      // swallow composed identifiers to avoid parsing them as keywords
      begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
    }, {
      className: 'function',
      beginKeywords: 'function', end: /[;{]/, excludeEnd: true,
      illegal: '\\$|\\[|%',
      contains: [hljs.UNDERSCORE_TITLE_MODE, {
        className: 'params',
        begin: '\\(', end: '\\)',
        contains: ['self', hljs.C_BLOCK_COMMENT_MODE, STRING, NUMBER]
      }]
    }, {
      className: 'class',
      beginKeywords: 'class interface', end: '{', excludeEnd: true,
      illegal: /[:\(\$"]/,
      contains: [{ beginKeywords: 'extends implements' }, hljs.UNDERSCORE_TITLE_MODE]
    }, {
      beginKeywords: 'namespace', end: ';',
      illegal: /[\.']/,
      contains: [hljs.UNDERSCORE_TITLE_MODE]
    }, {
      beginKeywords: 'use', end: ';',
      contains: [hljs.UNDERSCORE_TITLE_MODE]
    }, {
      begin: '=>' // No markup, just a relevance booster
    }, STRING, NUMBER]
  };
};

var lowlight = createCommonjsModule(function (module) {
  var low = module.exports = core$2;

  low.registerLanguage('1c', _1c);
  low.registerLanguage('abnf', abnf);
  low.registerLanguage('accesslog', accesslog);
  low.registerLanguage('actionscript', actionscript);
  low.registerLanguage('ada', ada);
  low.registerLanguage('apache', apache);
  low.registerLanguage('applescript', applescript);
  low.registerLanguage('cpp', cpp);
  low.registerLanguage('arduino', arduino);
  low.registerLanguage('armasm', armasm);
  low.registerLanguage('xml', xml);
  low.registerLanguage('asciidoc', asciidoc);
  low.registerLanguage('aspectj', aspectj);
  low.registerLanguage('autohotkey', autohotkey);
  low.registerLanguage('autoit', autoit);
  low.registerLanguage('avrasm', avrasm);
  low.registerLanguage('awk', awk);
  low.registerLanguage('axapta', axapta);
  low.registerLanguage('bash', bash);
  low.registerLanguage('basic', basic);
  low.registerLanguage('bnf', bnf);
  low.registerLanguage('brainfuck', brainfuck);
  low.registerLanguage('cal', cal);
  low.registerLanguage('capnproto', capnproto);
  low.registerLanguage('ceylon', ceylon);
  low.registerLanguage('clean', clean);
  low.registerLanguage('clojure', clojure);
  low.registerLanguage('clojure-repl', clojureRepl);
  low.registerLanguage('cmake', cmake);
  low.registerLanguage('coffeescript', coffeescript);
  low.registerLanguage('coq', coq);
  low.registerLanguage('cos', cos);
  low.registerLanguage('crmsh', crmsh);
  low.registerLanguage('crystal', crystal);
  low.registerLanguage('cs', cs);
  low.registerLanguage('csp', csp);
  low.registerLanguage('css', css);
  low.registerLanguage('d', d);
  low.registerLanguage('markdown', markdown);
  low.registerLanguage('dart', dart);
  low.registerLanguage('delphi', delphi);
  low.registerLanguage('diff', diff);
  low.registerLanguage('django', django);
  low.registerLanguage('dns', dns);
  low.registerLanguage('dockerfile', dockerfile);
  low.registerLanguage('dos', dos);
  low.registerLanguage('dsconfig', dsconfig);
  low.registerLanguage('dts', dts);
  low.registerLanguage('dust', dust);
  low.registerLanguage('ebnf', ebnf);
  low.registerLanguage('elixir', elixir);
  low.registerLanguage('elm', elm);
  low.registerLanguage('ruby', ruby);
  low.registerLanguage('erb', erb);
  low.registerLanguage('erlang-repl', erlangRepl);
  low.registerLanguage('erlang', erlang);
  low.registerLanguage('excel', excel);
  low.registerLanguage('fix', fix);
  low.registerLanguage('flix', flix);
  low.registerLanguage('fortran', fortran);
  low.registerLanguage('fsharp', fsharp);
  low.registerLanguage('gams', gams);
  low.registerLanguage('gauss', gauss);
  low.registerLanguage('gcode', gcode);
  low.registerLanguage('gherkin', gherkin);
  low.registerLanguage('glsl', glsl);
  low.registerLanguage('go', go);
  low.registerLanguage('golo', golo);
  low.registerLanguage('gradle', gradle);
  low.registerLanguage('groovy', groovy);
  low.registerLanguage('haml', haml);
  low.registerLanguage('handlebars', handlebars);
  low.registerLanguage('haskell', haskell);
  low.registerLanguage('haxe', haxe);
  low.registerLanguage('hsp', hsp);
  low.registerLanguage('htmlbars', htmlbars);
  low.registerLanguage('http', http);
  low.registerLanguage('hy', hy);
  low.registerLanguage('inform7', inform7);
  low.registerLanguage('ini', ini);
  low.registerLanguage('irpf90', irpf90);
  low.registerLanguage('java', java);
  low.registerLanguage('javascript', javascript);
  low.registerLanguage('jboss-cli', jbossCli);
  low.registerLanguage('json', json);
  low.registerLanguage('julia', julia);
  low.registerLanguage('julia-repl', juliaRepl);
  low.registerLanguage('kotlin', kotlin);
  low.registerLanguage('lasso', lasso);
  low.registerLanguage('ldif', ldif);
  low.registerLanguage('leaf', leaf);
  low.registerLanguage('less', less);
  low.registerLanguage('lisp', lisp);
  low.registerLanguage('livecodeserver', livecodeserver);
  low.registerLanguage('livescript', livescript);
  low.registerLanguage('llvm', llvm);
  low.registerLanguage('lsl', lsl);
  low.registerLanguage('lua', lua);
  low.registerLanguage('makefile', makefile);
  low.registerLanguage('mathematica', mathematica);
  low.registerLanguage('matlab', matlab);
  low.registerLanguage('maxima', maxima);
  low.registerLanguage('mel', mel);
  low.registerLanguage('mercury', mercury);
  low.registerLanguage('mipsasm', mipsasm);
  low.registerLanguage('mizar', mizar);
  low.registerLanguage('perl', perl);
  low.registerLanguage('mojolicious', mojolicious);
  low.registerLanguage('monkey', monkey);
  low.registerLanguage('moonscript', moonscript);
  low.registerLanguage('n1ql', n1ql);
  low.registerLanguage('nginx', nginx);
  low.registerLanguage('nimrod', nimrod);
  low.registerLanguage('nix', nix);
  low.registerLanguage('nsis', nsis);
  low.registerLanguage('objectivec', objectivec);
  low.registerLanguage('ocaml', ocaml);
  low.registerLanguage('openscad', openscad);
  low.registerLanguage('oxygene', oxygene);
  low.registerLanguage('parser3', parser3);
  low.registerLanguage('pf', pf);
  low.registerLanguage('php', php);
  low.registerLanguage('pony', pony);
  low.registerLanguage('powershell', powershell);
  low.registerLanguage('processing', processing$1);
  low.registerLanguage('profile', profile);
  low.registerLanguage('prolog', prolog);
  low.registerLanguage('protobuf', protobuf);
  low.registerLanguage('puppet', puppet);
  low.registerLanguage('purebasic', purebasic);
  low.registerLanguage('python', python);
  low.registerLanguage('q', q);
  low.registerLanguage('qml', qml);
  low.registerLanguage('r', r);
  low.registerLanguage('rib', rib);
  low.registerLanguage('roboconf', roboconf);
  low.registerLanguage('routeros', routeros);
  low.registerLanguage('rsl', rsl);
  low.registerLanguage('ruleslanguage', ruleslanguage);
  low.registerLanguage('rust', rust);
  low.registerLanguage('scala', scala);
  low.registerLanguage('scheme', scheme);
  low.registerLanguage('scilab', scilab);
  low.registerLanguage('scss', scss);
  low.registerLanguage('shell', shell);
  low.registerLanguage('smali', smali);
  low.registerLanguage('smalltalk', smalltalk);
  low.registerLanguage('sml', sml);
  low.registerLanguage('sqf', sqf);
  low.registerLanguage('sql', sql);
  low.registerLanguage('stan', stan);
  low.registerLanguage('stata', stata);
  low.registerLanguage('step21', step21);
  low.registerLanguage('stylus', stylus);
  low.registerLanguage('subunit', subunit);
  low.registerLanguage('swift', swift);
  low.registerLanguage('taggerscript', taggerscript);
  low.registerLanguage('yaml', yaml);
  low.registerLanguage('tap', tap);
  low.registerLanguage('tcl', tcl);
  low.registerLanguage('tex', tex);
  low.registerLanguage('thrift', thrift);
  low.registerLanguage('tp', tp);
  low.registerLanguage('twig', twig);
  low.registerLanguage('typescript', typescript);
  low.registerLanguage('vala', vala);
  low.registerLanguage('vbnet', vbnet);
  low.registerLanguage('vbscript', vbscript);
  low.registerLanguage('vbscript-html', vbscriptHtml);
  low.registerLanguage('verilog', verilog);
  low.registerLanguage('vhdl', vhdl);
  low.registerLanguage('vim', vim);
  low.registerLanguage('x86asm', x86asm);
  low.registerLanguage('xl', xl);
  low.registerLanguage('xquery', xquery);
  low.registerLanguage('zephir', zephir);
});

/**
 * @fileoverview
 *   Get the plain-text value of a HAST node.
 * @longdescription
 *   ## Usage
 *
 *   ```javascript
 *   var h = require('hastscript');
 *   var toString = require('hast-util-to-string');
 *
 *   toString(h('p', 'Alpha'));
 *   //=> 'Alpha'
 *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']));
 *   //=> 'Bold and italic.'
 *   ```
 *
 *   ## API
 *
 *   ### `toString(node)`
 *
 *   Transform a node to string.
 */

var hastUtilToString = toString$6;

function toString$6(node) {
  /* “The concatenation of data of all the Text node descendants
   * of the context object, in tree order.” */
  if ('children' in node) {
    return all$2(node);
  }

  /* “Context object’s data.” */
  return 'value' in node ? node.value : '';
}

function one$2(node) {
  if (node.type === 'text') {
    return node.value;
  }

  return node.children ? all$2(node) : '';
}

function all$2(node) {
  var children = node.children;
  var length = children.length;
  var index = -1;
  var result = [];

  while (++index < length) {
    result[index] = one$2(children[index]);
  }

  return result.join('');
}

var rehypeHighlight = attacher;

function attacher(options) {
  var settings = options || {};
  var detect = settings.subset !== false;
  var prefix = settings.prefix;
  var ignoreMissing = settings.ignoreMissing;
  var plainText = settings.plainText || [];
  var name = 'hljs';
  var pos;

  if (prefix) {
    pos = prefix.indexOf('-');
    name = pos === -1 ? prefix : prefix.slice(0, pos);
  }

  return transformer;

  function transformer(tree) {
    unistUtilVisit(tree, 'element', visitor);
  }

  function visitor(node, index, parent) {
    var props = node.properties;
    var result;
    var lang;

    if (!parent || parent.tagName !== 'pre' || node.tagName !== 'code') {
      return;
    }

    lang = language(node);

    if (lang === false || !lang && !detect || plainText.indexOf(lang) !== -1) {
      return;
    }

    if (!props.className) {
      props.className = [];
    }

    if (props.className.indexOf(name) === -1) {
      props.className.unshift(name);
    }

    try {
      if (lang) {
        result = lowlight.highlight(lang, hastUtilToString(node), options);
      } else {
        result = lowlight.highlightAuto(hastUtilToString(node), options);
      }
    } catch (err) {
      if (err && ignoreMissing && /Unknown language/.test(err.message)) {
        return;
      }

      throw err;
    }

    if (!lang && result.language) {
      props.className.push('language-' + result.language);
    }

    node.children = result.value;
  }
}

/* Get the programming language of `node`. */
function language(node) {
  var className = node.properties.className || [];
  var length = className.length;
  var index = -1;
  var value;

  while (++index < length) {
    value = className[index];

    if (value === 'no-highlight' || value === 'nohighlight') {
      return false;
    }

    if (value.slice(0, 5) === 'lang-') {
      return value.slice(5);
    }

    if (value.slice(0, 9) === 'language-') {
      return value.slice(9);
    }
  }

  return null;
}

var inline$2 = ['a', 'b', 'big', 'i', 'small', 'tt', 'abbr', 'acronym', 'cite', 'code', 'dfn', 'em', 'kbd', 'strong', 'samp', 'time', 'var', 'bdo', 'br', 'img', 'map', 'object', 'p', 'q', 'script', 'span', 'sub', 'sup', 'button', 'input', 'label', 'select', 'textarea'];

function plugin$9() {
  return transformer$2;
}

function transformer$2(tree) {
  unistUtilVisit(tree, 'raw', visitor);
}

function visitor(node, index, parent) {
  var replacement = {
    type: 'text',
    value: node.value
  };

  if (!inline$2.includes(parent.tagName)) {
    replacement = {
      type: 'element',
      tagName: 'p',
      properties: {},
      children: [{
        type: 'text',
        value: node.value
      }]
    };
  }

  parent.children[index] = replacement;
}

var src$36 = plugin$9;

var own$8 = {}.hasOwnProperty;

var hastUtilHasProperty = hasProperty;

/* Check if `node` has a set `name` property. */
function hasProperty(node, name) {
  var props;
  var value;

  if (!node || !name || (typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object' || node.type !== 'element') {
    return false;
  }

  props = node.properties;
  value = props && own$8.call(props, name) && props[name];

  return value !== null && value !== undefined && value !== false;
}

/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module rehype:lint:util:is-element
 */

/* eslint-env commonjs */

/**
 * Check if a node is a (certain) element.
 *
 * @param {*} node - Thing to check.
 * @param {string|Array.<string>?} [tagNames] - Name of element.
 * @return {boolean} - Whether a node is a (certain) element.
 * @throws {Error} - When `tagNames` is given but invalid.
 */

function isElement(node, tagNames) {
    var name;

    if (!(tagNames === null || tagNames === undefined || typeof tagNames === 'string' || (typeof tagNames === 'undefined' ? 'undefined' : _typeof(tagNames)) === 'object' && tagNames.length)) {
        throw new Error('Expected `string` or `Array.<string>` for ' + '`tagNames`, not `' + tagNames + '`');
    }

    if (!node || (typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object' || node.type !== 'element' || typeof node.tagName !== 'string') {
        return false;
    }

    if (tagNames === null || tagNames === undefined) {
        return true;
    }

    name = node.tagName;

    if (typeof tagNames === 'string') {
        return name === tagNames;
    }

    return tagNames.indexOf(name) !== -1;
}

/*
 * Expose.
 */

var hastUtilIsElement = isElement;

var rehypeAutolinkHeadings = autolink;

var headings = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
var methods = { prepend: 'unshift', append: 'push' };
var contentDefaults = {
  type: 'element',
  tagName: 'span',
  properties: { className: ['icon', 'icon-link'] },
  children: []
};

function autolink(options) {
  var settings = options || {};
  var props = settings.properties;
  var behavior = settings.behaviour || settings.behavior || 'prepend';
  var content = settings.content || contentDefaults;
  var fn = behavior === 'wrap' ? wrap : inject;

  if (behavior !== 'wrap' && !props) {
    props = { ariaHidden: true };
  }

  if (content && (typeof content === 'undefined' ? 'undefined' : _typeof(content)) === 'object' && !('length' in content)) {
    content = [content];
  }

  return transformer;

  function transformer(tree) {
    unistUtilVisit(tree, visitor);
  }

  function visitor(node) {
    if (hastUtilIsElement(node, headings) && hastUtilHasProperty(node, 'id')) {
      fn(node);
    }
  }

  function wrap(node) {
    var child = icon(node);
    child.children = node.children;
    node.children = [child];
  }

  function inject(node) {
    var child = icon(node);
    child.children = extend(true, content);
    node.children[methods[behavior]](child);
  }

  function icon(node) {
    return {
      type: 'element',
      tagName: 'a',
      properties: extend({}, props, { href: '#' + node.properties.id })
    };
  }
}

var emojiRegex = function emojiRegex() {
	return (/[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2694\u2696\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD79\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED0\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3]|\uD83E[\uDD10-\uDD18\uDD80-\uDD84\uDDC0]|\uD83C\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uD83C\uDDFE\uD83C[\uDDEA\uDDF9]|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDFC\uD83C[\uDDEB\uDDF8]|\uD83C\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uD83C\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF8\uDDFE\uDDFF]|\uD83C\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uD83C\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uD83C\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uD83C\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uD83C\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uD83C\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uD83C\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uD83C\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uD83C\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uD83C\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uD83C\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uD83C\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uD83C\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uD83C\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uD83C\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uD83C\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|[#\*0-9]\u20E3/g
	);
};

var githubSlugger = BananaSlug;

function BananaSlug() {
  var self = this;
  if (!(self instanceof BananaSlug)) return new BananaSlug();

  self.reset();
}

/**
 * Generate a unique slug.
 * @param  {string} value String of text to slugify
 * @param  {boolean} [false] Keep the current case, otherwise make all lowercase
 * @return {string}       A unique slug string
 */
BananaSlug.prototype.slug = function (value, maintainCase) {
  maintainCase = maintainCase === true;
  var self = this;
  var slug = slugger(value, maintainCase);
  var occurrences = self.occurrences[slug];

  if (self.occurrences.hasOwnProperty(slug)) {
    occurrences++;
  } else {
    occurrences = 0;
  }

  self.occurrences[slug] = occurrences;

  if (occurrences) {
    slug = slug + '-' + occurrences;
  }

  return slug;
};

/**
 * Reset - Forget all previous slugs
 * @return void
 */
BananaSlug.prototype.reset = function () {
  this.occurrences = {};
};

var whitespace$2 = /\s/g;

function lower$1(string) {
  return string.toLowerCase();
}

function slugger(string, maintainCase) {
  var re = /[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g;
  var replacement = '-';

  if (typeof string !== 'string') return '';
  if (!maintainCase) string = string.replace(/[A-Z]+/g, lower$1);
  return string.trim().replace(re, '').replace(emojiRegex(), '').replace(whitespace$2, replacement);
}

var slugs = githubSlugger();

var rehypeSlug = slug;

var headings$1 = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];

function slug() {
  return transformer$3;
}

function transformer$3(tree) {
  slugs.reset();

  unistUtilVisit(tree, 'element', function (node) {
    if (hastUtilIsElement(node, headings$1) && !hastUtilHasProperty(node, 'id')) {
      node.properties.id = slugs.slug(hastUtilToString(node));
    }
  });
}

var index$4 = ["area", "base", "basefont", "bgsound", "br", "col", "command", "embed", "frame", "hr", "image", "img", "input", "isindex", "keygen", "link", "menuitem", "meta", "nextid", "param", "source", "track", "wbr"];

var htmlVoidElements = Object.freeze({
	default: index$4
});

/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module hast:util:whitespace
 * @fileoverview Check whether a node is inter-element
 *   whitespace.
 */

/* eslint-env commonjs */

/*
 * HTML white-space expression.
 *
 * See <https://html.spec.whatwg.org/#space-character>.
 */

var EXPRESSION = /[\ \t\n\f\r]/g;

/**
 * Check if `node` is a inter-element white-space.
 *
 * @param {Node|string} node - Value to check, or Node
 *   whose value to check.
 * @return {boolean} - Whether `node` is inter-element
 *   white-space.
 */
function interElementWhiteSpace(node) {
  var value;

  if (node && (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && node.type === 'text') {
    value = node.value || '';
  } else if (typeof node === 'string') {
    value = node;
  } else {
    return false;
  }

  return value.replace(EXPRESSION, '') === '';
}

/*
 * Expose.
 */

var hastUtilWhitespace = interElementWhiteSpace;

var before = siblings(-1);
var after = siblings(1);

/* Factory to check siblings in a direction. */
function siblings(increment) {
  return sibling;

  /* Find applicable siblings in a direction.   */
  function sibling(parent, index, includeWhiteSpace) {
    var siblings = parent && parent.children;
    var next;

    index += increment;
    next = siblings && siblings[index];

    if (!includeWhiteSpace) {
      while (next && hastUtilWhitespace(next)) {
        index += increment;
        next = siblings[index];
      }
    }

    return next;
  }
}

var siblings_1 = {
  before: before,
  after: after
};

var after$1 = siblings_1.after;

var first_1 = first;

/* Get the first child in `parent`. */
function first(parent, includeWhiteSpace) {
  return after$1(parent, -1, includeWhiteSpace);
}

var place_1 = place;

/* Get the position of `node` in `parent`. */
function place(parent, child) {
  return parent && parent.children && parent.children.indexOf(child);
}

var whiteSpaceLeft_1 = whiteSpaceLeft;

/* Check if `node` starts with white-space. */
function whiteSpaceLeft(node) {
  return unistUtilIs('text', node) && hastUtilWhitespace(node.value.charAt(0));
}

var omission_1 = omission;

var own$9 = {}.hasOwnProperty;

/* Factory to check if a given node can have a tag omitted. */
function omission(handlers) {
  return omit;

  /* Check if a given node can have a tag omitted.   */
  function omit(node, index, parent) {
    var name = node.tagName;
    var fn = own$9.call(handlers, name) ? handlers[name] : false;

    return fn ? fn(node, index, parent) : false;
  }
}

var after$2 = siblings_1.after;

var closing = omission_1({
  html: html$6,
  head: headOrColgroupOrCaption,
  body: body,
  p: p,
  li: li,
  dt: dt,
  dd: dd$1,
  rt: rubyElement,
  rp: rubyElement,
  optgroup: optgroup,
  option: option,
  menuitem: menuitem,
  colgroup: headOrColgroupOrCaption,
  caption: headOrColgroupOrCaption,
  thead: thead,
  tbody: tbody,
  tfoot: tfoot,
  tr: tr,
  td: cells,
  th: cells
});

/* Macro for `</head>`, `</colgroup>`, and `</caption>`. */
function headOrColgroupOrCaption(node, index, parent) {
  var next = after$2(parent, index, true);
  return !next || !unistUtilIs('comment', next) && !whiteSpaceLeft_1(next);
}

/* Whether to omit `</html>`. */
function html$6(node, index, parent) {
  var next = after$2(parent, index);
  return !next || !unistUtilIs('comment', next);
}

/* Whether to omit `</body>`. */
function body(node, index, parent) {
  var next = after$2(parent, index);
  return !next || !unistUtilIs('comment', next);
}

/* Whether to omit `</p>`. */
function p(node, index, parent) {
  var next = after$2(parent, index);

  if (next) {
    return hastUtilIsElement(next, ['address', 'article', 'aside', 'blockquote', 'details', 'div', 'dl', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'menu', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul']);
  }

  return !parent || !hastUtilIsElement(parent, ['a', 'audio', 'del', 'ins', 'map', 'noscript', 'video']);
}

/* Whether to omit `</li>`. */
function li(node, index, parent) {
  var next = after$2(parent, index);
  return !next || hastUtilIsElement(next, 'li');
}

/* Whether to omit `</dt>`. */
function dt(node, index, parent) {
  var next = after$2(parent, index);
  return next && hastUtilIsElement(next, ['dt', 'dd']);
}

/* Whether to omit `</dd>`. */
function dd$1(node, index, parent) {
  var next = after$2(parent, index);
  return !next || hastUtilIsElement(next, ['dt', 'dd']);
}

/* Whether to omit `</rt>` or `</rp>`. */
function rubyElement(node, index, parent) {
  var next = after$2(parent, index);
  return !next || hastUtilIsElement(next, ['rp', 'rt']);
}

/* Whether to omit `</optgroup>`. */
function optgroup(node, index, parent) {
  var next = after$2(parent, index);
  return !next || hastUtilIsElement(next, 'optgroup');
}

/* Whether to omit `</option>`. */
function option(node, index, parent) {
  var next = after$2(parent, index);
  return !next || hastUtilIsElement(next, ['option', 'optgroup']);
}

/* Whether to omit `</menuitem>`. */
function menuitem(node, index, parent) {
  var next = after$2(parent, index);
  return !next || hastUtilIsElement(next, ['menuitem', 'hr', 'menu']);
}

/* Whether to omit `</thead>`. */
function thead(node, index, parent) {
  var next = after$2(parent, index);
  return next && hastUtilIsElement(next, ['tbody', 'tfoot']);
}

/* Whether to omit `</tbody>`. */
function tbody(node, index, parent) {
  var next = after$2(parent, index);
  return !next || hastUtilIsElement(next, ['tbody', 'tfoot']);
}

/* Whether to omit `</tfoot>`. */
function tfoot(node, index, parent) {
  return !after$2(parent, index);
}

/* Whether to omit `</tr>`. */
function tr(node, index, parent) {
  var next = after$2(parent, index);
  return !next || hastUtilIsElement(next, 'tr');
}

/* Whether to omit `</td>` or `</th>`. */
function cells(node, index, parent) {
  var next = after$2(parent, index);
  return !next || hastUtilIsElement(next, ['td', 'th']);
}

var before$1 = siblings_1.before;

var own$10 = {}.hasOwnProperty;

var opening = omission_1({
  html: html$7,
  head: head,
  body: body$1,
  colgroup: colgroup,
  tbody: tbody$1
});

/* Whether to omit `<html>`. */
function html$7(node) {
  var head = first_1(node);
  return !head || !unistUtilIs('comment', head);
}

/* Whether to omit `<head>`. */
function head(node) {
  var children = node.children;
  var length = children.length;
  var map = {};
  var index = -1;
  var child;
  var name;

  while (++index < length) {
    child = children[index];
    name = child.tagName;

    if (child.type === 'element' && (name === 'title' || name === 'base')) {
      if (own$10.call(map, name)) {
        return false;
      }

      map[name] = true;
    }
  }

  return Boolean(length);
}

/* Whether to omit `<body>`. */
function body$1(node) {
  var head = first_1(node, true);

  return !head || !unistUtilIs('comment', head) && !whiteSpaceLeft_1(head) && !hastUtilIsElement(head, ['meta', 'link', 'script', 'style', 'template']);
}

/* Whether to omit `<colgroup>`.
 * The spec describes some logic for the opening tag,
 * but it’s easier to implement in the closing tag, to
 * the same effect, so we handle it there instead. */
function colgroup(node, index, parent) {
  var prev = before$1(parent, index);
  var head = first_1(node, true);

  /* Previous colgroup was already omitted. */
  if (hastUtilIsElement(prev, 'colgroup') && closing(prev, place_1(parent, prev), parent)) {
    return false;
  }

  return head && hastUtilIsElement(head, 'col');
}

/* Whether to omit `<tbody>`. */
function tbody$1(node, index, parent) {
  var prev = before$1(parent, index);
  var head = first_1(node);

  /* Previous table section was already omitted. */
  if (hastUtilIsElement(prev, ['thead', 'tbody']) && closing(prev, place_1(parent, prev), parent)) {
    return false;
  }

  return head && hastUtilIsElement(head, 'tr');
}

var opening$2 = opening;
var closing$3 = closing;

var omission$2 = {
	opening: opening$2,
	closing: closing$3
};

var all_1$2 = all$3;

/* Stringify all children of `parent`. */
function all$3(ctx, parent) {
  var children = parent && parent.children;
  var length = children && children.length;
  var index = -1;
  var results = [];

  while (++index < length) {
    results[index] = one_1$2(ctx, children[index], index, parent);
  }

  return results.join('');
}

var nbsp$2 = " ";
var iexcl$2 = "¡";
var cent$2 = "¢";
var pound$2 = "£";
var curren$2 = "¤";
var yen$2 = "¥";
var brvbar$2 = "¦";
var sect$2 = "§";
var uml$2 = "¨";
var copy$2 = "©";
var ordf$2 = "ª";
var laquo$2 = "«";
var not$2 = "¬";
var shy$2 = "­";
var reg$2 = "®";
var macr$2 = "¯";
var deg$2 = "°";
var plusmn$2 = "±";
var sup2$2 = "²";
var sup3$2 = "³";
var acute$2 = "´";
var micro$2 = "µ";
var para$2 = "¶";
var middot$2 = "·";
var cedil$2 = "¸";
var sup1$2 = "¹";
var ordm$2 = "º";
var raquo$2 = "»";
var frac14$2 = "¼";
var frac12$2 = "½";
var frac34$2 = "¾";
var iquest$2 = "¿";
var Agrave$2 = "À";
var Aacute$2 = "Á";
var Acirc$2 = "Â";
var Atilde$2 = "Ã";
var Auml$2 = "Ä";
var Aring$2 = "Å";
var AElig$2 = "Æ";
var Ccedil$2 = "Ç";
var Egrave$2 = "È";
var Eacute$2 = "É";
var Ecirc$2 = "Ê";
var Euml$2 = "Ë";
var Igrave$2 = "Ì";
var Iacute$2 = "Í";
var Icirc$2 = "Î";
var Iuml$2 = "Ï";
var ETH$2 = "Ð";
var Ntilde$2 = "Ñ";
var Ograve$2 = "Ò";
var Oacute$2 = "Ó";
var Ocirc$2 = "Ô";
var Otilde$2 = "Õ";
var Ouml$2 = "Ö";
var times$2 = "×";
var Oslash$2 = "Ø";
var Ugrave$2 = "Ù";
var Uacute$2 = "Ú";
var Ucirc$2 = "Û";
var Uuml$2 = "Ü";
var Yacute$2 = "Ý";
var THORN$2 = "Þ";
var szlig$2 = "ß";
var agrave$2 = "à";
var aacute$2 = "á";
var acirc$2 = "â";
var atilde$2 = "ã";
var auml$2 = "ä";
var aring$2 = "å";
var aelig$2 = "æ";
var ccedil$2 = "ç";
var egrave$2 = "è";
var eacute$2 = "é";
var ecirc$2 = "ê";
var euml$2 = "ë";
var igrave$2 = "ì";
var iacute$2 = "í";
var icirc$2 = "î";
var iuml$2 = "ï";
var eth$2 = "ð";
var ntilde$2 = "ñ";
var ograve$2 = "ò";
var oacute$2 = "ó";
var ocirc$2 = "ô";
var otilde$2 = "õ";
var ouml$2 = "ö";
var divide$3 = "÷";
var oslash$2 = "ø";
var ugrave$2 = "ù";
var uacute$2 = "ú";
var ucirc$2 = "û";
var uuml$2 = "ü";
var yacute$2 = "ý";
var thorn$2 = "þ";
var yuml$2 = "ÿ";
var fnof$1 = "ƒ";
var Alpha$1 = "Α";
var Beta$1 = "Β";
var Gamma$1 = "Γ";
var Delta$1 = "Δ";
var Epsilon$1 = "Ε";
var Zeta$1 = "Ζ";
var Eta$1 = "Η";
var Theta$1 = "Θ";
var Iota$1 = "Ι";
var Kappa$1 = "Κ";
var Lambda$1 = "Λ";
var Mu$1 = "Μ";
var Nu$1 = "Ν";
var Xi$1 = "Ξ";
var Omicron$1 = "Ο";
var Pi$1 = "Π";
var Rho$1 = "Ρ";
var Sigma$1 = "Σ";
var Tau$1 = "Τ";
var Upsilon$1 = "Υ";
var Phi$1 = "Φ";
var Chi$1 = "Χ";
var Psi$1 = "Ψ";
var Omega$1 = "Ω";
var alpha$1 = "α";
var beta$1 = "β";
var gamma$1 = "γ";
var delta$1 = "δ";
var epsilon$1 = "ε";
var zeta$1 = "ζ";
var eta$1 = "η";
var theta$1 = "θ";
var iota$1 = "ι";
var kappa$1 = "κ";
var lambda$1 = "λ";
var mu$1 = "μ";
var nu$1 = "ν";
var xi$1 = "ξ";
var omicron$1 = "ο";
var pi$1 = "π";
var rho$1 = "ρ";
var sigmaf$1 = "ς";
var sigma$1 = "σ";
var tau$1 = "τ";
var upsilon$1 = "υ";
var phi$1 = "φ";
var chi$1 = "χ";
var psi$1 = "ψ";
var omega$1 = "ω";
var thetasym$1 = "ϑ";
var upsih$1 = "ϒ";
var piv$1 = "ϖ";
var bull$1 = "•";
var hellip$1 = "…";
var prime$1 = "′";
var Prime$1 = "″";
var oline$1 = "‾";
var frasl$1 = "⁄";
var weierp$1 = "℘";
var image$2 = "ℑ";
var real$1 = "ℜ";
var trade$1 = "™";
var alefsym$1 = "ℵ";
var larr$1 = "←";
var uarr$1 = "↑";
var rarr$1 = "→";
var darr$1 = "↓";
var harr$1 = "↔";
var crarr$1 = "↵";
var lArr$1 = "⇐";
var uArr$1 = "⇑";
var rArr$1 = "⇒";
var dArr$1 = "⇓";
var hArr$1 = "⇔";
var forall$1 = "∀";
var part$1 = "∂";
var exist$1 = "∃";
var empty$4 = "∅";
var nabla$1 = "∇";
var isin$1 = "∈";
var notin$1 = "∉";
var ni$1 = "∋";
var prod$1 = "∏";
var sum$1 = "∑";
var minus$1 = "−";
var lowast$1 = "∗";
var radic$1 = "√";
var prop$1 = "∝";
var infin$1 = "∞";
var ang$1 = "∠";
var and$1 = "∧";
var or$1 = "∨";
var cap$1 = "∩";
var cup$1 = "∪";
var int$1 = "∫";
var there4$1 = "∴";
var sim$1 = "∼";
var cong$1 = "≅";
var asymp$1 = "≈";
var ne$1 = "≠";
var equiv$1 = "≡";
var le$1 = "≤";
var ge$1 = "≥";
var sub$1 = "⊂";
var sup$1 = "⊃";
var nsub$1 = "⊄";
var sube$1 = "⊆";
var supe$1 = "⊇";
var oplus$1 = "⊕";
var otimes$1 = "⊗";
var perp$1 = "⊥";
var sdot$1 = "⋅";
var lceil$1 = "⌈";
var rceil$1 = "⌉";
var lfloor$1 = "⌊";
var rfloor$1 = "⌋";
var lang$1 = "〈";
var rang$1 = "〉";
var loz$1 = "◊";
var spades$1 = "♠";
var clubs$1 = "♣";
var hearts$1 = "♥";
var diams$1 = "♦";
var quot$3 = "\"";
var amp$2 = "&";
var lt$2 = "<";
var gt$2 = ">";
var OElig$1 = "Œ";
var oelig$1 = "œ";
var Scaron$1 = "Š";
var scaron$1 = "š";
var Yuml$1 = "Ÿ";
var circ$1 = "ˆ";
var tilde$1 = "˜";
var ensp$1 = " ";
var emsp$1 = " ";
var thinsp$1 = " ";
var zwnj$1 = "‌";
var zwj$1 = "‍";
var lrm$1 = "‎";
var rlm$1 = "‏";
var ndash$1 = "–";
var mdash$1 = "—";
var lsquo$1 = "‘";
var rsquo$1 = "’";
var sbquo$1 = "‚";
var ldquo$1 = "“";
var rdquo$1 = "”";
var bdquo$1 = "„";
var dagger$1 = "†";
var Dagger$1 = "‡";
var permil$1 = "‰";
var lsaquo$1 = "‹";
var rsaquo$1 = "›";
var euro$1 = "€";
var index$5 = {
	nbsp: nbsp$2,
	iexcl: iexcl$2,
	cent: cent$2,
	pound: pound$2,
	curren: curren$2,
	yen: yen$2,
	brvbar: brvbar$2,
	sect: sect$2,
	uml: uml$2,
	copy: copy$2,
	ordf: ordf$2,
	laquo: laquo$2,
	not: not$2,
	shy: shy$2,
	reg: reg$2,
	macr: macr$2,
	deg: deg$2,
	plusmn: plusmn$2,
	sup2: sup2$2,
	sup3: sup3$2,
	acute: acute$2,
	micro: micro$2,
	para: para$2,
	middot: middot$2,
	cedil: cedil$2,
	sup1: sup1$2,
	ordm: ordm$2,
	raquo: raquo$2,
	frac14: frac14$2,
	frac12: frac12$2,
	frac34: frac34$2,
	iquest: iquest$2,
	Agrave: Agrave$2,
	Aacute: Aacute$2,
	Acirc: Acirc$2,
	Atilde: Atilde$2,
	Auml: Auml$2,
	Aring: Aring$2,
	AElig: AElig$2,
	Ccedil: Ccedil$2,
	Egrave: Egrave$2,
	Eacute: Eacute$2,
	Ecirc: Ecirc$2,
	Euml: Euml$2,
	Igrave: Igrave$2,
	Iacute: Iacute$2,
	Icirc: Icirc$2,
	Iuml: Iuml$2,
	ETH: ETH$2,
	Ntilde: Ntilde$2,
	Ograve: Ograve$2,
	Oacute: Oacute$2,
	Ocirc: Ocirc$2,
	Otilde: Otilde$2,
	Ouml: Ouml$2,
	times: times$2,
	Oslash: Oslash$2,
	Ugrave: Ugrave$2,
	Uacute: Uacute$2,
	Ucirc: Ucirc$2,
	Uuml: Uuml$2,
	Yacute: Yacute$2,
	THORN: THORN$2,
	szlig: szlig$2,
	agrave: agrave$2,
	aacute: aacute$2,
	acirc: acirc$2,
	atilde: atilde$2,
	auml: auml$2,
	aring: aring$2,
	aelig: aelig$2,
	ccedil: ccedil$2,
	egrave: egrave$2,
	eacute: eacute$2,
	ecirc: ecirc$2,
	euml: euml$2,
	igrave: igrave$2,
	iacute: iacute$2,
	icirc: icirc$2,
	iuml: iuml$2,
	eth: eth$2,
	ntilde: ntilde$2,
	ograve: ograve$2,
	oacute: oacute$2,
	ocirc: ocirc$2,
	otilde: otilde$2,
	ouml: ouml$2,
	divide: divide$3,
	oslash: oslash$2,
	ugrave: ugrave$2,
	uacute: uacute$2,
	ucirc: ucirc$2,
	uuml: uuml$2,
	yacute: yacute$2,
	thorn: thorn$2,
	yuml: yuml$2,
	fnof: fnof$1,
	Alpha: Alpha$1,
	Beta: Beta$1,
	Gamma: Gamma$1,
	Delta: Delta$1,
	Epsilon: Epsilon$1,
	Zeta: Zeta$1,
	Eta: Eta$1,
	Theta: Theta$1,
	Iota: Iota$1,
	Kappa: Kappa$1,
	Lambda: Lambda$1,
	Mu: Mu$1,
	Nu: Nu$1,
	Xi: Xi$1,
	Omicron: Omicron$1,
	Pi: Pi$1,
	Rho: Rho$1,
	Sigma: Sigma$1,
	Tau: Tau$1,
	Upsilon: Upsilon$1,
	Phi: Phi$1,
	Chi: Chi$1,
	Psi: Psi$1,
	Omega: Omega$1,
	alpha: alpha$1,
	beta: beta$1,
	gamma: gamma$1,
	delta: delta$1,
	epsilon: epsilon$1,
	zeta: zeta$1,
	eta: eta$1,
	theta: theta$1,
	iota: iota$1,
	kappa: kappa$1,
	lambda: lambda$1,
	mu: mu$1,
	nu: nu$1,
	xi: xi$1,
	omicron: omicron$1,
	pi: pi$1,
	rho: rho$1,
	sigmaf: sigmaf$1,
	sigma: sigma$1,
	tau: tau$1,
	upsilon: upsilon$1,
	phi: phi$1,
	chi: chi$1,
	psi: psi$1,
	omega: omega$1,
	thetasym: thetasym$1,
	upsih: upsih$1,
	piv: piv$1,
	bull: bull$1,
	hellip: hellip$1,
	prime: prime$1,
	Prime: Prime$1,
	oline: oline$1,
	frasl: frasl$1,
	weierp: weierp$1,
	image: image$2,
	real: real$1,
	trade: trade$1,
	alefsym: alefsym$1,
	larr: larr$1,
	uarr: uarr$1,
	rarr: rarr$1,
	darr: darr$1,
	harr: harr$1,
	crarr: crarr$1,
	lArr: lArr$1,
	uArr: uArr$1,
	rArr: rArr$1,
	dArr: dArr$1,
	hArr: hArr$1,
	forall: forall$1,
	part: part$1,
	exist: exist$1,
	empty: empty$4,
	nabla: nabla$1,
	isin: isin$1,
	notin: notin$1,
	ni: ni$1,
	prod: prod$1,
	sum: sum$1,
	minus: minus$1,
	lowast: lowast$1,
	radic: radic$1,
	prop: prop$1,
	infin: infin$1,
	ang: ang$1,
	and: and$1,
	or: or$1,
	cap: cap$1,
	cup: cup$1,
	int: int$1,
	there4: there4$1,
	sim: sim$1,
	cong: cong$1,
	asymp: asymp$1,
	ne: ne$1,
	equiv: equiv$1,
	le: le$1,
	ge: ge$1,
	sub: sub$1,
	sup: sup$1,
	nsub: nsub$1,
	sube: sube$1,
	supe: supe$1,
	oplus: oplus$1,
	otimes: otimes$1,
	perp: perp$1,
	sdot: sdot$1,
	lceil: lceil$1,
	rceil: rceil$1,
	lfloor: lfloor$1,
	rfloor: rfloor$1,
	lang: lang$1,
	rang: rang$1,
	loz: loz$1,
	spades: spades$1,
	clubs: clubs$1,
	hearts: hearts$1,
	diams: diams$1,
	quot: quot$3,
	amp: amp$2,
	lt: lt$2,
	gt: gt$2,
	OElig: OElig$1,
	oelig: oelig$1,
	Scaron: Scaron$1,
	scaron: scaron$1,
	Yuml: Yuml$1,
	circ: circ$1,
	tilde: tilde$1,
	ensp: ensp$1,
	emsp: emsp$1,
	thinsp: thinsp$1,
	zwnj: zwnj$1,
	zwj: zwj$1,
	lrm: lrm$1,
	rlm: rlm$1,
	ndash: ndash$1,
	mdash: mdash$1,
	lsquo: lsquo$1,
	rsquo: rsquo$1,
	sbquo: sbquo$1,
	ldquo: ldquo$1,
	rdquo: rdquo$1,
	bdquo: bdquo$1,
	dagger: dagger$1,
	Dagger: Dagger$1,
	permil: permil$1,
	lsaquo: lsaquo$1,
	rsaquo: rsaquo$1,
	euro: euro$1
};

var characterEntitiesHtml4 = Object.freeze({
	nbsp: nbsp$2,
	iexcl: iexcl$2,
	cent: cent$2,
	pound: pound$2,
	curren: curren$2,
	yen: yen$2,
	brvbar: brvbar$2,
	sect: sect$2,
	uml: uml$2,
	copy: copy$2,
	ordf: ordf$2,
	laquo: laquo$2,
	not: not$2,
	shy: shy$2,
	reg: reg$2,
	macr: macr$2,
	deg: deg$2,
	plusmn: plusmn$2,
	sup2: sup2$2,
	sup3: sup3$2,
	acute: acute$2,
	micro: micro$2,
	para: para$2,
	middot: middot$2,
	cedil: cedil$2,
	sup1: sup1$2,
	ordm: ordm$2,
	raquo: raquo$2,
	frac14: frac14$2,
	frac12: frac12$2,
	frac34: frac34$2,
	iquest: iquest$2,
	Agrave: Agrave$2,
	Aacute: Aacute$2,
	Acirc: Acirc$2,
	Atilde: Atilde$2,
	Auml: Auml$2,
	Aring: Aring$2,
	AElig: AElig$2,
	Ccedil: Ccedil$2,
	Egrave: Egrave$2,
	Eacute: Eacute$2,
	Ecirc: Ecirc$2,
	Euml: Euml$2,
	Igrave: Igrave$2,
	Iacute: Iacute$2,
	Icirc: Icirc$2,
	Iuml: Iuml$2,
	ETH: ETH$2,
	Ntilde: Ntilde$2,
	Ograve: Ograve$2,
	Oacute: Oacute$2,
	Ocirc: Ocirc$2,
	Otilde: Otilde$2,
	Ouml: Ouml$2,
	times: times$2,
	Oslash: Oslash$2,
	Ugrave: Ugrave$2,
	Uacute: Uacute$2,
	Ucirc: Ucirc$2,
	Uuml: Uuml$2,
	Yacute: Yacute$2,
	THORN: THORN$2,
	szlig: szlig$2,
	agrave: agrave$2,
	aacute: aacute$2,
	acirc: acirc$2,
	atilde: atilde$2,
	auml: auml$2,
	aring: aring$2,
	aelig: aelig$2,
	ccedil: ccedil$2,
	egrave: egrave$2,
	eacute: eacute$2,
	ecirc: ecirc$2,
	euml: euml$2,
	igrave: igrave$2,
	iacute: iacute$2,
	icirc: icirc$2,
	iuml: iuml$2,
	eth: eth$2,
	ntilde: ntilde$2,
	ograve: ograve$2,
	oacute: oacute$2,
	ocirc: ocirc$2,
	otilde: otilde$2,
	ouml: ouml$2,
	divide: divide$3,
	oslash: oslash$2,
	ugrave: ugrave$2,
	uacute: uacute$2,
	ucirc: ucirc$2,
	uuml: uuml$2,
	yacute: yacute$2,
	thorn: thorn$2,
	yuml: yuml$2,
	fnof: fnof$1,
	Alpha: Alpha$1,
	Beta: Beta$1,
	Gamma: Gamma$1,
	Delta: Delta$1,
	Epsilon: Epsilon$1,
	Zeta: Zeta$1,
	Eta: Eta$1,
	Theta: Theta$1,
	Iota: Iota$1,
	Kappa: Kappa$1,
	Lambda: Lambda$1,
	Mu: Mu$1,
	Nu: Nu$1,
	Xi: Xi$1,
	Omicron: Omicron$1,
	Pi: Pi$1,
	Rho: Rho$1,
	Sigma: Sigma$1,
	Tau: Tau$1,
	Upsilon: Upsilon$1,
	Phi: Phi$1,
	Chi: Chi$1,
	Psi: Psi$1,
	Omega: Omega$1,
	alpha: alpha$1,
	beta: beta$1,
	gamma: gamma$1,
	delta: delta$1,
	epsilon: epsilon$1,
	zeta: zeta$1,
	eta: eta$1,
	theta: theta$1,
	iota: iota$1,
	kappa: kappa$1,
	lambda: lambda$1,
	mu: mu$1,
	nu: nu$1,
	xi: xi$1,
	omicron: omicron$1,
	pi: pi$1,
	rho: rho$1,
	sigmaf: sigmaf$1,
	sigma: sigma$1,
	tau: tau$1,
	upsilon: upsilon$1,
	phi: phi$1,
	chi: chi$1,
	psi: psi$1,
	omega: omega$1,
	thetasym: thetasym$1,
	upsih: upsih$1,
	piv: piv$1,
	bull: bull$1,
	hellip: hellip$1,
	prime: prime$1,
	Prime: Prime$1,
	oline: oline$1,
	frasl: frasl$1,
	weierp: weierp$1,
	image: image$2,
	real: real$1,
	trade: trade$1,
	alefsym: alefsym$1,
	larr: larr$1,
	uarr: uarr$1,
	rarr: rarr$1,
	darr: darr$1,
	harr: harr$1,
	crarr: crarr$1,
	lArr: lArr$1,
	uArr: uArr$1,
	rArr: rArr$1,
	dArr: dArr$1,
	hArr: hArr$1,
	forall: forall$1,
	part: part$1,
	exist: exist$1,
	empty: empty$4,
	nabla: nabla$1,
	isin: isin$1,
	notin: notin$1,
	ni: ni$1,
	prod: prod$1,
	sum: sum$1,
	minus: minus$1,
	lowast: lowast$1,
	radic: radic$1,
	prop: prop$1,
	infin: infin$1,
	ang: ang$1,
	and: and$1,
	or: or$1,
	cap: cap$1,
	cup: cup$1,
	int: int$1,
	there4: there4$1,
	sim: sim$1,
	cong: cong$1,
	asymp: asymp$1,
	ne: ne$1,
	equiv: equiv$1,
	le: le$1,
	ge: ge$1,
	sub: sub$1,
	sup: sup$1,
	nsub: nsub$1,
	sube: sube$1,
	supe: supe$1,
	oplus: oplus$1,
	otimes: otimes$1,
	perp: perp$1,
	sdot: sdot$1,
	lceil: lceil$1,
	rceil: rceil$1,
	lfloor: lfloor$1,
	rfloor: rfloor$1,
	lang: lang$1,
	rang: rang$1,
	loz: loz$1,
	spades: spades$1,
	clubs: clubs$1,
	hearts: hearts$1,
	diams: diams$1,
	quot: quot$3,
	amp: amp$2,
	lt: lt$2,
	gt: gt$2,
	OElig: OElig$1,
	oelig: oelig$1,
	Scaron: Scaron$1,
	scaron: scaron$1,
	Yuml: Yuml$1,
	circ: circ$1,
	tilde: tilde$1,
	ensp: ensp$1,
	emsp: emsp$1,
	thinsp: thinsp$1,
	zwnj: zwnj$1,
	zwj: zwj$1,
	lrm: lrm$1,
	rlm: rlm$1,
	ndash: ndash$1,
	mdash: mdash$1,
	lsquo: lsquo$1,
	rsquo: rsquo$1,
	sbquo: sbquo$1,
	ldquo: ldquo$1,
	rdquo: rdquo$1,
	bdquo: bdquo$1,
	dagger: dagger$1,
	Dagger: Dagger$1,
	permil: permil$1,
	lsaquo: lsaquo$1,
	rsaquo: rsaquo$1,
	euro: euro$1,
	default: index$5
});

var dangerous = ["cent", "copy", "divide", "gt", "lt", "not", "para", "times"];

var dangerous$1 = Object.freeze({
	default: dangerous
});

var entities = ( characterEntitiesHtml4 && index$5 ) || characterEntitiesHtml4;

var dangerous$2 = ( dangerous$1 && dangerous ) || dangerous$1;

/* Expose. */
var stringifyEntities = encode$2;

encode$2.escape = escape$2;

var own$11 = {}.hasOwnProperty;

/* List of enforced escapes. */
var escapes$2 = ['"', '\'', '<', '>', '&', '`'];

/* Map of characters to names. */
var characters$1 = construct$1();

/* Default escapes. */
var EXPRESSION_ESCAPE = toExpression(escapes$2);

/* Surrogate pairs. */
var EXPRESSION_SURROGATE_PAIR = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

/* Non-ASCII characters. */
// eslint-disable-next-line no-control-regex
var EXPRESSION_BMP = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;

/* Encode special characters in `value`. */
function encode$2(value, options) {
  var settings = options || {};
  var subset = settings.subset;
  var set = subset ? toExpression(subset) : EXPRESSION_ESCAPE;
  var escapeOnly = settings.escapeOnly;
  var omit = settings.omitOptionalSemicolons;

  value = value.replace(set, function (char, pos, val) {
    return one$4(char, val.charAt(pos + 1), settings);
  });

  if (subset || escapeOnly) {
    return value;
  }

  return value.replace(EXPRESSION_SURROGATE_PAIR, function (pair, pos, val) {
    return toHexReference((pair.charCodeAt(0) - 0xD800) * 0x400 + pair.charCodeAt(1) - 0xDC00 + 0x10000, val.charAt(pos + 2), omit);
  }).replace(EXPRESSION_BMP, function (char, pos, val) {
    return one$4(char, val.charAt(pos + 1), settings);
  });
}

/* Shortcut to escape special characters in HTML. */
function escape$2(value) {
  return encode$2(value, {
    escapeOnly: true,
    useNamedReferences: true
  });
}

/* Encode `char` according to `options`. */
function one$4(char, next, options) {
  var shortest = options.useShortestReferences;
  var omit = options.omitOptionalSemicolons;
  var named;
  var numeric;

  if ((shortest || options.useNamedReferences) && own$11.call(characters$1, char)) {
    named = toNamed(characters$1[char], next, omit, options.attribute);
  }

  if (shortest || !named) {
    numeric = toHexReference(char.charCodeAt(0), next, omit);
  }

  if (named && (!shortest || named.length < numeric.length)) {
    return named;
  }

  return numeric;
}

/* Transform `code` into an entity. */
function toNamed(name, next, omit, attribute) {
  var value = '&' + name;

  if (omit && own$11.call(legacy, name) && dangerous$2.indexOf(name) === -1 && (!attribute || next && next !== '=' && !isAlphanumerical(next))) {
    return value;
  }

  return value + ';';
}

/* Transform `code` into a hexadecimal character reference. */
function toHexReference(code, next, omit) {
  var value = '&#x' + code.toString(16).toUpperCase();
  return omit && next && !isHexadecimal(next) ? value : value + ';';
}

/* Create an expression for `characters`. */
function toExpression(characters) {
  return new RegExp('[' + characters.join('') + ']', 'g');
}

/* Construct the map. */
function construct$1() {
  var chars = {};
  var name;

  for (name in entities) {
    chars[entities[name]] = name;
  }

  return chars;
}

var text_1$4 = text$4;

/* Stringify `text`. */
function text$4(ctx, node, index, parent) {
  var value = node.value;

  return isLiteral(parent) ? value : stringifyEntities(value, immutable(ctx.entities, {
    subset: ['<', '&']
  }));
}

/* Check if content of `node` should be escaped. */
function isLiteral(node) {
  return node && (node.tagName === 'script' || node.tagName === 'style');
}

var parse_1$4 = parse$11;
var stringify_1$2 = stringify$5;

var C_COMMA = ',';
var C_SPACE$15 = ' ';
var EMPTY$2 = '';

/* Parse comma-separated tokens to an array. */
function parse$11(value) {
  var values = [];
  var input = String(value || EMPTY$2);
  var index = input.indexOf(C_COMMA);
  var lastIndex = 0;
  var end = false;
  var val;

  while (!end) {
    if (index === -1) {
      index = input.length;
      end = true;
    }

    val = trim_1(input.slice(lastIndex, index));

    if (val || !end) {
      values.push(val);
    }

    lastIndex = index + 1;
    index = input.indexOf(C_COMMA, lastIndex);
  }

  return values;
}

/* Compile an array to comma-separated tokens.
 * `options.padLeft` (default: `true`) pads a space left of each
 * token, and `options.padRight` (default: `false`) pads a space
 * to the right of each token. */
function stringify$5(values, options) {
  var settings = options || {};
  var left = settings.padLeft;

  /* Ensure the last empty entry is seen. */
  if (values[values.length - 1] === EMPTY$2) {
    values = values.concat(EMPTY$2);
  }

  return trim_1(values.join((settings.padRight ? C_SPACE$15 : EMPTY$2) + C_COMMA + (left || left === undefined || left === null ? C_SPACE$15 : EMPTY$2)));
}

var commaSeparatedTokens$2 = {
  parse: parse_1$4,
  stringify: stringify_1$2
};

var kebabCase = createCommonjsModule(function (module, exports) {
	var KEBAB_REGEX = /[A-Z\u00C0-\u00D6\u00D8-\u00DE]/g;
	var REVERSE_REGEX = /-[a-z\u00E0-\u00F6\u00F8-\u00FE]/g;

	module.exports = exports = function kebabCase(str) {
		return str.replace(KEBAB_REGEX, function (match) {
			return '-' + match.toLowerCase();
		});
	};

	exports.reverse = function (str) {
		return str.replace(REVERSE_REGEX, function (match) {
			return match.slice(1).toUpperCase();
		});
	};
});

var kebabCase_1 = kebabCase.reverse;

var ccount_1 = ccount;

function ccount(value, character) {
  var count = 0;
  var index;

  value = String(value);

  if (typeof character !== 'string' || character.length !== 1) {
    throw new Error('Expected character');
  }

  index = value.indexOf(character);

  while (index !== -1) {
    count++;
    index = value.indexOf(character, index + 1);
  }

  return count;
}

var spaces$1 = spaceSeparatedTokens.stringify;
var commas$1 = commaSeparatedTokens$2.stringify;

var element_1 = element$2;

/* Constants. */
var DATA = 'data';
var EMPTY$3 = '';

/* Characters. */
var SPACE$3 = ' ';
var DQ = '"';
var SQ = '\'';
var EQ = '=';
var LT$2 = '<';
var GT$2 = '>';
var SO = '/';

/* Stringify an element `node`. */
function element$2(ctx, node, index, parent) {
  var name = node.tagName;
  var content = all_1$2(ctx, name === 'template' ? node.content : node);
  var selfClosing = ctx.voids.indexOf(name.toLowerCase()) !== -1;
  var attrs = attributes(ctx, node.properties);
  var omit = ctx.omit;
  var value = '';

  /* If the node is categorised as void, but it has
   * children, remove the categorisation.  This
   * enables for example `menuitem`s, which are
   * void in W3C HTML but not void in WHATWG HTML, to
   * be stringified properly. */
  selfClosing = content ? false : selfClosing;

  if (attrs || !omit || !omit.opening(node, index, parent)) {
    value = LT$2 + name + (attrs ? SPACE$3 + attrs : EMPTY$3);

    if (selfClosing && ctx.close) {
      if (!ctx.tightClose || attrs.charAt(attrs.length - 1) === SO) {
        value += SPACE$3;
      }

      value += SO;
    }

    value += GT$2;
  }

  value += content;

  if (!selfClosing && (!omit || !omit.closing(node, index, parent))) {
    value += LT$2 + SO + name + GT$2;
  }

  return value;
}

/* Stringify all attributes. */
function attributes(ctx, props) {
  var values = [];
  var key;
  var value;
  var result;
  var length;
  var index;
  var last;

  for (key in props) {
    value = props[key];

    if (value == null) {
      continue;
    }

    result = attribute$1(ctx, key, value);

    if (result) {
      values.push(result);
    }
  }

  length = values.length;
  index = -1;

  while (++index < length) {
    result = values[index];
    last = ctx.tight && result.charAt(result.length - 1);

    /* In tight mode, don’t add a space after quoted attributes. */
    if (index !== length - 1 && last !== DQ && last !== SQ) {
      values[index] = result + SPACE$3;
    }
  }

  return values.join(EMPTY$3);
}

/* Stringify one attribute. */
function attribute$1(ctx, key, value) {
  var info = propertyInformation(key) || {};
  var name;

  if (value == null || typeof value === 'number' && isNaN(value) || !value && info.boolean || value === false && info.overloadedBoolean) {
    return EMPTY$3;
  }

  name = attributeName$1(ctx, key);

  if (value && info.boolean || value === true && info.overloadedBoolean) {
    return name;
  }

  return name + attributeValue$1(ctx, key, value);
}

/* Stringify the attribute name. */
function attributeName$1(ctx, key) {
  var info = propertyInformation(key) || {};
  var name = info.name || kebabCase(key);

  if (name.slice(0, DATA.length) === DATA && /[0-9]/.test(name.charAt(DATA.length))) {
    name = DATA + '-' + name.slice(4);
  }

  return stringifyEntities(name, immutable(ctx.entities, {
    subset: ctx.NAME
  }));
}

/* Stringify the attribute value. */
function attributeValue$1(ctx, key, value) {
  var info = propertyInformation(key) || {};
  var options = ctx.entities;
  var quote = ctx.quote;
  var alternative = ctx.alternative;
  var unquoted;

  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && 'length' in value) {
    /* `spaces` doesn’t accept a second argument, but it’s
     * given here just to keep the code cleaner. */
    value = (info.commaSeparated ? commas$1 : spaces$1)(value, {
      padLeft: !ctx.tightLists
    });
  }

  value = String(value);

  if (value || !ctx.collapseEmpty) {
    unquoted = value;

    /* Check unquoted value. */
    if (ctx.unquoted) {
      unquoted = stringifyEntities(value, immutable(options, {
        subset: ctx.UNQUOTED,
        attribute: true
      }));
    }

    /* If `value` contains entities when unquoted... */
    if (!ctx.unquoted || unquoted !== value) {
      /* If the alternative is less common than `quote`, switch. */
      if (alternative && ccount_1(value, quote) > ccount_1(value, alternative)) {
        quote = alternative;
      }

      value = stringifyEntities(value, immutable(options, {
        subset: quote === SQ ? ctx.SINGLE_QUOTED : ctx.DOUBLE_QUOTED,
        attribute: true
      }));

      value = quote + value + quote;
    }

    /* Don’t add a `=` for unquoted empties. */
    value = value ? EQ + value : value;
  }

  return value;
}

var doctype_1 = doctype$4;

/* Stringify a doctype `node`. */
function doctype$4(ctx, node) {
  var pub = node.public;
  var sys = node.system;
  var val = '<!DOCTYPE';

  if (!node.name) {
    return val + '>';
  }

  val += ' ' + node.name;

  if (pub != null) {
    val += ' PUBLIC ' + smart(pub);
  } else if (sys != null) {
    val += ' SYSTEM';
  }

  if (sys != null) {
    val += ' ' + smart(sys);
  }

  return val + '>';
}

function smart(value) {
  var quote = value.indexOf('"') === -1 ? '"' : '\'';
  return quote + value + quote;
}

var comment_1 = comment$2;

/* Stringify a comment `node`. */
function comment$2(ctx, node) {
  return '<!--' + node.value + '-->';
}

var raw_1 = raw;

/* Stringify `raw`. */
function raw(ctx, node) {
  return ctx.dangerous ? node.value : text_1$4(ctx, node);
}

var one_1$2 = one$5;

var own$12 = {}.hasOwnProperty;

var handlers$3 = {};

handlers$3.root = all_1$2;
handlers$3.text = text_1$4;
handlers$3.element = element_1;
handlers$3.doctype = doctype_1;
handlers$3.comment = comment_1;
handlers$3.raw = raw_1;

/* Stringify `node`. */
function one$5(ctx, node, index, parent) {
  var type = node && node.type;

  if (!type) {
    throw new Error('Expected node, not `' + node + '`');
  }

  if (!own$12.call(handlers$3, type)) {
    throw new Error('Cannot compile unknown node `' + type + '`');
  }

  return handlers$3[type](ctx, node, index, parent);
}

var voids = ( htmlVoidElements && index$4 ) || htmlVoidElements;

var lib$4 = toHTML;

/* Characters. */
var NULL = '\0';
var AMP$2 = '&';
var SPACE$4 = ' ';
var TAB$2 = '\t';
var GR = '`';
var DQ$1 = '"';
var SQ$1 = '\'';
var EQ$1 = '=';
var LT$3 = '<';
var GT$3 = '>';
var SO$1 = '/';
var LF$1 = '\n';
var CR$1 = '\r';
var FF = '\f';

/* https://html.spec.whatwg.org/#attribute-name-state */
var NAME$2 = [AMP$2, SPACE$4, TAB$2, LF$1, CR$1, FF, SO$1, GT$3, EQ$1];
var CLEAN_NAME = NAME$2.concat(NULL, DQ$1, SQ$1, LT$3);

/* In safe mode, all attribute values contain DQ (`"`),
 * SQ (`'`), and GR (`` ` ``), as those can create XSS
 * issues in older browsers:
 * - https://html5sec.org/#59
 * - https://html5sec.org/#102
 * - https://html5sec.org/#108 */
var QUOTES = [DQ$1, SQ$1, GR];

/* https://html.spec.whatwg.org/#attribute-value-(unquoted)-state */
var UQ_VALUE = [AMP$2, SPACE$4, TAB$2, LF$1, CR$1, FF, GT$3];
var UQ_VALUE_CLEAN = UQ_VALUE.concat(NULL, DQ$1, SQ$1, LT$3, EQ$1, GR);

/* https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state */
var SQ_VALUE = [AMP$2, SQ$1];
var SQ_VALUE_CLEAN = SQ_VALUE.concat(NULL);

/* https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state */
var DQ_VALUE = [AMP$2, DQ$1];
var DQ_VALUE_CLEAN = DQ_VALUE.concat(NULL);

/* Stringify the given HAST node. */
function toHTML(node, options) {
  var settings = options || {};
  var quote = settings.quote || DQ$1;
  var smart = settings.quoteSmart;
  var errors = settings.allowParseErrors;
  var characters = settings.allowDangerousCharacters;
  var alternative = quote === DQ$1 ? SQ$1 : DQ$1;
  var name = errors ? NAME$2 : CLEAN_NAME;
  var unquoted = errors ? UQ_VALUE : UQ_VALUE_CLEAN;
  var singleQuoted = errors ? SQ_VALUE : SQ_VALUE_CLEAN;
  var doubleQuoted = errors ? DQ_VALUE : DQ_VALUE_CLEAN;

  if (quote !== DQ$1 && quote !== SQ$1) {
    throw new Error('Invalid quote `' + quote + '`, expected `' + SQ$1 + '` or `' + DQ$1 + '`');
  }

  return one_1$2({
    NAME: name.concat(characters ? [] : QUOTES),
    UNQUOTED: unquoted.concat(characters ? [] : QUOTES),
    DOUBLE_QUOTED: doubleQuoted.concat(characters ? [] : QUOTES),
    SINGLE_QUOTED: singleQuoted.concat(characters ? [] : QUOTES),
    omit: settings.omitOptionalTags && omission$2,
    quote: quote,
    alternative: smart ? alternative : null,
    unquoted: Boolean(settings.preferUnquoted),
    tight: settings.tightAttributes,
    tightLists: settings.tightCommaSeparatedLists,
    tightClose: settings.tightSelfClosing,
    collapseEmpty: settings.collapseEmptyAttributes,
    dangerous: settings.allowDangerousHTML,
    voids: settings.voids || voids.concat(),
    entities: settings.entities || {},
    close: settings.closeSelfClosing
  }, node);
}

var hastUtilToHtml = lib$4;

var rehypeStringify = stringify$6;

function stringify$6(config) {
  var settings = immutable(config, this.data('settings'));

  this.Compiler = compiler;

  function compiler(tree) {
    return hastUtilToHtml(tree, settings);
  }
}

var index_es5 = function index_es5(input) {
      return input.replace(/ 'n' /gim, " ’n’ ").replace(/'n'/gim, "’n’").replace(/(\S)'(\S)/gim, "$1’$2").replace(/'(\d0s)/gim, "’$1");
};

var index_es5$2 = function index_es5(input) {
  return input.replace(/s'(\s|$)/gim, "s’$1");
};

var index_es5$4 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  exports['default'] = function (input) {
    return input.replace(/\(c\)/gim, '©').replace(/© *(\d)/gim, '© $1');
  };

  module.exports = exports['default'];
});

unwrapExports(index_es5$4);

var index_es5$6 = function index_es5(input) {
  return input.replace(/\.{3}/gim, '…');
};

var index_es5$8 = function index_es5(input) {
  return input.replace(/--/gim, "—").replace(/ — /gim, " — ");
};

var index_es5$10 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  exports['default'] = function (input) {
    return input.replace(/(\d)-(\d)/gim, '$1–$2');
  };

  module.exports = exports['default'];
});

unwrapExports(index_es5$10);

var index_es5$12 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  exports['default'] = function (input) {
    return input.replace(/\(r\)/gim, '®');
  };

  module.exports = exports['default'];
});

unwrapExports(index_es5$12);

var index_es5$14 = function index_es5(input) {
  return input.replace(/ +/gim, " ");
};

var index_es5$16 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  exports['default'] = function (input) {
    return input.replace(/ *\(tm\)/gim, '™');
  };

  module.exports = exports['default'];
});

unwrapExports(index_es5$16);

var chars = {
  'NARROW NO-BREAK SPACE': '\u202F'

  // Language codes:     https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
};var db = {
  'fr': chars['NARROW NO-BREAK SPACE'],
  'fr-sw': chars['NARROW NO-BREAK SPACE']
};

var src$38 = createCommonjsModule(function (module) {
  module.exports = function () {
    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        locale = _ref.locale;

    if (!Object.keys(db).includes(locale)) return input;

    var beforeColon = db[locale];

    var pattern = / :(\s|$)/gim;
    var handleColon = function handleColon(withColon, afterColon) {
      return beforeColon + ':' + afterColon;
    };

    return input.replace(pattern, handleColon);
  };
});

var chars$1 = {
  'NARROW NO-BREAK SPACE': '\u202F'

  // Language codes:     https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
};var db$3 = {
  'fr': chars$1['NARROW NO-BREAK SPACE'],
  'fr-sw': chars$1['NARROW NO-BREAK SPACE']
};

var src$40 = createCommonjsModule(function (module) {
  module.exports = function () {
    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        locale = _ref.locale;

    // Replace -- by \u2013 for all locales
    var dashChar = '\u2014';
    var dashPattern = /--/gm;
    var result = input.replace(dashPattern, '' + dashChar);

    // nbsp inside em dash pairs
    // (foo -- bar -- baz. -> foo1—2bar2—1baz. where 1 is and 2 is nbsp
    if (Object.keys(db$3).includes(locale)) {
      var separation = new RegExp('(^|\\s)(' + dashChar + ')(\\s|$)');
      var nnbs = db$3[locale];
      var temp = result;
      var isOpening = true;
      var startPosition = separation.exec(temp);
      result = '';
      while (startPosition) {
        result += temp.substring(0, startPosition.index);
        var replacement = isOpening ? '$1$2' + nnbs : nnbs + '$2$3';
        result += startPosition[0].replace(separation, replacement);
        temp = temp.substring(startPosition.index + startPosition[0].length, temp.length);
        startPosition = separation.exec(temp);
        isOpening = !isOpening;
      }
      result += temp;
    }

    return result;
  };
});

var chars$2 = {
  'NARROW NO-BREAK SPACE': '\u202F'

  // Language codes:     https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
};var db$6 = {
  'fr': chars$2['NARROW NO-BREAK SPACE'],
  'fr-sw': chars$2['NARROW NO-BREAK SPACE']
};

var src$42 = createCommonjsModule(function (module) {
  module.exports = function () {
    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        locale = _ref.locale;

    if (!Object.keys(db$6).includes(locale)) return input;

    var beforeSemiColon = db$6[locale];

    var pattern = / !(\s|$)/gim;
    var handleSemiColon = function handleSemiColon(withSemiColon, afterSemiColon) {
      return beforeSemiColon + '!' + afterSemiColon;
    };

    return input.replace(pattern, handleSemiColon);
  };
});

var charsFr = {
  'NARROW NO-BREAK SPACE': '\u202F',
  'LEFT-POINTING ANGLE QUOTATION MARK': '\xAB',
  'RIGHT-POINTING ANGLE QUOTATION MARK': '\xBB'

  // Language codes:     https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
};var db$9 = {
  'fr': charsFr,
  'fr-sw': charsFr
};

var src$44 = createCommonjsModule(function (module) {
  module.exports = function () {
    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        locale = _ref.locale;

    if (!Object.keys(db$9).includes(locale)) return input;

    var chars = db$9[locale];
    var leftMark = chars['LEFT-POINTING ANGLE QUOTATION MARK'];
    var rightMark = chars['RIGHT-POINTING ANGLE QUOTATION MARK'];
    var spaceChar = chars['NARROW NO-BREAK SPACE'];

    var leftAnglePattern = /<</gm;
    var result = input.replace(leftAnglePattern, leftMark);
    var leftAngleSpacePattern = new RegExp('(' + leftMark + ')(\\s)', 'gm');
    result = result.replace(leftAngleSpacePattern, '$1' + spaceChar);
    var rightAnglePattern = />>/gm;
    result = result.replace(rightAnglePattern, rightMark);
    var rightAngleSpacePattern = new RegExp('(\\s)(' + rightMark + ')', 'gm');
    return result.replace(rightAngleSpacePattern, spaceChar + '$2');
  };
});

var chars$3 = {
  'NARROW NO-BREAK SPACE': '\u202F'

  // Language codes:     https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
};var db$12 = {
  'fr': chars$3['NARROW NO-BREAK SPACE'],
  'fr-sw': chars$3['NARROW NO-BREAK SPACE']
};

var src$46 = createCommonjsModule(function (module) {
  module.exports = function () {
    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        locale = _ref.locale;

    if (!Object.keys(db$12).includes(locale)) return input;

    var beforeSemiColon = db$12[locale];

    var pattern = / %(\s|$)/gim;
    var handleSemiColon = function handleSemiColon(withSemiColon, afterSemiColon) {
      return beforeSemiColon + '%' + afterSemiColon;
    };

    return input.replace(pattern, handleSemiColon);
  };
});

var chars$4 = {
  'NARROW NO-BREAK SPACE': '\u202F'

  // Language codes:     https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
};var db$15 = {
  'fr': chars$4['NARROW NO-BREAK SPACE'],
  'fr-sw': chars$4['NARROW NO-BREAK SPACE']
};

var src$48 = createCommonjsModule(function (module) {
  module.exports = function () {
    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        locale = _ref.locale;

    var chars = {
      'PER MILLE SIGN': '\u2030'
    };

    var permillePattern = /%o/gim;
    var result = input.replace(permillePattern, chars['PER MILLE SIGN']);

    if (Object.keys(db$15).includes(locale)) {
      // If we need to replace space before per mille signs
      var spaceBeforePermillePattern = /( )(\u2030)/g;
      return result.replace(spaceBeforePermillePattern, db$15[locale] + '$2');
    }

    return result;
  };
});

var chars$5 = {
  'NARROW NO-BREAK SPACE': '\u202F'

  // Language codes:     https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
};var db$18 = {
  'fr': chars$5['NARROW NO-BREAK SPACE'],
  'fr-sw': chars$5['NARROW NO-BREAK SPACE']
};

var src$50 = createCommonjsModule(function (module) {
  module.exports = function () {
    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        locale = _ref.locale;

    if (!Object.keys(db$18).includes(locale)) return input;

    var beforeSemiColon = db$18[locale];

    var pattern = / \?(\s|$)/gim;
    var handleSemiColon = function handleSemiColon(withSemiColon, afterSemiColon) {
      return beforeSemiColon + '?' + afterSemiColon;
    };

    return input.replace(pattern, handleSemiColon);
  };
});

var chars$6 = {
  'NARROW NO-BREAK SPACE': '\u202F'

  // Language codes:     https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
};var db$21 = {
  'fr': chars$6['NARROW NO-BREAK SPACE'],
  'fr-sw': chars$6['NARROW NO-BREAK SPACE']
};

var src$52 = createCommonjsModule(function (module) {
  module.exports = function () {
    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        locale = _ref.locale;

    if (!Object.keys(db$21).includes(locale)) return input;

    var beforeSemiColon = db$21[locale];

    var pattern = / ;(\s|$)/gim;
    var handleSemiColon = function handleSemiColon(withSemiColon, afterSemiColon) {
      return beforeSemiColon + ';' + afterSemiColon;
    };

    return input.replace(pattern, handleSemiColon);
  };
});

var remarkConfig = {
  maxNesting: 100,
  reParse: {
    gfm: true,
    commonmark: false,
    footnotes: true,
    pedantic: true,
    /* sets list of known blocks to nothing, otherwise <h3>hey</h3> would become
    &#x3C;h3>hey&#x3C;/h3> instead of <p>&#x3C;h3>hey&#x3C;/h3></p> */
    blocks: []
  },

  textr: {
    plugins: [index_es5, index_es5$2, index_es5$6, index_es5$8, index_es5$10, index_es5$4, index_es5$12, index_es5$14, index_es5$16, src$38, src$40, src$42, src$44, src$46, src$48, src$50, src$52],
    options: {
      locale: 'fr'
    }
  },

  autolinkHeadings: {
    behaviour: 'append'
  },

  headingShifter: 0,

  remark2rehype: {
    allowDangerousHTML: true
  },

  rehypeHighlight: {
    ignoreMissing: true
  },

  footnotesTitles: 'Retourner au texte de la note $id',

  alignBlocks: {
    center: 'align-center',
    right: 'align-right'
  },

  customBlocks: {
    secret: {
      classes: 'custom-block-spoiler',
      title: 'optional'
    },
    s: {
      classes: 'custom-block-spoiler',
      title: 'optional'
    },
    information: {
      classes: 'custom-block-information',
      title: 'optional'
    },
    i: {
      classes: 'custom-block-information',
      title: 'optional'
    },
    question: {
      classes: 'custom-block-question',
      title: 'optional'
    },
    q: {
      classes: 'custom-block-question',
      title: 'optional'
    },
    attention: {
      classes: 'custom-block-warning',
      title: 'optional'
    },
    a: {
      classes: 'custom-block-warning',
      title: 'optional'
    },
    erreur: {
      classes: 'custom-block-error',
      title: 'optional'
    },
    e: {
      classes: 'custom-block-error',
      title: 'optional'
    },
    neutre: {
      classes: 'custom-block-neutral',
      title: 'required'
    },
    n: {
      classes: 'custom-block-neutral',
      title: 'required'
    }
  },

  escapeEscaped: ['&'],

  emoticons: {
    emoticons: {
      ':ange:': '/static/smileys/ange.png',
      ':colere:': '/static/smileys/angry.gif',
      'o_O': '/static/smileys/blink.gif',
      ';)': '/static/smileys/clin.png',
      ':diable:': '/static/smileys/diable.png',
      ':D': '/static/smileys/heureux.png',
      '^^': '/static/smileys/hihi.png',
      ':o': '/static/smileys/huh.png',
      ':p': '/static/smileys/langue.png',
      ':magicien:': '/static/smileys/magicien.png',
      ':colere2:': '/static/smileys/mechant.png',
      ':ninja:': '/static/smileys/ninja.png',
      'x(': '/static/smileys/pinch.png',
      ':pirate:': '/static/smileys/pirate.png',
      ":'(": '/static/smileys/pleure.png',
      ':lol:': '/static/smileys/rire.gif',
      ':honte:': '/static/smileys/rouge.png',
      ':-°': '/static/smileys/siffle.png',
      ':)': '/static/smileys/smile.png',
      ':soleil:': '/static/smileys/soleil.png',
      ':(': '/static/smileys/triste.png',
      ':euh:': '/static/smileys/unsure.gif',
      ':waw:': '/static/smileys/waw.png',
      ':zorro:': '/static/smileys/zorro.png'
    },
    classes: 'smiley'
  },

  math: {
    inlineMathDouble: true
  },

  katex: {
    inlineMathDoubleDisplay: true
  },

  iframes: {
    'www.dailymotion.com': {
      tag: 'iframe',
      width: 480,
      height: 270,
      disabled: false,
      replace: [['video/', 'embed/video/']],
      thumbnail: {
        format: 'http://www.dailymotion.com/thumbnail/video/{id}',
        id: '.+/(.+)$'
      }
    },
    'www.vimeo.com': {
      tag: 'iframe',
      width: 500,
      height: 281,
      disabled: false,
      replace: [['http://', 'https://'], ['www.', ''], ['vimeo.com/', 'player.vimeo.com/video/']]
    },
    'vimeo.com': {
      tag: 'iframe',
      width: 500,
      height: 281,
      disabled: false,
      replace: [['http://', 'https://'], ['www.', ''], ['vimeo.com/', 'player.vimeo.com/video/']]
    },
    'www.youtube.com': {
      tag: 'iframe',
      width: 560,
      height: 315,
      disabled: false,
      replace: [['watch?v=', 'embed/'], ['http://', 'https://']],
      thumbnail: {
        format: 'http://img.youtube.com/vi/{id}/0.jpg',
        id: '.+/(.+)$'
      },
      droppedQueryParameters: ['feature'],
      removeAfter: '&'
    },
    'youtube.com': {
      tag: 'iframe',
      width: 560,
      height: 315,
      disabled: false,
      replace: [['watch?v=', 'embed/'], ['http://', 'https://']],
      thumbnail: {
        format: 'http://img.youtube.com/vi/{id}/0.jpg',
        id: '.+/(.+)$'
      },
      droppedQueryParameters: ['feature'],
      removeAfter: '&'
    },
    'youtu.be': {
      tag: 'iframe',
      width: 560,
      height: 315,
      disabled: false,
      replace: [['watch?v=', 'embed/'], ['youtu.be', 'www.youtube.com/embed']],
      thumbnail: {
        format: 'http://img.youtube.com/vi/{id}/0.jpg',
        id: '.+/(.+)$'
      },
      droppedQueryParameters: ['feature'],
      removeAfter: '&'
    },
    'www.ina.fr': {
      tag: 'iframe',
      width: 620,
      height: 349,
      disabled: false,
      replace: [['www.', 'player.'], ['/video/', '/player/embed/']],
      append: '/1/1b0bd203fbcd702f9bc9b10ac3d0fc21/560/315/1/148db8',
      removeFileName: true
    },
    'www.jsfiddle.net': {
      tag: 'iframe',
      width: 560,
      height: 560,
      disabled: false,
      replace: [['http://', 'https://']],
      append: 'embedded/result,js,html,css/',
      match: /https?:\/\/(www\.)?jsfiddle\.net\/([\w\d]+\/[\w\d]+\/\d+\/?|[\w\d]+\/\d+\/?|[\w\d]+\/?)$/,
      thumbnail: {
        format: 'http://www.unixstickers.com/image/data/stickers' + '/jsfiddle/JSfiddle-blue-w-type.sh.png'
      }
    },
    'jsfiddle.net': {
      tag: 'iframe',
      width: 560,
      height: 560,
      disabled: false,
      replace: [['http://', 'https://']],
      append: 'embedded/result,js,html,css/',
      match: /https?:\/\/(www\.)?jsfiddle\.net\/([\w\d]+\/[\w\d]+\/\d+\/?|[\w\d]+\/\d+\/?|[\w\d]+\/?)$/,
      thumbnail: {
        format: 'http://www.unixstickers.com/image/data/stickers' + '/jsfiddle/JSfiddle-blue-w-type.sh.png'
      }
    }
  },

  captions: {
    external: {
      table: 'Table:',
      gridTable: 'Table:',
      code: 'Code:',
      math: 'Equation:',
      iframe: 'Video:'
    },
    internal: {
      math: 'Equation:',
      inlineMath: 'Equation:',
      image: 'Figure:'
    }
  },

  ping: {
    pingUsername: function pingUsername(_username) {
      return true;
    },
    userURL: function userURL(username) {
      return '/membres/voir/' + username + '/';
    }
  },

  disableTokenizers: {},

  imagesDownload: {
    disabled: true,
    downloadDestination: './img/',
    maxlength: 1000000,
    dirSizeLimit: 10000000
  }
};

var remark = remarkConfig;

var bundleEntrypoint = createCommonjsModule(function (module) {
  var jsFiddleAndInaFilter = function jsFiddleAndInaFilter(node) {
    if (node.properties.src) {
      return node.properties.src.includes('jsfiddle.') || node.properties.src.includes('ina.');
    }
    return false;
  };

  var wrappers$$1 = {
    iframe: [wrappers('iframe', ['div', 'div'], [['video-wrapper'], ['video-container']], function (node) {
      return !jsFiddleAndInaFilter(node);
    }), wrappers('iframe', 'div', ['iframe-wrapper'], jsFiddleAndInaFilter)],
    table: [wrappers('table', 'div', ['table-wrapper'])]
  };

  function zmd(input, cb) {
    unified_1().use(remarkParse, remark.reParse).use(remarkTextr, remark.textr).use(src).use(src$2, remark.alignBlocks).use(src$4, remark.captions).use(src$6).use(src$8, remark.customBlocks).use(src$10, remark.disableTokenizers).use(src$12, remark.emoticons).use(src$14, remark.escapeEscaped).use(src$16).use(src$18, remark.headingShifter).use(src$20, remark.iframes).use(remarkMath, remark.math).use(src$22).use(src$24).use(src$26, remark.ping).use(src$28).use(src$30).use(remarkRehype, remark.remark2rehype).use(rehypeLineNumbers_1).use(rehypeHighlight, remark.rehypeHighlight).use(rehypeSlug).use(rehypeAutolinkHeadings, remark.autolinkHeadings).use(src$36).use(src$34, remark.footnotesTitles).use(rehypeKatex, remark.katex).use(function () {
      return function (tree) {
        Object.keys(wrappers$$1).forEach(function (nodeName) {
          return wrappers$$1[nodeName].forEach(function (wrapper) {
            unistUtilVisit(tree, wrapper);
          });
        });
      };
    }).use(rehypeStringify).process(input, function (err, vfile) {
      if (err) return cb(err);

      cb(null, vfile);
    });
  }

  module.exports = zmd;
});

return bundleEntrypoint;

}());
